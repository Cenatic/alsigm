/***************************/
/* Versión 2.8.2             */
/***************************/
INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','2.8.2',now());

/***************************/
/* Versión 2.9             */
/***************************/

	-- Insertar la versión actual de bd
	INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','2.9',now());

	-- Actualizar los id's de textos de la tabla de validación de ingresos
	UPDATE ADTEXTTBLVLD SET ID=147 WHERE VALOR='Transferencia' AND IDTBLVLD='ID_TBLVLD_INGRESOS';
	UPDATE ADTEXTTBLVLD SET ID=148 WHERE VALOR='Donación' AND IDTBLVLD='ID_TBLVLD_INGRESOS';
	UPDATE ADTEXTTBLVLD SET ID=149 WHERE VALOR='Depósito' AND IDTBLVLD='ID_TBLVLD_INGRESOS';

	-- Añadir el campo de id de ficha utilizado durante el alta/relación
	ALTER TABLE ASGTRENTREGA ADD IDFICHA VARCHAR (32);

	----------------------------------------------------------------------------------------
	-- Crear las tablas para almacenar los campos descriptivos de unidades en alta/relación
	----------------------------------------------------------------------------------------
	CREATE TABLE ADVCFECHAUDOCRE (
		IDUDOCRE 	VARCHAR (32) NOT NULL,
		IDCAMPO 	VARCHAR (32) NOT NULL,
		VALOR 		VARCHAR (64),
		FECHAINI 	TIMESTAMP,
		FECHAFIN 	TIMESTAMP,
		FORMATO 	VARCHAR (16),
		SEP 		VARCHAR (1),
		CALIFICADOR VARCHAR (32),
		ORDEN 		INTEGER NOT NULL
	) ;

	CREATE TABLE ADVCNUMUDOCRE (
		IDUDOCRE 	VARCHAR (32) NOT NULL,
		IDCAMPO 	VARCHAR (32) NOT NULL,
		VALOR		DOUBLE PRECISION NOT NULL,
		ORDEN 		INTEGER NOT NULL,
		TIPOMEDIDA 	INTEGER,
		UNIDADMEDIDA VARCHAR (16)
	) ;

	CREATE TABLE ADVCREFUDOCRE (
		IDUDOCRE 	VARCHAR (32) NOT NULL,
		IDCAMPO 	VARCHAR (32) NOT NULL,
		TIPOOBJREF 	INTEGER NOT NULL,
		IDOBJREF 	VARCHAR (32) NOT NULL,
		ORDEN 		INTEGER NOT NULL
	) ;

	CREATE TABLE ADVCTEXTLUDOCRE (
		IDUDOCRE 	VARCHAR (32) NOT NULL,
		IDCAMPO 	VARCHAR (32) NOT NULL,
		VALOR 		TEXT NOT NULL,
		ORDEN 		INTEGER NOT NULL
	) ;

	CREATE TABLE ADVCTEXTUDOCRE (
		IDUDOCRE 	VARCHAR (32) NOT NULL,
		IDCAMPO 	VARCHAR (32) NOT NULL,
		VALOR 		VARCHAR (254) NOT NULL,
		ORDEN 		INTEGER NOT NULL
	) ;

	---------------------------------------------------------------------------------------------
	-- Índices de las tablas para almacenar los campos descriptivos de unidades en alta/relación
	---------------------------------------------------------------------------------------------
	--Tabla: ADVCFECHAUDOCRE
	CREATE UNIQUE INDEX ADVCFECHAUDOCRE1 ON ADVCFECHAUDOCRE (IDUDOCRE, IDCAMPO, ORDEN) ;
	CREATE INDEX ADVCFECHAUDOCRE2 ON ADVCFECHAUDOCRE (IDUDOCRE) ;
	CREATE INDEX ADVCFECHAUDOCRE3 ON ADVCFECHAUDOCRE (IDCAMPO, FECHAINI) ;
	CREATE INDEX ADVCFECHAUDOCRE4 ON ADVCFECHAUDOCRE (IDCAMPO, FECHAFIN) ;
	CREATE INDEX ADVCFECHAUDOCRE5 ON ADVCFECHAUDOCRE (IDCAMPO, FECHAINI, FECHAFIN, CALIFICADOR) ;

	--Tabla: ADVCNUMUDOCRE
	CREATE UNIQUE INDEX ADVCNUMUDOCRE1 ON ADVCNUMUDOCRE (IDUDOCRE, IDCAMPO, ORDEN) ;
	CREATE INDEX ADVCNUMUDOCRE2 ON ADVCNUMUDOCRE (IDUDOCRE) ;
	CREATE INDEX ADVCNUMUDOCRE3 ON ADVCNUMUDOCRE (IDCAMPO, VALOR) ;

	--Tabla: ADVCREFUDOCRE
	CREATE UNIQUE INDEX ADVCREFUDOCRE1 ON ADVCREFUDOCRE (IDUDOCRE, IDCAMPO, ORDEN) ;
	CREATE INDEX ADVCREFUDOCRE2 ON ADVCREFUDOCRE (IDUDOCRE) ;
	CREATE INDEX ADVCREFUDOCRE3 ON ADVCREFUDOCRE (TIPOOBJREF, IDOBJREF) ;
	CREATE INDEX ADVCREFUDOCRE4 ON ADVCREFUDOCRE (IDCAMPO, IDOBJREF) ;

	--Tabla: ADVCTEXTLUDOCRE
	CREATE UNIQUE INDEX ADVCTEXTLUDOCRE1 ON ADVCTEXTLUDOCRE (IDUDOCRE, IDCAMPO, ORDEN) ;
	CREATE INDEX ADVCTEXTLUDOCRE2 ON ADVCTEXTLUDOCRE (IDUDOCRE) ;

	--Tabla: ADVCTEXTUDOCRE
	CREATE UNIQUE INDEX ADVCTEXTUDOCRE1 ON ADVCTEXTUDOCRE (ORDEN, IDCAMPO, IDUDOCRE) ;
	CREATE INDEX ADVCTEXTUDOCRE2 ON ADVCTEXTUDOCRE (IDUDOCRE) ;

	--Modificar los nombres de los formatos para añadir el tipo.
	UPDATE ADFMTFICHA SET NOMBRE = NOMBRE || ' - Público' WHERE NIVELACCESO= 1;
	UPDATE ADFMTFICHA SET NOMBRE = NOMBRE || ' - Archivo' WHERE NIVELACCESO= 2;

/***************************/
/* Versión 2.9.1           */
/***************************/

	-- Insertar la versión actual de bd
	INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','2.9.1',now());

	-- Crear la tabla de divisiones de fracciones de serie
	CREATE TABLE ASGFDIVISIONFS (
      IDFS 				VARCHAR (32) NOT NULL,
      IDFICHA 				VARCHAR (32) NULL,
      IDNIVELDOCUMENTAL 	VARCHAR (32) NOT NULL,
      IDUSRGESTOR 			VARCHAR (32) NOT NULL,
      ESTADO 				SMALLINT NOT NULL,
      INFO 				TEXT,
      FECHAESTADO 			TIMESTAMP NOT NULL);

	-- Crear la tabla de unidades documentales en división de fracción de serie
	CREATE TABLE ASGFUDOCENDIVISIONFS (
      IDFS 			VARCHAR (32) NOT NULL,
      IDUDOC 			VARCHAR (32) NOT NULL,
      NUMEXP           VARCHAR (128),
      FECHAEXTINI      TIMESTAMP NOT NULL,
	   FECHAEXTFIN      TIMESTAMP NOT NULL,
	   ASUNTO           VARCHAR (1024) NOT NULL,
	   ORDEN			INTEGER NOT NULL,
            VALIDADA 		VARCHAR(1) NOT NULL,
	   INFO             TEXT);

	-- Crear índices únicos para las tablas anteriores
	--Tabla: ASGFDIVISIONFS
	CREATE UNIQUE INDEX ASGFDIVISIONFS1 ON ASGFDIVISIONFS (IDFS);

	--Tabla: ASGFUDOCENDIVISIONFS
	CREATE UNIQUE INDEX ASGFUDOCENDIVISIONFS1 ON ASGFUDOCENDIVISIONFS (IDFS, IDUDOC);

	----------------------------------------------------------------------------------------
	-- Modificar las tablas de descripción de unidades documentales en relaciones para
	-- incluir el tipo de unidad documental que van a describir:
	--		1 -> unidad documental en relación de entrega
	--		2 -> unidad documental en proceso de división de fracción de serie
	----------------------------------------------------------------------------------------
	ALTER TABLE ADVCFECHAUDOCRE ADD COLUMN TIPOUDOC SMALLINT NOT NULL DEFAULT 1;
	ALTER TABLE ADVCNUMUDOCRE ADD COLUMN TIPOUDOC SMALLINT NOT NULL DEFAULT 1;
	ALTER TABLE ADVCREFUDOCRE ADD COLUMN TIPOUDOC SMALLINT NOT NULL DEFAULT 1;
	ALTER TABLE ADVCTEXTLUDOCRE ADD COLUMN TIPOUDOC SMALLINT NOT NULL DEFAULT 1;
	ALTER TABLE ADVCTEXTUDOCRE ADD COLUMN TIPOUDOC SMALLINT NOT NULL DEFAULT 1;


	--Añadir Campo de Observaciones a la tabla de préstamos
	ALTER TABLE ASGPPRESTAMO ADD COLUMN OBSERVACIONES VARCHAR(254);

	--Añadir Campo de Observaciones a la tabla de Consultas
	ALTER TABLE ASGPCONSULTA ADD COLUMN OBSERVACIONES VARCHAR(254);

	-- Actualizar los descriptores con el tipo de su lista padre
	-- SELECT 'UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id=''' + ID + ''') WHERE IDLISTA=''' + ID + ''' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id=''' + ID + ''' );' from ADCTLGLISTAD
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_BDORGANIZACION') WHERE IDLISTA='ID_LIST_BDORGANIZACION' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_BDORGANIZACION' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_CARGO') WHERE IDLISTA='ID_LIST_CARGO' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_CARGO' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_CARRETERA') WHERE IDLISTA='ID_LIST_CARRETERA' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_CARRETERA' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_COMUNIDAD') WHERE IDLISTA='ID_LIST_COMUNIDAD' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_COMUNIDAD' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_CONCEJO') WHERE IDLISTA='ID_LIST_CONCEJO' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_CONCEJO' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_FAMILIA') WHERE IDLISTA='ID_LIST_FAMILIA' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_FAMILIA' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_GEOGRAFICO') WHERE IDLISTA='ID_LIST_GEOGRAFICO' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_GEOGRAFICO' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_INSTITUCION') WHERE IDLISTA='ID_LIST_INSTITUCION' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_INSTITUCION' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_INTERESADO') WHERE IDLISTA='ID_LIST_INTERESADO' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_INTERESADO' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_MONTE') WHERE IDLISTA='ID_LIST_MONTE' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_MONTE' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_ORGANO') WHERE IDLISTA='ID_LIST_ORGANO' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_ORGANO' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_PAIS') WHERE IDLISTA='ID_LIST_PAIS' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_PAIS' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_PERSONA') WHERE IDLISTA='ID_LIST_PERSONA' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_PERSONA' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_POBLACION') WHERE IDLISTA='ID_LIST_POBLACION' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_POBLACION' );
	UPDATE ADDESCRIPTOR SET TIPO = (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_PROVINCIA') WHERE IDLISTA='ID_LIST_PROVINCIA' AND TIPO NOT IN (SELECT TIPODESCRIPTOR FROM ADCTLGLISTAD WHERE id='ID_LIST_PROVINCIA' );

	--Actualización del Tipo de descriptor de la lista de Organización.
	UPDATE ADCTLGLISTAD SET TIPODESCRIPTOR=1 WHERE ID='ID_LIST_BDORGANIZACION';

	--Añadir Campo de ID de Unidad de Instalación ubicada a la tabla de unidad de instalacion en relación de entrega
	ALTER TABLE ASGTUINSTALACIONRE ADD COLUMN IDUIUBICADA VARCHAR(32);

	--Eliminar Indice
	DROP INDEX ADASGTMAPDESCRUDOC1;

	--Crear Índice
	CREATE UNIQUE INDEX ASGTMAPDESCRUDOC1 ON ASGTMAPDESCRUDOC (IDFICHA);

	-- Crear la tabla de volumen y forma documental
	DELETE FROM ADCAMPOTBL WHERE ID = '7';

	INSERT INTO ADCAMPOTBL ( ID, NOMBRE, TIPONORMA, IDAREA, ETIQUETAXML, ETIQXMLFILA, DESCRIPCION )
	VALUES ( '7', 'Volumen y Forma Documental', 1, '1', 'Volumenes_FormasDoc', 'Volumen_FormaDoc', NULL);

/***************************/
/* Versión 3.0             */
/***************************/
-- Insertar la versión actual de bd
INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','3.0',now());

-- Plazos de transferencia en valoraciones
CREATE TABLE ASGFPZTRVALSERIE(
	IDVALSERIE 		VARCHAR(32) NOT NULL,
	PLAZO 			SMALLINT  NOT NULL,
	IDNIVELARCHORG 	VARCHAR(32) NOT NULL,
	IDNIVELARCHDST 	VARCHAR(32) NOT NULL,
	ORDEN 			SMALLINT NOT NULL
);

--Insertar el Campo Tabla Fechas de Existencia
INSERT INTO ADCAMPOTBL (ID,NOMBRE,TIPONORMA,IDAREA,ETIQUETAXML,ETIQXMLFILA , DESCRIPCION)
VALUES('104','Fechas de Existencia',2,10,'Fechas_Existencia','Fecha_Existencia_Fila', null);

	--Eliminar el Campo que ya existía.
	DELETE FROM ADCAMPODATO WHERE ID='106';

	--Insertar el campo Dato Fecha Existencia Inicial
	INSERT INTO ADCAMPODATO(ID, NOMBRE, TIPO, TIPONORMA, IDAREA, IDTBLPADRE, POSENTBL, ETIQUETAXML, DESCRIPCION)
	VALUES ('106', 'Fecha Existencia Inicial', 3, 2, '10', '104', 1, 'Fecha_Existencia_Inicial', null);

	--Insertar el campo Dato Fecha Existencia Final
	INSERT INTO ADCAMPODATO(ID,NOMBRE,TIPO,TIPONORMA,IDAREA,ETIQUETAXML, IDTBLPADRE,POSENTBL, DESCRIPCION)
	VALUES('218','Fecha Existencia Final',3,2,10,'Fecha_Existencia_Final','104',2, null);


--ADUSOOBJETO

--AÑADIR CAMPOS A LA FICHA
--Tabla: Fechas Existencia
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('104',5,'5',1);

	--Dato:Fecha Existencia Inicial
	--INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('106',1,'5',1);

	--Dato:Fecha Existencia Final
	INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('218',1,'5',1);


--Tabla: Fechas Existencia
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('10',4,'104',3);

	--Dato:Fecha Existencia Inicial
	--INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('10',4,'106',2);

	--Dato:Fecha Existencia Final
	INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('10',1,'218',2);



/********************************************
 * Asignar las tablas a las areas
 ********************************************/

--Area de mención de la identidad->Tabla Volumen y Soporte
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('1',4,'1',3);

--Area de mención de la identidad->Tabla Interesados
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('1',4,'2',3);

--Area de mención de la identidad->Tabla Emplazamientos
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('1',4,'3',3);

--Area de mención de la identidad->Tabla Rangos de Expedientes
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('1',4,'102',3);

--Area de contexto->Tabla Productores de Serie
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('2',4,'5',3);

--Area de alcance y contenido->Tabla Documentos Físicos
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('3',4,'4',3);

--Area de alcance y contenido->Tabla Documentos Electrónicos
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('3',4,'6',3);

--Area de Relaciones->Tabla Entidades Relacionadas
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('11',4,'100',3);

--Area de Relaciones->Tabla Relaciones de entidades con otros recursos
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('11',4,'101',3);

--Area de mención de la identidad->Tabla Volumen y Forma Documental
INSERT INTO ADUSOOBJETO (IDOBJ,TIPOOBJ,IDOBJUSUARIO,TIPOOBJUSUARIO)VALUES('1',4,'7',3);


--Permitir código nulo
ALTER TABLE ASGFELEMENTOCF ALTER COLUMN CODIGO TYPE VARCHAR(128);

--Permitir código de referencia nulo.
ALTER TABLE ASGFELEMENTOCF ALTER COLUMN CODREFERENCIA TYPE VARCHAR(1024);

-- Crear una columna para guardar el tipo de signaturacion
ALTER TABLE AGARCHIVO ADD TIPOSIGNATURACION INTEGER NOT NULL DEFAULT 1;

-- Crear una columna en el hueco para almacenar la numeracion del hueco en el archivo
ALTER TABLE ASGDHUECO ADD NUMERACION VARCHAR (16);

-- Crear una tabla para almacenar el número del siguiente hueco a crear para un archivo
-- en concreto
CREATE TABLE ASGDSIGNUMHUECO (
  IDARCHIVO 		VARCHAR(32) NOT NULL,
  SIGNUMHUECO  		BIGINT NOT NULL
  ) ;

-- Tabla: ASGDSIGNUMHUECO
CREATE UNIQUE INDEX ASGDSIGNUMHUECO1 ON ASGDSIGNUMHUECO(IDARCHIVO, SIGNUMHUECO);

-- Tabla: ADTEXTTBLVLD (para evitar duplicados sobre las listas de valores)
--Eliminar Previamente los valores duplicados.
INSERT INTO ADTEXTTBLVLD SELECT ID||'-NEW',VALOR,IDTBLVLD from ADTEXTTBLVLD GROUP BY ID,VALOR,IDTBLVLD HAVING COUNT(ID)>1;
DELETE FROM ADTEXTTBLVLD WHERE ID IN (SELECT ID FROM ADTEXTTBLVLD GROUP BY ID HAVING COUNT(ID)>1);
UPDATE ADTEXTTBLVLD set ID=REPLACE(ID,'-NEW','') WHERE ID LIKE '%-NEW';

CREATE UNIQUE INDEX ADTEXTTBLVLD2 ON ADTEXTTBLVLD (ID);

-- Nuevo campo para marcas para huecos cuyo valor dependera de la numeración del hueco
ALTER TABLE ASGDHUECO ADD MARCAS SMALLINT NOT NULL DEFAULT 0;

-- Nuevo procedimiento de comprobacion de marcas
CREATE OR REPLACE FUNCTION DEVOLVERMARCA(numeric, numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	numeroEnBase10 ALIAS FOR $1;
	posicionBit ALIAS FOR $2;
	vNumeros VARCHAR(10);
        nuevoNumero VARCHAR;
        auxNumeroEnBase10 NUMERIC;
BEGIN
     vNumeros:= '0123456789';
     nuevoNumero:='';
     auxNumeroEnBase10:=numeroEnBase10;
     IF posicionBit<0 THEN
        RETURN 0;
     END IF;

     WHILE auxNumeroEnBase10 <> 0 LOOP
            nuevoNumero := SUBSTR(vNumeros, CAST(MOD(auxNumeroEnBase10,2) + 1 AS integer), 1) || nuevoNumero;
            auxNumeroEnBase10 := FLOOR(auxNumeroEnBase10 / 2);
     END LOOP;

     IF (posicionBit>=char_length(nuevoNumero)) THEN
        RETURN 0;
     END IF;

     IF SUBSTR(nuevoNumero, CAST(LENGTH(nuevoNumero)-posicionBit AS integer),1) ='1' THEN
        RETURN 1;
     END IF;
     RETURN 0;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;

/*****************************/
/* Versión 3.0.1             */
/*****************************/

-- Insertar la versión actual de bd
INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','3.0.1',now());

DROP INDEX ASGDSIGNUMHUECO1;
ALTER TABLE ASGDSIGNUMHUECO ALTER COLUMN IDARCHIVO TYPE VARCHAR(32);
ALTER TABLE ASGDSIGNUMHUECO ALTER COLUMN IDARCHIVO SET NOT NULL;
ALTER TABLE ASGDSIGNUMHUECO ALTER COLUMN SIGNUMHUECO TYPE BIGINT;
ALTER TABLE ASGDSIGNUMHUECO ALTER COLUMN SIGNUMHUECO SET NOT NULL;
CREATE UNIQUE INDEX ASGDSIGNUMHUECO1 ON ASGDSIGNUMHUECO(IDARCHIVO, SIGNUMHUECO);

/***************************/
/* Versión 3.1             */
/***************************/

-- Crear la tabla de revisión de documentación
CREATE TABLE ASGPREVDOCUDOC (
  IDREVDOC			VARCHAR (32)  NOT NULL,
  IDUDOC          		VARCHAR (32)  NOT NULL,
  TITULO          		VARCHAR (1024)  NOT NULL,
  SIGNATURAUDOC   	VARCHAR (254)  NOT NULL,
  EXPEDIENTEUDOC  	VARCHAR (128),
  ESTADO          		SMALLINT    NOT NULL,
  FESTADO         		TIMESTAMP          NOT NULL,
  OBSERVACIONES        	VARCHAR (1024),
  MOTIVORECHAZO 	VARCHAR (254),
  IDUSRGESTOR        	VARCHAR (32) NOT NULL,
  IDALTA			VARCHAR (32)
);

-- Crear los índices necesarios en ASGPREVDOCUDOC
CREATE UNIQUE INDEX ASGPREVDOCUDOC1 ON ASGPREVDOCUDOC (IDREVDOC);
CREATE INDEX ASGPREVDOCUDOC2 ON ASGPREVDOCUDOC (IDUDOC);
CREATE INDEX ASGPREVDOCUDOC3 ON ASGPREVDOCUDOC (IDUDOC, ESTADO);

ALTER TABLE ASCAGRUPO ADD INFO VARCHAR(1024) DEFAULT '';

--Actualización de la vesión anterior
DELETE FROM AGINFOSISTEMA WHERE NOMBRE='VERSIONBD' AND VALOR LIKE '3.1';

--Cambiar la columna numexp a tamaño 256
ALTER TABLE ASGTUNIDADDOCRE ALTER COLUMN NUMEXP TYPE VARCHAR (256);
ALTER TABLE ASGFUNIDADDOC ALTER COLUMN NUMEXP TYPE VARCHAR (256);
ALTER TABLE ASGFHISTUDOC ALTER COLUMN NUMEXPUDOC TYPE VARCHAR (256);
ALTER TABLE ASGFUDOCENDIVISIONFS ALTER COLUMN NUMEXP TYPE VARCHAR (256);

-- Insertar la versión actual de bd
INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','3.1',now());

/**************************/
/* Versión 3.2            */
/**************************/

ALTER TABLE ASGFELEMENTOCF ADD ORDPOS VARCHAR(32);

CREATE OR REPLACE FUNCTION  CALCULARFINALCODREFPADRE(VARCHAR(255),VARCHAR(255),VARCHAR(255),VARCHAR(255),VARCHAR(255))
  RETURNS VARCHAR(255) AS
$BODY$
DECLARE
	vCodReferencia ALIAS FOR $1;
	vCodRefFondo ALIAS FOR $2;
	vCodigo	ALIAS FOR $3;
	vFinalCodRefPadreActual ALIAS FOR $4;
	vDelimitador ALIAS FOR $5;

	vCodRefSinCodRefFondo	VARCHAR(255);
	iNumCars integer;
	vReturnValue VARCHAR(255);
BEGIN
	-- algoritmo: Ej
	-- vCodReferencia			ES/NA/AJRP/CF1/CF2/F1/CS1/CS2/S1/U1
	-- vCodRefFondo				ES/NA/AJRP/CF1/CF2/F1
	-- vCodigo					U1
	-- vFinalCodRefPadreActual	CF1/CF2/F2/CS1/CS2/S1/U1
	-- vDelimitador				/

	-- valor retornado:
	--	sin lanzar excepciones:		CS1/CS2/S1
	--	si algo fala:				CF1/CF2/F2/CS1/CS2/S1/U1

	--reemplazar en la cadena la parte del fondo+delimitador por la cadena vacia


	-- El codigo de referencia del fondo nunca puede llegar nulo, si llega nulo => error
	IF(LENGTH(vCodRefFondo)=0) THEN
		RETURN vFinalCodRefPadreActual;
	END IF;

	-- El codigo de referencia nunca puede llegar nulo, si llega nulo => error
	IF(LENGTH(vCodReferencia)=0) THEN
		RETURN vFinalCodRefPadreActual;
	END IF;

	-- Si el codigo de referencia del fondo no esta contenido ,en el codigo de referencia => error
	IF(STRPOS(vCodReferencia,vCodRefFondo)=0) THEN
		RETURN vFinalCodRefPadreActual;
	END IF;

	-- Quitamos la parte con el codigo de referencia del fondo, del codigo de referencia
	vCodRefSinCodRefFondo := REPLACE(vCodReferencia, vCodRefFondo || vDelimitador,'');

	-- codigo vacio
	IF(LENGTH(vCodigo)=0) THEN
		RETURN vCodRefSinCodRefFondo;
	END IF;

	-- quitamos el codigo al final de la cadena y el caracter delimitador
	iNumCars:=LENGTH(vCodRefSinCodRefFondo)-LENGTH(vCodigo);

	IF (iNumCars>0) THEN
		vReturnValue:=SUBSTRING(vCodRefSinCodRefFondo,1,iNumCars-1);
	END IF;

	RETURN vReturnValue;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION ISNUMERIC(character varying)
  RETURNS INTEGER AS
$BODY$
DECLARE
	vNum ALIAS FOR $1;
	vReturnValue INTEGER;
BEGIN
	vReturnValue:= vNum;
	RETURN 1;
EXCEPTION
	WHEN others THEN
            RETURN 0;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;

CREATE OR REPLACE FUNCTION GETNUMERICPOSITIVE(character varying)
  RETURNS BIGINT AS
$BODY$
DECLARE
	vNum ALIAS FOR $1;
	vReturnValue BIGINT;
BEGIN
	vReturnValue:= vNum;
	RETURN vReturnValue;
EXCEPTION
	WHEN others THEN
            RETURN -1;
END;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;

-- Insertar la versión actual de bd
INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','3.2',now());
