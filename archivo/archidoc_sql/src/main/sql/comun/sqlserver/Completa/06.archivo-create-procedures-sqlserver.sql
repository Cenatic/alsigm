CREATE  PROCEDURE dbo.IdsDescendientesNoAsignable ( @Root varchar(32) ) AS
BEGIN
 DECLARE @level int
 SET @level = 1
 DECLARE @descendientesNoAsignable TABLE (
   idHijo varchar(32) NULL,
     nombreHijo varchar(64) NULL,
    idPadre varchar(32) NULL,
    level int NOT NULL
 )

 INSERT @descendientesNoAsignable (
   idHijo,
    nombreHijo,
   idPadre ,
   level
 )(
 SELECT
  id,
  nombre,
  idPadre,
  @level
 FROM
  asgdelemnoasig
 WHERE
  idPadre=@Root)


 WHILE EXISTS
  (SELECT 1
   FROM
   asgdelemnoasig
   WHERE
   idPadre IN (
    SELECT idHijo
    FROM @descendientesNoAsignable
    WHERE level = @level
    )
  )

  BEGIN
   INSERT @descendientesNoAsignable(idHijo,
        nombreHijo,
        idPadre,
        level)
   SELECT  id,
    nombre,
    idPadre,
    @level + 1
   FROM asgdelemnoasig WHERE idpadre IN
     (SELECT idHijo
     FROM @descendientesNoAsignable
     WHERE level = @level)

   SET @level = @level + 1
  END
 SELECT * FROM @descendientesNoAsignable
END;
GO

CREATE PROCEDURE [dbo].[UPDATECODREF] ( @ROOT VARCHAR(32),@SEPARATOR VARCHAR(1),@UPDTABLES VARCHAR(1)) AS
BEGIN

	-- Este procedimiento requiere que se establezca el idpadre antes de llamar
	-- para actualizar los códigos de referencia y el resto de campos

	IF(@ROOT IS NOT NULL) BEGIN
		DECLARE @TIPO_ELEMENTO SMALLINT;

		SET	@TIPO_ELEMENTO=(SELECT TIPO FROM ASGFELEMENTOCF WHERE ID=@ROOT);

		IF (@TIPO_ELEMENTO IS NOT NULL) BEGIN

			IF ((@TIPO_ELEMENTO IN (2,3,4,5,6)) AND (@UPDTABLES='S')) BEGIN

				DECLARE @IDFONDO VARCHAR(32);
				DECLARE @CODREFERENCIAFONDO VARCHAR(1024);

				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO, CODREFERENCIA) AS
				(
					SELECT ID, IDPADRE, TIPO, CODREFERENCIA FROM ASGFELEMENTOCF WHERE ID = @ROOT
					UNION ALL
					SELECT A.ID, A.IDPADRE, A.TIPO, A.CODREFERENCIA FROM ASGFELEMENTOCF A
					INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
				)
				SELECT @IDFONDO=CTE.ID, @CODREFERENCIAFONDO=dbo.GETCODREF(CTE.ID,@SEPARATOR)
				FROM CTE_ELEMENTOS CTE
				WHERE CTE.TIPO=2;

				-- Actualizar el idfondo a todos sus hijos
				WITH CTE_ELEMENTOS (ID, IDPADRE) AS
				(
						SELECT ID, IDPADRE FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFELEMENTOCF SET IDFONDO=@IDFONDO WHERE ID IN (SELECT ID FROM CTE_ELEMENTOS);

				-- Actualizar el idfondo a todas sus series
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFSERIE SET IDFONDO=@IDFONDO WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=4);

				-- Actualizar el idfondo a todas las unidades documentales
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFUNIDADDOC SET IDFONDO=@IDFONDO WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);

				-- Actualizar la identificacion a todas las unidades documentales
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGDUDOCENUI SET IDENTIFICACION=@CODREFERENCIAFONDO + '-'+ SIGNATURAUDOC WHERE IDUNIDADDOC IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);

				-- Actualizar la identificacion de las unidades de instalación
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGDUINSTALACION SET IDENTIFICACION=@CODREFERENCIAFONDO + '.'+ SIGNATURAUI WHERE ID IN (SELECT ASGDUDOCENUI.IDUINSTALACION FROM CTE_ELEMENTOS CTE, ASGDUDOCENUI ASGDUDOCENUI WHERE CTE.TIPO=6 AND CTE.ID=ASGDUDOCENUI.IDUNIDADDOC);

			END;

			IF ((@TIPO_ELEMENTO IN (6)) AND (@UPDTABLES='S')) BEGIN

				DECLARE @IDSERIE VARCHAR(32);

				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
					SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
					UNION ALL
					SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
					INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
				)
				SELECT @IDSERIE=CTE.ID
				FROM CTE_ELEMENTOS CTE
				WHERE CTE.TIPO=4;

				-- Actualizar el idserie a las unidades documentales
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFUNIDADDOC SET IDSERIE=@IDSERIE WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);
			END;

			IF (@TIPO_ELEMENTO IN (6)) BEGIN
				UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ROOT,@SEPARATOR), FINALCODREFPADRE=dbo.GETFINCODREFPADRE(@ROOT,@SEPARATOR)
				WHERE ID=@ROOT;
			END ELSE BEGIN
				DECLARE @ID VARCHAR(32);
				DECLARE @TIPO SMALLINT;
				DECLARE ELEMENTOS_NO_SERIE CURSOR FOR
					WITH CTE_ELEMENTOS (ID, CODIGO, IDPADRE, TIPO) AS
					(
						SELECT ID, CODIGO, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.CODIGO, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
					SELECT ID, TIPO FROM CTE_ELEMENTOS CTE
					WHERE CTE.TIPO NOT IN (4,6);

				OPEN ELEMENTOS_NO_SERIE;

				FETCH NEXT FROM ELEMENTOS_NO_SERIE INTO @ID, @TIPO;

				WHILE @@FETCH_STATUS = 0 BEGIN
					UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ID,@SEPARATOR), FINALCODREFPADRE=dbo.GETFINCODREFPADRE(@ID,@SEPARATOR)
					WHERE ID=@ID;
					FETCH NEXT FROM ELEMENTOS_NO_SERIE INTO @ID, @TIPO;
				END

				CLOSE ELEMENTOS_NO_SERIE;
				DEALLOCATE ELEMENTOS_NO_SERIE;

				DECLARE ELEMENTOS_SERIE CURSOR FOR
					WITH CTE_ELEMENTOS (ID, CODIGO, IDPADRE, TIPO) AS
					(
						SELECT ID, CODIGO, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.CODIGO, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
					SELECT ID, TIPO FROM CTE_ELEMENTOS CTE
					WHERE CTE.TIPO=4;

				OPEN ELEMENTOS_SERIE;

				FETCH NEXT FROM ELEMENTOS_SERIE INTO @ID, @TIPO;

				WHILE @@FETCH_STATUS = 0 BEGIN

					UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ID,@SEPARATOR), FINALCODREFPADRE=dbo.GETFINCODREFPADRE(@ID,@SEPARATOR)
					WHERE ID=@ID;
					UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ID,@SEPARATOR) + @SEPARATOR + CODIGO, FINALCODREFPADRE=NULL
					WHERE IDPADRE=@ID;
					FETCH NEXT FROM ELEMENTOS_SERIE INTO @ID, @TIPO;
				END

				CLOSE ELEMENTOS_SERIE;
				DEALLOCATE ELEMENTOS_SERIE;
			END
		END
	END
END;
GO