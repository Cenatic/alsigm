-- /***************************/
-- /* Actualización 4.3->4.4  */
-- /***************************/

	-- Crear funciones para el cálculo del código de referencia
	CREATE FUNCTION [dbo].[GETCODREF](@IDELEMENTO VARCHAR(32),@SEPARATOR VARCHAR(1))
	RETURNS VARCHAR(1024)
	AS
	BEGIN
       DECLARE @ELEMENTOS TABLE (ID VARCHAR, CODIGO VARCHAR, IDPADRE VARCHAR);
		DECLARE @AUXCODREFERENCIA VARCHAR(1024);
		DECLARE @ID VARCHAR(32);
		DECLARE @CODIGO VARCHAR(128);
		DECLARE @IDPADRE VARCHAR(32);

		IF (@IDELEMENTO IS NULL) BEGIN
			SET @AUXCODREFERENCIA = NULL;
		END	ELSE BEGIN
			SET @AUXCODREFERENCIA = '';
			DECLARE ELEMENTOS CURSOR FOR
				WITH CTE_ELEMENTOS (ID, CODIGO, IDPADRE) AS
				(
					SELECT ID, CODIGO, IDPADRE FROM ASGFELEMENTOCF WHERE ID = @IDELEMENTO
					UNION ALL
					SELECT A.ID, A.CODIGO, A.IDPADRE FROM ASGFELEMENTOCF A
					INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
				)
				SELECT ID, CODIGO, IDPADRE FROM CTE_ELEMENTOS;

			OPEN ELEMENTOS;
			FETCH NEXT FROM ELEMENTOS INTO @ID, @CODIGO, @IDPADRE;

			WHILE @@FETCH_STATUS = 0 BEGIN
				IF (@CODIGO IS NOT NULL) BEGIN
					IF (@AUXCODREFERENCIA = '') BEGIN
						SET @AUXCODREFERENCIA = @CODIGO;
					END ELSE BEGIN
						SET @AUXCODREFERENCIA = @CODIGO + @SEPARATOR + @AUXCODREFERENCIA;
					END
				END
				FETCH NEXT FROM ELEMENTOS INTO @ID, @CODIGO, @IDPADRE;
			END

			CLOSE ELEMENTOS;
			DEALLOCATE ELEMENTOS;

			IF (@AUXCODREFERENCIA = '') BEGIN
				SET @AUXCODREFERENCIA=NULL;
			END ELSE BEGIN
				DECLARE @CODPAIS VARCHAR(16);
				DECLARE @CODCOMUNIDAD VARCHAR(16);
				DECLARE @CODARCHIVO VARCHAR(32);
				DECLARE FONDO CURSOR FOR
					SELECT CODPAIS, CODCOMUNIDAD, CODARCHIVO FROM ASGFELEMENTOCF ASGFELEMENTOCF, ASGFFONDO ASGFFONDO
					WHERE	ASGFELEMENTOCF.ID=@IDELEMENTO AND
							ASGFELEMENTOCF.IDFONDO=ASGFFONDO.IDELEMENTOCF;

				OPEN FONDO;
				FETCH NEXT FROM FONDO INTO @CODPAIS, @CODCOMUNIDAD, @CODARCHIVO;

				WHILE @@FETCH_STATUS = 0 BEGIN
					SET @AUXCODREFERENCIA = @CODPAIS + @SEPARATOR + @CODCOMUNIDAD + @SEPARATOR + @CODARCHIVO + @SEPARATOR + @AUXCODREFERENCIA;
					FETCH NEXT FROM FONDO INTO @CODPAIS, @CODCOMUNIDAD, @CODARCHIVO;
				END

				CLOSE FONDO;
				DEALLOCATE FONDO;
			END
			IF (@AUXCODREFERENCIA = '') BEGIN
				SET @AUXCODREFERENCIA=NULL;
			END
		END
       RETURN @AUXCODREFERENCIA;
	END;
	GO

	CREATE FUNCTION [dbo].[GETFINCODREFPADRE](@IDELEMENTO VARCHAR(32),@SEPARATOR VARCHAR(1))
	RETURNS VARCHAR(1024)
	AS
	BEGIN

		DECLARE @AUXFINALCODREFPADRE VARCHAR(1024);
		DECLARE @CODIGOREFERENCIAELEMENTOPADRE VARCHAR(1024);
		DECLARE @CODIGOREFERENCIAFONDO VARCHAR(1024);
		DECLARE @TIPO SMALLINT;

		IF (@IDELEMENTO IS NULL) BEGIN
			SET @AUXFINALCODREFPADRE = NULL;
		END ELSE BEGIN
			SET @AUXFINALCODREFPADRE = '';
			SET @TIPO = -1;

			DECLARE ELEMENTOCF CURSOR FOR
				SELECT TIPO
				FROM ASGFELEMENTOCF
				WHERE ID = @IDELEMENTO;

			OPEN ELEMENTOCF;
			FETCH NEXT FROM ELEMENTOCF INTO @TIPO;
			CLOSE ELEMENTOCF;
			DEALLOCATE ELEMENTOCF;

			IF (@TIPO IN (-1,2,6)) BEGIN
				SET @AUXFINALCODREFPADRE = NULL;
			END ELSE BEGIN
				DECLARE CODSREFERENCIAELEMENTO CURSOR FOR
					SELECT dbo.GETCODREF(IDPADRE,@SEPARATOR) CODIGOREFERENCIAELEMENTOPADRE, dbo.GETCODREF(IDFONDO,@SEPARATOR) CODIGOREFERENCIAFONDO
					FROM ASGFELEMENTOCF
					WHERE ID = @IDELEMENTO;

				OPEN CODSREFERENCIAELEMENTO;
				FETCH NEXT FROM CODSREFERENCIAELEMENTO INTO @CODIGOREFERENCIAELEMENTOPADRE, @CODIGOREFERENCIAFONDO;

				IF (LEN(@CODIGOREFERENCIAFONDO)>0) BEGIN
					SET @AUXFINALCODREFPADRE = REPLACE(@CODIGOREFERENCIAELEMENTOPADRE,@CODIGOREFERENCIAFONDO + @SEPARATOR,'');
					SET @AUXFINALCODREFPADRE = REPLACE(@AUXFINALCODREFPADRE,@CODIGOREFERENCIAFONDO,'');
				END ELSE BEGIN
					SET @AUXFINALCODREFPADRE = @CODIGOREFERENCIAELEMENTOPADRE;
				END;

				CLOSE CODSREFERENCIAELEMENTO;
				DEALLOCATE CODSREFERENCIAELEMENTO;
			END;
		END;

		IF (LEN(@AUXFINALCODREFPADRE)=0) BEGIN
			SET @AUXFINALCODREFPADRE = NULL;
		END;

       RETURN @AUXFINALCODREFPADRE;
	END;
	GO

	CREATE PROCEDURE [dbo].[UPDATECODREF] ( @ROOT VARCHAR(32),@SEPARATOR VARCHAR(1),@UPDTABLES VARCHAR(1)) AS
	BEGIN

		-- Este procedimiento requiere que se establezca el idpadre antes de llamar
		-- para actualizar los códigos de referencia y el resto de campos

		IF(@ROOT IS NOT NULL) BEGIN
			DECLARE @TIPO_ELEMENTO SMALLINT;
			DECLARE ELEMENTO CURSOR FOR
				SELECT TIPO FROM ASGFELEMENTOCF WHERE ID=@ROOT;

			OPEN ELEMENTO;
			FETCH NEXT FROM ELEMENTO INTO @TIPO_ELEMENTO;

			CLOSE ELEMENTO;
			DEALLOCATE ELEMENTO;

			IF (@TIPO_ELEMENTO IS NOT NULL) BEGIN

				IF ((@TIPO_ELEMENTO IN (2,3,4,5,6)) AND (@UPDTABLES='S')) BEGIN

					DECLARE FONDO CURSOR FOR
						WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO, CODREFERENCIA) AS
						(
							SELECT ID, IDPADRE, TIPO, CODREFERENCIA FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE, A.TIPO, A.CODREFERENCIA FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
						)
						SELECT CTE.ID, CTE.CODREFERENCIA
						FROM CTE_ELEMENTOS CTE
						WHERE CTE.TIPO=2;

					DECLARE @IDFONDO VARCHAR(32);
					DECLARE @CODREFERENCIAFONDO VARCHAR(1024);

					OPEN FONDO;
					FETCH NEXT FROM FONDO INTO @IDFONDO, @CODREFERENCIAFONDO;
					CLOSE FONDO;
					DEALLOCATE FONDO;

					-- Actualizar el idfondo a todos sus hijos
					WITH CTE_ELEMENTOS (ID, IDPADRE) AS
					(
							SELECT ID, IDPADRE FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
						)
					UPDATE ASGFELEMENTOCF SET IDFONDO=@IDFONDO WHERE ID IN (SELECT ID FROM CTE_ELEMENTOS);

					-- Actualizar el idfondo a todas sus series
					WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
					(
							SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
						)
					UPDATE ASGFSERIE SET IDFONDO=@IDFONDO WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=4);

					-- Actualizar el idfondo a todas las unidades documentales
					WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
					(
							SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
						)
					UPDATE ASGFUNIDADDOC SET IDFONDO=@IDFONDO WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);

					-- Actualizar la identificacion a todas las unidades documentales
					WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
					(
							SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
						)
					UPDATE ASGDUDOCENUI SET IDENTIFICACION=@CODREFERENCIAFONDO + '-'+ SIGNATURAUDOC WHERE IDUNIDADDOC IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);

					-- Actualizar la identificacion de las unidades de instalación
					WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
					(
							SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
						)
					UPDATE ASGDUINSTALACION SET IDENTIFICACION=@CODREFERENCIAFONDO + '.'+ SIGNATURAUI WHERE ID IN (SELECT ASGDUDOCENUI.IDUINSTALACION FROM CTE_ELEMENTOS CTE, ASGDUDOCENUI ASGDUDOCENUI WHERE CTE.TIPO=6 AND CTE.ID=ASGDUDOCENUI.IDUNIDADDOC);

				END;

				IF ((@TIPO_ELEMENTO IN (6)) AND (@UPDTABLES='S')) BEGIN

					DECLARE SERIE CURSOR FOR
						WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
						(
							SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
						)
						SELECT CTE.ID
						FROM CTE_ELEMENTOS CTE
						WHERE CTE.TIPO=4;

					DECLARE @IDSERIE VARCHAR(32);

					OPEN SERIE;
					FETCH NEXT FROM SERIE INTO @IDSERIE;
					CLOSE SERIE;
					DEALLOCATE SERIE;

					-- Actualizar el idserie a las unidades documentales
					WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
					(
							SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
							UNION ALL
							SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
							INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
						)
					UPDATE ASGFUNIDADDOC SET IDSERIE=@IDSERIE WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);
				END;

				DECLARE @ID VARCHAR(32);
				DECLARE @TIPO SMALLINT;
				DECLARE ELEMENTOS CURSOR FOR
					WITH CTE_ELEMENTOS (ID, CODIGO, IDPADRE, TIPO) AS
					(
						SELECT ID, CODIGO, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.CODIGO, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
					SELECT ID, TIPO FROM CTE_ELEMENTOS;

				OPEN ELEMENTOS;

				FETCH NEXT FROM ELEMENTOS INTO @ID, @TIPO;

				WHILE @@FETCH_STATUS = 0 BEGIN
					UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ID,@SEPARATOR), FINALCODREFPADRE=dbo.GETFINCODREFPADRE(@ID,@SEPARATOR)
					WHERE ID=@ID;
					FETCH NEXT FROM ELEMENTOS INTO @ID, @TIPO;
				END

				CLOSE ELEMENTOS;
				DEALLOCATE ELEMENTOS;
			END;
		END;
	END;
	GO

	-- Insertar la versión actual de bd
	INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','4.4',getdate());
	GO

	DECLARE @usuario VARCHAR(50);

	/*****************************************************/
	/*** IMPORTANTE: modificar el usuario de abajo por ***/
	/*** el usuario de base de datos de archidoc       ***/
	/*****************************************************/

	--SET @usuario = N'archidoc';
	SET @usuario = N'nombreusuario';

	--FUNCIONES
	exec ('grant execute on GETCODREF						to '+ @usuario);
	exec ('grant execute on GETFINCODREFPADRE				to '+ @usuario);

	--PROCEDIMIENTOS
	exec ('grant execute on UPDATECODREF					to '+ @usuario);

	-- Crear tabla de Edificios
	CREATE TABLE dbo.ASGSEDIFICIO (
     ID			VARCHAR (32) NOT NULL,
     NOMBRE        VARCHAR (64) NOT NULL,
     UBICACION     VARCHAR (254),
     IDARCHIVO		VARCHAR (32) NOT NULL
	);
	GO

	-- Crear índices de la tabla de Edificios
	CREATE UNIQUE INDEX ASGSEDIFICIO1 ON ASGSEDIFICIO(ID);
	GO
	CREATE UNIQUE INDEX ASGSEDIFICIO2 ON ASGSEDIFICIO(NOMBRE);
	GO

	-- Crear tabla de Salas
	CREATE TABLE dbo.ASGSSALA (
     ID					VARCHAR (32) NOT NULL,
     NOMBRE				VARCHAR (64) NOT NULL,
     DESCRIPCION			VARCHAR (254),
     IDEDIFICIO			VARCHAR (32) NOT NULL,
     EQUIPOINFORMATICO		CHAR(1) NOT NULL
	);
	GO

	-- Crear índices de la tabla de Salas
	CREATE UNIQUE INDEX ASGSSALA1 ON ASGSSALA(ID);
	GO
	CREATE UNIQUE INDEX ASGSSALA2 ON ASGSSALA(IDEDIFICIO,NOMBRE);
	GO
	CREATE INDEX ASGSSALA3 ON ASGSSALA(IDEDIFICIO);
	GO

	-- Crear tabla de Mesas
	CREATE TABLE dbo.ASGSMESA (
     ID				VARCHAR (32) NOT NULL,
     CODIGO			VARCHAR (64) NOT NULL,
     NUMORDEN			INT NOT NULL,
     IDSALA			VARCHAR (32) NOT NULL,
     ESTADO			CHAR (1) NOT NULL,
     FECHAESTADO		DATETIME NOT NULL,
     IDUSRCSALA		VARCHAR (32)
	);
	GO

	-- Crear índices de la tabla Mesas
	CREATE INDEX ASGSMESA1 ON ASGSMESA(IDSALA);
	GO
	CREATE UNIQUE INDEX ASGSMESA2 ON ASGSMESA(IDSALA,CODIGO);
	GO
	CREATE UNIQUE INDEX ASGSMESA3 ON ASGSMESA(IDSALA,NUMORDEN);
	GO
	CREATE INDEX ASGSMESA4 ON ASGSMESA(ESTADO);
	GO

	-- Crear tabla de usuarios investigadores de consulta de sala
	CREATE TABLE dbo.ASGSUSRCSALA (
     ID						VARCHAR (32) NOT NULL,
     TIPODOCIDENTIFICACION		INT NOT NULL,
     NUMDOCIDENTIFICACION		VARCHAR (32) NOT NULL,
     NOMBRE					VARCHAR (64) NOT NULL,
     APELLIDOS				VARCHAR (254) NOT NULL,
     NACIONALIDAD				VARCHAR (64),
     TELEFONOS					VARCHAR (128),
     EMAIL						VARCHAR (128),
     DIRECCION					VARCHAR (254),
     FECHAALTA					DATETIME NOT NULL,
     VIGENTE					CHAR (1) NOT NULL,
     IDSCAUSR					VARCHAR (32)
	);
	GO

	-- Crear índices de la tabla usuarios investigadores
	CREATE UNIQUE INDEX ASGSUSRCSALA1 ON ASGSUSRCSALA(ID);
	GO
	CREATE INDEX ASGSUSRCSALA2 ON ASGSUSRCSALA(NUMDOCIDENTIFICACION);
	GO
	CREATE INDEX ASGSUSRCSALA3 ON ASGSUSRCSALA(VIGENTE);
	GO

	-- Crear tabla relación usuarios consulta y archivos
	CREATE TABLE dbo.ASGSUSRCSARCH (
     IDUSRCSALA		VARCHAR (32) NOT NULL,
     IDARCHIVO			VARCHAR (64) NOT NULL
	);
	GO

	-- Crear índices de la tabla de relación entre usuarios y archivos de consulta
	CREATE UNIQUE INDEX ASGSUSRCSARCH1 ON ASGSUSRCSARCH(IDUSRCSALA,IDARCHIVO);
	GO
	CREATE INDEX ASGSUSRCSARCH2 ON ASGSUSRCSARCH(IDUSRCSALA);
	GO

	-- Crear tabla de registro de consultas
	CREATE TABLE dbo.ASGSREGCSALA (
     ID					VARCHAR (32) NOT NULL,
     IDUSRCSALA			VARCHAR (32) NOT NULL,
     FENTRADA				DATETIME NOT NULL,
     FSALIDA				DATETIME,
     NUMDOCIDENTIFICACION	VARCHAR (32) NOT NULL,
     NOMBREAPELLIDOS		VARCHAR (254) NOT NULL,
     IDSCAUSR				VARCHAR (32),
     IDARCHIVO				VARCHAR (32) NOT NULL,
     MESAASIGNADA			VARCHAR (254) NOT NULL
	);
	GO

	-- Crear índices de la tabla de registro de consultas
	CREATE UNIQUE INDEX ASGSREGCSALA1 ON ASGSREGCSALA(ID);
	GO
	CREATE INDEX ASGSREGCSALA2 ON ASGSREGCSALA(IDUSRCSALA);
	GO
	CREATE INDEX ASGSREGCSALA3 ON ASGSREGCSALA(NUMDOCIDENTIFICACION);
	GO

	--Añadir columna IDUSRCSALA
	ALTER TABLE ASGPCONSULTA ADD IDUSRCSALA VARCHAR(32);
	GO

	--Añadir columna IDUSRCSALA en ASGPTEMA
	ALTER TABLE ASGPTEMA ADD IDUSRCSALA VARCHAR(32);
	GO