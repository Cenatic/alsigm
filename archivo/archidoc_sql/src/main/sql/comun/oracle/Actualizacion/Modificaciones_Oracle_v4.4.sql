--/*************************/
--/* Versión 4.4           */
--/*************************/

	-- Insertar la versión actual de bd
	INSERT INTO AGINFOSISTEMA (AUTID,NOMBRE,VALOR,FECHAACTUALIZACION) VALUES (SEQ_INFO.NextVal,'VERSIONBD','4.3->4.4',SYSDATE);

	-- Crear las funciones para la actualización del código de referencia
	CREATE OR REPLACE FUNCTION GETCODREF (IDELEMENTO IN VARCHAR2, SEPARATOR IN VARCHAR2) RETURN VARCHAR2 AS

		CURSOR ELEMENTOS IS
			SELECT CODIGO
			FROM ASGFELEMENTOCF
			START WITH ID = IDELEMENTO
			CONNECT BY PRIOR IDPADRE = ID;

		CURSOR FONDO IS
			SELECT CODPAIS, CODCOMUNIDAD, CODARCHIVO
			FROM ASGFELEMENTOCF ASGFELEMENTOCF, ASGFFONDO ASGFFONDO
			WHERE	ASGFELEMENTOCF.ID=IDELEMENTO AND
					ASGFELEMENTOCF.IDFONDO=ASGFFONDO.IDELEMENTOCF;

		AUXCODREFERENCIA VARCHAR2(1024);
		CODIGO VARCHAR2(128);
		CODPAIS VARCHAR2(16);
		CODCOMUNIDAD VARCHAR2(16);
		CODARCHIVO VARCHAR2(32);


	BEGIN

		IF (IDELEMENTO IS NULL) THEN
			AUXCODREFERENCIA := NULL;
		ELSE
			AUXCODREFERENCIA := NULL;
			CODPAIS := NULL;

			FOR ELEMENTO IN ELEMENTOS
			LOOP
				IF (ELEMENTO.CODIGO IS NOT NULL) THEN
					IF (AUXCODREFERENCIA IS NULL) THEN
						AUXCODREFERENCIA := ELEMENTO.CODIGO;
					ELSE
						AUXCODREFERENCIA := ELEMENTO.CODIGO || SEPARATOR || AUXCODREFERENCIA;
					END IF;
				END IF;
			END LOOP;

			IF (LENGTH(AUXCODREFERENCIA)>0) THEN

				FOR ELEMENTOFONDO IN FONDO
				LOOP
					CODPAIS:= ELEMENTOFONDO.CODPAIS;
					CODCOMUNIDAD:= ELEMENTOFONDO.CODCOMUNIDAD;
					CODARCHIVO:= ELEMENTOFONDO.CODARCHIVO;
				END LOOP;

				IF (LENGTH(CODPAIS)>0) THEN
					AUXCODREFERENCIA := CODPAIS || SEPARATOR || CODCOMUNIDAD || SEPARATOR || CODARCHIVO || SEPARATOR || AUXCODREFERENCIA;
				END IF;

			END IF;
		END IF;

		IF (LENGTH(AUXCODREFERENCIA)=0) THEN
			AUXCODREFERENCIA := NULL;
		END IF;
		RETURN AUXCODREFERENCIA;

	END;
	/

	CREATE OR REPLACE FUNCTION GETFINCODREFPADRE (IDELEMENTO IN VARCHAR2, SEPARATOR IN VARCHAR2) RETURN VARCHAR2 AS

		CURSOR ELEMENTOCF IS
				SELECT TIPO
					FROM ASGFELEMENTOCF
					WHERE ID = IDELEMENTO;

		CURSOR CODSREFERENCIAELEMENTO IS
				SELECT GETCODREF(IDPADRE,SEPARATOR) CODIGOREFERENCIAELEMENTOPADRE, GETCODREF(IDFONDO,SEPARATOR) CODIGOREFERENCIAFONDO
					FROM ASGFELEMENTOCF
					WHERE ID = IDELEMENTO;

		AUXFINALCODREFPADRE VARCHAR2(1024);
		CODIGOREFERENCIAELEMENTOPADRE VARCHAR2(1024);
		CODIGOREFERENCIAFONDO VARCHAR2(1024);
		IDFONDO VARCHAR2(32);
		TIPO NUMBER (1);

	BEGIN

		IF (IDELEMENTO IS NULL) THEN
			AUXFINALCODREFPADRE := NULL;
		ELSE
			TIPO:=-1;

			FOR ELEMENTO IN ELEMENTOCF
			LOOP
				TIPO := ELEMENTO.TIPO;
			END LOOP;

			IF (TIPO IN (-1,2,6)) THEN
				AUXFINALCODREFPADRE := NULL;
			ELSE
				FOR ELEMENTO IN CODSREFERENCIAELEMENTO
				LOOP
					CODIGOREFERENCIAELEMENTOPADRE := ELEMENTO.CODIGOREFERENCIAELEMENTOPADRE;
					CODIGOREFERENCIAFONDO := ELEMENTO.CODIGOREFERENCIAFONDO;
				END LOOP;

				IF (LENGTH(CODIGOREFERENCIAFONDO)>0) THEN
					AUXFINALCODREFPADRE := REPLACE(CODIGOREFERENCIAELEMENTOPADRE,CODIGOREFERENCIAFONDO || SEPARATOR,'');
					AUXFINALCODREFPADRE := REPLACE(AUXFINALCODREFPADRE,CODIGOREFERENCIAFONDO,'');
				ELSE
					AUXFINALCODREFPADRE := CODIGOREFERENCIAELEMENTOPADRE;
				END IF;
			END IF;
		END IF;

		IF (LENGTH(AUXFINALCODREFPADRE)=0) THEN
			AUXFINALCODREFPADRE := NULL;
		END IF;

       RETURN AUXFINALCODREFPADRE;
	END;
	/

	CREATE OR REPLACE PROCEDURE UPDATECODREF ( ROOT IN VARCHAR2, SEPARATOR IN VARCHAR2, UPDTABLES IN VARCHAR2 ) AS

	TIPO_ELEMENTO NUMBER(1);

	CURSOR ELEMENTOCF IS
			SELECT TIPO FROM ASGFELEMENTOCF WHERE ID=ROOT;

	CURSOR SERIE IS
			SELECT ID
				FROM ASGFELEMENTOCF
			WHERE TIPO=4
			START WITH ID = ROOT
			CONNECT BY PRIOR IDPADRE = ID;

	CURSOR FONDO IS
			SELECT ID, CODREFERENCIA
				FROM ASGFELEMENTOCF
			WHERE TIPO=2
			START WITH ID = ROOT
			CONNECT BY PRIOR IDPADRE = ID;

	CURSOR ELEMENTOS IS
			SELECT ID
			FROM ASGFELEMENTOCF
			START WITH ID = ROOT
			CONNECT BY PRIOR ID = IDPADRE;

	CURSOR CODSREFERENCIA (IDELEMENTO VARCHAR2) IS
			SELECT NVL(GETCODREF(IDFONDO, SEPARATOR),NULL) AS CODREFFONDO,
					GETCODREF(IDELEMENTO, SEPARATOR) AS CODREFERENCIA,
					GETFINCODREFPADRE(IDELEMENTO, SEPARATOR) AS FINALCODREFPADRE
			FROM ASGFELEMENTOCF WHERE ID=IDELEMENTO;
	BEGIN
       IF (ROOT IS NOT NULL) THEN
			FOR ELEMENTO IN ELEMENTOCF LOOP
				TIPO_ELEMENTO:=ELEMENTO.TIPO;
					IF (TIPO_ELEMENTO IS NOT NULL) THEN

						IF ((TIPO_ELEMENTO IN (2,3,4,5,6)) AND (UPDTABLES='S')) THEN
						FOR ELEMENTOFONDO IN FONDO LOOP

							-- Actualizar el idfondo a todos sus hijos
							UPDATE ASGFELEMENTOCF SET IDFONDO=ELEMENTOFONDO.ID WHERE ID IN
							(
								SELECT ID
								FROM ASGFELEMENTOCF
								START WITH ID = ROOT
								CONNECT BY PRIOR ID = IDPADRE
							);

							-- Actualizar el idfondo a todas sus series
							UPDATE ASGFSERIE SET IDFONDO=ELEMENTOFONDO.ID WHERE IDELEMENTOCF IN
							(
								SELECT ID
								FROM ASGFELEMENTOCF
								WHERE TIPO=4
								START WITH ID = ROOT
								CONNECT BY PRIOR ID = IDPADRE
							);

							-- Actualizar el idfondo a todas las unidades documentales
							UPDATE ASGFUNIDADDOC SET IDFONDO=ELEMENTOFONDO.ID WHERE IDELEMENTOCF IN
							(
								SELECT ID
								FROM ASGFELEMENTOCF
								WHERE TIPO=6
								START WITH ID = ROOT
								CONNECT BY PRIOR ID = IDPADRE
							);

							-- Actualizar la identificacion a todas las unidades documentales
							UPDATE ASGDUDOCENUI SET IDENTIFICACION=ELEMENTOFONDO.CODREFERENCIA || '-' || SIGNATURAUDOC WHERE IDUNIDADDOC IN
							(
								SELECT ID
								FROM ASGFELEMENTOCF
								WHERE TIPO=6
								START WITH ID = ROOT
								CONNECT BY PRIOR ID = IDPADRE
							);

							-- Actualizar la identificacion de las unidades de instalación
							UPDATE ASGDUINSTALACION SET IDENTIFICACION=ELEMENTOFONDO.CODREFERENCIA || '.' || SIGNATURAUI WHERE ID IN
							(
								SELECT IDUINSTALACION FROM ASGDUDOCENUI WHERE IDUNIDADDOC IN
								(
									SELECT ID
									FROM ASGFELEMENTOCF
									WHERE TIPO=6
									START WITH ID = ROOT
									CONNECT BY PRIOR ID = IDPADRE
								)
							);
						END LOOP;
						END IF;

						IF ((TIPO_ELEMENTO IN (6)) AND (UPDTABLES='S')) THEN
						FOR ELEMENTOSERIE IN SERIE LOOP
							-- Actualizar el idserie a las unidades documentales
							UPDATE ASGFUNIDADDOC SET IDSERIE=ELEMENTOSERIE.ID WHERE IDELEMENTOCF IN
							(
								SELECT ID
								FROM ASGFELEMENTOCF
								WHERE TIPO=6
								START WITH ID = ROOT
								CONNECT BY PRIOR ID = IDPADRE
							);
						END LOOP;
					END IF;

						FOR ELEMENTO IN ELEMENTOS LOOP
						FOR CODSREF IN CODSREFERENCIA(ELEMENTO.ID) LOOP
							UPDATE ASGFELEMENTOCF SET CODREFFONDO=CODSREF.CODREFFONDO, CODREFERENCIA=CODSREF.CODREFERENCIA, FINALCODREFPADRE=CODSREF.FINALCODREFPADRE WHERE ID=ELEMENTO.ID;
						END LOOP;
					END LOOP;
				END IF;
					END LOOP;
       END IF;
	END;
	/

	-- Crear tabla de Edificios
	CREATE TABLE ASGSEDIFICIO (
     ID            VARCHAR2 (32) NOT NULL,
     NOMBRE        VARCHAR2 (64) NOT NULL,
     UBICACION     VARCHAR2 (254),
     IDARCHIVO     VARCHAR2 (32) NOT NULL
	);

	-- Tabla: ASGSEDIFICIO
	CREATE UNIQUE INDEX ASGSEDIFICIO1 ON ASGSEDIFICIO(ID) TABLESPACE &1;
	CREATE UNIQUE INDEX ASGSEDIFICIO2 ON ASGSEDIFICIO(NOMBRE) TABLESPACE &1;

	-- Crear tabla de Salas
	CREATE TABLE ASGSSALA (
     ID                    VARCHAR2 (32) NOT NULL,
     NOMBRE                VARCHAR2 (64) NOT NULL,
     DESCRIPCION           VARCHAR2 (254),
     IDEDIFICIO            VARCHAR2 (32) NOT NULL,
     EQUIPOINFORMATICO     CHAR (1) NOT NULL
	);

	-- Tabla: ASGSSALA
	CREATE UNIQUE INDEX ASGSSALA1 ON ASGSSALA(ID) TABLESPACE &1;
	CREATE UNIQUE INDEX ASGSSALA2 ON ASGSSALA(IDEDIFICIO,NOMBRE) TABLESPACE &1;
	CREATE INDEX ASGSSALA3 ON ASGSSALA(IDEDIFICIO) TABLESPACE &1;

	-- Crear tabla de Mesas
	CREATE TABLE ASGSMESA (
     ID              VARCHAR2 (32) NOT NULL,
     CODIGO          VARCHAR2 (64) NOT NULL,
     NUMORDEN        NUMBER NOT NULL,
     IDSALA          VARCHAR2 (32) NOT NULL,
     ESTADO          CHAR (1) NOT NULL,
     FECHAESTADO     DATE NOT NULL,
     IDUSRCSALA      VARCHAR2 (32)
	);

	-- Tabla: ASGSMESA
	CREATE INDEX ASGSMESA1 ON ASGSMESA(IDSALA) TABLESPACE &1;
	CREATE UNIQUE INDEX ASGSMESA2 ON ASGSMESA(IDSALA,CODIGO) TABLESPACE &1;
	CREATE UNIQUE INDEX ASGSMESA3 ON ASGSMESA(IDSALA,NUMORDEN) TABLESPACE &1;
	CREATE INDEX ASGSMESA4 ON ASGSMESA(ESTADO) TABLESPACE &1;

	-- Crear tabla de usuarios investigadores de consulta de sala
	CREATE TABLE ASGSUSRCSALA (
     ID						VARCHAR2 (32) NOT NULL,
     TIPODOCIDENTIFICACION     NUMBER NOT NULL,
     NUMDOCIDENTIFICACION		VARCHAR2 (32) NOT NULL,
     NOMBRE					VARCHAR2 (64) NOT NULL,
     APELLIDOS					VARCHAR (254) NOT NULL,
     NACIONALIDAD				VARCHAR2 (64),
     TELEFONOS					VARCHAR2 (128),
     EMAIL						VARCHAR2 (128),
     DIRECCION					VARCHAR2 (254),
     FECHAALTA					DATE NOT NULL,
     VIGENTE					CHAR (1) NOT NULL,
     IDSCAUSR					VARCHAR2 (32)
	);

	-- Crear índices de la tabla usuarios investigadores
	CREATE UNIQUE INDEX ASGSUSRCSALA1 ON ASGSUSRCSALA(ID) TABLESPACE &1;
	CREATE INDEX ASGSUSRCSALA2 ON ASGSUSRCSALA(NUMDOCIDENTIFICACION) TABLESPACE &1;
	CREATE INDEX ASGSUSRCSALA3 ON ASGSUSRCSALA(VIGENTE) TABLESPACE &1;

	-- Crear tabla relación usuarios consulta y archivos
	CREATE TABLE ASGSUSRCSARCH (
     IDUSRCSALA		VARCHAR2 (32) NOT NULL,
     IDARCHIVO			VARCHAR2 (64) NOT NULL
	);

	-- Crear índices de la tabla de relación entre usuarios y archivos de consulta
	CREATE UNIQUE INDEX ASGSUSRCSARCH1 ON ASGSUSRCSARCH(IDUSRCSALA,IDARCHIVO) TABLESPACE &1;
	CREATE INDEX ASGSUSRCSARCH2 ON ASGSUSRCSARCH(IDUSRCSALA) TABLESPACE &1;

	-- Crear tabla de registro de consultas
	CREATE TABLE ASGSREGCSALA (
     ID					VARCHAR2 (32) NOT NULL,
     IDUSRCSALA			VARCHAR2 (32) NOT NULL,
     FENTRADA				DATE NOT NULL,
     FSALIDA				DATE,
     NUMDOCIDENTIFICACION	VARCHAR2 (32) NOT NULL,
     NOMBREAPELLIDOS		VARCHAR2 (254) NOT NULL,
     IDSCAUSR				VARCHAR2 (32),
     IDARCHIVO				VARCHAR2 (32) NOT NULL,
     MESAASIGNADA			VARCHAR2 (254) NOT NULL
	);

	-- Crear índices de la tabla de registro de consultas
	CREATE UNIQUE INDEX ASGSREGCSALA1 ON ASGSREGCSALA(ID) TABLESPACE &1;
	CREATE INDEX ASGSREGCSALA2 ON ASGSREGCSALA(IDUSRCSALA) TABLESPACE &1;
	CREATE INDEX ASGSREGCSALA3 ON ASGSREGCSALA(NUMDOCIDENTIFICACION) TABLESPACE &1;

	--Añadir columna IDUSRCSALA
	ALTER TABLE ASGPCONSULTA ADD IDUSRCSALA VARCHAR2(32);

	--Añadir columna IDUSRCSALA a la tabla de TEMAS
	ALTER TABLE ASGPTEMA ADD IDUSRCSALA VARCHAR2(32);

COMMIT;