-- /***************************/
-- /* Versión 4.7             */
-- /***************************/

	/*****************************************************/
	/*** IMPORTANTE: modificar el usuario de abajo por ***/
	/*** el usuario de base de datos de archidoc       ***/
	/*****************************************************/

CREATE FUNCTION [dbo].[GETCODREF](@IDELEMENTO VARCHAR(32),@SEPARATOR VARCHAR(1))
RETURNS VARCHAR(1024)
AS
BEGIN
    DECLARE @ELEMENTOS TABLE (ID VARCHAR, CODIGO VARCHAR, IDPADRE VARCHAR);
	DECLARE @AUXCODREFERENCIA VARCHAR(1024);
	DECLARE @ID VARCHAR(32);
	DECLARE @CODIGO VARCHAR(128);
	DECLARE @IDPADRE VARCHAR(32);

	IF (@IDELEMENTO IS NULL) BEGIN
	 	SET @AUXCODREFERENCIA = NULL;
	END	ELSE BEGIN
		SET @AUXCODREFERENCIA = '';
		DECLARE ELEMENTOS CURSOR FOR
			WITH CTE_ELEMENTOS (ID, CODIGO, IDPADRE) AS
			(
				SELECT ID, CODIGO, IDPADRE FROM ASGFELEMENTOCF WHERE ID = @IDELEMENTO
				UNION ALL
				SELECT A.ID, A.CODIGO, A.IDPADRE FROM ASGFELEMENTOCF A
				INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
			)
			SELECT ID, CODIGO, IDPADRE FROM CTE_ELEMENTOS;

		OPEN ELEMENTOS;
		FETCH NEXT FROM ELEMENTOS INTO @ID, @CODIGO, @IDPADRE;

		WHILE @@FETCH_STATUS = 0 BEGIN
			IF (@CODIGO IS NOT NULL) BEGIN
				IF (LEN(@CODIGO) > 0) BEGIN
					IF (@AUXCODREFERENCIA = '') BEGIN
						SET @AUXCODREFERENCIA = @CODIGO;
					END ELSE BEGIN
						SET @AUXCODREFERENCIA = @CODIGO + @SEPARATOR + @AUXCODREFERENCIA;
					END
				END
			END
			FETCH NEXT FROM ELEMENTOS INTO @ID, @CODIGO, @IDPADRE;
		END

		CLOSE ELEMENTOS;
		DEALLOCATE ELEMENTOS;

		IF (@AUXCODREFERENCIA = '') BEGIN
			SET @AUXCODREFERENCIA=NULL;
		END ELSE BEGIN
			DECLARE @CODPAIS VARCHAR(16);
			DECLARE @CODCOMUNIDAD VARCHAR(16);
			DECLARE @CODARCHIVO VARCHAR(32);

			SELECT @CODPAIS=CODPAIS, @CODCOMUNIDAD=CODCOMUNIDAD, @CODARCHIVO=CODARCHIVO FROM ASGFELEMENTOCF ASGFELEMENTOCF, ASGFFONDO ASGFFONDO
			WHERE	ASGFELEMENTOCF.ID=@IDELEMENTO AND
					ASGFELEMENTOCF.IDFONDO=ASGFFONDO.IDELEMENTOCF;

			IF(@CODPAIS IS NOT NULL AND @CODPAIS <> '') BEGIN
				SET @AUXCODREFERENCIA = @CODPAIS + @SEPARATOR + @CODCOMUNIDAD + @SEPARATOR + @CODARCHIVO + @SEPARATOR + @AUXCODREFERENCIA;
			END
		END
		IF (@AUXCODREFERENCIA = '') BEGIN
			SET @AUXCODREFERENCIA=NULL;
		END
	END
    RETURN @AUXCODREFERENCIA;
END;
GO

CREATE FUNCTION [dbo].[GETFINCODREFPADRE](@IDELEMENTO VARCHAR(32),@SEPARATOR VARCHAR(1))
RETURNS VARCHAR(1024)
AS
BEGIN

	DECLARE @AUXFINALCODREFPADRE VARCHAR(1024);
	DECLARE @CODIGOREFERENCIAELEMENTOPADRE VARCHAR(1024);
	DECLARE @CODIGOREFERENCIAFONDO VARCHAR(1024);
	DECLARE @TIPO SMALLINT;

	IF (@IDELEMENTO IS NULL) BEGIN
		SET @AUXFINALCODREFPADRE = NULL;
	END ELSE BEGIN
		SET @AUXFINALCODREFPADRE = '';
		SET @TIPO = -1;


		SET @TIPO=(SELECT TIPO
			FROM ASGFELEMENTOCF
			WHERE ID = @IDELEMENTO);

		IF (@TIPO IN (-1,2,6)) BEGIN
			SET @AUXFINALCODREFPADRE = NULL;
		END ELSE BEGIN

			SELECT @CODIGOREFERENCIAELEMENTOPADRE=dbo.GETCODREF(IDPADRE,@SEPARATOR), @CODIGOREFERENCIAFONDO=dbo.GETCODREF(IDFONDO,@SEPARATOR)
			FROM ASGFELEMENTOCF
			WHERE ID = @IDELEMENTO;

			IF (LEN(@CODIGOREFERENCIAFONDO)>0) BEGIN
			   SET @AUXFINALCODREFPADRE = REPLACE(@CODIGOREFERENCIAELEMENTOPADRE,@CODIGOREFERENCIAFONDO + @SEPARATOR,'');
			   SET @AUXFINALCODREFPADRE = REPLACE(@AUXFINALCODREFPADRE,@CODIGOREFERENCIAFONDO,'');
			END ELSE BEGIN
			   SET @AUXFINALCODREFPADRE = @CODIGOREFERENCIAELEMENTOPADRE;
			END;
		END;
	END;

	IF (LEN(@AUXFINALCODREFPADRE)=0) BEGIN
		SET @AUXFINALCODREFPADRE = NULL;
	END;

    RETURN @AUXFINALCODREFPADRE;
END;
GO

CREATE PROCEDURE [dbo].[UPDATECODREF] ( @ROOT VARCHAR(32),@SEPARATOR VARCHAR(1),@UPDTABLES VARCHAR(1)) AS
BEGIN

	-- Este procedimiento requiere que se establezca el idpadre antes de llamar
	-- para actualizar los códigos de referencia y el resto de campos

	IF(@ROOT IS NOT NULL) BEGIN
		DECLARE @TIPO_ELEMENTO SMALLINT;

		SET	@TIPO_ELEMENTO=(SELECT TIPO FROM ASGFELEMENTOCF WHERE ID=@ROOT);

		IF (@TIPO_ELEMENTO IS NOT NULL) BEGIN

			IF ((@TIPO_ELEMENTO IN (2,3,4,5,6)) AND (@UPDTABLES='S')) BEGIN

				DECLARE @IDFONDO VARCHAR(32);
				DECLARE @CODREFERENCIAFONDO VARCHAR(1024);

				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO, CODREFERENCIA) AS
				(
					SELECT ID, IDPADRE, TIPO, CODREFERENCIA FROM ASGFELEMENTOCF WHERE ID = @ROOT
					UNION ALL
					SELECT A.ID, A.IDPADRE, A.TIPO, A.CODREFERENCIA FROM ASGFELEMENTOCF A
					INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
				)
				SELECT @IDFONDO=CTE.ID, @CODREFERENCIAFONDO=dbo.GETCODREF(CTE.ID,@SEPARATOR)
				FROM CTE_ELEMENTOS CTE
				WHERE CTE.TIPO=2;

				-- Actualizar el idfondo a todos sus hijos
				WITH CTE_ELEMENTOS (ID, IDPADRE) AS
				(
						SELECT ID, IDPADRE FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFELEMENTOCF SET IDFONDO=@IDFONDO WHERE ID IN (SELECT ID FROM CTE_ELEMENTOS);

				-- Actualizar el idfondo a todas sus series
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFSERIE SET IDFONDO=@IDFONDO WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=4);

				-- Actualizar el idfondo a todas las unidades documentales
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFUNIDADDOC SET IDFONDO=@IDFONDO WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);

				-- Actualizar la identificacion a todas las unidades documentales
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGDUDOCENUI SET IDENTIFICACION=@CODREFERENCIAFONDO + '-'+ SIGNATURAUDOC WHERE IDUNIDADDOC IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);

				-- Actualizar la identificacion de las unidades de instalación
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGDUINSTALACION SET IDENTIFICACION=@CODREFERENCIAFONDO + '.'+ SIGNATURAUI WHERE ID IN (SELECT ASGDUDOCENUI.IDUINSTALACION FROM CTE_ELEMENTOS CTE, ASGDUDOCENUI ASGDUDOCENUI WHERE CTE.TIPO=6 AND CTE.ID=ASGDUDOCENUI.IDUNIDADDOC);

			END;

			IF ((@TIPO_ELEMENTO IN (6)) AND (@UPDTABLES='S')) BEGIN

				DECLARE @IDSERIE VARCHAR(32);

				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
					SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
					UNION ALL
					SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
					INNER JOIN CTE_ELEMENTOS CTE ON A.ID = CTE.IDPADRE
				)
				SELECT @IDSERIE=CTE.ID
				FROM CTE_ELEMENTOS CTE
				WHERE CTE.TIPO=4;

				-- Actualizar el idserie a las unidades documentales
				WITH CTE_ELEMENTOS (ID, IDPADRE, TIPO) AS
				(
						SELECT ID, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
				UPDATE ASGFUNIDADDOC SET IDSERIE=@IDSERIE WHERE IDELEMENTOCF IN (SELECT ID FROM CTE_ELEMENTOS WHERE TIPO=6);
			END;

			IF (@TIPO_ELEMENTO IN (6)) BEGIN
				UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ROOT,@SEPARATOR), FINALCODREFPADRE=dbo.GETFINCODREFPADRE(@ROOT,@SEPARATOR)
				WHERE ID=@ROOT;
			END ELSE BEGIN
				DECLARE @ID VARCHAR(32);
				DECLARE @TIPO SMALLINT;
				DECLARE ELEMENTOS_NO_SERIE CURSOR FOR
					WITH CTE_ELEMENTOS (ID, CODIGO, IDPADRE, TIPO) AS
					(
						SELECT ID, CODIGO, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.CODIGO, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
					SELECT ID, TIPO FROM CTE_ELEMENTOS CTE
					WHERE CTE.TIPO NOT IN (4,6);

				OPEN ELEMENTOS_NO_SERIE;

				FETCH NEXT FROM ELEMENTOS_NO_SERIE INTO @ID, @TIPO;

				WHILE @@FETCH_STATUS = 0 BEGIN
					UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ID,@SEPARATOR), FINALCODREFPADRE=dbo.GETFINCODREFPADRE(@ID,@SEPARATOR)
					WHERE ID=@ID;
					FETCH NEXT FROM ELEMENTOS_NO_SERIE INTO @ID, @TIPO;
				END

				CLOSE ELEMENTOS_NO_SERIE;
				DEALLOCATE ELEMENTOS_NO_SERIE;

				DECLARE ELEMENTOS_SERIE CURSOR FOR
					WITH CTE_ELEMENTOS (ID, CODIGO, IDPADRE, TIPO) AS
					(
						SELECT ID, CODIGO, IDPADRE, TIPO FROM ASGFELEMENTOCF WHERE ID = @ROOT
						UNION ALL
						SELECT A.ID, A.CODIGO, A.IDPADRE, A.TIPO FROM ASGFELEMENTOCF A
						INNER JOIN CTE_ELEMENTOS CTE ON A.IDPADRE = CTE.ID
					)
					SELECT ID, TIPO FROM CTE_ELEMENTOS CTE
					WHERE CTE.TIPO=4;

				OPEN ELEMENTOS_SERIE;

				FETCH NEXT FROM ELEMENTOS_SERIE INTO @ID, @TIPO;

				WHILE @@FETCH_STATUS = 0 BEGIN

					UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ID,@SEPARATOR), FINALCODREFPADRE=dbo.GETFINCODREFPADRE(@ID,@SEPARATOR)
					WHERE ID=@ID;
					UPDATE ASGFELEMENTOCF SET CODREFFONDO=COALESCE(dbo.GETCODREF(IDFONDO,@SEPARATOR),NULL), CODREFERENCIA = dbo.GETCODREF(@ID,@SEPARATOR) + @SEPARATOR + CODIGO, FINALCODREFPADRE=NULL
					WHERE IDPADRE=@ID;
					FETCH NEXT FROM ELEMENTOS_SERIE INTO @ID, @TIPO;
				END

				CLOSE ELEMENTOS_SERIE;
				DEALLOCATE ELEMENTOS_SERIE;
			END;
		END;
	END;
END;
GO

DECLARE @usuario VARCHAR(50);

--SET @usuario = N'archidoc';
SET @usuario = N'nombreusuario';

--FUNCIONES
exec ('grant execute on GETCODREF           		to '+ @usuario);
exec ('grant execute on GETFINCODREFPADRE      		to '+ @usuario);
exec ('grant execute on UPDATECODREF           		to '+ @usuario);