-- /***************************/
-- /* Actualización 4.3->4.4             */
-- /***************************/

	-- Insertar la versión actual de bd
	INSERT INTO AGINFOSISTEMA (NOMBRE,VALOR,FECHAACTUALIZACION) VALUES ('VERSIONBD','4.3->4.4',now());

	-- Crear las funciones de actualización del código de referencia
	CREATE OR REPLACE FUNCTION GETCODREF(VARCHAR(32), VARCHAR(1))
	  RETURNS VARCHAR(1024) AS
	$BODY$
	DECLARE
		IDELEMENTO ALIAS FOR $1;
		SEPARATOR ALIAS FOR $2;
		AUXCODREFERENCIA VARCHAR(1024);
		CODIGO VARCHAR(128);
		CODPAIS VARCHAR(16);
		CODCOMUNIDAD VARCHAR(16);
		CODARCHIVO VARCHAR(32);

		ELEMENTOS REFCURSOR;
		FONDO REFCURSOR;

	BEGIN

		IF (IDELEMENTO IS NULL) THEN
		 	AUXCODREFERENCIA := NULL;
		ELSE
			AUXCODREFERENCIA := NULL;
			CODPAIS := NULL;

			OPEN ELEMENTOS FOR EXECUTE
				'SELECT ASGFELEMENTOCF.CODIGO FROM CONNECTBY(''ASGFELEMENTOCF'', ''IDPADRE'', ''ID'', ''' || IDELEMENTO || ''', 0)
				AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
				WHERE T.KEYID = ASGFELEMENTOCF.ID
				ORDER BY LEVEL';

			FETCH ELEMENTOS INTO CODIGO;

			WHILE FOUND LOOP
				IF (CODIGO IS NOT NULL) THEN
					IF (AUXCODREFERENCIA IS NULL) THEN
						AUXCODREFERENCIA := CODIGO;
					ELSE
						AUXCODREFERENCIA := CODIGO || SEPARATOR || AUXCODREFERENCIA;
					END IF;
				END IF;
				FETCH ELEMENTOS INTO CODIGO;
			END LOOP;
			CLOSE ELEMENTOS;

			IF (LENGTH(AUXCODREFERENCIA)>0) THEN

				OPEN FONDO FOR EXECUTE
					'SELECT CODPAIS, CODCOMUNIDAD, CODARCHIVO
					FROM ASGFELEMENTOCF ASGFELEMENTOCF, ASGFFONDO ASGFFONDO
					WHERE	ASGFELEMENTOCF.ID=''' || IDELEMENTO || '''AND
							ASGFELEMENTOCF.IDFONDO=ASGFFONDO.IDELEMENTOCF';

				FETCH FONDO INTO CODPAIS, CODCOMUNIDAD, CODARCHIVO;
				IF (LENGTH(CODPAIS)>0) THEN
					AUXCODREFERENCIA := CODPAIS || SEPARATOR || CODCOMUNIDAD || SEPARATOR || CODARCHIVO || SEPARATOR|| AUXCODREFERENCIA;
				END IF;

				CLOSE FONDO;

			END IF;
		END IF;

		IF (LENGTH(AUXCODREFERENCIA)=0) THEN
			AUXCODREFERENCIA := NULL;
		END IF;

		RETURN AUXCODREFERENCIA;

	END;
	$BODY$
	  LANGUAGE 'plpgsql' VOLATILE;

	CREATE OR REPLACE FUNCTION GETFINCODREFPADRE (VARCHAR(32),VARCHAR(1))
	RETURNS VARCHAR(1024) AS
	$BODY$
	DECLARE

		IDELEMENTO ALIAS FOR $1;
		SEPARATOR ALIAS FOR $2;
	   	ELEMENTOCF REFCURSOR;
		CODSREFERENCIAELEMENTO REFCURSOR;
		AUXFINALCODREFPADRE VARCHAR(1024);
		CODIGOREFERENCIAELEMENTOPADRE VARCHAR(1024);
		CODIGOREFERENCIAFONDO VARCHAR(1024);
		IDFONDO VARCHAR(32);
		TIPO SMALLINT;

	BEGIN

		IF (IDELEMENTO IS NULL) THEN
			AUXFINALCODREFPADRE := NULL;
		ELSE
			TIPO:=-1;

			OPEN ELEMENTOCF FOR EXECUTE
				'SELECT TIPO
				FROM ASGFELEMENTOCF
				WHERE ID = ''' || IDELEMENTO || '''';

			FETCH ELEMENTOCF INTO TIPO;
			CLOSE ELEMENTOCF;

			IF (TIPO IN (-1,2,6)) THEN
				AUXFINALCODREFPADRE := NULL;
			ELSE
				OPEN CODSREFERENCIAELEMENTO FOR EXECUTE
					'SELECT GETCODREF(IDPADRE,''' || SEPARATOR || ''') AS CODIGOREFERENCIAELEMENTOPADRE, GETCODREF(IDFONDO,''' || SEPARATOR || ''') AS CODIGOREFERENCIAFONDO
					FROM ASGFELEMENTOCF
					WHERE ID = ''' || IDELEMENTO || '''';

				FETCH CODSREFERENCIAELEMENTO INTO CODIGOREFERENCIAELEMENTOPADRE, CODIGOREFERENCIAFONDO;
				CLOSE CODSREFERENCIAELEMENTO;

				IF (LENGTH(CODIGOREFERENCIAFONDO)>0) THEN
				   AUXFINALCODREFPADRE := REPLACE(CODIGOREFERENCIAELEMENTOPADRE,CODIGOREFERENCIAFONDO || SEPARATOR,'');
				   AUXFINALCODREFPADRE := REPLACE(AUXFINALCODREFPADRE,CODIGOREFERENCIAFONDO,'');
				ELSE
				   AUXFINALCODREFPADRE := CODIGOREFERENCIAELEMENTOPADRE;
				END IF;
			END IF;
		END IF;

		IF (LENGTH(AUXFINALCODREFPADRE)=0) THEN
			AUXFINALCODREFPADRE := NULL;
		END IF;

	    RETURN AUXFINALCODREFPADRE;
	END;
	$BODY$
	  LANGUAGE 'plpgsql' VOLATILE;

	CREATE OR REPLACE FUNCTION UPDATECODREF ( VARCHAR(32), VARCHAR(1), VARCHAR(1) )
	RETURNS VOID AS
	$BODY$
	DECLARE

		ROOT ALIAS FOR $1;
		SEPARATOR ALIAS FOR $2;
		UPDTABLES ALIAS FOR $3;
		CODREFFONDO_CALCULADO VARCHAR(1024);
		CODREFERENCIA_CALCULADO VARCHAR(1024);
		FINALCODREFPADRE_CALCULADO VARCHAR(1024);
		ID_BUCLE VARCHAR(32);
		IDSERIE_CALCULADO VARCHAR(32);
		IDFONDO_CALCULADO VARCHAR(32);
		CODREFERENCIAFONDO_CALCULADO VARCHAR(32);
		TIPO_ELEMENTO SMALLINT;

		ELEMENTOS CURSOR IS
			SELECT ASGFELEMENTOCF.ID, ASGFELEMENTOCF.CODIGO
				FROM CONNECTBY('ASGFELEMENTOCF', 'ID', 'IDPADRE', ROOT, 0)
				AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
				WHERE T.KEYID = ASGFELEMENTOCF.ID
				ORDER BY LEVEL;

		CODSREFERENCIA CURSOR (IDELEMENTO VARCHAR(32)) IS
			SELECT COALESCE(GETCODREF(IDFONDO, SEPARATOR),NULL) AS CODREFFONDO,
			GETCODREF(IDELEMENTO, SEPARATOR) AS CODREFERENCIA,
			GETFINCODREFPADRE(IDELEMENTO, SEPARATOR) AS FINALCODREFPADRE
			FROM ASGFELEMENTOCF WHERE ID=IDELEMENTO;

		ELEMENTO CURSOR IS
			SELECT TIPO FROM ASGFELEMENTOCF WHERE ID=ROOT;

		SERIE CURSOR IS
			SELECT ASGFELEMENTOCF.ID
				FROM CONNECTBY('ASGFELEMENTOCF', 'IDPADRE', 'ID', ROOT, 0)
				AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
				WHERE T.KEYID = ASGFELEMENTOCF.ID
				AND ASGFELEMENTOCF.TIPO=4
				ORDER BY LEVEL;

		FONDO CURSOR IS
			SELECT ASGFELEMENTOCF.ID, ASGFELEMENTOCF.CODREFERENCIA
				FROM CONNECTBY('ASGFELEMENTOCF', 'IDPADRE', 'ID', ROOT, 0)
				AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
				WHERE T.KEYID = ASGFELEMENTOCF.ID
				AND ASGFELEMENTOCF.TIPO=2
				ORDER BY LEVEL;

	BEGIN
		   IF (ROOT IS NOT NULL) THEN

			OPEN ELEMENTO;
			FETCH ELEMENTO INTO TIPO_ELEMENTO;
			CLOSE ELEMENTO;

			IF (TIPO_ELEMENTO IS NOT NULL) THEN

				IF ((TIPO_ELEMENTO IN (2,3,4,5,6)) AND (UPDTABLES='S')) THEN
					OPEN FONDO;
					FETCH FONDO INTO IDFONDO_CALCULADO, CODREFERENCIAFONDO_CALCULADO;
					CLOSE FONDO;

					-- Actualizar el idfondo a todos sus hijos
					UPDATE ASGFELEMENTOCF SET IDFONDO=IDFONDO_CALCULADO WHERE ID IN
					(
						SELECT ASGFELEMENTOCF.ID
						FROM CONNECTBY('ASGFELEMENTOCF', 'ID', 'IDPADRE', ROOT, 0)
						AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
						WHERE T.KEYID = ASGFELEMENTOCF.ID
						ORDER BY LEVEL
					);

					-- Actualizar el idfondo a todas sus series
					UPDATE ASGFSERIE SET IDFONDO=IDFONDO_CALCULADO WHERE IDELEMENTOCF IN
					(
						SELECT ASGFELEMENTOCF.ID
						FROM CONNECTBY('ASGFELEMENTOCF', 'ID', 'IDPADRE', ROOT, 0)
						AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
						WHERE T.KEYID = ASGFELEMENTOCF.ID
						AND ASGFELEMENTOCF.TIPO=4
						ORDER BY LEVEL
					);

					-- Actualizar el idfondo a todas las unidades documentales
					UPDATE ASGFUNIDADDOC SET IDFONDO=IDFONDO_CALCULADO WHERE IDELEMENTOCF IN
					(
						SELECT ASGFELEMENTOCF.ID
						FROM CONNECTBY('ASGFELEMENTOCF', 'ID', 'IDPADRE', ROOT, 0)
						AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
						WHERE T.KEYID = ASGFELEMENTOCF.ID
						AND ASGFELEMENTOCF.TIPO=6
						ORDER BY LEVEL
					);

					-- Actualizar la identificacion a todas las unidades documentales
					UPDATE ASGDUDOCENUI SET IDENTIFICACION=CODREFERENCIAFONDO_CALCULADO || '-' || SIGNATURAUDOC WHERE IDUNIDADDOC IN
					(
						SELECT ASGFELEMENTOCF.ID
						FROM CONNECTBY('ASGFELEMENTOCF', 'ID', 'IDPADRE', ROOT, 0)
						AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
						WHERE T.KEYID = ASGFELEMENTOCF.ID
						AND ASGFELEMENTOCF.TIPO=6
						ORDER BY LEVEL
					);

					-- Actualizar la identificacion de las unidades de instalación
					UPDATE ASGDUINSTALACION SET IDENTIFICACION=CODREFERENCIAFONDO_CALCULADO || '.' || SIGNATURAUI WHERE ID IN
					(
						SELECT ASGDUDOCENUI.IDUINSTALACION
						FROM CONNECTBY('ASGFELEMENTOCF', 'ID', 'IDPADRE', ROOT, 0)
						AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF ASGFELEMENTOCF, ASGDUDOCENUI ASGDUDOCENUI
						WHERE T.KEYID = ASGFELEMENTOCF.ID
						AND ASGFELEMENTOCF.TIPO=6
						AND ASGFELEMENTOCF.ID=ASGDUDOCENUI.IDUNIDADDOC
						ORDER BY LEVEL
					);

				END IF;

				IF ((TIPO_ELEMENTO IN (6)) AND (UPDTABLES='S')) THEN
					OPEN SERIE;
					FETCH SERIE INTO IDSERIE_CALCULADO;
					CLOSE SERIE;

					UPDATE ASGFUNIDADDOC SET IDSERIE=IDSERIE_CALCULADO WHERE IDELEMENTOCF IN
					(
						SELECT ASGFELEMENTOCF.ID
						FROM CONNECTBY('ASGFELEMENTOCF', 'ID', 'IDPADRE', ROOT, 0)
						AS T(KEYID TEXT, PARENT_KEYID TEXT, LEVEL INT), ASGFELEMENTOCF
						WHERE T.KEYID = ASGFELEMENTOCF.ID
						AND ASGFELEMENTOCF.TIPO=6
						ORDER BY LEVEL
					);
				END IF;

				OPEN ELEMENTOS;
				FETCH ELEMENTOS INTO ID_BUCLE;

				WHILE FOUND LOOP

					OPEN CODSREFERENCIA(ID_BUCLE);
					FETCH CODSREFERENCIA INTO CODREFFONDO_CALCULADO, CODREFERENCIA_CALCULADO, FINALCODREFPADRE_CALCULADO;
					CLOSE CODSREFERENCIA;
					UPDATE ASGFELEMENTOCF SET CODREFFONDO=CODREFFONDO_CALCULADO, CODREFERENCIA=CODREFERENCIA_CALCULADO, FINALCODREFPADRE=FINALCODREFPADRE_CALCULADO WHERE ID=ID_BUCLE;

					FETCH ELEMENTOS INTO ID_BUCLE;
				END LOOP;

				CLOSE ELEMENTOS;
			END IF;
		END IF;
	END;
	$BODY$
	  LANGUAGE 'plpgsql' VOLATILE;

	-- Crear tabla de Edificios
	CREATE TABLE ASGSEDIFICIO (
	  ID			VARCHAR (32) NOT NULL,
	  NOMBRE        VARCHAR (64) NOT NULL,
	  UBICACION     VARCHAR (254),
	  IDARCHIVO   	VARCHAR (32) NOT NULL
	);

	-- Crear índices de la tabla de Edificios
	CREATE UNIQUE INDEX ASGSEDIFICIO1 ON ASGSEDIFICIO(ID);
	CREATE UNIQUE INDEX ASGSEDIFICIO2 ON ASGSEDIFICIO(NOMBRE);

	-- Crear tabla de Salas
	CREATE TABLE ASGSSALA (
	  ID	 	  	  		VARCHAR (32) NOT NULL,
	  NOMBRE          		VARCHAR (64) NOT NULL,
	  DESCRIPCION     		VARCHAR (254),
	  IDEDIFICIO   	  		VARCHAR (32) NOT NULL,
	  EQUIPOINFORMATICO     CHAR (1) NOT NULL
	);

	-- Crear índices de la tabla de Salas
	CREATE UNIQUE INDEX ASGSSALA1 ON ASGSSALA(ID);
	CREATE UNIQUE INDEX ASGSSALA2 ON ASGSSALA(IDEDIFICIO,NOMBRE);
	CREATE INDEX ASGSSALA3 ON ASGSSALA(IDEDIFICIO);

	-- Crear tabla de Mesas
	CREATE TABLE ASGSMESA (
	  ID	 	  	  VARCHAR (32) NOT NULL,
	  CODIGO          VARCHAR (64) NOT NULL,
	  NUMORDEN	  	  INTEGER NOT NULL,
	  IDSALA   	  	  VARCHAR (32) NOT NULL,
	  ESTADO          CHAR (1) NOT NULL,
	  FECHAESTADO     TIMESTAMP NOT NULL,
	  IDUSRCSALA   	  VARCHAR (32)
	);

	-- Crear índices de la tabla Mesas
	CREATE INDEX ASGSMESA1 ON ASGSMESA(IDSALA);
	CREATE UNIQUE INDEX ASGSMESA2 ON ASGSMESA(IDSALA,CODIGO);
	CREATE UNIQUE INDEX ASGSMESA3 ON ASGSMESA(IDSALA,NUMORDEN);
	CREATE INDEX ASGSMESA4 ON ASGSMESA(ESTADO);

	-- Crear tabla de usuarios investigadores de consulta de sala
	CREATE TABLE ASGSUSRCSALA (
	  ID	 	  	  			VARCHAR (32) NOT NULL,
	  TIPODOCIDENTIFICACION     INTEGER NOT NULL,
	  NUMDOCIDENTIFICACION		VARCHAR (32) NOT NULL,
	  NOMBRE			  	    VARCHAR (64) NOT NULL,
      APELLIDOS			  	    VARCHAR (254) NOT NULL,
	  NACIONALIDAD	   	  	    VARCHAR (64),
	  TELEFONOS					VARCHAR (128),
	  EMAIL						VARCHAR (128),
	  DIRECCION		            VARCHAR (254),
	  FECHAALTA				    TIMESTAMP NOT NULL,
	  VIGENTE					CHAR (1) NOT NULL,
	  IDSCAUSR					VARCHAR (32)
	);

	-- Crear índices de la tabla usuarios investigadores
	CREATE UNIQUE INDEX ASGSUSRCSALA1 ON ASGSUSRCSALA(ID);
	CREATE INDEX ASGSUSRCSALA2 ON ASGSUSRCSALA(NUMDOCIDENTIFICACION);
	CREATE INDEX ASGSUSRCSALA3 ON ASGSUSRCSALA(VIGENTE);

	-- Crear tabla relación usuarios consulta y archivos
	CREATE TABLE ASGSUSRCSARCH (
	  IDUSRCSALA  	  VARCHAR (32) NOT NULL,
	  IDARCHIVO       VARCHAR (64) NOT NULL
	);

	-- Crear índices de la tabla de relación entre usuarios y archivos de consulta
	CREATE UNIQUE INDEX ASGSUSRCSARCH1 ON ASGSUSRCSARCH(IDUSRCSALA,IDARCHIVO);
	CREATE INDEX ASGSUSRCSARCH2 ON ASGSUSRCSARCH(IDUSRCSALA);

	-- Crear tabla de registro de consultas
	CREATE TABLE ASGSREGCSALA (
	  ID		  	  		VARCHAR (32) NOT NULL,
	  IDUSRCSALA  	  		VARCHAR (32) NOT NULL,
	  FENTRADA	      		TIMESTAMP NOT NULL,
	  FSALIDA	      		TIMESTAMP,
	  NUMDOCIDENTIFICACION	VARCHAR (32) NOT NULL,
	  NOMBREAPELLIDOS		VARCHAR (254) NOT NULL,
	  IDSCAUSR  	  		VARCHAR (32),
	  IDARCHIVO  	  		VARCHAR (32) NOT NULL,
	  MESAASIGNADA			VARCHAR (254) NOT NULL
	);

	-- Crear índices de la tabla de registro de consultas
	CREATE UNIQUE INDEX ASGSREGCSALA1 ON ASGSREGCSALA(ID);
	CREATE INDEX ASGSREGCSALA2 ON ASGSREGCSALA(IDUSRCSALA);
	CREATE INDEX ASGSREGCSALA3 ON ASGSREGCSALA(NUMDOCIDENTIFICACION);


	--Añadir columna IDUSRCSALA a la tabla de consultas
	ALTER TABLE ASGPCONSULTA ADD IDUSRCSALA VARCHAR(32);

	--Añadir columna IDUSRCSALA a la tabla de temas
	ALTER TABLE ASGPTEMA ADD IDUSRCSALA VARCHAR(32);