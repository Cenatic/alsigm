#line 1 "Upload.cpp"







#line 1 "stdafx.h"








#pragma once
#line 11 "stdafx.h"




#line 16 "stdafx.h"


#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


















	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"























#pragma component(mintypeinfo, on)
#line 26 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"


















#line 20 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"





















































#line 74 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"








#pragma component(browser, off, references, "ASSERT")
#pragma component(browser, off, references, "AfxAssertFailedLine")
#pragma component(browser, off, references, "AfxDebugBreak")
#pragma component(browser, off, references, "BOOL")
#pragma component(browser, off, references, "BYTE")
#pragma component(browser, off, references, "DECLSPEC_IMPORT")
#pragma component(browser, off, references, "DWORD")
#pragma component(browser, off, references, "FALSE")
#pragma component(browser, off, references, "FAR")
#pragma component(browser, off, references, "LPSTR")
#pragma component(browser, off, references, "LPTSTR")
#pragma component(browser, off, references, "LPCSTR")
#pragma component(browser, off, references, "LPCTSTR")
#pragma component(browser, off, references, "NULL")
#pragma component(browser, off, references, "PASCAL")
#pragma component(browser, off, references, "THIS_FILE")
#pragma component(browser, off, references, "TRUE")
#pragma component(browser, off, references, "UINT")
#pragma component(browser, off, references, "WINAPI")
#pragma component(browser, off, references, "WORD")
#line 103 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"













	
#line 118 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"









#line 128 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



#line 132 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



#line 136 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"





	
#line 143 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"




































































#line 70 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"



#line 74 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"










































#pragma warning(disable: 4201)  
#line 118 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"


























#line 28 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"





#pragma once
#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

















































#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"




















#line 106 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"



#line 110 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"



#line 114 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"



#line 118 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"



#line 122 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"





#line 128 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"




#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"







#line 142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 143 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"



#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 150 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#pragma warning(push)
#line 153 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"






#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"







#pragma pack(push,8)
#line 34 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"


extern "C" {
#line 38 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"










#line 49 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"
#line 50 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"






#line 57 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"








#line 66 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"
#line 67 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"





typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;











struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
    struct _EXCEPTION_RECORD *ExceptionRecord,
    void * EstablisherFrame,
    struct _CONTEXT *ContextRecord,
    void * DispatcherContext
    );



















#line 118 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"















unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);

#line 138 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"













}
#line 153 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"


#pragma pack(pop)
#line 157 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"

#line 159 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\excpt.h"
#line 158 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"






#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"







#pragma pack(push,8)
#line 34 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"


extern "C" {
#line 38 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"










typedef char *  va_list;
#line 50 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"

#line 52 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"




































































































#line 153 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"



}
#line 158 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"


#pragma pack(pop)
#line 162 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"

#line 164 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdarg.h"
#line 159 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 160 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
















#line 18 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"












extern "C" {
#line 32 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"











typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
#line 51 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"








#line 60 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



#line 65 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



#line 69 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



#line 77 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



#line 81 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"











#line 93 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"






#line 100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



#line 104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
#line 105 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"


























#line 132 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"







#line 140 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





















extern "C" {
#line 24 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"














#pragma once
#line 17 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"






#line 24 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"



extern "C" {
#line 29 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"


















#line 48 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"












typedef unsigned short wchar_t;

#line 63 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"



typedef wchar_t wint_t;
typedef wchar_t wctype_t;

#line 70 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"



#line 74 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"
#line 75 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"



 extern unsigned short _ctype[];
 extern unsigned short *_pctype;

 extern wctype_t *_pwctype;
#line 83 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"
#line 84 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"








                                













 int __cdecl _isctype(int, int);
 int __cdecl isalpha(int);
 int __cdecl isupper(int);
 int __cdecl islower(int);
 int __cdecl isdigit(int);
 int __cdecl isxdigit(int);
 int __cdecl isspace(int);
 int __cdecl ispunct(int);
 int __cdecl isalnum(int);
 int __cdecl isprint(int);
 int __cdecl isgraph(int);
 int __cdecl iscntrl(int);
 int __cdecl toupper(int);
 int __cdecl tolower(int);
 int __cdecl _tolower(int);
 int __cdecl _toupper(int);
 int __cdecl __isascii(int);
 int __cdecl __toascii(int);
 int __cdecl __iscsymf(int);
 int __cdecl __iscsym(int);

#line 128 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"









 int __cdecl iswalpha(wint_t);
 int __cdecl iswupper(wint_t);
 int __cdecl iswlower(wint_t);
 int __cdecl iswdigit(wint_t);
 int __cdecl iswxdigit(wint_t);
 int __cdecl iswspace(wint_t);
 int __cdecl iswpunct(wint_t);
 int __cdecl iswalnum(wint_t);
 int __cdecl iswprint(wint_t);
 int __cdecl iswgraph(wint_t);
 int __cdecl iswcntrl(wint_t);
 int __cdecl iswascii(wint_t);
 int __cdecl isleadbyte(int);

 wchar_t __cdecl towupper(wchar_t);
 wchar_t __cdecl towlower(wchar_t);

 int __cdecl iswctype(wint_t, wctype_t);


 int __cdecl is_wctype(wint_t, wctype_t);



#line 162 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"
#line 163 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"













 extern int __mb_cur_max;

#line 179 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"








































































#line 252 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"

#line 254 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"








































#line 295 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"

#line 297 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"






#line 304 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"
















#line 321 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"

#line 323 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"


}
#line 327 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"


#line 330 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\ctype.h"
#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#line 31 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"








#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


#line 45 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





#line 51 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


#line 54 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"









#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



#line 68 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"








#line 77 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



#line 81 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


















#line 100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



#line 104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef unsigned long POINTER_64_INT;
#line 107 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



#line 113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"






















#pragma once
#line 25 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"


extern "C" {
#line 29 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"

typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;




#line 56 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"

#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"
#line 59 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"

















#line 77 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"











#line 89 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"
    typedef  int INT_PTR, *PINT_PTR;
    typedef  unsigned int UINT_PTR, *PUINT_PTR;

    typedef  long LONG_PTR, *PLONG_PTR;
    typedef  unsigned long ULONG_PTR, *PULONG_PTR;

    

#line 98 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"
#line 99 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"



























































































































































typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef  long SHANDLE_PTR;
typedef  unsigned long HANDLE_PTR;
















#line 275 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"























typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;





typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;





typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;


}
#line 331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"

#line 333 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\basetsd.h"
#line 117 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






#line 124 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






#line 131 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 132 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#line 137 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 140 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



#line 144 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 152 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






#line 159 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 160 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






#line 167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#line 173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 176 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#line 181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 183 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






#line 191 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 192 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





#line 198 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


#line 201 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


typedef void *PVOID;
typedef void *  PVOID64;







#line 214 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
















#line 231 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"








typedef char CHAR;
typedef short SHORT;
typedef long LONG;
#line 243 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






typedef wchar_t WCHAR;    



#line 254 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef WCHAR *PWCHAR;
typedef WCHAR *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR;
typedef WCHAR *LPWSTR, *PWSTR;
typedef WCHAR  *LPUWSTR, *PUWSTR;

typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef const WCHAR  *LPCUWSTR, *PCUWSTR;




typedef CHAR *PCHAR;
typedef CHAR *LPCH, *PCH;

typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR;
typedef CHAR *LPSTR, *PSTR;
typedef const CHAR *LPCSTR, *PCSTR;























typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;

#line 302 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef LPSTR LPTCH, PTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;


#line 309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



typedef SHORT *PSHORT;  
typedef LONG *PLONG;    


typedef void *HANDLE;




#line 322 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
typedef HANDLE *PHANDLE;





typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;





typedef LONG HRESULT;

#line 339 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


    


#line 345 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"









#line 355 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"













#line 369 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
















typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      






















#line 412 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;









typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;














#line 444 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;



#line 455 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    };
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
#line 465 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;



#line 473 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    };
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
#line 483 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;








typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;






















#line 526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"































































#line 590 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"











ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    );


#pragma warning(push)
#line 625 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#pragma warning(disable:4035)               

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
}


#pragma warning(pop)


#line 680 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




























































#line 741 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;





typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"




















#line 22 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#line 29 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"




































#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"








typedef GUID *LPGUID;
#line 77 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"



typedef const GUID *LPCGUID;
#line 82 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"




typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;







#line 104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"







#line 112 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"







#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 122 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"







#line 130 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 131 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"







#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 140 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"

#line 142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"




#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"






#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"



extern "C" {
#line 30 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"

















#line 48 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"













typedef unsigned int size_t;

#line 64 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"







#line 72 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"




#line 77 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"
























        void *  __cdecl memcpy(void *, const void *, size_t);
        int     __cdecl memcmp(const void *, const void *, size_t);
        void *  __cdecl memset(void *, int, size_t);
        char *  __cdecl _strset(char *, int);
        char *  __cdecl strcpy(char *, const char *);
        char *  __cdecl strcat(char *, const char *);
        int     __cdecl strcmp(const char *, const char *);
        size_t  __cdecl strlen(const char *);
#line 110 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"
 void *  __cdecl _memccpy(void *, const void *, int, unsigned int);
 void *  __cdecl memchr(const void *, int, size_t);
 int     __cdecl _memicmp(const void *, const void *, unsigned int);





 void *  __cdecl memmove(void *, const void *, size_t);
#line 120 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"


 char *  __cdecl strchr(const char *, int);
 int     __cdecl _strcmpi(const char *, const char *);
 int     __cdecl _stricmp(const char *, const char *);
 int     __cdecl strcoll(const char *, const char *);
 int     __cdecl _stricoll(const char *, const char *);
 int     __cdecl _strncoll(const char *, const char *, size_t);
 int     __cdecl _strnicoll(const char *, const char *, size_t);
 size_t  __cdecl strcspn(const char *, const char *);
 char *  __cdecl _strdup(const char *);
 char *  __cdecl _strerror(const char *);
 char *  __cdecl strerror(int);
 char *  __cdecl _strlwr(char *);
 char *  __cdecl strncat(char *, const char *, size_t);
 int     __cdecl strncmp(const char *, const char *, size_t);
 int     __cdecl _strnicmp(const char *, const char *, size_t);
 char *  __cdecl strncpy(char *, const char *, size_t);
 char *  __cdecl _strnset(char *, int, size_t);
 char *  __cdecl strpbrk(const char *, const char *);
 char *  __cdecl strrchr(const char *, int);
 char *  __cdecl _strrev(char *);
 size_t  __cdecl strspn(const char *, const char *);
 char *  __cdecl strstr(const char *, const char *);
 char *  __cdecl strtok(char *, const char *);
 char *  __cdecl _strupr(char *);
 size_t  __cdecl strxfrm (char *, const char *, size_t);














 void * __cdecl memccpy(void *, const void *, int, unsigned int);
 int __cdecl memicmp(const void *, const void *, unsigned int);
 int __cdecl strcmpi(const char *, const char *);
 int __cdecl stricmp(const char *, const char *);
 char * __cdecl strdup(const char *);
 char * __cdecl strlwr(char *);
 int __cdecl strnicmp(const char *, const char *, size_t);
 char * __cdecl strnset(char *, int, size_t);
 char * __cdecl strrev(char *);
        char * __cdecl strset(char *, int);
 char * __cdecl strupr(char *);

#line 174 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"







 wchar_t * __cdecl wcscat(wchar_t *, const wchar_t *);
 wchar_t * __cdecl wcschr(const wchar_t *, wchar_t);
 int __cdecl wcscmp(const wchar_t *, const wchar_t *);
 wchar_t * __cdecl wcscpy(wchar_t *, const wchar_t *);
 size_t __cdecl wcscspn(const wchar_t *, const wchar_t *);
 size_t __cdecl wcslen(const wchar_t *);
 wchar_t * __cdecl wcsncat(wchar_t *, const wchar_t *, size_t);
 int __cdecl wcsncmp(const wchar_t *, const wchar_t *, size_t);
 wchar_t * __cdecl wcsncpy(wchar_t *, const wchar_t *, size_t);
 wchar_t * __cdecl wcspbrk(const wchar_t *, const wchar_t *);
 wchar_t * __cdecl wcsrchr(const wchar_t *, wchar_t);
 size_t __cdecl wcsspn(const wchar_t *, const wchar_t *);
 wchar_t * __cdecl wcsstr(const wchar_t *, const wchar_t *);
 wchar_t * __cdecl wcstok(wchar_t *, const wchar_t *);

 wchar_t * __cdecl _wcsdup(const wchar_t *);
 int __cdecl _wcsicmp(const wchar_t *, const wchar_t *);
 int __cdecl _wcsnicmp(const wchar_t *, const wchar_t *, size_t);
 wchar_t * __cdecl _wcsnset(wchar_t *, wchar_t, size_t);
 wchar_t * __cdecl _wcsrev(wchar_t *);
 wchar_t * __cdecl _wcsset(wchar_t *, wchar_t);

 wchar_t * __cdecl _wcslwr(wchar_t *);
 wchar_t * __cdecl _wcsupr(wchar_t *);
 size_t __cdecl wcsxfrm(wchar_t *, const wchar_t *, size_t);
 int __cdecl wcscoll(const wchar_t *, const wchar_t *);
 int __cdecl _wcsicoll(const wchar_t *, const wchar_t *);
 int __cdecl _wcsncoll(const wchar_t *, const wchar_t *, size_t);
 int __cdecl _wcsnicoll(const wchar_t *, const wchar_t *, size_t);







 wchar_t * __cdecl wcsdup(const wchar_t *);
 int __cdecl wcsicmp(const wchar_t *, const wchar_t *);
 int __cdecl wcsnicmp(const wchar_t *, const wchar_t *, size_t);
 wchar_t * __cdecl wcsnset(wchar_t *, wchar_t, size_t);
 wchar_t * __cdecl wcsrev(wchar_t *);
 wchar_t * __cdecl wcsset(wchar_t *, wchar_t);
 wchar_t * __cdecl wcslwr(wchar_t *);
 wchar_t * __cdecl wcsupr(wchar_t *);
 int __cdecl wcsicoll(const wchar_t *, const wchar_t *);

#line 228 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"


#line 231 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"

#line 233 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"


}
#line 237 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"

#line 239 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\string.h"
#line 147 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"



__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}











#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"

















__inline int operator==(const GUID & guidOne, const GUID & guidOther)
{
    return IsEqualGUID(guidOne,guidOther);
}

__inline int operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
#line 202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 203 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 204 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 206 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
#line 785 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 794 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"























































































#line 882 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




























































































































































































#line 1071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




























































































































































































#line 1260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"















#line 1276 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"








#line 1285 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


  











































#line 1332 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
  
#line 1334 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;



















































































































































































































































































































































#line 1680 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"














#line 1695 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
struct _TEB *
NtCurrentTeb(void);
#line 1698 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"











































































































































































































#pragma warning(push)
#line 1903 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#pragma warning(disable:4164)   
                                

#pragma function(_enable)
#pragma function(_disable)
#line 1909 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


#pragma warning(pop)


#line 1915 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 1917 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 1918 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#pragma warning(push)
#line 1924 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#pragma warning (disable:4035)        
_inline PVOID GetFiberData( void ) { __asm {
                                        mov eax, fs:[0x10]
                                        mov eax,[eax]
                                        }
                                     }
_inline PVOID GetCurrentFiber( void ) { __asm mov eax, fs:[0x10] }


#pragma warning(pop)


#line 1937 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 1938 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
































#line 1971 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



typedef struct _FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;











typedef struct _CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} CONTEXT;



typedef CONTEXT *PCONTEXT;



#line 2091 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

#line 2122 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

























































































































































































































































































































































#line 2468 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"










#line 2479 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





































































































































































































































#line 2709 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




































































































































































































































#line 2938 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
























#line 2963 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"













































































































































































































































































































































































typedef struct _EXCEPTION_RECORD {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     







































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 3486 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 3495 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#line 3533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];
#line 3546 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
} SID, *PISID;
#line 3548 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





                                                



#line 3558 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;








































































































































































































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;





















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;








































































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;




typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;


























typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

























































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;


















































typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;












































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;






















































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;









































#line 4491 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 4493 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


















typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;




typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL, *PTOKEN_CONTROL;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;




typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;































#line 4691 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



#line 4695 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


























typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;   
    DWORD MemberLevel;  
    DWORD Flags;        
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;



typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    union {
        PVOID FiberData;
        DWORD Version;
    };
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;
    union {
        DWORD FiberData;
        DWORD Version;
    };
    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;
    union {
        DWORD64 FiberData;
        DWORD Version;
    };
    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;




#line 4776 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"






typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS;
typedef QUOTA_LIMITS *PQUOTA_LIMITS;

typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;


















































































typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;


























typedef struct _SYSTEM_NUMA_INFORMATION {
    DWORD       HighestNodeNumber;
    DWORD       Reserved;
    union {
        ULONGLONG   ActiveProcessorsAffinityMask[16];
        ULONGLONG   AvailableMemory[16];
    };
} SYSTEM_NUMA_INFORMATION, *PSYSTEM_NUMA_INFORMATION;



















































typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD     AllocationProtect;
    DWORD     __alignment1;
    ULONGLONG RegionSize;
    DWORD     State;
    DWORD     Protect;
    DWORD     Type;
    DWORD     __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
























































































































































typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;









typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    GUID   ReparseGuid;
    struct {
        BYTE   DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;












































































typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking     = 1,
    PowerSystemSleeping1   = 2,
    PowerSystemSleeping2   = 3,
    PowerSystemSleeping3   = 4,
    PowerSystemHibernate   = 5,
    PowerSystemShutdown    = 6,
    PowerSystemMaximum     = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;







typedef DWORD EXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;

















typedef struct CM_Power_Data_s {
    DWORD               PD_Size;
    DEVICE_POWER_STATE  PD_MostRecentPowerState;
    DWORD               PD_Capabilities;
    DWORD               PD_D1Latency;
    DWORD               PD_D2Latency;
    DWORD               PD_D3Latency;
    DEVICE_POWER_STATE  PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;



typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,                                   
    LastSleepTime,                                  
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent
} POWER_INFORMATION_LEVEL;







typedef struct {
    DWORD       Granularity;
    DWORD       Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;






typedef struct {
    POWER_ACTION    Action;
    DWORD           Flags;
    DWORD           EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;



















typedef struct {
    BOOLEAN                 Enable;
    BYTE                    Spare[3];
    DWORD                   BatteryLevel;
    POWER_ACTION_POLICY     PowerPolicy;
    SYSTEM_POWER_STATE      MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
















typedef struct _SYSTEM_POWER_POLICY {
    DWORD                   Revision;       

    
    POWER_ACTION_POLICY     PowerButton;
    POWER_ACTION_POLICY     SleepButton;
    POWER_ACTION_POLICY     LidClose;
    SYSTEM_POWER_STATE      LidOpenWake;
    DWORD                   Reserved;

    
    POWER_ACTION_POLICY     Idle;
    DWORD                   IdleTimeout;
    BYTE                    IdleSensitivity;

    
    
    BYTE                    DynamicThrottle;

    BYTE                    Spare2[2];

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;
    SYSTEM_POWER_STATE      ReducedLatencySleep;
    DWORD                   WinLogonFlags;

    
    DWORD                   Spare3;
    DWORD                   DozeS4Timeout;

    
    DWORD                   BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL      DischargePolicy[4];

    
    DWORD                   VideoTimeout;
    BOOLEAN                 VideoDimDisplay;
    DWORD                   VideoReserved[3];

    
    DWORD                   SpindownTimeout;

    
    BOOLEAN                 OptimizeForPower;
    BYTE                    FanThrottleTolerance;
    BYTE                    ForcedThrottle;
    BYTE                    MinThrottle;
    POWER_ACTION_POLICY     OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;


typedef struct _PROCESSOR_POWER_POLICY_INFO {

    
    DWORD                   TimeCheck;                      
    DWORD                   DemoteLimit;                    
    DWORD                   PromoteLimit;                   

    
    BYTE                    DemotePercent;
    BYTE                    PromotePercent;
    BYTE                    Spare[2];

    
    DWORD                   AllowDemotion:1;
    DWORD                   AllowPromotion:1;
    DWORD                   Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD                       Revision;       

    
    BYTE                        DynamicThrottle;
    BYTE                        Spare[3];

    
    DWORD                       Reserved;

    
    
    
    DWORD                       PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;

    
    DWORD                   MinVideoTimeout;
    DWORD                   MaxVideoTimeout;

    
    DWORD                   MinSpindownTimeout;
    DWORD                   MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {
    
    BOOLEAN             PowerButtonPresent;
    BOOLEAN             SleepButtonPresent;
    BOOLEAN             LidPresent;
    BOOLEAN             SystemS1;
    BOOLEAN             SystemS2;
    BOOLEAN             SystemS3;
    BOOLEAN             SystemS4;           
    BOOLEAN             SystemS5;           
    BOOLEAN             HiberFilePresent;
    BOOLEAN             FullWake;
    BOOLEAN             VideoDimPresent;
    BOOLEAN             ApmPresent;
    BOOLEAN             UpsPresent;

    
    BOOLEAN             ThermalControl;
    BOOLEAN             ProcessorThrottle;
    BYTE                ProcessorMinThrottle;
    BYTE                ProcessorMaxThrottle;
    BYTE                spare2[4];

    
    BOOLEAN             DiskSpinDown;
    BYTE                spare3[8];

    
    BOOLEAN             SystemBatteriesPresent;
    BOOLEAN             BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];

    
    SYSTEM_POWER_STATE  AcOnLineWake;
    SYSTEM_POWER_STATE  SoftLidWake;
    SYSTEM_POWER_STATE  RtcWake;
    SYSTEM_POWER_STATE  MinDeviceWakeState; 
    SYSTEM_POWER_STATE  DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN             AcOnLine;
    BOOLEAN             BatteryPresent;
    BOOLEAN             Charging;
    BOOLEAN             Discharging;
    BOOLEAN             Spare1[4];

    DWORD               MaxCapacity;
    DWORD               RemainingCapacity;
    DWORD               Rate;
    DWORD               EstimatedTime;

    DWORD               DefaultAlert1;
    DWORD               DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;










#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 5681 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"







#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 5689 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"









#line 5699 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 5811 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 5812 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;






















































typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
















typedef IMAGE_OPTIONAL_HEADER32             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32            PIMAGE_OPTIONAL_HEADER;


#line 6003 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32                 PIMAGE_NT_HEADERS;
#line 6028 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




























































typedef struct ANON_OBJECT_HEADER {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
} ANON_OBJECT_HEADER;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

































































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 6185 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 6186 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;


































































































#line 6306 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#line 6311 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





#line 6317 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#line 6322 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



#line 6326 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


#line 6329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;



typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 6376 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE  bAuxType;                  
    BYTE  bReserved;                 
    DWORD SymbolTableIndex;
    BYTE  rgbReserved[12];           
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF  *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 6387 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





















typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    };
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;






































































































































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;




#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 6724 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#line 6725 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;





























typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     
    DWORD   AddressOfNames;         
    DWORD   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    BYTE    Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 6809 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;  
        ULONGLONG Function;         
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;    
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 6821 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;      
        DWORD Function;             
        DWORD Ordinal;
        DWORD AddressOfData;        
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG   StartAddressOfRawData;
    ULONGLONG   EndAddressOfRawData;
    ULONGLONG   AddressOfIndex;         
    ULONGLONG   AddressOfCallBacks;     
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;             
    DWORD   AddressOfCallBacks;         
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;












typedef IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;
#line 6887 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            
        DWORD   OriginalFirstThunk;         
    };
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    DWORD   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;



















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        };
        DWORD   Name;
        WORD    Id;
    };
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        };
    };
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    DWORD   LockPrefixTable;            
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    WORD    CSDVersion;
    WORD    Reserved1;
    DWORD   EditList;                   
    DWORD   Reserved[ 1 ];
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    ULONGLONG  DeCommitFreeBlockThreshold;
    ULONGLONG  DeCommitTotalFreeThreshold;
    ULONGLONG  LockPrefixTable;         
    ULONGLONG  MaximumAllocationSize;
    ULONGLONG  VirtualMemoryThreshold;
    ULONGLONG  ProcessAffinityMask;
    DWORD   ProcessHeapFlags;
    WORD    CSDVersion;
    WORD    Reserved1;
    ULONGLONG  EditList;                
    DWORD   Reserved[ 2 ];
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32   IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32  PIMAGE_LOAD_CONFIG_DIRECTORY;
#line 7074 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"










typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindInfoAddress;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;








#line 7125 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"




#line 7130 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

#line 7135 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;















typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    union {
        ULONGLONG   EndOfPrologue;
        ULONGLONG   UnwindInfoAddress;
    };
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD        Signature;
    WORD        Flags;
    DWORD       Size;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       SizeOfImage;
    ULONGLONG   ImageBase;
    
    
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;







#line 7286 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"



                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    DWORD FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;                         
    DWORD NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 7314 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"








typedef struct IMPORT_OBJECT_HEADER {
    WORD    Sig1;                       
    WORD    Sig2;                       
    WORD    Version;
    WORD    Machine;
    DWORD   TimeDateStamp;              
    DWORD   SizeOfData;                 

    union {
        WORD    Ordinal;                
        WORD    Hint;
    };

    WORD    Type : 2;                   
    WORD    NameType : 3;               
    WORD    Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY               =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
    COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,


    COR_VERSION_MAJOR_V2                =2,
    COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR                   =0,
    COR_DELETED_NAME_LENGTH             =8,
    COR_VTABLEGAP_NAME_LENGTH           =8,


    NATIVE_TYPE_MAX_CB                  =1,   
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA             =0x01,
    IMAGE_COR_MIH_EHRVA                 =0x02,    
    IMAGE_COR_MIH_BASICBLOCK            =0x08,


    COR_VTABLE_32BIT                    =0x01,          
    COR_VTABLE_64BIT                    =0x02,          
    COR_VTABLE_FROM_UNMANAGED           =0x04,          
    COR_VTABLE_CALL_MOST_DERIVED        =0x10,          


    IMAGE_COR_EATJ_THUNK_SIZE           =32,            


    
    MAX_CLASS_NAME                      =1024,
    MAX_PACKAGE_NAME                    =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{
    
    DWORD                   cb;              
    WORD                    MajorRuntimeVersion;
    WORD                    MinorRuntimeVersion;
    
    
    IMAGE_DATA_DIRECTORY    MetaData;        
    DWORD                   Flags;           
    DWORD                   EntryPointToken;
    
    
    IMAGE_DATA_DIRECTORY    Resources;
    IMAGE_DATA_DIRECTORY    StrongNameSignature;

    
    IMAGE_DATA_DIRECTORY    CodeManagerTable;
    IMAGE_DATA_DIRECTORY    VTableFixups;
    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;

    
    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;
    
} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

#line 7427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"














#line 7442 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


















#line 7461 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SINGLE_LIST_ENTRY Next;
        WORD   Depth;
        WORD   Sequence;
    };
} SLIST_HEADER, *PSLIST_HEADER;

#line 7472 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 7474 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
RtlFirstEntrySList (
     const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
     PSLIST_HEADER ListHead,
     PSINGLE_LIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD  
__stdcall
RtlQueryDepthSList (
     PSLIST_HEADER ListHead
    );













































__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory (
    const void *Source1,
    const void *Source2,
    SIZE_T Length
    );






















































#line 7625 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"







#line 7633 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 7680 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 7716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


























































ULONGLONG
__stdcall
VerSetConditionMask(
          ULONGLONG   ConditionMask,
          DWORD   TypeMask,
          BYTE    Condition
        );


typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Spare[ 2 ];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;




typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;        
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

typedef void (* RTL_VERIFIER_DLL_LOAD_CALLBACK) (
    PWSTR DllName,
    PVOID DllBase,
    SIZE_T DllSize,
    PVOID Reserved
    );

typedef void (* RTL_VERIFIER_DLL_UNLOAD_CALLBACK) (
    PWSTR DllName,
    PVOID DllBase,
    SIZE_T DllSize,
    PVOID Reserved
    );

typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR {

    PCHAR ThunkName;
    PVOID ThunkOldAddress;
    PVOID ThunkNewAddress;

} RTL_VERIFIER_THUNK_DESCRIPTOR, *PRTL_VERIFIER_THUNK_DESCRIPTOR;

typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR {

    PWCHAR DllName;
    DWORD DllFlags;
    PVOID DllAddress;
    PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;

} RTL_VERIFIER_DLL_DESCRIPTOR, *PRTL_VERIFIER_DLL_DESCRIPTOR;

typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR {

    
    
    

    DWORD Length;        
    PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
    RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
    RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
    
    
    
    
        
    PWSTR VerifierImage;
    DWORD VerifierFlags;
    DWORD VerifierDebug;

} RTL_VERIFIER_PROVIDER_DESCRIPTOR, *PRTL_VERIFIER_PROVIDER_DESCRIPTOR;

























































void
RtlApplicationVerifierStop (
    ULONG_PTR Code,
    PCHAR Message,
    ULONG_PTR Param1, PCHAR Description1,
    ULONG_PTR Param2, PCHAR Description2,
    ULONG_PTR Param3, PCHAR Description3,
    ULONG_PTR Param4, PCHAR Description4
    );

typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );








typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation

} HEAP_INFORMATION_CLASS;


DWORD   
RtlSetHeapInformation (
     PVOID HeapHandle,
     HEAP_INFORMATION_CLASS HeapInformationClass,
     PVOID HeapInformation ,
     SIZE_T HeapInformationLength 
    );

DWORD   
RtlQueryHeapInformation (
     PVOID HeapHandle,
     HEAP_INFORMATION_CLASS HeapInformationClass,
     PVOID HeapInformation ,
     SIZE_T HeapInformationLength ,
     PSIZE_T ReturnLength 
    );











typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );   
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );                 
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD   , PVOID, PVOID); 



typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation                       = 1,
    ActivationContextDetailedInformation                    = 2,
    AssemblyDetailedInformationInActivationContext          = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
    MaxActivationContextInfoClass,

    
    
    
    AssemblyDetailedInformationInActivationContxt           = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt   = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex; 
    DWORD ulFileIndexInAssembly; 
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength; 

    PCWSTR lpFileName;
    PCWSTR lpFilePath;   
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;










typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;      
    DWORD ulManifestPathType;                   
    DWORD ulManifestPathLength;                 
    LARGE_INTEGER liManifestLastWriteTime;      
    DWORD ulPolicyPathType;                     
    DWORD ulPolicyPathLength;                   
    LARGE_INTEGER liPolicyLastWriteTime;        
    DWORD ulMetadataSatelliteRosterIndex;
    
    DWORD ulManifestVersionMajor;               
    DWORD ulManifestVersionMinor;               
    DWORD ulPolicyVersionMajor;                 
    DWORD ulPolicyVersionMinor;                 
    DWORD ulAssemblyDirectoryNameLength;        

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;













































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)
#line 8154 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"
#pragma warning(disable : 4200)
typedef struct _EVENTSFORLOGFILE{
	DWORD			ulSize;
    WCHAR   		szLogicalLogFile[256];        
    DWORD			ulNumRecords;
	EVENTLOGRECORD 	pEventLogRecords[];
}EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

typedef struct _PACKEDEVENTINFO{
    DWORD               ulSize;  
    DWORD               ulNumEventsForLogFile; 
    DWORD 				ulOffsets[];           
}PACKEDEVENTINFO, *PPACKEDEVENTINFO;


#pragma warning(pop)


#line 8173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"





















































                                                    


                                                    


                                                    


                                                    
                                                    


























































                                            






























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;










typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;























































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;











typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;



























#line 8665 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"










#line 8676 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"


}
#line 8680 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 8682 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnt.h"

#line 167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
#line 168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"


typedef UINT_PTR            WPARAM;
typedef LONG_PTR            LPARAM;
typedef LONG_PTR            LRESULT;





#line 179 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



#line 183 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

#line 185 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"










struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;



#line 201 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

typedef WORD                ATOM;

typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;






typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();
#line 220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"




#line 225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"



typedef void * HGDIOBJ;


#line 232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
#line 233 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;


struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
#line 240 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;
#line 244 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
#line 247 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
#line 250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;          
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
#line 256 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;

struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
#line 260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      

struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
#line 267 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;
struct HKL__ { int unused; }; typedef struct HKL__ *HKL;



struct HMONITOR__ { int unused; }; typedef struct HMONITOR__ *HMONITOR;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
#line 279 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
struct HUMPD__ { int unused; }; typedef struct HUMPD__ *HUMPD;
#line 281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"


typedef int HFILE;
typedef HICON HCURSOR;      



#line 289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

typedef DWORD   COLORREF;
typedef DWORD   *LPCOLORREF;



typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT   x;
    SHORT   y;



#line 345 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"
} POINTS, *PPOINTS, *LPPOINTS;

































}
#line 381 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

#line 383 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windef.h"

#line 162 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"













#line 32 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





#line 38 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





#line 44 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


extern "C" {
#line 48 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"













































































































#line 158 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"









#line 168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


























































typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        };

        PVOID Pointer;
    };

    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;






typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;






typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;


typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
#line 292 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;


typedef PLDT_ENTRY LPLDT_ENTRY;


#line 306 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"









































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;

typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
























































































typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;


typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 749 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"














#line 764 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"















































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;













































































#line 1057 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



























































#line 1117 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
LONG
__stdcall
InterlockedIncrement(
      LONG volatile *lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedDecrement(
      LONG volatile *lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedExchange(
      LONG volatile *Target,
     LONG Value
    );




__declspec(dllimport)
LONG
__stdcall
InterlockedExchangeAdd(
      LONG volatile *Addend,
     LONG Value
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedCompareExchange (
      LONG volatile *Destination,
     LONG Exchange,
     LONG Comperand
    );







__forceinline
PVOID
__cdecl
__InlineInterlockedCompareExchangePointer (
      PVOID volatile *Destination,
     PVOID ExChange,
     PVOID Comperand
    )
{
    return((PVOID)(LONG_PTR)InterlockedCompareExchange((LONG volatile *)Destination, (LONG)(LONG_PTR)ExChange, (LONG)(LONG_PTR)Comperand));
}








#line 1186 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

#line 1188 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
void
__stdcall
InitializeSListHead (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedPopEntrySList (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedPushEntrySList (
     PSLIST_HEADER ListHead,
     PSINGLE_LIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedFlushSList (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList (
     PSLIST_HEADER ListHead
    );

#line 1228 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 1229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

#line 1231 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeResource(
         HGLOBAL hResData
        );

__declspec(dllimport)
LPVOID
__stdcall
LockResource(
         HGLOBAL hResData
        );







int
__stdcall



#line 1258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
WinMain(
     HINSTANCE hInstance,
     HINSTANCE hPrevInstance,
     LPSTR lpCmdLine,
     int nShowCmd
    );

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
      HMODULE hLibModule
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
     HMODULE hLibModule,
     DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
     HMODULE hLibModule
    );

__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
     HMODULE hModule,
     LPCSTR lpProcName
    );

__declspec(dllimport)
DWORD
__stdcall
GetVersion( void );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalAlloc(
     UINT uFlags,
     SIZE_T dwBytes
    );

__declspec(dllimport)
HGLOBAL
__stdcall
GlobalReAlloc(
     HGLOBAL hMem,
     SIZE_T dwBytes,
     UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize(
     HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags(
     HGLOBAL hMem
    );


__declspec(dllimport)
LPVOID
__stdcall
GlobalLock(
     HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalHandle(
     LPCVOID pMem
    );


__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
     HGLOBAL hMem
    );


__declspec(dllimport)
HGLOBAL
__stdcall
GlobalFree(
     HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
     DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
     HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
     HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
     HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
     HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
      LPMEMORYSTATUS lpBuffer
    );

typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
      LPMEMORYSTATUSEX lpBuffer
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalAlloc(
     UINT uFlags,
     SIZE_T uBytes
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalReAlloc(
     HLOCAL hMem,
     SIZE_T uBytes,
     UINT uFlags
    );

__declspec(dllimport)
LPVOID
__stdcall
LocalLock(
     HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalHandle(
     LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
     HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
     HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
     HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalFree(
     HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
     HLOCAL hMem,
     UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
     UINT uMinFree
    );

__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
     HANDLE hProcess,
     LPCVOID lpBaseAddress,
     SIZE_T dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAlloc(
     LPVOID lpAddress,
     SIZE_T dwSize,
     DWORD flAllocationType,
     DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
     LPVOID lpAddress,
     SIZE_T dwSize,
     DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtect(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
     PDWORD lpflOldProtect
    );

__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
     LPCVOID lpAddress,
     PMEMORY_BASIC_INFORMATION lpBuffer,
     SIZE_T dwLength
    );

__declspec(dllimport)
LPVOID
__stdcall
VirtualAllocEx(
     HANDLE hProcess,
     LPVOID lpAddress,
     SIZE_T dwSize,
     DWORD flAllocationType,
     DWORD flProtect
    );

__declspec(dllimport)
UINT
__stdcall
GetWriteWatch(
     DWORD  dwFlags,
     PVOID  lpBaseAddress,
     SIZE_T dwRegionSize,
      PVOID *lpAddresses,
      PULONG_PTR lpdwCount,
     PULONG lpdwGranularity
    );

__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
     LPVOID lpBaseAddress,
     SIZE_T dwRegionSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
     HANDLE hProcess,
     LPVOID lpAddress,
     SIZE_T dwSize,
     DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtectEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
     PDWORD lpflOldProtect
    );

__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
     HANDLE hProcess,
     LPCVOID lpAddress,
     PMEMORY_BASIC_INFORMATION lpBuffer,
     SIZE_T dwLength
    );

__declspec(dllimport)
HANDLE
__stdcall
HeapCreate(
     DWORD flOptions,
     SIZE_T dwInitialSize,
     SIZE_T dwMaximumSize
    );

__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
      HANDLE hHeap
    );


__declspec(dllimport)
LPVOID
__stdcall
HeapAlloc(
     HANDLE hHeap,
     DWORD dwFlags,
     SIZE_T dwBytes
    );

__declspec(dllimport)
LPVOID
__stdcall
HeapReAlloc(
     HANDLE hHeap,
     DWORD dwFlags,
     LPVOID lpMem,
     SIZE_T dwBytes
    );

__declspec(dllimport)
BOOL
__stdcall
HeapFree(
     HANDLE hHeap,
     DWORD dwFlags,
     LPVOID lpMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
     HANDLE hHeap,
     DWORD dwFlags,
     LPCVOID lpMem
    );

__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
     HANDLE hHeap,
     DWORD dwFlags,
     LPCVOID lpMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
     HANDLE hHeap,
     DWORD dwFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap( void );

__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
     DWORD NumberOfHeaps,
     PHANDLE ProcessHeaps
    );

typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    };
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;







__declspec(dllimport)
BOOL
__stdcall
HeapLock(
     HANDLE hHeap
    );

__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
     HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
     HANDLE hHeap,
      LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation (
     PVOID HeapHandle, 
     HEAP_INFORMATION_CLASS HeapInformationClass,
     PVOID HeapInformation ,
     SIZE_T HeapInformationLength 
    );

__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation (
     PVOID HeapHandle, 
     HEAP_INFORMATION_CLASS HeapInformationClass,
     PVOID HeapInformation ,
     SIZE_T HeapInformationLength ,
     PSIZE_T ReturnLength 
    );













#line 1777 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

#line 1779 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
     LPCSTR lpApplicationName,
     LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
     LPCWSTR lpApplicationName,
     LPDWORD lpBinaryType
    );




#line 1799 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameA(
     LPCSTR lpszLongPath,
     LPSTR  lpszShortPath,
     DWORD    cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameW(
     LPCWSTR lpszLongPath,
     LPWSTR  lpszShortPath,
     DWORD    cchBuffer
    );




#line 1821 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameA(
     LPCSTR lpszShortPath,
     LPSTR  lpszLongPath,
     DWORD    cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameW(
     LPCWSTR lpszShortPath,
     LPWSTR  lpszLongPath,
     DWORD    cchBuffer
    );




#line 1843 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
     HANDLE hProcess,
     PDWORD_PTR lpProcessAffinityMask,
     PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
     HANDLE hProcess,
     DWORD_PTR dwProcessAffinityMask
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
     HANDLE hProcess,
     LPFILETIME lpCreationTime,
     LPFILETIME lpExitTime,
     LPFILETIME lpKernelTime,
     LPFILETIME lpUserTime
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
     HANDLE hProcess,
     PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
     HANDLE hProcess,
     PSIZE_T lpMinimumWorkingSetSize,
     PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
     HANDLE hProcess,
     SIZE_T dwMinimumWorkingSetSize,
     SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     DWORD dwProcessId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
     UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
     HANDLE hProcess,
     UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
     HANDLE hProcess,
     LPDWORD lpExitCode
    );


__declspec(dllimport)
void
__stdcall
FatalExit(
     int ExitCode
    );

__declspec(dllimport)
LPSTR
__stdcall
GetEnvironmentStrings(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetEnvironmentStringsW(
    void
    );





#line 1973 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
     LPSTR
    );
__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
     LPWSTR
    );




#line 1991 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
void
__stdcall
RaiseException(
     DWORD dwExceptionCode,
     DWORD dwExceptionFlags,
     DWORD nNumberOfArguments,
     const ULONG_PTR *lpArguments
    );

__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
     struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
     LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );



__declspec(dllimport)
LPVOID
__stdcall
CreateFiber(
     SIZE_T dwStackSize,
     LPFIBER_START_ROUTINE lpStartAddress,
     LPVOID lpParameter
    );

__declspec(dllimport)
LPVOID
__stdcall
CreateFiberEx(
    SIZE_T dwStackCommitSize,
    SIZE_T dwStackReserveSize,
    DWORD dwFlags,
    LPFIBER_START_ROUTINE lpStartAddress,
    LPVOID lpParameter
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
     LPVOID lpFiber
    );

__declspec(dllimport)
LPVOID
__stdcall
ConvertThreadToFiber(
     LPVOID lpParameter
    );

__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );

__declspec(dllimport)
void
__stdcall
SwitchToFiber(
     LPVOID lpFiber
    );

__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );
#line 2078 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateThread(
     LPSECURITY_ATTRIBUTES lpThreadAttributes,
     SIZE_T dwStackSize,
     LPTHREAD_START_ROUTINE lpStartAddress,
     LPVOID lpParameter,
     DWORD dwCreationFlags,
     LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateRemoteThread(
     HANDLE hProcess,
     LPSECURITY_ATTRIBUTES lpThreadAttributes,
     SIZE_T dwStackSize,
     LPTHREAD_START_ROUTINE lpStartAddress,
     LPVOID lpParameter,
     DWORD dwCreationFlags,
     LPDWORD lpThreadId
    );

__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );

__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
     HANDLE hThread,
     DWORD_PTR dwThreadAffinityMask
    );


__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
     HANDLE hThread,
     DWORD dwIdealProcessor
    );
#line 2135 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
     HANDLE hProcess,
     BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
     HANDLE hProcess,
     PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
     LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenThread(
    DWORD dwDesiredAccess,
    BOOL bInheritHandle,
    DWORD dwThreadId
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
     HANDLE hThread,
     int nPriority
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
     HANDLE hThread,
     BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
     HANDLE hThread,
     PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
int
__stdcall
GetThreadPriority(
     HANDLE hThread
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
     HANDLE hThread,
     LPFILETIME lpCreationTime,
     LPFILETIME lpExitTime,
     LPFILETIME lpKernelTime,
     LPFILETIME lpUserTime
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
     DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
      HANDLE hThread,
     DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeThread(
     HANDLE hThread,
     LPDWORD lpExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
     HANDLE hThread,
     DWORD dwSelector,
     LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
     EXECUTION_STATE esFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetLastError(
    void
    );

__declspec(dllimport)
void
__stdcall
SetLastError(
     DWORD dwErrCode
    );

















#line 2288 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 2289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
     HANDLE hFile,
     LPOVERLAPPED lpOverlapped,
     LPDWORD lpNumberOfBytesTransferred,
     BOOL bWait
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateIoCompletionPort(
     HANDLE FileHandle,
     HANDLE ExistingCompletionPort,
     ULONG_PTR CompletionKey,
     DWORD NumberOfConcurrentThreads
    );

__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
      HANDLE CompletionPort,
     LPDWORD lpNumberOfBytesTransferred,
     PULONG_PTR lpCompletionKey,
     LPOVERLAPPED *lpOverlapped,
      DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
     HANDLE CompletionPort,
     DWORD dwNumberOfBytesTransferred,
     ULONG_PTR dwCompletionKey,
     LPOVERLAPPED lpOverlapped
    );






__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
     UINT uMode
    );

__declspec(dllimport)
BOOL
__stdcall
ReadProcessMemory(
     HANDLE hProcess,
     LPCVOID lpBaseAddress,
     LPVOID lpBuffer,
     SIZE_T nSize,
     SIZE_T * lpNumberOfBytesRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteProcessMemory(
     HANDLE hProcess,
     LPVOID lpBaseAddress,
     LPCVOID lpBuffer,
     SIZE_T nSize,
     SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
     HANDLE hThread,
      LPCONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
     HANDLE hThread,
     const CONTEXT *lpContext
    );
#line 2384 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
     HANDLE hThread
    );

__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
     HANDLE hThread
    );




typedef
void
(__stdcall *PAPCFUNC)(
    ULONG_PTR dwParam
    );

__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
     PAPCFUNC pfnAPC,
     HANDLE hThread,
     ULONG_PTR dwData
    );

#line 2418 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );
#line 2427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
     LPDEBUG_EVENT lpDebugEvent,
     DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
     DWORD dwProcessId,
     DWORD dwThreadId,
     DWORD dwContinueStatus
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
     DWORD dwProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
     DWORD dwProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
     BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
     HANDLE Process
    );

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
     LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );

















#line 2518 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );
#line 2527 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
BOOL
__stdcall
SetEvent(
     HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
     HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
     HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
     HANDLE hSemaphore,
     LONG lReleaseCount,
     LPLONG lpPreviousCount
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
     HANDLE hMutex
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
     HANDLE hHandle,
     DWORD dwMilliseconds
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
     DWORD nCount,
     const HANDLE *lpHandles,
     BOOL bWaitAll,
     DWORD dwMilliseconds
    );

__declspec(dllimport)
void
__stdcall
Sleep(
     DWORD dwMilliseconds
    );

__declspec(dllimport)
HGLOBAL
__stdcall
LoadResource(
     HMODULE hModule,
     HRSRC hResInfo
    );

__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
     HMODULE hModule,
     HRSRC hResInfo
    );


__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
     ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
     DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
     ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
     UINT uNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
LockFile(
     HANDLE hFile,
     DWORD dwFileOffsetLow,
     DWORD dwFileOffsetHigh,
     DWORD nNumberOfBytesToLockLow,
     DWORD nNumberOfBytesToLockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
     HANDLE hFile,
     DWORD dwFileOffsetLow,
     DWORD dwFileOffsetHigh,
     DWORD nNumberOfBytesToUnlockLow,
     DWORD nNumberOfBytesToUnlockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
     HANDLE hFile,
     DWORD dwFlags,
     DWORD dwReserved,
     DWORD nNumberOfBytesToLockLow,
     DWORD nNumberOfBytesToLockHigh,
     LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
     HANDLE hFile,
     DWORD dwReserved,
     DWORD nNumberOfBytesToUnlockLow,
     DWORD nNumberOfBytesToUnlockHigh,
     LPOVERLAPPED lpOverlapped
    );

typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
     HANDLE hFile,
     LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileType(
     HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
     HANDLE hFile,
     LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
    HANDLE hFile,
    PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
     DWORD nStdHandle
    );

__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
     DWORD nStdHandle,
     HANDLE hHandle
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFile(
     HANDLE hFile,
     LPCVOID lpBuffer,
     DWORD nNumberOfBytesToWrite,
     LPDWORD lpNumberOfBytesWritten,
     LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
ReadFile(
     HANDLE hFile,
     LPVOID lpBuffer,
     DWORD nNumberOfBytesToRead,
     LPDWORD lpNumberOfBytesRead,
     LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
     HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
     HANDLE hDevice,
     DWORD dwIoControlCode,
     LPVOID lpInBuffer,
     DWORD nInBufferSize,
     LPVOID lpOutBuffer,
     DWORD nOutBufferSize,
     LPDWORD lpBytesReturned,
     LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
     HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
     HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
     HANDLE hDevice,
     BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
     HANDLE hMsgIndicator,
     ULONG ulMsgCount
    );

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
     HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
     HANDLE hFile,
     LONG lDistanceToMove,
     PLONG lpDistanceToMoveHigh,
     DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
    HANDLE hFile,
    LARGE_INTEGER liDistanceToMove,
    PLARGE_INTEGER lpNewFilePointer,
    DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
FindClose(
      HANDLE hFindFile
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
     HANDLE hFile,
     LPFILETIME lpCreationTime,
     LPFILETIME lpLastAccessTime,
     LPFILETIME lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
     HANDLE hFile,
     const FILETIME *lpCreationTime,
     const FILETIME *lpLastAccessTime,
     const FILETIME *lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
     HANDLE hFile,
     LONGLONG ValidDataLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
     HANDLE hFile,
     LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
     HANDLE hFile,
     LPCWSTR lpShortName
    );




#line 2911 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
      HANDLE hObject
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
     HANDLE hSourceProcessHandle,
     HANDLE hSourceHandle,
     HANDLE hTargetProcessHandle,
     LPHANDLE lpTargetHandle,
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     DWORD dwOptions
    );

__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
     HANDLE hObject,
     LPDWORD lpdwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
     HANDLE hObject,
     DWORD dwMask,
     DWORD dwFlags
    );






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
     LPCSTR lpModuleName,
     LPVOID lpParameterBlock
    );

__declspec(dllimport)
UINT
__stdcall
WinExec(
     LPCSTR lpCmdLine,
     UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
     HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
     HANDLE hFile,
     LPDWORD lpErrors,
     LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
     HANDLE hFile,
     DWORD dwInQueue,
     DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
     HANDLE hFile,
     DWORD dwFunc
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommConfig(
     HANDLE hCommDev,
     LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
     HANDLE hFile,
     LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
     HANDLE hFile,
     LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
     HANDLE hFile,
     LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
     HANDLE hFile,
     LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
     HANDLE hFile,
     LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
     HANDLE hFile,
     DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
     HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
     HANDLE hCommDev,
     LPCOMMCONFIG lpCC,
     DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
     HANDLE hFile,
     DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
     HANDLE hFile,
     LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
     HANDLE hFile,
     LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
     HANDLE hFile,
     char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
     HANDLE hFile,
     LPDWORD lpEvtMask,
     LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
     HANDLE hDevice,
     DWORD dwPositionMethod,
     DWORD dwPartition,
     DWORD dwOffsetLow,
     DWORD dwOffsetHigh,
     BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
     HANDLE hDevice,
     DWORD dwPositionType,
     LPDWORD lpdwPartition,
     LPDWORD lpdwOffsetLow,
     LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
     HANDLE hDevice,
     DWORD dwOperation,
     BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
     HANDLE hDevice,
     DWORD dwEraseType,
     BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
     HANDLE hDevice,
     DWORD dwPartitionMethod,
     DWORD dwCount,
     DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
     HANDLE hDevice,
     DWORD dwTapemarkType,
     DWORD dwTapemarkCount,
     BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
     HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
     HANDLE hDevice,
     DWORD dwOperation,
     LPDWORD lpdwSize,
     LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
     HANDLE hDevice,
     DWORD dwOperation,
     LPVOID lpTapeInformation
    );




__declspec(dllimport)
BOOL
__stdcall
Beep(
     DWORD dwFreq,
     DWORD dwDuration
    );

__declspec(dllimport)
int
__stdcall
MulDiv(
     int nNumber,
     int nNumerator,
     int nDenominator
    );

__declspec(dllimport)
void
__stdcall
GetSystemTime(
     LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
     LPFILETIME lpSystemTimeAsFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
     const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetLocalTime(
     LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
     const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemInfo(
     LPSYSTEM_INFO lpSystemInfo
    );









#line 3279 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsProcessorFeaturePresent(
     DWORD ProcessorFeature
    );

typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
     LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
     LPSYSTEMTIME lpUniversalTime,
     LPSYSTEMTIME lpLocalTime
    );

__declspec(dllimport)
BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
     LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
     LPSYSTEMTIME lpLocalTime,
     LPSYSTEMTIME lpUniversalTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTimeZoneInformation(
     LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );

__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
     const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );






__declspec(dllimport)
BOOL
__stdcall
SystemTimeToFileTime(
     const SYSTEMTIME *lpSystemTime,
     LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
     const FILETIME *lpFileTime,
     LPFILETIME lpLocalFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
     const FILETIME *lpLocalFileTime,
     LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToSystemTime(
     const FILETIME *lpFileTime,
     LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
     const FILETIME *lpFileTime1,
     const FILETIME *lpFileTime2
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
     const FILETIME *lpFileTime,
     LPWORD lpFatDate,
     LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
     WORD wFatDate,
     WORD wFatTime,
     LPFILETIME lpFileTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTimeAdjustment(
     DWORD dwTimeAdjustment,
     BOOL  bTimeAdjustmentDisabled
    );

__declspec(dllimport)
BOOL
__stdcall
GetSystemTimeAdjustment(
     PDWORD lpTimeAdjustment,
     PDWORD lpTimeIncrement,
     PBOOL  lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
DWORD
__stdcall
FormatMessageA(
     DWORD dwFlags,
     LPCVOID lpSource,
     DWORD dwMessageId,
     DWORD dwLanguageId,
     LPSTR lpBuffer,
     DWORD nSize,
     va_list *Arguments
    );
__declspec(dllimport)
DWORD
__stdcall
FormatMessageW(
     DWORD dwFlags,
     LPCVOID lpSource,
     DWORD dwMessageId,
     DWORD dwLanguageId,
     LPWSTR lpBuffer,
     DWORD nSize,
     va_list *Arguments
    );




#line 3446 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 3447 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"










__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
     PHANDLE hReadPipe,
     PHANDLE hWritePipe,
     LPSECURITY_ATTRIBUTES lpPipeAttributes,
     DWORD nSize
    );

__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
     HANDLE hNamedPipe,
     LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
     HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
     HANDLE hNamedPipe,
     LPDWORD lpMode,
     LPDWORD lpMaxCollectionCount,
     LPDWORD lpCollectDataTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
     HANDLE hNamedPipe,
     LPDWORD lpFlags,
     LPDWORD lpOutBufferSize,
     LPDWORD lpInBufferSize,
     LPDWORD lpMaxInstances
    );

__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
     HANDLE hNamedPipe,
     LPVOID lpBuffer,
     DWORD nBufferSize,
     LPDWORD lpBytesRead,
     LPDWORD lpTotalBytesAvail,
     LPDWORD lpBytesLeftThisMessage
    );

__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
     HANDLE hNamedPipe,
     LPVOID lpInBuffer,
     DWORD nInBufferSize,
     LPVOID lpOutBuffer,
     DWORD nOutBufferSize,
     LPDWORD lpBytesRead,
     LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
     LPCSTR lpName,
     DWORD nMaxMessageSize,
     DWORD lReadTimeout,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
     LPCWSTR lpName,
     DWORD nMaxMessageSize,
     DWORD lReadTimeout,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 3551 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
     HANDLE hMailslot,
     LPDWORD lpMaxMessageSize,
     LPDWORD lpNextSize,
     LPDWORD lpMessageCount,
     LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
     HANDLE hMailslot,
     DWORD lReadTimeout
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFile(
     HANDLE hFileMappingObject,
     DWORD dwDesiredAccess,
     DWORD dwFileOffsetHigh,
     DWORD dwFileOffsetLow,
     SIZE_T dwNumberOfBytesToMap
    );

__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
     LPCVOID lpBaseAddress,
     SIZE_T dwNumberOfBytesToFlush
    );

__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
     LPCVOID lpBaseAddress
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
     LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
     LPCWSTR lpFileName
    );




#line 3618 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
     LPCSTR lpFileName,
     DWORD    dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
     LPCWSTR lpFileName,
     DWORD    dwReserved
    );




#line 3638 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
















__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
    LPCSTR lpFileName,
    LPDWORD  lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
    LPCWSTR lpFileName,
    LPDWORD  lpStatus
    );




#line 3673 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"







typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
    PBYTE pbData,
    PVOID pvCallbackContext,
    PULONG ulLength
    );











__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
     LPCSTR        lpFileName,
     ULONG           ulFlags,
     PVOID *         pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
     LPCWSTR        lpFileName,
     ULONG           ulFlags,
     PVOID *         pvContext
    );




#line 3727 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
     PFE_EXPORT_FUNC pfExportCallback,
     PVOID           pvCallbackContext,
     PVOID           pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
     PFE_IMPORT_FUNC pfImportCallback,
     PVOID           pvCallbackContext,
     PVOID           pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
     PVOID           pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
     LPCSTR lpString1,
     LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
     LPCWSTR lpString1,
     LPCWSTR lpString2
    );




#line 3776 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrcmpiA(
     LPCSTR lpString1,
     LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
     LPCWSTR lpString1,
     LPCWSTR lpString2
    );




#line 3796 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpynA(
     LPSTR lpString1,
     LPCSTR lpString2,
     int iMaxLength
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpynW(
     LPWSTR lpString1,
     LPCWSTR lpString2,
     int iMaxLength
    );




#line 3818 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
     LPSTR lpString1,
     LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
     LPWSTR lpString1,
     LPCWSTR lpString2
    );




#line 3838 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
      LPSTR lpString1,
     LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
      LPWSTR lpString1,
     LPCWSTR lpString2
    );




#line 3858 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrlenA(
     LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
     LPCWSTR lpString
    );




#line 3876 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HFILE
__stdcall
OpenFile(
     LPCSTR lpFileName,
     LPOFSTRUCT lpReOpenBuff,
     UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
     LPCSTR lpPathName,
     int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
     LPCSTR lpPathName,
     int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
     HFILE hFile,
     LPVOID lpBuffer,
     UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
     HFILE hFile,
     LPCSTR lpBuffer,
     UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
     HFILE hFile,
     LPVOID lpBuffer,
     long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
     HFILE hFile,
     LPCSTR lpBuffer,
     long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
      HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
     HFILE hFile,
     LONG lOffset,
     int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
     const void* lpBuffer,
     int cb,
      LPINT lpi
    );

__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );



__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
     DWORD dwTlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
     DWORD dwTlsIndex,
     LPVOID lpTlsValue
    );

__declspec(dllimport)
BOOL
__stdcall
TlsFree(
     DWORD dwTlsIndex
    );

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
DWORD
__stdcall
SleepEx(
     DWORD dwMilliseconds,
     BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
     HANDLE hHandle,
     DWORD dwMilliseconds,
     BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
     DWORD nCount,
     const HANDLE *lpHandles,
     BOOL bWaitAll,
     DWORD dwMilliseconds,
     BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
     HANDLE hObjectToSignal,
     HANDLE hObjectToWaitOn,
     DWORD dwMilliseconds,
     BOOL bAlertable
    );
#line 4041 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadFileEx(
     HANDLE hFile,
     LPVOID lpBuffer,
     DWORD nNumberOfBytesToRead,
     LPOVERLAPPED lpOverlapped,
     LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
     HANDLE hFile,
     LPCVOID lpBuffer,
     DWORD nNumberOfBytesToWrite,
     LPOVERLAPPED lpOverlapped,
     LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
     HANDLE hFile,
     LPBYTE lpBuffer,
     DWORD nNumberOfBytesToRead,
     LPDWORD lpNumberOfBytesRead,
     BOOL bAbort,
     BOOL bProcessSecurity,
     LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
     HANDLE hFile,
     DWORD  dwLowBytesToSeek,
     DWORD  dwHighBytesToSeek,
     LPDWORD lpdwLowByteSeeked,
     LPDWORD lpdwHighByteSeeked,
     LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
     HANDLE hFile,
     LPBYTE lpBuffer,
     DWORD nNumberOfBytesToWrite,
     LPDWORD lpNumberOfBytesWritten,
     BOOL bAbort,
     BOOL bProcessSecurity,
     LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;



























__declspec(dllimport)
BOOL
__stdcall
ReadFileScatter(
     HANDLE hFile,
     FILE_SEGMENT_ELEMENT aSegmentArray[],
     DWORD nNumberOfBytesToRead,
     LPDWORD lpReserved,
     LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
     HANDLE hFile,
     FILE_SEGMENT_ELEMENT aSegmentArray[],
     DWORD nNumberOfBytesToWrite,
     LPDWORD lpReserved,
     LPOVERLAPPED lpOverlapped
    );


















#line 4179 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#line 4227 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR   cFileName[ 260 ];
    CHAR   cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR  cFileName[ 260 ];
    WCHAR  cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
#line 4273 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

__declspec(dllimport)
HANDLE
__stdcall
CreateMutexA(
     LPSECURITY_ATTRIBUTES lpMutexAttributes,
     BOOL bInitialOwner,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMutexW(
     LPSECURITY_ATTRIBUTES lpMutexAttributes,
     BOOL bInitialOwner,
     LPCWSTR lpName
    );




#line 4304 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenMutexA(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenMutexW(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCWSTR lpName
    );




#line 4326 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateEventA(
     LPSECURITY_ATTRIBUTES lpEventAttributes,
     BOOL bManualReset,
     BOOL bInitialState,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateEventW(
     LPSECURITY_ATTRIBUTES lpEventAttributes,
     BOOL bManualReset,
     BOOL bInitialState,
     LPCWSTR lpName
    );




#line 4350 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenEventA(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventW(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCWSTR lpName
    );




#line 4372 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreA(
     LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
     LONG lInitialCount,
     LONG lMaximumCount,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreW(
     LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
     LONG lInitialCount,
     LONG lMaximumCount,
     LPCWSTR lpName
    );




#line 4396 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreA(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenSemaphoreW(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCWSTR lpName
    );




#line 4418 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


typedef
void
(__stdcall *PTIMERAPCROUTINE)(
    LPVOID lpArgToCompletionRoutine,
    DWORD dwTimerLowValue,
    DWORD dwTimerHighValue
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateWaitableTimerA(
     LPSECURITY_ATTRIBUTES lpTimerAttributes,
     BOOL bManualReset,
     LPCSTR lpTimerName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateWaitableTimerW(
     LPSECURITY_ATTRIBUTES lpTimerAttributes,
     BOOL bManualReset,
     LPCWSTR lpTimerName
    );




#line 4449 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenWaitableTimerA(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCSTR lpTimerName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenWaitableTimerW(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCWSTR lpTimerName
    );




#line 4471 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
     HANDLE hTimer,
     const LARGE_INTEGER *lpDueTime,
     LONG lPeriod,
     PTIMERAPCROUTINE pfnCompletionRoutine,
     LPVOID lpArgToCompletionRoutine,
     BOOL fResume
    );

__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
     HANDLE hTimer
    );
#line 4491 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingA(
     HANDLE hFile,
     LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
     DWORD flProtect,
     DWORD dwMaximumSizeHigh,
     DWORD dwMaximumSizeLow,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileMappingW(
     HANDLE hFile,
     LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
     DWORD flProtect,
     DWORD dwMaximumSizeHigh,
     DWORD dwMaximumSizeLow,
     LPCWSTR lpName
    );




#line 4519 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCSTR lpName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingW(
     DWORD dwDesiredAccess,
     BOOL bInheritHandle,
     LPCWSTR lpName
    );




#line 4541 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsA(
     DWORD nBufferLength,
     LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
     DWORD nBufferLength,
     LPWSTR lpBuffer
    );




#line 4561 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"























#line 4585 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryA(
     LPCSTR lpLibFileName
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryW(
     LPCWSTR lpLibFileName
    );




#line 4605 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExA(
     LPCSTR lpLibFileName,
     HANDLE hFile,
     DWORD dwFlags
    );
__declspec(dllimport)
HMODULE
__stdcall
LoadLibraryExW(
     LPCWSTR lpLibFileName,
     HANDLE hFile,
     DWORD dwFlags
    );




#line 4627 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"








__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameA(
     HMODULE hModule,
     LPSTR lpFilename,
     DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameW(
     HMODULE hModule,
     LPWSTR lpFilename,
     DWORD nSize
    );




#line 4656 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleA(
     LPCSTR lpModuleName
    );
__declspec(dllimport)
HMODULE
__stdcall
GetModuleHandleW(
     LPCWSTR lpModuleName
    );




#line 4674 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"




















































#line 4727 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 4728 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
     LPCSTR lpApplicationName,
     LPSTR lpCommandLine,
     LPSECURITY_ATTRIBUTES lpProcessAttributes,
     LPSECURITY_ATTRIBUTES lpThreadAttributes,
     BOOL bInheritHandles,
     DWORD dwCreationFlags,
     LPVOID lpEnvironment,
     LPCSTR lpCurrentDirectory,
     LPSTARTUPINFOA lpStartupInfo,
     LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
     LPCWSTR lpApplicationName,
     LPWSTR lpCommandLine,
     LPSECURITY_ATTRIBUTES lpProcessAttributes,
     LPSECURITY_ATTRIBUTES lpThreadAttributes,
     BOOL bInheritHandles,
     DWORD dwCreationFlags,
     LPVOID lpEnvironment,
     LPCWSTR lpCurrentDirectory,
     LPSTARTUPINFOW lpStartupInfo,
     LPPROCESS_INFORMATION lpProcessInformation
    );




#line 4764 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
     DWORD dwLevel,
     DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
     LPDWORD lpdwLevel,
     LPDWORD lpdwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
     DWORD ProcessId
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
     UINT uAction,
     LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
     UINT uAction,
     LPCWSTR lpMessageText
    );




#line 4809 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
     LPSTARTUPINFOA lpStartupInfo
    );
__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
     LPSTARTUPINFOW lpStartupInfo
    );




#line 4827 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );
__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );




#line 4845 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableA(
     LPCSTR lpName,
     LPSTR lpBuffer,
     DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableW(
     LPCWSTR lpName,
     LPWSTR lpBuffer,
     DWORD nSize
    );




#line 4867 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
     LPCSTR lpName,
     LPCSTR lpValue
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
     LPCWSTR lpName,
     LPCWSTR lpValue
    );




#line 4887 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsA(
     LPCSTR lpSrc,
     LPSTR lpDst,
     DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsW(
     LPCWSTR lpSrc,
     LPWSTR lpDst,
     DWORD nSize
    );




#line 4909 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
     LPCSTR lpName,
     LPCSTR lpGuid,
     PVOID   pBuffer,
     DWORD    nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
     LPCWSTR lpName,
     LPCWSTR lpGuid,
     PVOID   pBuffer,
     DWORD    nSize
    );




#line 4933 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
     LPCSTR lpName,
     LPCSTR lpGuid,
     PVOID    pValue,
     DWORD    nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
     LPCWSTR lpName,
     LPCWSTR lpGuid,
     PVOID    pValue,
     DWORD    nSize
    );




#line 4957 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
     LPCSTR lpOutputString
    );
__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
     LPCWSTR lpOutputString
    );




#line 4976 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HRSRC
__stdcall
FindResourceA(
     HMODULE hModule,
     LPCSTR lpName,
     LPCSTR lpType
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceW(
     HMODULE hModule,
     LPCWSTR lpName,
     LPCWSTR lpType
    );




#line 4998 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HRSRC
__stdcall
FindResourceExA(
     HMODULE hModule,
     LPCSTR lpType,
     LPCSTR lpName,
     WORD    wLanguage
    );
__declspec(dllimport)
HRSRC
__stdcall
FindResourceExW(
     HMODULE hModule,
     LPCWSTR lpType,
     LPCWSTR lpName,
     WORD    wLanguage
    );




#line 5022 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(HMODULE hModule, LPSTR lpType,
        LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(HMODULE hModule, LPWSTR lpType,
        LONG_PTR lParam);




#line 5033 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(HMODULE hModule, LPCSTR lpType,
        LPSTR lpName, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(HMODULE hModule, LPCWSTR lpType,
        LPWSTR lpName, LONG_PTR lParam);




#line 5042 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
typedef BOOL (__stdcall* ENUMRESLANGPROCA)(HMODULE hModule, LPCSTR lpType,
        LPCSTR lpName, WORD  wLanguage, LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(HMODULE hModule, LPCWSTR lpType,
        LPCWSTR lpName, WORD  wLanguage, LONG_PTR lParam);




#line 5051 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"






















#line 5074 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
     HMODULE hModule,
     ENUMRESTYPEPROCA lpEnumFunc,
     LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
     HMODULE hModule,
     ENUMRESTYPEPROCW lpEnumFunc,
     LONG_PTR lParam
    );




#line 5096 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
     HMODULE hModule,
     LPCSTR lpType,
     ENUMRESNAMEPROCA lpEnumFunc,
     LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
     HMODULE hModule,
     LPCWSTR lpType,
     ENUMRESNAMEPROCW lpEnumFunc,
     LONG_PTR lParam
    );




#line 5121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
     HMODULE hModule,
     LPCSTR lpType,
     LPCSTR lpName,
     ENUMRESLANGPROCA lpEnumFunc,
     LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
     HMODULE hModule,
     LPCWSTR lpType,
     LPCWSTR lpName,
     ENUMRESLANGPROCW lpEnumFunc,
     LONG_PTR lParam
    );




#line 5147 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
     LPCSTR pFileName,
     BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
     LPCWSTR pFileName,
     BOOL bDeleteExistingResources
    );




#line 5167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
     HANDLE      hUpdate,
     LPCSTR     lpType,
     LPCSTR     lpName,
     WORD        wLanguage,
     LPVOID      lpData,
     DWORD       cbData
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
     HANDLE      hUpdate,
     LPCWSTR     lpType,
     LPCWSTR     lpName,
     WORD        wLanguage,
     LPVOID      lpData,
     DWORD       cbData
    );




#line 5195 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
     HANDLE      hUpdate,
     BOOL        fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
     HANDLE      hUpdate,
     BOOL        fDiscard
    );




#line 5215 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
     LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
     LPCWSTR lpString
    );




#line 5233 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
     LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
     LPCWSTR lpString
    );




#line 5251 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
     ATOM nAtom,
     LPSTR lpBuffer,
     int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
     ATOM nAtom,
     LPWSTR lpBuffer,
     int nSize
    );




#line 5273 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
     LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
     LPCWSTR lpString
    );




#line 5291 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
     LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
     LPCWSTR lpString
    );




#line 5309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
     ATOM nAtom,
     LPSTR lpBuffer,
     int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
     ATOM nAtom,
     LPWSTR lpBuffer,
     int nSize
    );




#line 5331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
     LPCSTR lpAppName,
     LPCSTR lpKeyName,
     INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
     LPCWSTR lpAppName,
     LPCWSTR lpKeyName,
     INT nDefault
    );




#line 5353 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
     LPCSTR lpAppName,
     LPCSTR lpKeyName,
     LPCSTR lpDefault,
     LPSTR lpReturnedString,
     DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
     LPCWSTR lpAppName,
     LPCWSTR lpKeyName,
     LPCWSTR lpDefault,
     LPWSTR lpReturnedString,
     DWORD nSize
    );




#line 5379 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
     LPCSTR lpAppName,
     LPCSTR lpKeyName,
     LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
     LPCWSTR lpAppName,
     LPCWSTR lpKeyName,
     LPCWSTR lpString
    );




#line 5401 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
     LPCSTR lpAppName,
     LPSTR lpReturnedString,
     DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
     LPCWSTR lpAppName,
     LPWSTR lpReturnedString,
     DWORD nSize
    );




#line 5423 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
     LPCSTR lpAppName,
     LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
     LPCWSTR lpAppName,
     LPCWSTR lpString
    );




#line 5443 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
     LPCSTR lpAppName,
     LPCSTR lpKeyName,
     INT nDefault,
     LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
     LPCWSTR lpAppName,
     LPCWSTR lpKeyName,
     INT nDefault,
     LPCWSTR lpFileName
    );




#line 5467 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
     LPCSTR lpAppName,
     LPCSTR lpKeyName,
     LPCSTR lpDefault,
     LPSTR lpReturnedString,
     DWORD nSize,
     LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
     LPCWSTR lpAppName,
     LPCWSTR lpKeyName,
     LPCWSTR lpDefault,
     LPWSTR lpReturnedString,
     DWORD nSize,
     LPCWSTR lpFileName
    );




#line 5495 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
     LPCSTR lpAppName,
     LPCSTR lpKeyName,
     LPCSTR lpString,
     LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
     LPCWSTR lpAppName,
     LPCWSTR lpKeyName,
     LPCWSTR lpString,
     LPCWSTR lpFileName
    );




#line 5519 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
     LPCSTR lpAppName,
     LPSTR lpReturnedString,
     DWORD nSize,
     LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
     LPCWSTR lpAppName,
     LPWSTR lpReturnedString,
     DWORD nSize,
     LPCWSTR lpFileName
    );




#line 5543 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
     LPCSTR lpAppName,
     LPCSTR lpString,
     LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
     LPCWSTR lpAppName,
     LPCWSTR lpString,
     LPCWSTR lpFileName
    );




#line 5565 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
     LPSTR lpszReturnBuffer,
     DWORD nSize,
     LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
     LPWSTR lpszReturnBuffer,
     DWORD nSize,
     LPCWSTR lpFileName
    );




#line 5588 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
     LPCSTR lpszSection,
     LPCSTR lpszKey,
     LPVOID   lpStruct,
     UINT     uSizeStruct,
     LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
     LPCWSTR lpszSection,
     LPCWSTR lpszKey,
     LPVOID   lpStruct,
     UINT     uSizeStruct,
     LPCWSTR szFile
    );




#line 5614 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
     LPCSTR lpszSection,
     LPCSTR lpszKey,
     LPVOID   lpStruct,
     UINT     uSizeStruct,
     LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
     LPCWSTR lpszSection,
     LPCWSTR lpszKey,
     LPVOID   lpStruct,
     UINT     uSizeStruct,
     LPCWSTR szFile
    );




#line 5640 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
     LPCSTR lpRootPathName
    );
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
     LPCWSTR lpRootPathName
    );




#line 5659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryA(
     LPSTR lpBuffer,
     UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryW(
     LPWSTR lpBuffer,
     UINT uSize
    );




#line 5679 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
     DWORD nBufferLength,
     LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
     DWORD nBufferLength,
     LPWSTR lpBuffer
    );




#line 5699 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
     LPCSTR lpPathName,
     LPCSTR lpPrefixString,
     UINT uUnique,
     LPSTR lpTempFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
     LPCWSTR lpPathName,
     LPCWSTR lpPrefixString,
     UINT uUnique,
     LPWSTR lpTempFileName
    );




#line 5723 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryA(
     LPSTR lpBuffer,
     UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryW(
     LPWSTR lpBuffer,
     UINT uSize
    );




#line 5743 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetSystemWindowsDirectoryA(
     LPSTR lpBuffer,
     UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemWindowsDirectoryW(
     LPWSTR lpBuffer,
     UINT uSize
    );




#line 5763 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"




















































#line 5816 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 5817 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
     LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
     LPCWSTR lpPathName
    );




#line 5835 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryA(
     DWORD nBufferLength,
     LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryW(
     DWORD nBufferLength,
     LPWSTR lpBuffer
    );




#line 5855 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
     LPCSTR lpRootPathName,
     LPDWORD lpSectorsPerCluster,
     LPDWORD lpBytesPerSector,
     LPDWORD lpNumberOfFreeClusters,
     LPDWORD lpTotalNumberOfClusters
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
     LPCWSTR lpRootPathName,
     LPDWORD lpSectorsPerCluster,
     LPDWORD lpBytesPerSector,
     LPDWORD lpNumberOfFreeClusters,
     LPDWORD lpTotalNumberOfClusters
    );




#line 5881 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
     LPCSTR lpDirectoryName,
     PULARGE_INTEGER lpFreeBytesAvailableToCaller,
     PULARGE_INTEGER lpTotalNumberOfBytes,
     PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
     LPCWSTR lpDirectoryName,
     PULARGE_INTEGER lpFreeBytesAvailableToCaller,
     PULARGE_INTEGER lpTotalNumberOfBytes,
     PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );




#line 5905 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
     LPCSTR lpPathName,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
     LPCWSTR lpPathName,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
     LPCSTR lpTemplateDirectory,
     LPCSTR lpNewDirectory,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
     LPCWSTR lpTemplateDirectory,
     LPCWSTR lpNewDirectory,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5947 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
     LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
     LPCWSTR lpPathName
    );




#line 5965 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameA(
     LPCSTR lpFileName,
     DWORD nBufferLength,
     LPSTR lpBuffer,
     LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameW(
     LPCWSTR lpFileName,
     DWORD nBufferLength,
     LPWSTR lpBuffer,
     LPWSTR *lpFilePart
    );




#line 5989 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"








__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
     DWORD dwFlags,
     LPCSTR lpDeviceName,
     LPCSTR lpTargetPath
    );
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
     DWORD dwFlags,
     LPCWSTR lpDeviceName,
     LPCWSTR lpTargetPath
    );




#line 6018 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
     LPCSTR lpDeviceName,
     LPSTR lpTargetPath,
     DWORD ucchMax
    );
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
     LPCWSTR lpDeviceName,
     LPWSTR lpTargetPath,
     DWORD ucchMax
    );




#line 6040 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
     LPCSTR lpFileName,
     DWORD dwDesiredAccess,
     DWORD dwShareMode,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes,
     DWORD dwCreationDisposition,
     DWORD dwFlagsAndAttributes,
     HANDLE hTemplateFile
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
     LPCWSTR lpFileName,
     DWORD dwDesiredAccess,
     DWORD dwShareMode,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes,
     DWORD dwCreationDisposition,
     DWORD dwFlagsAndAttributes,
     HANDLE hTemplateFile
    );




#line 6072 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
     LPCSTR lpFileName,
     DWORD dwFileAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
     LPCWSTR lpFileName,
     DWORD dwFileAttributes
    );




#line 6092 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
     LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
     LPCWSTR lpFileName
    );




#line 6110 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
     LPCSTR lpFileName,
     GET_FILEEX_INFO_LEVELS fInfoLevelId,
     LPVOID lpFileInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
     LPCWSTR lpFileName,
     GET_FILEEX_INFO_LEVELS fInfoLevelId,
     LPVOID lpFileInformation
    );




#line 6137 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
     LPCSTR lpFileName,
     LPDWORD lpFileSizeHigh
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
     LPCWSTR lpFileName,
     LPDWORD lpFileSizeHigh
    );




#line 6157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
     LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
     LPCWSTR lpFileName
    );




#line 6175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;



__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
     LPCSTR lpFileName,
     FINDEX_INFO_LEVELS fInfoLevelId,
     LPVOID lpFindFileData,
     FINDEX_SEARCH_OPS fSearchOp,
     LPVOID lpSearchFilter,
     DWORD dwAdditionalFlags
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
     LPCWSTR lpFileName,
     FINDEX_INFO_LEVELS fInfoLevelId,
     LPVOID lpFindFileData,
     FINDEX_SEARCH_OPS fSearchOp,
     LPVOID lpSearchFilter,
     DWORD dwAdditionalFlags
    );




#line 6218 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 6219 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
     LPCSTR lpFileName,
     LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
     LPCWSTR lpFileName,
     LPWIN32_FIND_DATAW lpFindFileData
    );




#line 6239 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
     HANDLE hFindFile,
     LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
     HANDLE hFindFile,
     LPWIN32_FIND_DATAW lpFindFileData
    );




#line 6259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
     LPCSTR lpPath,
     LPCSTR lpFileName,
     LPCSTR lpExtension,
     DWORD nBufferLength,
     LPSTR lpBuffer,
     LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
     LPCWSTR lpPath,
     LPCWSTR lpFileName,
     LPCWSTR lpExtension,
     DWORD nBufferLength,
     LPWSTR lpBuffer,
     LPWSTR *lpFilePart
    );




#line 6289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
     LPCSTR lpExistingFileName,
     LPCSTR lpNewFileName,
     BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
     LPCWSTR lpExistingFileName,
     LPCWSTR lpNewFileName,
     BOOL bFailIfExists
    );




#line 6311 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
    LARGE_INTEGER TotalFileSize,
    LARGE_INTEGER TotalBytesTransferred,
    LARGE_INTEGER StreamSize,
    LARGE_INTEGER StreamBytesTransferred,
    DWORD dwStreamNumber,
    DWORD dwCallbackReason,
    HANDLE hSourceFile,
    HANDLE hDestinationFile,
    LPVOID lpData 
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
     LPCSTR lpExistingFileName,
     LPCSTR lpNewFileName,
     LPPROGRESS_ROUTINE lpProgressRoutine ,
     LPVOID lpData ,
     LPBOOL pbCancel ,
     DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
     LPCWSTR lpExistingFileName,
     LPCWSTR lpNewFileName,
     LPPROGRESS_ROUTINE lpProgressRoutine ,
     LPVOID lpData ,
     LPBOOL pbCancel ,
     DWORD dwCopyFlags
    );




#line 6354 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 6355 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
     LPCSTR lpExistingFileName,
     LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
     LPCWSTR lpExistingFileName,
     LPCWSTR lpNewFileName
    );




#line 6375 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
     LPCSTR lpExistingFileName,
     LPCSTR lpNewFileName,
     DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
     LPCWSTR lpExistingFileName,
     LPCWSTR lpNewFileName,
     DWORD dwFlags
    );




#line 6397 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



























#line 6425 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"








#line 6434 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"































#line 6466 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





























#line 6496 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
     LPCSTR lpName,
     DWORD dwOpenMode,
     DWORD dwPipeMode,
     DWORD nMaxInstances,
     DWORD nOutBufferSize,
     DWORD nInBufferSize,
     DWORD nDefaultTimeOut,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
     LPCWSTR lpName,
     DWORD dwOpenMode,
     DWORD dwPipeMode,
     DWORD nMaxInstances,
     DWORD nOutBufferSize,
     DWORD nInBufferSize,
     DWORD nDefaultTimeOut,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 6529 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
     HANDLE hNamedPipe,
     LPDWORD lpState,
     LPDWORD lpCurInstances,
     LPDWORD lpMaxCollectionCount,
     LPDWORD lpCollectDataTimeout,
     LPSTR lpUserName,
     DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
     HANDLE hNamedPipe,
     LPDWORD lpState,
     LPDWORD lpCurInstances,
     LPDWORD lpMaxCollectionCount,
     LPDWORD lpCollectDataTimeout,
     LPWSTR lpUserName,
     DWORD nMaxUserNameSize
    );




#line 6559 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
     LPCSTR lpNamedPipeName,
     LPVOID lpInBuffer,
     DWORD nInBufferSize,
     LPVOID lpOutBuffer,
     DWORD nOutBufferSize,
     LPDWORD lpBytesRead,
     DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
     LPCWSTR lpNamedPipeName,
     LPVOID lpInBuffer,
     DWORD nInBufferSize,
     LPVOID lpOutBuffer,
     DWORD nOutBufferSize,
     LPDWORD lpBytesRead,
     DWORD nTimeOut
    );




#line 6589 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
     LPCSTR lpNamedPipeName,
     DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
     LPCWSTR lpNamedPipeName,
     DWORD nTimeOut
    );




#line 6609 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
     LPCSTR lpRootPathName,
     LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
     LPCWSTR lpRootPathName,
     LPCWSTR lpVolumeName
    );




#line 6629 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
     LPCSTR lpRootPathName,
     LPSTR lpVolumeNameBuffer,
     DWORD nVolumeNameSize,
     LPDWORD lpVolumeSerialNumber,
     LPDWORD lpMaximumComponentLength,
     LPDWORD lpFileSystemFlags,
     LPSTR lpFileSystemNameBuffer,
     DWORD nFileSystemNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
     LPCWSTR lpRootPathName,
     LPWSTR lpVolumeNameBuffer,
     DWORD nVolumeNameSize,
     LPDWORD lpVolumeSerialNumber,
     LPDWORD lpMaximumComponentLength,
     LPDWORD lpFileSystemFlags,
     LPWSTR lpFileSystemNameBuffer,
     DWORD nFileSystemNameSize
    );




#line 6676 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CancelIo(
     HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
     HANDLE hEventLog,
     LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
     HANDLE hEventLog,
     LPCWSTR lpBackupFileName
    );




#line 6707 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
     HANDLE hEventLog,
     LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
     HANDLE hEventLog,
     LPCWSTR lpBackupFileName
    );




#line 6727 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
     HANDLE  hEventLog,
     HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
     HANDLE hEventLog,
     PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
     HANDLE hEventLog,
     PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
     LPCSTR lpUNCServerName,
     LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
     LPCWSTR lpUNCServerName,
     LPCWSTR lpSourceName
    );




#line 6785 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
     LPCSTR lpUNCServerName,
     LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
     LPCWSTR lpUNCServerName,
     LPCWSTR lpSourceName
    );




#line 6805 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
     LPCSTR lpUNCServerName,
     LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
     LPCWSTR lpUNCServerName,
     LPCWSTR lpFileName
    );




#line 6825 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
      HANDLE     hEventLog,
      DWORD      dwReadFlags,
      DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
      DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
      HANDLE     hEventLog,
      DWORD      dwReadFlags,
      DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
      DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );




#line 6855 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
      HANDLE     hEventLog,
      WORD       wType,
      WORD       wCategory,
      DWORD      dwEventID,
      PSID       lpUserSid,
      WORD       wNumStrings,
      DWORD      dwDataSize,
      LPCSTR   *lpStrings,
      LPVOID     lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
      HANDLE     hEventLog,
      WORD       wType,
      WORD       wCategory,
      DWORD      dwEventID,
      PSID       lpUserSid,
      WORD       wNumStrings,
      DWORD      dwDataSize,
      LPCWSTR   *lpStrings,
      LPVOID     lpRawData
    );




#line 6889 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"




typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD    dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
       HANDLE     hEventLog,
       DWORD      dwInfoLevel,
      LPVOID     lpBuffer,
       DWORD      cbBufSize,
      LPDWORD    pcbBytesNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
     HANDLE ExistingTokenHandle,
     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
     PHANDLE DuplicateTokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity (
     HANDLE Handle,
     SECURITY_INFORMATION RequestedInformation,
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     DWORD nLength,
     LPDWORD lpnLengthNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateNamedPipeClient(
     HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
RevertToSelf (
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadToken (
     PHANDLE Thread,
     HANDLE Token
    );

__declspec(dllimport)
BOOL
__stdcall
AccessCheck (
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     HANDLE ClientToken,
     DWORD DesiredAccess,
     PGENERIC_MAPPING GenericMapping,
     PPRIVILEGE_SET PrivilegeSet,
     LPDWORD PrivilegeSetLength,
     LPDWORD GrantedAccess,
     LPBOOL AccessStatus
    );



































#line 7015 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken (
     HANDLE ProcessHandle,
     DWORD DesiredAccess,
     PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken (
     HANDLE ThreadHandle,
     DWORD DesiredAccess,
     BOOL OpenAsSelf,
     PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation (
     HANDLE TokenHandle,
     TOKEN_INFORMATION_CLASS TokenInformationClass,
     LPVOID TokenInformation,
     DWORD TokenInformationLength,
     PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation (
     HANDLE TokenHandle,
     TOKEN_INFORMATION_CLASS TokenInformationClass,
     LPVOID TokenInformation,
     DWORD TokenInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges (
     HANDLE TokenHandle,
     BOOL DisableAllPrivileges,
     PTOKEN_PRIVILEGES NewState,
     DWORD BufferLength,
     PTOKEN_PRIVILEGES PreviousState,
     PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups (
     HANDLE TokenHandle,
     BOOL ResetToDefault,
     PTOKEN_GROUPS NewState,
     DWORD BufferLength,
     PTOKEN_GROUPS PreviousState,
     PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck (
     HANDLE ClientToken,
     PPRIVILEGE_SET RequiredPrivileges,
     LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
     LPCSTR SubsystemName,
     LPVOID HandleId,
     LPSTR ObjectTypeName,
     LPSTR ObjectName,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     DWORD DesiredAccess,
     PGENERIC_MAPPING GenericMapping,
     BOOL ObjectCreation,
     LPDWORD GrantedAccess,
     LPBOOL AccessStatus,
     LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW (
     LPCWSTR SubsystemName,
     LPVOID HandleId,
     LPWSTR ObjectTypeName,
     LPWSTR ObjectName,
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     DWORD DesiredAccess,
     PGENERIC_MAPPING GenericMapping,
     BOOL ObjectCreation,
     LPDWORD GrantedAccess,
     LPBOOL AccessStatus,
     LPBOOL pfGenerateOnClose
    );




#line 7134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





















































































































































#line 7284 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
     LPCSTR SubsystemName,
     LPVOID HandleId,
     LPSTR ObjectTypeName,
     LPSTR ObjectName,
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     HANDLE ClientToken,
     DWORD DesiredAccess,
     DWORD GrantedAccess,
     PPRIVILEGE_SET Privileges,
     BOOL ObjectCreation,
     BOOL AccessGranted,
     LPBOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW (
     LPCWSTR SubsystemName,
     LPVOID HandleId,
     LPWSTR ObjectTypeName,
     LPWSTR ObjectName,
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     HANDLE ClientToken,
     DWORD DesiredAccess,
     DWORD GrantedAccess,
     PPRIVILEGE_SET Privileges,
     BOOL ObjectCreation,
     BOOL AccessGranted,
     LPBOOL GenerateOnClose
    );




#line 7325 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
     LPCSTR SubsystemName,
     LPVOID HandleId,
     HANDLE ClientToken,
     DWORD DesiredAccess,
     PPRIVILEGE_SET Privileges,
     BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW (
     LPCWSTR SubsystemName,
     LPVOID HandleId,
     HANDLE ClientToken,
     DWORD DesiredAccess,
     PPRIVILEGE_SET Privileges,
     BOOL AccessGranted
    );




#line 7354 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
     LPCSTR SubsystemName,
     LPVOID HandleId,
     BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW (
     LPCWSTR SubsystemName,
     LPVOID HandleId,
     BOOL GenerateOnClose
    );




#line 7377 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
     LPCSTR SubsystemName,
     LPVOID HandleId,
     BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW (
     LPCWSTR SubsystemName,
     LPVOID HandleId,
     BOOL GenerateOnClose
    );




#line 7400 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
     LPCSTR SubsystemName,
     LPCSTR ServiceName,
     HANDLE ClientToken,
     PPRIVILEGE_SET Privileges,
     BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW (
     LPCWSTR SubsystemName,
     LPCWSTR ServiceName,
     HANDLE ClientToken,
     PPRIVILEGE_SET Privileges,
     BOOL AccessGranted
    );




#line 7427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

































































































#line 7525 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsValidSid (
     PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid (
     PSID pSid1,
     PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid (
    PSID pSid1,
    PSID pSid2
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired (
     UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid (
     PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
     BYTE nSubAuthorityCount,
     DWORD nSubAuthority0,
     DWORD nSubAuthority1,
     DWORD nSubAuthority2,
     DWORD nSubAuthority3,
     DWORD nSubAuthority4,
     DWORD nSubAuthority5,
     DWORD nSubAuthority6,
     DWORD nSubAuthority7,
     PSID *pSid
    );

__declspec(dllimport)
PVOID
__stdcall
FreeSid(
     PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
InitializeSid (
     PSID Sid,
     PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
     BYTE nSubAuthorityCount
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority (
     PSID pSid
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority (
     PSID pSid,
     DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount (
     PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetLengthSid (
     PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid (
     DWORD nDestinationSidLength,
     PSID pDestinationSid,
     PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted (
     DWORD GrantedAccess,
     DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted (
     DWORD GrantedAccess,
     DWORD DesiredAccess
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask (
     PDWORD AccessMask,
     PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl (
     PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl (
     PACL pAcl,
     DWORD nAclLength,
     DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation (
     PACL pAcl,
     LPVOID pAclInformation,
     DWORD nAclInformationLength,
     ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation (
     PACL pAcl,
     LPVOID pAclInformation,
     DWORD nAclInformationLength,
     ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce (
      PACL pAcl,
     DWORD dwAceRevision,
     DWORD dwStartingAceIndex,
     LPVOID pAceList,
     DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
DeleteAce (
      PACL pAcl,
     DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce (
     PACL pAcl,
     DWORD dwAceIndex,
     LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce (
      PACL pAcl,
     DWORD dwAceRevision,
     DWORD AccessMask,
     PSID pSid
    );












#line 7757 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce (
      PACL pAcl,
     DWORD dwAceRevision,
     DWORD AccessMask,
     PSID pSid
    );












#line 7781 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
      PACL pAcl,
     DWORD dwAceRevision,
     DWORD dwAccessMask,
     PSID pSid,
     BOOL bAuditSuccess,
     BOOL bAuditFailure
    );























































#line 7849 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce (
     PACL pAcl,
     LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor (
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor (
     PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength (
     PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl (
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSECURITY_DESCRIPTOR_CONTROL pControl,
     LPDWORD lpdwRevision
    );










#line 7903 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl (
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     BOOL bDaclPresent,
     PACL pDacl,
     BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl (
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     LPBOOL lpbDaclPresent,
     PACL *pDacl,
     LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl (
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     BOOL bSaclPresent,
     PACL pSacl,
     BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl (
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     LPBOOL lpbSaclPresent,
     PACL *pSacl,
     LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner (
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID pOwner,
     BOOL bOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner (
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID *pOwner,
     LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup (
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID pGroup,
     BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup (
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID *pGroup,
     LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
     PUCHAR RMControl 
    );

__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
     PSECURITY_DESCRIPTOR SecurityDescriptor,
     PUCHAR RMControl
    );

__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity (
     PSECURITY_DESCRIPTOR ParentDescriptor,
     PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
     BOOL IsDirectoryObject,
     HANDLE Token,
     PGENERIC_MAPPING GenericMapping
    );










































#line 8058 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity (
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR ModificationDescriptor,
     PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
     PGENERIC_MAPPING GenericMapping,
     HANDLE Token
    );













#line 8083 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateObjectSecurity (
     PSECURITY_DESCRIPTOR ObjectDescriptor,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR ResultantDescriptor,
     DWORD DescriptorLength,
     PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity (
      PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
MakeSelfRelativeSD (
     PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
     PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
     LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
BOOL
__stdcall
MakeAbsoluteSD (
     PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
     PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
     LPDWORD lpdwAbsoluteSecurityDescriptorSize,
     PACL pDacl,
     LPDWORD lpdwDaclSize,
     PACL pSacl,
     LPDWORD lpdwSaclSize,
     PSID pOwner,
     LPDWORD lpdwOwnerSize,
     PSID pPrimaryGroup,
     LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
BOOL
__stdcall
MakeAbsoluteSD2 (
     PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
     LPDWORD lpdwBufferSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
     LPCSTR lpFileName,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW (
     LPCWSTR lpFileName,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




#line 8161 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
     LPCSTR lpFileName,
     SECURITY_INFORMATION RequestedInformation,
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     DWORD nLength,
     LPDWORD lpnLengthNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW (
     LPCWSTR lpFileName,
     SECURITY_INFORMATION RequestedInformation,
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
     DWORD nLength,
     LPDWORD lpnLengthNeeded
    );




#line 8188 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity (
     HANDLE Handle,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR SecurityDescriptor
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
     LPCSTR lpPathName,
     BOOL bWatchSubtree,
     DWORD dwNotifyFilter
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
     LPCWSTR lpPathName,
     BOOL bWatchSubtree,
     DWORD dwNotifyFilter
    );




#line 8220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
     HANDLE hChangeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
     HANDLE hChangeHandle
    );


__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
     HANDLE hDirectory,
      LPVOID lpBuffer,
     DWORD nBufferLength,
     BOOL bWatchSubtree,
     DWORD dwNotifyFilter,
     LPDWORD lpBytesReturned,
     LPOVERLAPPED lpOverlapped,
     LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 8250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
     LPVOID lpAddress,
     SIZE_T dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
     LPVOID lpAddress,
     SIZE_T dwSize
    );

__declspec(dllimport)
LPVOID
__stdcall
MapViewOfFileEx(
     HANDLE hFileMappingObject,
     DWORD dwDesiredAccess,
     DWORD dwFileOffsetHigh,
     DWORD dwFileOffsetLow,
     SIZE_T dwNumberOfBytesToMap,
     LPVOID lpBaseAddress
    );

__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
     HANDLE hProcess,
     DWORD dwPriorityClass
    );

__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
     HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
     const void *lp,
     UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
     LPVOID lp,
     UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
     const void *lp,
     UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
     LPVOID lp,
     UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
     FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
     LPCSTR lpsz,
     UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
     LPCWSTR lpsz,
     UINT_PTR ucchMax
    );




#line 8352 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidA(
     LPCSTR lpSystemName,
     PSID Sid,
     LPSTR Name,
      LPDWORD cbName,
     LPSTR ReferencedDomainName,
      LPDWORD cbReferencedDomainName,
     PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidW(
     LPCWSTR lpSystemName,
     PSID Sid,
     LPWSTR Name,
      LPDWORD cbName,
     LPWSTR ReferencedDomainName,
      LPDWORD cbReferencedDomainName,
     PSID_NAME_USE peUse
    );




#line 8382 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameA(
     LPCSTR lpSystemName,
     LPCSTR lpAccountName,
     PSID Sid,
      LPDWORD cbSid,
     LPSTR ReferencedDomainName,
      LPDWORD cbReferencedDomainName,
     PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameW(
     LPCWSTR lpSystemName,
     LPCWSTR lpAccountName,
     PSID Sid,
      LPDWORD cbSid,
     LPWSTR ReferencedDomainName,
      LPDWORD cbReferencedDomainName,
     PSID_NAME_USE peUse
    );




#line 8412 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
     LPCSTR lpSystemName,
     LPCSTR lpName,
     PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
     LPCWSTR lpSystemName,
     LPCWSTR lpName,
     PLUID   lpLuid
    );




#line 8434 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameA(
     LPCSTR lpSystemName,
     PLUID   lpLuid,
     LPSTR lpName,
      LPDWORD cbName
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameW(
     LPCWSTR lpSystemName,
     PLUID   lpLuid,
     LPWSTR lpName,
      LPDWORD cbName
    );




#line 8458 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameA(
     LPCSTR lpSystemName,
     LPCSTR lpName,
     LPSTR lpDisplayName,
      LPDWORD cbDisplayName,
     LPDWORD lpLanguageId
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameW(
     LPCWSTR lpSystemName,
     LPCWSTR lpName,
     LPWSTR lpDisplayName,
      LPDWORD cbDisplayName,
     LPDWORD lpLanguageId
    );




#line 8484 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
     PLUID Luid
    );

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
     LPCSTR lpDef,
     LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
     LPCWSTR lpDef,
     LPDCB lpDCB
    );




#line 8511 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
     LPCSTR lpDef,
     LPDCB lpDCB,
     LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
     LPCWSTR lpDef,
     LPDCB lpDCB,
     LPCOMMTIMEOUTS lpCommTimeouts
    );




#line 8533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
     LPCSTR lpszName,
     HWND hWnd,
      LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
     LPCWSTR lpszName,
     HWND hWnd,
      LPCOMMCONFIG lpCC
    );




#line 8555 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
     LPCSTR lpszName,
     LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
     LPCWSTR lpszName,
     LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );




#line 8577 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
     LPCSTR lpszName,
     LPCOMMCONFIG lpCC,
     DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
     LPCWSTR lpszName,
     LPCOMMCONFIG lpCC,
     DWORD dwSize
    );




#line 8599 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





#line 8605 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetComputerNameA (
     LPSTR lpBuffer,
      LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetComputerNameW (
     LPWSTR lpBuffer,
      LPDWORD nSize
    );




#line 8625 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
     LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
     LPCWSTR lpComputerName
    );




#line 8643 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"











































































































































































#line 8815 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
     LPSTR lpBuffer,
      LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
     LPWSTR lpBuffer,
      LPDWORD nSize
    );




#line 8835 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"













#line 8849 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





#line 8855 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


#line 8858 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
     LPSTR lpszUsername,
     LPSTR lpszDomain,
     LPSTR lpszPassword,
     DWORD dwLogonType,
     DWORD dwLogonProvider,
     PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
     LPWSTR lpszUsername,
     LPWSTR lpszDomain,
     LPWSTR lpszPassword,
     DWORD dwLogonType,
     DWORD dwLogonProvider,
     PHANDLE phToken
    );




#line 8888 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
     LPSTR lpszUsername,
     LPSTR lpszDomain,
     LPSTR lpszPassword,
     DWORD dwLogonType,
     DWORD dwLogonProvider,
     PHANDLE phToken           ,
     PSID  *ppLogonSid       ,
     PVOID *ppProfileBuffer  ,
     LPDWORD pdwProfileLength  ,
     PQUOTA_LIMITS pQuotaLimits 
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
     LPWSTR lpszUsername,
     LPWSTR lpszDomain,
     LPWSTR lpszPassword,
     DWORD dwLogonType,
     DWORD dwLogonProvider,
     PHANDLE phToken           ,
     PSID  *ppLogonSid       ,
     PVOID *ppProfileBuffer  ,
     LPDWORD pdwProfileLength  ,
     PQUOTA_LIMITS pQuotaLimits 
    );




#line 8924 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
     HANDLE  hToken
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
     HANDLE hToken,
     LPCSTR lpApplicationName,
     LPSTR lpCommandLine,
     LPSECURITY_ATTRIBUTES lpProcessAttributes,
     LPSECURITY_ATTRIBUTES lpThreadAttributes,
     BOOL bInheritHandles,
     DWORD dwCreationFlags,
     LPVOID lpEnvironment,
     LPCSTR lpCurrentDirectory,
     LPSTARTUPINFOA lpStartupInfo,
     LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW (
     HANDLE hToken,
     LPCWSTR lpApplicationName,
     LPWSTR lpCommandLine,
     LPSECURITY_ATTRIBUTES lpProcessAttributes,
     LPSECURITY_ATTRIBUTES lpThreadAttributes,
     BOOL bInheritHandles,
     DWORD dwCreationFlags,
     LPVOID lpEnvironment,
     LPCWSTR lpCurrentDirectory,
     LPSTARTUPINFOW lpStartupInfo,
     LPPROCESS_INFORMATION lpProcessInformation
    );




#line 8969 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



























#line 8997 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
     HANDLE ThreadHandle
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
     HANDLE hExistingToken,
     DWORD dwDesiredAccess,
     LPSECURITY_ATTRIBUTES lpTokenAttributes,
     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
     TOKEN_TYPE TokenType,
     PHANDLE phNewToken);

__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
     HANDLE ExistingTokenHandle,
     DWORD Flags,
     DWORD DisableSidCount,
     PSID_AND_ATTRIBUTES SidsToDisable ,
     DWORD DeletePrivilegeCount,
     PLUID_AND_ATTRIBUTES PrivilegesToDelete ,
     DWORD RestrictedSidCount,
     PSID_AND_ATTRIBUTES SidsToRestrict ,
     PHANDLE NewTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
     HANDLE TokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
     HANDLE TokenHandle
    );


BOOL
__stdcall
CheckTokenMembership(
     HANDLE TokenHandle ,
     PSID SidToCheck,
     PBOOL IsMember
    );











































































































































#line 9194 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
















typedef struct tagHW_PROFILE_INFOA {
    DWORD  dwDockInfo;
    CHAR   szHwProfileGuid[39];
    CHAR   szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD  dwDockInfo;
    WCHAR  szHwProfileGuid[39];
    WCHAR  szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
#line 9227 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
     LPHW_PROFILE_INFOA  lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
     LPHW_PROFILE_INFOW  lpHwProfileInfo
    );




#line 9246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 9247 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
     LARGE_INTEGER *lpPerformanceCount
    );

__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
     LARGE_INTEGER *lpFrequency
    );



__declspec(dllimport)
BOOL
__stdcall
GetVersionExA(
      LPOSVERSIONINFOA lpVersionInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetVersionExW(
      LPOSVERSIONINFOW lpVersionInformation
    );




#line 9285 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
     LPOSVERSIONINFOEXA lpVersionInformation,
     DWORD dwTypeMask,
     DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
     LPOSVERSIONINFOEXW lpVersionInformation,
     DWORD dwTypeMask,
     DWORDLONG dwlConditionMask
    );




#line 9309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winerror.h"












#pragma once
#line 15 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winerror.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14887 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winerror.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 16745 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winerror.h"







































#line 16785 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winerror.h"


























































































































































































#line 16972 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winerror.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 26648 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winerror.h"
#line 9315 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"





























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

BOOL
__stdcall
GetSystemPowerStatus(
     LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

BOOL
__stdcall
SetSystemPowerState(
     BOOL fSuspend,
     BOOL fForce
    );

#line 9367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"













































































































































































































































































































































































#line 9733 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"




















































#line 9786 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"










































































#line 9861 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


















#line 9880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"










































#line 9923 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"























#line 9947 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"




















































#line 10000 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
      DWORD dwProcessId,
     DWORD *pSessionId
    );
















#line 10026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
    PULONG HighestNodeNumber
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
    UCHAR Processor,
    PUCHAR NodeNumber
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
    UCHAR Node,
    PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorMap(
    PSYSTEM_NUMA_INFORMATION Map,
    ULONG Length,
    PULONG ReturnedLength
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemory(
    PSYSTEM_NUMA_INFORMATION Memory,
    ULONG Length,
    PULONG ReturnedLength
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
    UCHAR Node,
    PULONGLONG AvailableBytes
    );

__declspec(dllimport)
ULONGLONG
__stdcall
NumaVirtualQueryNode(
      ULONG       NumberOfRanges,
      PULONG_PTR  RangeList,
     PULONG_PTR  VirtualPageAndNode,
      SIZE_T      MaximumOutputLength
    );







#line 10098 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"
#line 10099 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"


}
#line 10103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"



#line 10107 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winbase.h"

#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"























#line 25 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"









#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


extern "C" {
#line 39 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
















































#line 88 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




#line 93 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

































#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"













#line 141 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

















#line 159 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
















#line 176 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


#line 179 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"














































































#line 258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"









typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 274 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

#line 276 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"







































































































typedef struct _PSINJECTDATA {

    DWORD   DataBytes;      
    WORD    InjectionPoint; 
    WORD    PageNumber;     

    

} PSINJECTDATA, *PPSINJECTDATA;

































































typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
















































typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 544 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE;
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 550 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;


















typedef LONG   LCSCSTYPE;


typedef LONG    LCSGAMUTMATCH;


























typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ   *LPCIEXYZ;

typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;






typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#line 664 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

#line 666 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;


typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
#line 714 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


typedef struct {
        DWORD        bV5Size;
        LONG         bV5Width;
        LONG         bV5Height;
        WORD         bV5Planes;
        WORD         bV5BitCount;
        DWORD        bV5Compression;
        DWORD        bV5SizeImage;
        LONG         bV5XPelsPerMeter;
        LONG         bV5YPelsPerMeter;
        DWORD        bV5ClrUsed;
        DWORD        bV5ClrImportant;
        DWORD        bV5RedMask;
        DWORD        bV5GreenMask;
        DWORD        bV5BlueMask;
        DWORD        bV5AlphaMask;
        DWORD        bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD        bV5GammaRed;
        DWORD        bV5GammaGreen;
        DWORD        bV5GammaBlue;
        DWORD        bV5Intent;
        DWORD        bV5ProfileData;
        DWORD        bV5ProfileSize;
        DWORD        bV5Reserved;
} BITMAPV5HEADER,  *LPBITMAPV5HEADER, *PBITMAPV5HEADER;




#line 747 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"









#line 757 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 769 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 777 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"





typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;





typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;


#line 808 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 809 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD  *PMETARECORD;
typedef struct tagMETARECORD   *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 836 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER  *PMETAHEADER;
typedef struct tagMETAHEADER   *LPMETAHEADER;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 850 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
#line 888 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

    SIZEL   szlMicrometers;     
#line 891 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

#line 895 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"















    typedef BYTE BCHAR;
#line 912 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 972 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 973 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"















#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 989 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 1054 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 1055 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#line 1072 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 1073 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

#line 1075 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;


typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG_PTR    lbHatch;    
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG       lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32,  *NPLOGBRUSH32,  *LPLOGBRUSH32;

typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;


typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG_PTR    elpHatch;     
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;



typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;
#line 1134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
    PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;
#line 1144 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
#line 1194 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
#line 1218 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 1241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 1242 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



























#line 1270 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



#line 1274 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"






#line 1281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"








































#line 1322 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




                                    

                                    

                                    



































typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1527 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
















































































#line 1608 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




#line 1613 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



#line 1617 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



#line 1621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

































































































                             

                             

                             





#line 1729 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"










































































#line 1804 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"





































#line 1842 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



























typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
      };
      POINTL dmPosition;
    };
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 1915 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 1916 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
      };
      POINTL dmPosition;
    };
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 1963 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 1964 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 1976 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"








#line 1985 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"










#line 1996 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"






















#line 2019 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"












































































#line 2096 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




















































#line 2149 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"







#line 2157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"












































#line 2202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"





















































#line 2256 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    CHAR   DeviceName[32];
    CHAR   DeviceString[128];
    DWORD  StateFlags;
    CHAR   DeviceID[128];
    CHAR   DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
    WCHAR  DeviceID[128];
    WCHAR  DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#line 2282 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




















typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;





typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;






typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 2415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"





#line 2421 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
#line 2454 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef struct _FIXED {

    WORD    fract;
    short   value;



#line 2463 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;













#line 2496 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



#line 2500 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"







typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;













































typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
#line 2602 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 2603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;






typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;

































typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);




#line 2684 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"








#line 2693 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;
#line 2701 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);











#line 2716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



__declspec(dllimport) int __stdcall AddFontResourceA( LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW( LPCWSTR);




#line 2726 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall AnimatePalette(  HPALETTE,  UINT,   UINT,  const PALETTEENTRY *);
__declspec(dllimport) BOOL  __stdcall Arc(  HDC,  int,  int,  int,  int,  int,  int,  int,  int);
__declspec(dllimport) BOOL  __stdcall BitBlt(  HDC,  int,  int,  int,  int,  HDC,  int,  int,  DWORD);
__declspec(dllimport) BOOL  __stdcall CancelDC(  HDC);
__declspec(dllimport) BOOL  __stdcall Chord(  HDC,  int,  int,  int,  int,  int,  int,  int,  int);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(  HDC,  const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(  HDC);
__declspec(dllimport) int     __stdcall CombineRgn(  HRGN,  HRGN,  HRGN,  int);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(  HMETAFILE,  LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(  HMETAFILE,  LPCWSTR);




#line 2743 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateBitmap(  int,  int,  UINT,  UINT,  const void *);
__declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(  const BITMAP *);
__declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(  const LOGBRUSH *);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(  HDC,  int,  int);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(  HDC,  int,  int);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(  HDC);
__declspec(dllimport) HDC     __stdcall CreateDCA(  LPCSTR,  LPCSTR,  LPCSTR,  const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateDCW(  LPCWSTR,  LPCWSTR,  LPCWSTR,  const DEVMODEW *);




#line 2756 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(  HDC,  const BITMAPINFOHEADER *,  DWORD,  const void *,  const BITMAPINFO *,  UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(  HGLOBAL,  UINT);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(  const void *,  UINT);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(  int,  int,  int,  int);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(  const RECT *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(  const LOGFONTA *);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(  const LOGFONTW *);




#line 2768 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HFONT   __stdcall CreateFontA(  int,  int,  int,  int,  int,  DWORD,
                              DWORD,  DWORD,  DWORD,  DWORD,  DWORD,
                              DWORD,  DWORD,  LPCSTR);
__declspec(dllimport) HFONT   __stdcall CreateFontW(  int,  int,  int,  int,  int,  DWORD,
                              DWORD,  DWORD,  DWORD,  DWORD,  DWORD,
                              DWORD,  DWORD,  LPCWSTR);




#line 2779 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(  int,  COLORREF);
__declspec(dllimport) HDC     __stdcall CreateICA(  LPCSTR,  LPCSTR,  LPCSTR,  const DEVMODEA *);
__declspec(dllimport) HDC     __stdcall CreateICW(  LPCWSTR,  LPCWSTR,  LPCWSTR,  const DEVMODEW *);




#line 2788 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HDC     __stdcall CreateMetaFileA(  LPCSTR);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(  LPCWSTR);




#line 2795 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HPALETTE __stdcall CreatePalette(  const LOGPALETTE *);
__declspec(dllimport) HPEN    __stdcall CreatePen(  int,  int,  COLORREF);
__declspec(dllimport) HPEN    __stdcall CreatePenIndirect(  const LOGPEN *);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(  const POINT *,  const INT *,  int,  int);
__declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(  HBITMAP);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(  int,  int,  int,  int);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(  const RECT *);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(  int,  int,  int,  int,  int,  int);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(  DWORD,  LPCSTR,  LPCSTR,  LPCSTR);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(  DWORD,  LPCWSTR,  LPCWSTR,  LPCWSTR);




#line 2810 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(  COLORREF);

__declspec(dllimport) BOOL __stdcall DeleteDC(  HDC);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(  HMETAFILE);
__declspec(dllimport) BOOL __stdcall DeleteObject(  HGDIOBJ);
__declspec(dllimport) int  __stdcall DescribePixelFormat(  HDC,  int,  UINT,  LPPIXELFORMATDESCRIPTOR);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);






































#line 2863 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

















#line 2881 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

















#line 2899 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) int  __stdcall DeviceCapabilitiesA(  LPCSTR,  LPCSTR,  WORD,
                                 LPSTR,  const DEVMODEA *);
__declspec(dllimport) int  __stdcall DeviceCapabilitiesW(  LPCWSTR,  LPCWSTR,  WORD,
                                 LPWSTR,  const DEVMODEW *);




#line 2909 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) int  __stdcall DrawEscape(  HDC,  int,  int,  LPCSTR);
__declspec(dllimport) BOOL __stdcall Ellipse(  HDC,  int,  int,  int,  int);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(  HDC,  LPLOGFONTA,  FONTENUMPROCA,  LPARAM,  DWORD);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(  HDC,  LPLOGFONTW,  FONTENUMPROCW,  LPARAM,  DWORD);




#line 2921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 2922 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) int  __stdcall EnumFontFamiliesA(  HDC,  LPCSTR,  FONTENUMPROCA,  LPARAM);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(  HDC,  LPCWSTR,  FONTENUMPROCW,  LPARAM);




#line 2930 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) int  __stdcall EnumFontsA(  HDC,  LPCSTR,   FONTENUMPROCA,  LPARAM);
__declspec(dllimport) int  __stdcall EnumFontsW(  HDC,  LPCWSTR,   FONTENUMPROCW,  LPARAM);




#line 2937 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


__declspec(dllimport) int  __stdcall EnumObjects(  HDC,  int,  GOBJENUMPROC,  LPARAM);


#line 2943 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


__declspec(dllimport) BOOL __stdcall EqualRgn(  HRGN,  HRGN);
__declspec(dllimport) int  __stdcall Escape(  HDC,  int,  int,  LPCSTR,   LPVOID);
__declspec(dllimport) int  __stdcall ExtEscape(  HDC,  int,  int,  LPCSTR,   int,  LPSTR);
__declspec(dllimport) int  __stdcall ExcludeClipRect(  HDC,  int,  int,  int,  int);
__declspec(dllimport) HRGN __stdcall ExtCreateRegion(  const XFORM *,  DWORD,  const RGNDATA *);
__declspec(dllimport) BOOL  __stdcall ExtFloodFill(  HDC,  int,  int,  COLORREF,  UINT);
__declspec(dllimport) BOOL   __stdcall FillRgn(  HDC,  HRGN,  HBRUSH);
__declspec(dllimport) BOOL   __stdcall FloodFill(  HDC,  int,  int,  COLORREF);
__declspec(dllimport) BOOL   __stdcall FrameRgn(  HDC,  HRGN,  HBRUSH,  int,  int);
__declspec(dllimport) int   __stdcall GetROP2(  HDC);
__declspec(dllimport) BOOL  __stdcall GetAspectRatioFilterEx(  HDC,  LPSIZE);
__declspec(dllimport) COLORREF __stdcall GetBkColor(  HDC);




#line 2962 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) int   __stdcall GetBkMode(  HDC);
__declspec(dllimport) LONG  __stdcall GetBitmapBits(  HBITMAP,  LONG,  LPVOID);
__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(  HBITMAP,  LPSIZE);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(  HDC,  LPRECT,  UINT);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(  HDC,  LPPOINT);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(  HDC,  UINT,  UINT,  LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(  HDC,  UINT,  UINT,  LPINT);




#line 2977 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(  HDC,  UINT,  UINT,   LPINT);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(  HDC,  UINT,  UINT,   LPINT);




#line 2984 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(  HDC,  UINT,  UINT,  PFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(  HDC,  UINT,  UINT,  PFLOAT);




#line 2991 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(  HDC,  UINT,  UINT,  LPABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(  HDC,  UINT,  UINT,  LPABC);




#line 2998 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(  HDC,  UINT,  UINT,  LPABCFLOAT);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(  HDC,  UINT,  UINT,  LPABCFLOAT);




#line 3005 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) int   __stdcall GetClipBox(  HDC,   LPRECT);
__declspec(dllimport) int   __stdcall GetClipRgn(  HDC,  HRGN);
__declspec(dllimport) int   __stdcall GetMetaRgn(  HDC,  HRGN);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(  HDC,  UINT);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(  HDC,   LPPOINT);
__declspec(dllimport) int   __stdcall GetDeviceCaps(  HDC,  int);
__declspec(dllimport) int   __stdcall GetDIBits(  HDC,  HBITMAP,  UINT,  UINT,   LPVOID,   LPBITMAPINFO,  UINT);
__declspec(dllimport) DWORD __stdcall GetFontData(  HDC,  DWORD,  DWORD,  LPVOID,  DWORD);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(  HDC,  UINT,  UINT,  LPGLYPHMETRICS,  DWORD,  LPVOID,  const MAT2 *);
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(  HDC,  UINT,  UINT,  LPGLYPHMETRICS,  DWORD,  LPVOID,  const MAT2 *);




#line 3020 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) int   __stdcall GetGraphicsMode(  HDC);
__declspec(dllimport) int   __stdcall GetMapMode(  HDC);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(  HMETAFILE,  UINT,   LPVOID);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(  LPCSTR);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(  LPCWSTR);




#line 3030 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(  HDC,  COLORREF);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(  HPALETTE,  COLORREF);
__declspec(dllimport) DWORD __stdcall GetObjectType(  HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(  HDC,  UINT,  LPOUTLINETEXTMETRICA);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(  HDC,  UINT,  LPOUTLINETEXTMETRICW);




#line 3043 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

#line 3045 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) UINT  __stdcall GetPaletteEntries(  HPALETTE,  UINT,  UINT,  LPPALETTEENTRY);
__declspec(dllimport) COLORREF __stdcall GetPixel(  HDC,  int,  int);
__declspec(dllimport) int   __stdcall GetPixelFormat(  HDC);
__declspec(dllimport) int   __stdcall GetPolyFillMode(  HDC);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(  LPRASTERIZER_STATUS,  UINT);
__declspec(dllimport) int   __stdcall GetRandomRgn ( HDC,  HRGN,  INT);
__declspec(dllimport) DWORD __stdcall GetRegionData(  HRGN,  DWORD,   LPRGNDATA);
__declspec(dllimport) int   __stdcall GetRgnBox(  HRGN,   LPRECT);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(  int);
__declspec(dllimport) int   __stdcall GetStretchBltMode(  HDC);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteEntries(  HDC,  UINT,  UINT,  LPPALETTEENTRY);
__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(  HDC);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(  HDC);
__declspec(dllimport) UINT  __stdcall GetTextAlign(  HDC);
__declspec(dllimport) COLORREF __stdcall GetTextColor(  HDC);

__declspec(dllimport) BOOL  __stdcall GetTextExtentPointA(
                     HDC,
                     LPCSTR,
                     int,
                     LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPointW(
                     HDC,
                     LPCWSTR,
                     int,
                     LPSIZE
                    );




#line 3079 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32A(
                     HDC,
                     LPCSTR,
                     int,
                     LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentPoint32W(
                     HDC,
                     LPCWSTR,
                     int,
                     LPSIZE
                    );




#line 3097 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointA(
                     HDC,
                     LPCSTR,
                     int,
                     int,
                     LPINT,
                     LPINT,
                     LPSIZE
                    );
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointW(
                     HDC,
                     LPCWSTR,
                     int,
                     int,
                     LPINT,
                     LPINT,
                     LPSIZE
                    );




#line 3121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) int __stdcall GetTextCharset(  HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(  HDC hdc,  LPFONTSIGNATURE lpSig,  DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo(   DWORD  *lpSrc,   LPCHARSETINFO lpCs,  DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo(  HDC );
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(   HDC,  LPCSTR,  int,  int,   LPGCP_RESULTSA,  DWORD);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(   HDC,  LPCWSTR,  int,  int,   LPGCP_RESULTSW,  DWORD);




#line 3133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 3134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
















































































































































































#line 3311 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(  HDC,  LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(  HDC,  LPPOINT);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(  HDC,  LPSIZE);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(  HDC,  LPPOINT);

__declspec(dllimport) int  __stdcall IntersectClipRect(  HDC,  int,  int,  int,  int);
__declspec(dllimport) BOOL __stdcall InvertRgn(  HDC,  HRGN);
__declspec(dllimport) BOOL __stdcall LineDDA(  int,  int,  int,  int,  LINEDDAPROC,  LPARAM);
__declspec(dllimport) BOOL __stdcall LineTo(  HDC,  int,  int);
__declspec(dllimport) BOOL __stdcall MaskBlt(  HDC,  int,  int,  int,  int,
               HDC,  int,  int,  HBITMAP,  int,  int,  DWORD);
__declspec(dllimport) BOOL __stdcall PlgBlt(  HDC,  const POINT *,  HDC,  int,  int,  int,
                      int,  HBITMAP,  int,  int);

__declspec(dllimport) int  __stdcall OffsetClipRgn( HDC,  int,  int);
__declspec(dllimport) int  __stdcall OffsetRgn( HRGN,  int,  int);
__declspec(dllimport) BOOL __stdcall PatBlt( HDC,  int,  int,  int,  int,  DWORD);
__declspec(dllimport) BOOL __stdcall Pie( HDC,  int,  int,  int,  int,  int,  int,  int,  int);
__declspec(dllimport) BOOL __stdcall PlayMetaFile( HDC,  HMETAFILE);
__declspec(dllimport) BOOL __stdcall PaintRgn( HDC,  HRGN);
__declspec(dllimport) BOOL __stdcall PolyPolygon( HDC,  const POINT *,  const INT *,  int);
__declspec(dllimport) BOOL __stdcall PtInRegion( HRGN,  int,  int);
__declspec(dllimport) BOOL __stdcall PtVisible( HDC,  int,  int);
__declspec(dllimport) BOOL __stdcall RectInRegion( HRGN,  const RECT *);
__declspec(dllimport) BOOL __stdcall RectVisible( HDC,  const RECT *);
__declspec(dllimport) BOOL __stdcall Rectangle( HDC,  int,  int,  int,  int);
__declspec(dllimport) BOOL __stdcall RestoreDC( HDC,  int);
__declspec(dllimport) HDC  __stdcall ResetDCA( HDC,  const DEVMODEA *);
__declspec(dllimport) HDC  __stdcall ResetDCW( HDC,  const DEVMODEW *);




#line 3347 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) UINT __stdcall RealizePalette( HDC);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA( LPCSTR);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW( LPCWSTR);




#line 3355 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall RoundRect( HDC,  int,  int,  int,  int,  int,  int);
__declspec(dllimport) BOOL __stdcall ResizePalette( HPALETTE,  UINT);

__declspec(dllimport) int  __stdcall SaveDC( HDC);
__declspec(dllimport) int  __stdcall SelectClipRgn( HDC,  HRGN);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn( HDC,  HRGN,  int);
__declspec(dllimport) int  __stdcall SetMetaRgn( HDC);
__declspec(dllimport) HGDIOBJ __stdcall SelectObject( HDC,  HGDIOBJ);
__declspec(dllimport) HPALETTE __stdcall SelectPalette( HDC,  HPALETTE,  BOOL);
__declspec(dllimport) COLORREF __stdcall SetBkColor( HDC,  COLORREF);




#line 3370 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


__declspec(dllimport) int   __stdcall SetBkMode( HDC,  int);
__declspec(dllimport) LONG  __stdcall SetBitmapBits( HBITMAP,  DWORD,  const void *);

__declspec(dllimport) UINT  __stdcall SetBoundsRect( HDC,  const RECT *,  UINT);
__declspec(dllimport) int   __stdcall SetDIBits( HDC,  HBITMAP,  UINT,  UINT,  const void *,  const BITMAPINFO *,  UINT);
__declspec(dllimport) int   __stdcall SetDIBitsToDevice( HDC,  int,  int,  DWORD,  DWORD,  int,
         int,  UINT,  UINT,  const void *,  const BITMAPINFO *,  UINT);
__declspec(dllimport) DWORD __stdcall SetMapperFlags( HDC,  DWORD);
__declspec(dllimport) int   __stdcall SetGraphicsMode( HDC hdc,  int iMode);
__declspec(dllimport) int   __stdcall SetMapMode( HDC,  int);


__declspec(dllimport) DWORD __stdcall SetLayout( HDC,  DWORD);
__declspec(dllimport) DWORD __stdcall GetLayout( HDC);
#line 3387 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx( UINT,  const BYTE *);
__declspec(dllimport) UINT  __stdcall SetPaletteEntries( HPALETTE,  UINT,  UINT,  const PALETTEENTRY *);
__declspec(dllimport) COLORREF __stdcall SetPixel( HDC,  int,  int,  COLORREF);
__declspec(dllimport) BOOL   __stdcall SetPixelV( HDC,  int,  int,  COLORREF);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat( HDC,  int,  const PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) int   __stdcall SetPolyFillMode( HDC,  int);
__declspec(dllimport) BOOL   __stdcall StretchBlt( HDC,  int,  int,  int,  int,  HDC,  int,  int,  int,  int,  DWORD);
__declspec(dllimport) BOOL   __stdcall SetRectRgn( HRGN,  int,  int,  int,  int);
__declspec(dllimport) int   __stdcall StretchDIBits( HDC,  int,  int,  int,  int,  int,  int,  int,  int,  const
        void *,  const BITMAPINFO *,  UINT,  DWORD);
__declspec(dllimport) int   __stdcall SetROP2( HDC,  int);
__declspec(dllimport) int   __stdcall SetStretchBltMode( HDC,  int);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse( HDC,  UINT);
__declspec(dllimport) int   __stdcall SetTextCharacterExtra( HDC,  int);
__declspec(dllimport) COLORREF __stdcall SetTextColor( HDC,  COLORREF);
__declspec(dllimport) UINT  __stdcall SetTextAlign( HDC,  UINT);
__declspec(dllimport) BOOL  __stdcall SetTextJustification( HDC,  int,  int);
__declspec(dllimport) BOOL  __stdcall UpdateColors( HDC);








typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

typedef struct _BLENDFUNCTION
{
    BYTE   BlendOp;
    BYTE   BlendFlags;
    BYTE   SourceConstantAlpha;
    BYTE   AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;














__declspec(dllimport) BOOL  __stdcall AlphaBlend(  HDC,  int,  int,  int,  int,  HDC,  int,  int,  int,  int,  BLENDFUNCTION);

__declspec(dllimport) BOOL  __stdcall TransparentBlt( HDC, int, int, int, int, HDC, int, int, int, int, UINT);











__declspec(dllimport) BOOL  __stdcall GradientFill(  HDC,  PTRIVERTEX,  ULONG,  PVOID,  ULONG,  ULONG);

#line 3477 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(  HDC,  LPHANDLETABLE,  LPMETARECORD,  UINT);
typedef int (__stdcall* MFENUMPROC)(  HDC,  HANDLETABLE *,  METARECORD *,  int,  LPARAM);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(   HDC,  HMETAFILE,  MFENUMPROC,  LPARAM);

typedef int (__stdcall* ENHMFENUMPROC)(HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(  HDC);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(  HENHMETAFILE,  LPCSTR);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(  HENHMETAFILE,  LPCWSTR);




#line 3497 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(  HDC,  LPCSTR,  const RECT *,  LPCSTR);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(  HDC,  LPCWSTR,  const RECT *,  LPCWSTR);




#line 3504 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(  HENHMETAFILE);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(  HDC,  HENHMETAFILE,  ENHMFENUMPROC,
                                         LPVOID,  const RECT *);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(  LPCSTR);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(  LPCWSTR);




#line 3514 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(  HENHMETAFILE,  UINT,  LPBYTE);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(  HENHMETAFILE,  UINT,   LPSTR );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(  HENHMETAFILE,  UINT,   LPWSTR );




#line 3522 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(  HENHMETAFILE,  UINT,  LPENHMETAHEADER );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(  HENHMETAFILE,  UINT,  LPPALETTEENTRY );
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(  HENHMETAFILE,  UINT,
                                                   PIXELFORMATDESCRIPTOR *);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(  HENHMETAFILE,  UINT,  LPBYTE,  INT,  HDC);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(  HDC,  HENHMETAFILE,  const RECT *);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(  HDC,  LPHANDLETABLE,  const ENHMETARECORD *,  UINT);
__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(  UINT,  const BYTE *);
__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(  UINT,  const BYTE *,  HDC,  const METAFILEPICT *);
__declspec(dllimport) BOOL  __stdcall GdiComment(  HDC,  UINT,  const BYTE *);

#line 3534 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



__declspec(dllimport) BOOL __stdcall GetTextMetricsA(  HDC,  LPTEXTMETRICA);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(  HDC,  LPTEXTMETRICW);




#line 3544 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

#line 3546 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



typedef struct tagDIBSECTION {
    BITMAP              dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;

__declspec(dllimport) BOOL __stdcall AngleArc(  HDC,  int,  int,  DWORD,  FLOAT,  FLOAT);
__declspec(dllimport) BOOL __stdcall PolyPolyline(  HDC,  const POINT *,  const DWORD *,  DWORD);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(  HDC,  LPXFORM);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(  HDC,  const XFORM *);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(  HDC,  const XFORM *,  DWORD);
__declspec(dllimport) BOOL __stdcall CombineTransform(  LPXFORM,  const XFORM *,  const XFORM *);
__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(  HDC,  const BITMAPINFO *,  UINT,  void **,  HANDLE,  DWORD);
__declspec(dllimport) UINT __stdcall GetDIBColorTable(  HDC,  UINT,  UINT,  RGBQUAD *);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(  HDC,  UINT,  UINT,  const RGBQUAD *);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(  HDC,  const COLORADJUSTMENT *);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(  HDC,  LPCOLORADJUSTMENT);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(  HDC);


typedef BOOL (__stdcall* ABORTPROC)(  HDC,  int);


#line 3626 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;
#line 3635 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;
#line 3644 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
#line 3652 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




#line 3657 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) int __stdcall StartDocA( HDC,  const DOCINFOA *);
__declspec(dllimport) int __stdcall StartDocW( HDC,  const DOCINFOW *);




#line 3665 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) int __stdcall EndDoc( HDC);
__declspec(dllimport) int __stdcall StartPage( HDC);
__declspec(dllimport) int __stdcall EndPage( HDC);
__declspec(dllimport) int __stdcall AbortDoc( HDC);
__declspec(dllimport) int __stdcall SetAbortProc( HDC,  ABORTPROC);

__declspec(dllimport) BOOL __stdcall AbortPath( HDC);
__declspec(dllimport) BOOL __stdcall ArcTo( HDC,  int,  int,  int,  int,  int,  int,  int,  int);
__declspec(dllimport) BOOL __stdcall BeginPath( HDC);
__declspec(dllimport) BOOL __stdcall CloseFigure( HDC);
__declspec(dllimport) BOOL __stdcall EndPath( HDC);
__declspec(dllimport) BOOL __stdcall FillPath( HDC);
__declspec(dllimport) BOOL __stdcall FlattenPath( HDC);
__declspec(dllimport) int  __stdcall GetPath( HDC,  LPPOINT,  LPBYTE,  int);
__declspec(dllimport) HRGN __stdcall PathToRegion( HDC);
__declspec(dllimport) BOOL __stdcall PolyDraw( HDC,  const POINT *,  const BYTE *,  int);
__declspec(dllimport) BOOL __stdcall SelectClipPath( HDC,  int);
__declspec(dllimport) int  __stdcall SetArcDirection( HDC,  int);
__declspec(dllimport) BOOL __stdcall SetMiterLimit( HDC,  FLOAT,  PFLOAT);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath( HDC);
__declspec(dllimport) BOOL __stdcall StrokePath( HDC);
__declspec(dllimport) BOOL __stdcall WidenPath( HDC);
__declspec(dllimport) HPEN __stdcall ExtCreatePen( DWORD,  DWORD,  const LOGBRUSH *,  DWORD,  const DWORD *);
__declspec(dllimport) BOOL __stdcall GetMiterLimit( HDC,  PFLOAT);
__declspec(dllimport) int  __stdcall GetArcDirection( HDC);

__declspec(dllimport) int   __stdcall GetObjectA(  HGDIOBJ,  int,  LPVOID);
__declspec(dllimport) int   __stdcall GetObjectW(  HGDIOBJ,  int,  LPVOID);




#line 3698 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall MoveToEx(  HDC,  int,  int,  LPPOINT);
__declspec(dllimport) BOOL  __stdcall TextOutA(  HDC,  int,  int,  LPCSTR,  int);
__declspec(dllimport) BOOL  __stdcall TextOutW(  HDC,  int,  int,  LPCWSTR,  int);




#line 3706 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall ExtTextOutA(  HDC,  int,  int,  UINT,  const RECT *,  LPCSTR,  UINT,  const INT *);
__declspec(dllimport) BOOL  __stdcall ExtTextOutW(  HDC,  int,  int,  UINT,  const RECT *,  LPCWSTR,  UINT,  const INT *);




#line 3713 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall PolyTextOutA(  HDC,  const POLYTEXTA *,  int);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(  HDC,  const POLYTEXTW *,  int);




#line 3720 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(  const POINT *,  int,  int);
__declspec(dllimport) BOOL  __stdcall DPtoLP(  HDC,   LPPOINT,  int);
__declspec(dllimport) BOOL  __stdcall LPtoDP(  HDC,   LPPOINT,  int);
__declspec(dllimport) BOOL  __stdcall Polygon(  HDC,  const POINT *,  int);
__declspec(dllimport) BOOL  __stdcall Polyline(  HDC,  const POINT *,  int);

__declspec(dllimport) BOOL  __stdcall PolyBezier(  HDC,  const POINT *,  DWORD);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(  HDC,  const POINT *,  DWORD);
__declspec(dllimport) BOOL  __stdcall PolylineTo(  HDC,  const POINT *,  DWORD);

__declspec(dllimport) BOOL  __stdcall SetViewportExtEx(  HDC,  int,  int,  LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(  HDC,  int,  int,  LPPOINT);
__declspec(dllimport) BOOL  __stdcall SetWindowExtEx(  HDC,  int,  int,  LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(  HDC,  int,  int,  LPPOINT);

__declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(  HDC,  int,  int,  LPPOINT);
__declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(  HDC,  int,  int,  LPPOINT);
__declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(  HDC,  int,  int,  int,  int,  LPSIZE);
__declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(  HDC,  int,  int,  int,  int,  LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(  HBITMAP,  int,  int,  LPSIZE);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(  HDC,  int,  int,  LPPOINT);

__declspec(dllimport) int   __stdcall GetTextFaceA(  HDC,  int,  LPSTR);
__declspec(dllimport) int   __stdcall GetTextFaceW(  HDC,  int,  LPWSTR);




#line 3750 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(  HDC,  DWORD,  LPKERNINGPAIR);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(  HDC,  DWORD,  LPKERNINGPAIR);




#line 3766 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(  HDC,  LPPOINT);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(  HDC,  int,  int,  LPPOINT);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(  HGDIOBJ);

__declspec(dllimport) BOOL  __stdcall GdiFlush();
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(  DWORD);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit();









typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);




#line 3790 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

__declspec(dllimport) int         __stdcall SetICMMode(  HDC,  int);
__declspec(dllimport) BOOL        __stdcall CheckColorsInGamut(  HDC,  LPVOID,  LPVOID,  DWORD);
__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(  HDC);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceA(  HCOLORSPACE,  LPLOGCOLORSPACEA,  DWORD);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceW(  HCOLORSPACE,  LPLOGCOLORSPACEW,  DWORD);




#line 3801 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(  LPLOGCOLORSPACEA);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(  LPLOGCOLORSPACEW);




#line 3808 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(  HDC,  HCOLORSPACE);
__declspec(dllimport) BOOL        __stdcall DeleteColorSpace(  HCOLORSPACE);
__declspec(dllimport) BOOL        __stdcall GetICMProfileA(  HDC,   LPDWORD,  LPSTR);
__declspec(dllimport) BOOL        __stdcall GetICMProfileW(  HDC,   LPDWORD,  LPWSTR);




#line 3817 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall SetICMProfileA(  HDC,  LPSTR);
__declspec(dllimport) BOOL        __stdcall SetICMProfileW(  HDC,  LPWSTR);




#line 3824 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall GetDeviceGammaRamp(  HDC,  LPVOID);
__declspec(dllimport) BOOL        __stdcall SetDeviceGammaRamp(  HDC,  LPVOID);
__declspec(dllimport) BOOL        __stdcall ColorMatchToTarget(  HDC,  HDC,  DWORD);
__declspec(dllimport) int         __stdcall EnumICMProfilesA(  HDC,  ICMENUMPROCA,  LPARAM);
__declspec(dllimport) int         __stdcall EnumICMProfilesW(  HDC,  ICMENUMPROCW,  LPARAM);




#line 3834 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyA(  DWORD,  LPSTR,  LPSTR,  UINT);
__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyW(  DWORD,  LPWSTR,  LPWSTR,  UINT);




#line 3841 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
#line 3842 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


__declspec(dllimport) BOOL        __stdcall ColorCorrectPalette(  HDC,  HPALETTE,  DWORD,  DWORD);
#line 3846 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"









#line 3856 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




















































































































#line 3973 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




















#line 3994 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"









#line 4004 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,

  EMRSETLAYOUT,         *PEMRSETLAYOUT,
#line 4052 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN elp;              
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR        emr;
    DWORD      ihBrush;          
    LOGBRUSH32 lb;               
                                 
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEA  lcs;        
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;

#line 4635 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"



typedef struct tagEMREXTESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMREXTESCAPE,  *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbDriver;           
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR     emr;
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRSETICMPROFILE,  *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;        
    DWORD           dwFlags;    
    DWORD           cbData;     
    BYTE            Data[1];    
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR     emr;
    DWORD   dwAction;           
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR     emr;
    DWORD   ihPalette;          
    DWORD   nFirstEntry;        
    DWORD   nPalEntries;        
    DWORD   nReserved;          
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR       emr;
    RECTL     rclBounds;          
    DWORD     nVer;
    DWORD     nTri;
    ULONG     ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;


#line 4760 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"










#line 4771 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);




#line 4791 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);




#line 4817 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP,  *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);

#line 4916 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

#line 4918 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


}
#line 4922 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"


#line 4925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wingdi.h"

#line 164 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
























#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






extern "C" {
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;
#line 51 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);



typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 82 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





















#line 104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
#line 114 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;












#line 137 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;

#line 148 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




























#line 186 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















#line 202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
wvsprintfA(
     LPSTR,
     LPCSTR,
     va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
     LPWSTR,
     LPCWSTR,
     va_list arglist);




#line 225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__cdecl
wsprintfA(
     LPSTR,
     LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
     LPWSTR,
     LPCWSTR,
    ...);




#line 245 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




































#line 282 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









































#line 324 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















#line 340 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


























#line 367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








































































































































































#line 536 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









































#line 578 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 585 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





































#line 623 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


















#line 642 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





#line 648 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 653 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 660 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 663 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
































typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#line 715 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;

























#line 750 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

























#line 776 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 780 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 784 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



































































#line 852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;

#line 890 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















typedef struct tagKBDLLHOOKSTRUCT {
    DWORD   vkCode;
    DWORD   scanCode;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT,  *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT   pt;
    DWORD   mouseData;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT,  *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;

#line 927 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;














#line 964 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 976 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 977 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"














#line 992 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 997 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 1007 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
     LPCSTR pwszKLID,
     UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
     LPCWSTR pwszKLID,
     UINT Flags);




#line 1030 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
     HKL hkl,
     UINT Flags);







#line 1047 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
     UINT wVirtKey,
     UINT wScanCode,
     const BYTE *lpKeyState,
     LPWSTR pwszBuff,
     int cchBuff,
     UINT wFlags,
     HKL dwhkl);
#line 1061 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
     HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
     LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
     LPWSTR pwszKLID);




#line 1083 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
         int nBuff,
         HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
     DWORD idThread
);
#line 1099 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



typedef struct tagMOUSEMOVEPOINT {
    int   x;
    int   y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;







__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
     UINT             cbSize,
     LPMOUSEMOVEPOINT lppt,
     LPMOUSEMOVEPOINT lpptBuf,
     int              nBufPoints,
     DWORD            resolution
);

#line 1127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"























__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
     LPCSTR lpszDesktop,
     LPCSTR lpszDevice,
     LPDEVMODEA pDevmode,
     DWORD dwFlags,
     ACCESS_MASK dwDesiredAccess,
     LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
     LPCWSTR lpszDesktop,
     LPCWSTR lpszDevice,
     LPDEVMODEW pDevmode,
     DWORD dwFlags,
     ACCESS_MASK dwDesiredAccess,
     LPSECURITY_ATTRIBUTES lpsa);




#line 1175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 1177 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 1178 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
     LPCSTR lpszDesktop,
     DWORD dwFlags,
     BOOL fInherit,
     ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
     LPCWSTR lpszDesktop,
     DWORD dwFlags,
     BOOL fInherit,
     ACCESS_MASK dwDesiredAccess);




#line 1200 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
     DWORD dwFlags,
     BOOL fInherit,
     ACCESS_MASK dwDesiredAccess);

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
     HWINSTA hwinsta,
     DESKTOPENUMPROCA lpEnumFunc,
     LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
     HWINSTA hwinsta,
     DESKTOPENUMPROCW lpEnumFunc,
     LPARAM lParam);




#line 1228 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
     HDESK hDesktop,
     WNDENUMPROC lpfn,
     LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
     HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
     HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
     HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
     DWORD dwThreadId);
#line 1261 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
     LPCSTR              lpwinsta,
     DWORD                 dwReserved,
     ACCESS_MASK           dwDesiredAccess,
     LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
     LPCWSTR              lpwinsta,
     DWORD                 dwReserved,
     ACCESS_MASK           dwDesiredAccess,
     LPSECURITY_ATTRIBUTES lpsa);




#line 1302 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
     LPCSTR lpszWinSta,
     BOOL fInherit,
     ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
     LPCWSTR lpszWinSta,
     BOOL fInherit,
     ACCESS_MASK dwDesiredAccess);




#line 1322 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
     WINSTAENUMPROCA lpEnumFunc,
     LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
     WINSTAENUMPROCW lpEnumFunc,
     LPARAM lParam);




#line 1340 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
     HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
     HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);
#line 1360 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
     HANDLE hObj,
     PSECURITY_INFORMATION pSIRequested,
     PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
     HANDLE hObj,
     PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID,
     DWORD nLength,
     LPDWORD lpnLengthNeeded);






typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
     HANDLE hObj,
     int nIndex,
     PVOID pvInfo,
     DWORD nLength,
     LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
     HANDLE hObj,
     int nIndex,
     PVOID pvInfo,
     DWORD nLength,
     LPDWORD lpnLengthNeeded);




#line 1415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
     HANDLE hObj,
     int nIndex,
     PVOID pvInfo,
     DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
     HANDLE hObj,
     int nIndex,
     PVOID pvInfo,
     DWORD nLength);




#line 1437 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 1439 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#line 1484 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 1485 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#line 1521 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;



} MSG, *PMSG,  *NPMSG,  *LPMSG;











#line 1551 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"













































#line 1597 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





















#line 1619 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



































#line 1655 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 1663 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
















typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;



















#line 1706 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 1707 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






















typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;
#line 1743 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






















#line 1766 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










#line 1777 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















#line 1795 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 1800 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"














#line 1815 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 1817 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 1824 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









































#line 1866 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 1867 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 1869 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 1870 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






















#line 1893 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 1898 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 1901 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 1905 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 1915 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










#line 1926 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










#line 1937 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



























#line 1965 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 1967 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 1971 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



























#line 1999 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 2002 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 2006 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 2011 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 2015 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 2022 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
























#line 2047 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 2051 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 2055 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 2065 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 2073 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















#line 2094 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




































#line 2131 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










#line 2142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 2143 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
















#line 2160 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
     LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
     LPCWSTR lpString);




#line 2177 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"























typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;




























#line 2246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 2248 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 2258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





#line 2264 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND  hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
      LPTRACKMOUSEEVENT lpEventTrack);
#line 2279 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 2283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 2284 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 2287 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


































































#line 2354 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















#line 2372 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 2377 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





#line 2383 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 2387 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 2390 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















#line 2411 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 2415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"























































__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
     HDC hdc,
      LPRECT qrc,
     UINT edge,
     UINT grfFlags);









#line 2488 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

































#line 2522 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
     HDC,
      LPRECT,
     UINT,
     UINT);










#line 2546 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 2549 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawCaption( HWND,  HDC,  const RECT *,  UINT);





__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
     HWND hwnd,
     int idAni,
     const RECT * lprcFrom,
     const RECT * lprcTo);

#line 2569 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
























#line 2594 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 2597 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 2605 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















#line 2626 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










typedef struct tagACCEL {

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;




#line 2646 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#line 2692 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;





#line 2711 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


typedef struct tagNMHDR
{
    HWND      hwndFrom;
    UINT_PTR  idFrom;
    UINT      code;         
}   NMHDR;
typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
#line 2727 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"











#line 2739 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



















#line 2759 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 2766 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 2767 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    ULONG_PTR  itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;





typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    ULONG_PTR   itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    ULONG_PTR  itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    ULONG_PTR   itemData1;
    UINT        itemID2;
    ULONG_PTR   itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;







__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
     LPMSG lpMsg,
     HWND hWnd,
     UINT wMsgFilterMin,
     UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
     LPMSG lpMsg,
     HWND hWnd,
     UINT wMsgFilterMin,
     UINT wMsgFilterMax);




#line 2848 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
     const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
     const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
     const MSG *lpMsg);




#line 2871 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
     int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
     LPMSG lpMsg,
     HWND hWnd,
     UINT wMsgFilterMin,
     UINT wMsgFilterMax,
     UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
     LPMSG lpMsg,
     HWND hWnd,
     UINT wMsgFilterMin,
     UINT wMsgFilterMax,
     UINT wRemoveMsg);




#line 2901 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"













#line 2915 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 2918 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
     HWND hWnd,
     int id,
     UINT fsModifiers,
     UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
     HWND hWnd,
     int id);






















#line 2957 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 2966 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
     UINT uFlags,
     DWORD dwReserved);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
     BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
     LPARAM lParam);
#line 3008 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 3030 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam,
     UINT fuFlags,
     UINT uTimeout,
     PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam,
     UINT fuFlags,
     UINT uTimeout,
     PDWORD_PTR lpdwResult);




#line 3058 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 3080 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam,
     SENDASYNCPROC lpResultCallBack,
     ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam,
     SENDASYNCPROC lpResultCallBack,
     ULONG_PTR dwData);




#line 3106 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


































#line 3141 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
     DWORD,
     LPDWORD,
     UINT,
     WPARAM,
     LPARAM);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
     DWORD,
     LPDWORD,
     UINT,
     WPARAM,
     LPARAM);




#line 3168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"












#line 3181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















#line 3202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 3206 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 3209 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;





#line 3221 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
     HANDLE hRecipient,
     LPVOID NotificationFilter,
     DWORD Flags
    );
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
     HANDLE hRecipient,
     LPVOID NotificationFilter,
     DWORD Flags
    );




#line 3243 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
     HDEVNOTIFY Handle
    );
#line 3251 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 3274 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
     DWORD idThread,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
     DWORD idThread,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 3296 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 3306 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 3315 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
     DWORD idAttach,
     DWORD idAttachTo,
     BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
     LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);


__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
     HANDLE hProcess,
     DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall



#line 3353 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
DefWindowProcA(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 3366 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
DefWindowProcW(
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 3376 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
void
__stdcall
PostQuitMessage(
     int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
     WNDPROC lpPrevWndFunc,
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
     WNDPROC lpPrevWndFunc,
     HWND hWnd,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 3408 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



























#line 3436 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);


__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
     LPVOID lpReserved);









#line 3459 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
     UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
     const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
     const WNDCLASSW *lpWndClass);




#line 3487 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
     LPCSTR lpClassName,
     HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
     LPCWSTR lpClassName,
     HINSTANCE hInstance);




#line 3505 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
     HINSTANCE hInstance,
     LPCSTR lpClassName,
     LPWNDCLASSA lpWndClass);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
     HINSTANCE hInstance,
     LPCWSTR lpClassName,
     LPWNDCLASSW lpWndClass);




#line 3525 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
     const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
     const WNDCLASSEXW *);




#line 3542 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
     HINSTANCE,
     LPCSTR,
     LPWNDCLASSEXA);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
     HINSTANCE,
     LPCWSTR,
     LPWNDCLASSEXW);




#line 3562 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 3564 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










#line 3575 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
     DWORD dwExStyle,
     LPCSTR lpClassName,
     LPCSTR lpWindowName,
     DWORD dwStyle,
     int X,
     int Y,
     int nWidth,
     int nHeight,
     HWND hWndParent,
     HMENU hMenu,
     HINSTANCE hInstance,
     LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
     DWORD dwExStyle,
     LPCWSTR lpClassName,
     LPCWSTR lpWindowName,
     DWORD dwStyle,
     int X,
     int Y,
     int nWidth,
     int nHeight,
     HWND hWndParent,
     HMENU hMenu,
     HINSTANCE hInstance,
     LPVOID lpParam);




#line 3613 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"













#line 3627 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindow(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsMenu(
     HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
     HWND hWndParent,
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
     HWND hWnd,
     int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
     HWND hWnd,
     DWORD dwTime,
     DWORD dwFlags);
#line 3669 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




























































#line 3730 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
     HWND hWnd,
     int nCmdShow);
#line 3739 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
     HWND hWnd,
     BOOL bInvert);


typedef struct {
    UINT  cbSize;
    HWND  hwnd;
    DWORD dwFlags;
    UINT  uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
    PFLASHWINFO pfwi);








#line 3770 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
     HWND hWnd,
     BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
     HWND hWnd,
     int X,
     int Y,
     int nWidth,
     int nHeight,
     BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
     HWND hWnd,
     HWND hWndInsertAfter,
     int X,
     int Y,
     int cx,
     int cy,
     UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
     HWND hWnd,
     WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
     HWND hWnd,
     const WINDOWPLACEMENT *lpwndpl);




__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
     int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
     HDWP hWinPosInfo,
     HWND hWnd,
     HWND hWndInsertAfter,
     int x,
     int y,
     int cx,
     int cy,
     UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
     HDWP hWinPosInfo);

#line 3856 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
     HWND hWnd);






















#line 3909 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"














#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack2.h"
#line 3924 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#line 3944 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#line 3951 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#line 3971 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#line 3978 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 3981 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
     HINSTANCE hInstance,
     LPCSTR lpTemplateName,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
     HINSTANCE hInstance,
     LPCWSTR lpTemplateName,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);




#line 4005 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
     HINSTANCE hInstance,
     LPCDLGTEMPLATEA lpTemplate,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
     HINSTANCE hInstance,
     LPCDLGTEMPLATEW lpTemplate,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);




#line 4029 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 4039 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 4049 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
     HINSTANCE hInstance,
     LPCSTR lpTemplateName,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
     HINSTANCE hInstance,
     LPCWSTR lpTemplateName,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);




#line 4073 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
     HINSTANCE hInstance,
     LPCDLGTEMPLATEA hDialogTemplate,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
     HINSTANCE hInstance,
     LPCDLGTEMPLATEW hDialogTemplate,
     HWND hWndParent,
     DLGPROC lpDialogFunc,
     LPARAM dwInitParam);




#line 4097 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 4107 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 4117 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EndDialog(
     HWND hDlg,
     INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
     HWND hDlg,
     int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
     HWND hDlg,
     int nIDDlgItem,
     UINT uValue,
     BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
     HWND hDlg,
     int nIDDlgItem,
     BOOL *lpTranslated,
     BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
     HWND hDlg,
     int nIDDlgItem,
     LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
     HWND hDlg,
     int nIDDlgItem,
     LPCWSTR lpString);




#line 4169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
     HWND hDlg,
     int nIDDlgItem,
     LPSTR lpString,
     int nMaxCount);
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
     HWND hDlg,
     int nIDDlgItem,
     LPWSTR lpString,
     int nMaxCount);




#line 4191 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
     HWND hDlg,
     int nIDButton,
     UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
     HWND hDlg,
     int nIDFirstButton,
     int nIDLastButton,
     int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
     HWND hDlg,
     int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
     HWND hDlg,
     int nIDDlgItem,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
     HWND hDlg,
     int nIDDlgItem,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 4239 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
     HWND hDlg,
     HWND hCtl,
     BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
     HWND hDlg,
     HWND hCtl,
     BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
     HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall



#line 4275 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
DefDlgProcA(
     HWND hDlg,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 4288 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
DefDlgProcW(
     HWND hDlg,
     UINT Msg,
     WPARAM wParam,
     LPARAM lParam);




#line 4298 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 4307 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 4309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
     LPMSG lpMsg,
     int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
     LPMSG lpMsg,
     int nCode);




#line 4329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 4331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
     HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);

#line 4360 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
     HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
     HWND hWndRemove,
     HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
     UINT uFormat,
     HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
     UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
     LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
     LPCWSTR lpszFormat);




#line 4414 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
     UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
     UINT format,
     LPSTR lpszFormatName,
     int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
     UINT format,
     LPWSTR lpszFormatName,
     int cchMaxCount);




#line 4446 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
     UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
     UINT *paFormatPriorityList,
     int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);

#line 4473 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
     LPCSTR lpszSrc,
     LPSTR lpszDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
     LPCWSTR lpszSrc,
     LPSTR lpszDst);




#line 4495 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
     LPCSTR lpszSrc,
     LPSTR lpszDst);
__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
     LPCSTR lpszSrc,
     LPWSTR lpszDst);




#line 4513 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
     LPCSTR lpszSrc,
     LPSTR lpszDst,
     DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
     LPCWSTR lpszSrc,
     LPSTR lpszDst,
     DWORD cchDstLength);




#line 4533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
     LPCSTR lpszSrc,
     LPSTR lpszDst,
     DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
     LPCSTR lpszSrc,
     LPWSTR lpszDst,
     DWORD cchDstLength);




#line 4553 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
      LPWSTR lpsz);




#line 4569 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
      LPSTR lpsz,
     DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
      LPWSTR lpsz,
     DWORD cchLength);




#line 4587 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
      LPWSTR lpsz);




#line 4603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
      LPSTR lpsz,
     DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
      LPWSTR lpsz,
     DWORD cchLength);




#line 4621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
     LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
     LPCWSTR lpsz);




#line 4637 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
     LPCSTR lpszStart,
     LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
     LPCWSTR lpszStart,
     LPCWSTR lpszCurrent);




#line 4655 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
      WORD CodePage,
      LPCSTR lpCurrentChar,
      DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
      WORD CodePage,
      LPCSTR lpStart,
      LPCSTR lpCurrentChar,
      DWORD dwFlags);
#line 4674 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
     CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
     WCHAR ch);




#line 4709 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
     CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
     WCHAR ch);




#line 4725 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
     CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
     WCHAR ch);




#line 4741 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
     CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
     WCHAR ch);




#line 4757 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 4759 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
SetFocus(
     HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
     int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
     int vKey);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardState(
     PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
     LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
     LONG lParam,
     LPSTR lpString,
     int nSize
    );
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
     LONG lParam,
     LPWSTR lpString,
     int nSize
    );




#line 4829 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetKeyboardType(
     int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
     UINT uVirtKey,
     UINT uScanCode,
     const BYTE *lpKeyState,
     LPWORD lpChar,
     UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
     UINT uVirtKey,
     UINT uScanCode,
     const BYTE *lpKeyState,
     LPWORD lpChar,
     UINT uFlags,
     HKL dwhkl);
#line 4858 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
ToUnicode(
     UINT wVirtKey,
     UINT wScanCode,
     const BYTE *lpKeyState,
     LPWSTR pwszBuff,
     int cchBuff,
     UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
     WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
     CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
     WCHAR ch);




#line 4891 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
     CHAR  ch,
     HKL   dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
     WCHAR  ch,
     HKL   dwhkl);




#line 4910 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 4911 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





#line 4917 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
void
__stdcall
keybd_event(
     BYTE bVk,
     BYTE bScan,
     DWORD dwFlags,
     ULONG_PTR dwExtraInfo);
















__declspec(dllimport)
void
__stdcall
mouse_event(
     DWORD dwFlags,
     DWORD dx,
     DWORD dy,
     DWORD dwData,
     ULONG_PTR dwExtraInfo);

















































#line 5001 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"












#line 5014 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
     UINT uCode,
     UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
     UINT uCode,
     UINT uMapType);




#line 5032 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
     UINT uCode,
     UINT uMapType,
     HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
     UINT uCode,
     UINT uMapType,
     HKL dwhkl);




#line 5053 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 5054 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
     UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
     DWORD nCount,
     const HANDLE *pHandles,
     BOOL fWaitAll,
     DWORD dwMilliseconds,
     DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
     DWORD nCount,
     const HANDLE *pHandles,
     DWORD dwMilliseconds,
     DWORD dwWakeMask,
     DWORD dwFlags);




















#line 5126 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 5135 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 5138 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



















__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
     HWND hWnd,
     UINT_PTR nIDEvent,
     UINT uElapse,
     TIMERPROC lpTimerFunc);

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
     HWND hWnd,
     UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
     HWND hWnd,
     BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
     HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
     HINSTANCE hInstance,
     LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
     HINSTANCE hInstance,
     LPCWSTR lpTableName);




#line 5209 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
     LPACCEL,  int);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
     LPACCEL,  int);




#line 5225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
     HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
     HACCEL hAccelSrc,
     LPACCEL lpAccelDst,
     int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
     HACCEL hAccelSrc,
     LPACCEL lpAccelDst,
     int cAccelEntries);




#line 5251 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
     HWND hWnd,
     HACCEL hAccTable,
     LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
     HWND hWnd,
     HACCEL hAccTable,
     LPMSG lpMsg);




#line 5273 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 5275 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















































































#line 5357 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 5364 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 5368 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 5376 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 5379 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 5383 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 5387 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 5389 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 5397 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 5399 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
     int nIndex);


#line 5409 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
     HINSTANCE hInstance,
     LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
     HINSTANCE hInstance,
     LPCWSTR lpMenuName);




#line 5429 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
     const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
     const MENUTEMPLATEW *lpMenuTemplate);




#line 5445 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
GetMenu(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
     HWND hWnd,
     HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
     HMENU hMenu,
     UINT cmd,
     LPCSTR lpszNewItem,
     UINT cmdInsert,
     UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
     HMENU hMenu,
     UINT cmd,
     LPCWSTR lpszNewItem,
     UINT cmdInsert,
     UINT flags);




#line 5482 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
     HWND hWnd,
     HMENU hMenu,
     UINT uIDHiliteItem,
     UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
     HMENU hMenu,
     UINT uIDItem,
     LPSTR lpString,
     int nMaxCount,
     UINT uFlag);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
     HMENU hMenu,
     UINT uIDItem,
     LPWSTR lpString,
     int nMaxCount,
     UINT uFlag);




#line 5515 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetMenuState(
     HMENU hMenu,
     UINT uId,
     UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
     HWND hWnd);




#line 5534 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
     HWND hWnd,
     BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
     HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
     HMENU hMenu,
     UINT uIDCheckItem,
     UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
     HMENU hMenu,
     UINT uIDEnableItem,
     UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
     HMENU hMenu,
     int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
     HMENU hMenu,
     int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
     HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
     HMENU hMenu,
     UINT uPosition,
     UINT uFlags,
     UINT_PTR uIDNewItem,
     LPCSTR lpNewItem
    );
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
     HMENU hMenu,
     UINT uPosition,
     UINT uFlags,
     UINT_PTR uIDNewItem,
     LPCWSTR lpNewItem
    );




#line 5623 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
     HMENU hMenu,
     UINT uFlags,
     UINT_PTR uIDNewItem,
     LPCSTR lpNewItem
    );
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
     HMENU hMenu,
     UINT uFlags,
     UINT_PTR uIDNewItem,
     LPCWSTR lpNewItem
    );




#line 5647 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
     HMENU hMnu,
     UINT uPosition,
     UINT uFlags,
     UINT_PTR uIDNewItem,
     LPCSTR lpNewItem
    );
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
     HMENU hMnu,
     UINT uPosition,
     UINT uFlags,
     UINT_PTR uIDNewItem,
     LPCWSTR lpNewItem
    );




#line 5673 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
     HMENU hMenu,
     UINT uPosition,
     UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
     HMENU hMenu,
     UINT uPosition,
     UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
     HMENU hMenu,
     UINT uPosition,
     UINT uFlags,
     HBITMAP hBitmapUnchecked,
     HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
     HMENU hMenu,
     UINT uFlags,
     int x,
     int y,
     int nReserved,
     HWND hWnd,
     const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
     HMENU,
     UINT,
     int,
     int,
     HWND,
     LPTPMPARAMS);
#line 5742 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















typedef struct tagMENUINFO
{
    DWORD   cbSize;
    DWORD   fMask;
    DWORD   dwStyle;
    UINT    cyMax;
    HBRUSH  hbrBack;
    DWORD   dwContextHelpID;
    ULONG_PTR dwMenuData;
}   MENUINFO,  *LPMENUINFO;
typedef MENUINFO const  *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
     HMENU,
     LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
     HMENU,
     LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;












#line 5818 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 5827 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















#line 5845 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


typedef struct tagMENUITEMINFOA
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPSTR    dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 5863 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPWSTR   dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 5880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#line 5888 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#line 5895 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
     HMENU,
     UINT,
     BOOL,
     LPCMENUITEMINFOA
    );
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
     HMENU,
     UINT,
     BOOL,
     LPCMENUITEMINFOW
    );




#line 5920 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
     HMENU,
     UINT,
     BOOL,
      LPMENUITEMINFOA
    );
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
     HMENU,
     UINT,
     BOOL,
      LPMENUITEMINFOW
    );




#line 5944 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
     HMENU,
     UINT,
     BOOL,
     LPCMENUITEMINFOA
    );
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
     HMENU,
     UINT,
     BOOL,
     LPCMENUITEMINFOW
    );




#line 5968 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





__declspec(dllimport) UINT    __stdcall GetMenuDefaultItem(  HMENU hMenu,  UINT fByPos,  UINT gmdiFlags);
__declspec(dllimport) BOOL    __stdcall SetMenuDefaultItem(  HMENU hMenu,  UINT uItem,   UINT fByPos);

__declspec(dllimport) BOOL    __stdcall GetMenuItemRect(  HWND hWnd,  HMENU hMenu,  UINT uItem,  LPRECT lprcItem);
__declspec(dllimport) int     __stdcall MenuItemFromPoint(  HWND hWnd,  HMENU hMenu,  POINT ptScreen);
#line 5979 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


















#line 5998 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 6007 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 6010 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 6011 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 6014 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    ULONG_PTR dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;











__declspec(dllimport)
DWORD
__stdcall
DragObject(
     HWND,
     HWND,
     UINT,
     ULONG_PTR,
     HCURSOR);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
     HWND,
     POINT);
#line 6058 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
     HDC hDC,
     int X,
     int Y,
     HICON hIcon);


































#line 6102 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 6103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;
#line 6113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
int
__stdcall
DrawTextA(
     HDC hDC,
     LPCSTR lpString,
     int nCount,
      LPRECT lpRect,
     UINT uFormat);
__declspec(dllimport)
int
__stdcall
DrawTextW(
     HDC hDC,
     LPCWSTR lpString,
     int nCount,
      LPRECT lpRect,
     UINT uFormat);




#line 6138 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
int
__stdcall
DrawTextExA(
     HDC,
      LPSTR,
     int,
      LPRECT,
     UINT,
     LPDRAWTEXTPARAMS);
__declspec(dllimport)
int
__stdcall
DrawTextExW(
     HDC,
      LPWSTR,
     int,
      LPRECT,
     UINT,
     LPDRAWTEXTPARAMS);




#line 6166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 6167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 6169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
     HDC hDC,
     HBRUSH hBrush,
     GRAYSTRINGPROC lpOutputFunc,
     LPARAM lpData,
     int nCount,
     int X,
     int Y,
     int nWidth,
     int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
     HDC hDC,
     HBRUSH hBrush,
     GRAYSTRINGPROC lpOutputFunc,
     LPARAM lpData,
     int nCount,
     int X,
     int Y,
     int nWidth,
     int nHeight);




#line 6201 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


















#line 6220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
     HDC,
     HBRUSH,
     DRAWSTATEPROC,
     LPARAM,
     WPARAM,
     int,
     int,
     int,
     int,
     UINT);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
     HDC,
     HBRUSH,
     DRAWSTATEPROC,
     LPARAM,
     WPARAM,
     int,
     int,
     int,
     int,
     UINT);




#line 6255 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 6256 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
     HDC hDC,
     int X,
     int Y,
     LPCSTR lpString,
     int nCount,
     int nTabPositions,
     const INT *lpnTabStopPositions,
     int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
     HDC hDC,
     int X,
     int Y,
     LPCWSTR lpString,
     int nCount,
     int nTabPositions,
     const INT *lpnTabStopPositions,
     int nTabOrigin);




#line 6286 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
     HDC hDC,
     LPCSTR lpString,
     int nCount,
     int nTabPositions,
     const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
     HDC hDC,
     LPCWSTR lpString,
     int nCount,
     int nTabPositions,
     const INT *lpnTabStopPositions);




#line 6310 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
     HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
     HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
     HDC hdc);

#line 6337 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
     HWND hWnd);



















#line 6363 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
     HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
     HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
     HWND hWnd,
     HRGN hrgnClip,
     DWORD flags);


















__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
     HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
     HWND hWnd,
     HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
     HWND hWnd,
     LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
     HWND hWnd,
     const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
     HWND hWnd,
     LPRECT lpRect,
     BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
     HWND hWnd,
     HRGN hRgn,
     BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
     HWND hWnd,
     HRGN hRgn,
     BOOL bRedraw);


__declspec(dllimport)
int
__stdcall
GetWindowRgn(
     HWND hWnd,
     HRGN hRgn);










#line 6470 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
     HDC hDC,
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
     HWND hWnd,
     const RECT *lpRect,
     BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
     HWND hWnd,
     const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
     HWND hWnd,
     HRGN hRgn,
     BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
     HWND hWnd,
     HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
     HWND hWnd,
     const RECT *lprcUpdate,
     HRGN hrgnUpdate,
     UINT flags);


























__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
     HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
     HWND hWnd,
     int XAmount,
     int YAmount,
     const RECT *lpRect,
     const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
     HDC hDC,
     int dx,
     int dy,
     const RECT *lprcScroll,
     const RECT *lprcClip,
     HRGN hrgnUpdate,
     LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
     HWND hWnd,
     int dx,
     int dy,
     const RECT *prcScroll,
     const RECT *prcClip,
     HRGN hrgnUpdate,
     LPRECT prcUpdate,
     UINT flags);






#line 6590 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
int
__stdcall
SetScrollPos(
     HWND hWnd,
     int nBar,
     int nPos,
     BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
     HWND hWnd,
     int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
     HWND hWnd,
     int nBar,
     int nMinPos,
     int nMaxPos,
     BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
     HWND hWnd,
     int nBar,
     LPINT lpMinPos,
     LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
     HWND hWnd,
     int wBar,
     BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
     HWND hWnd,
     UINT wSBflags,
     UINT wArrows);


















#line 6662 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetPropA(
     HWND hWnd,
     LPCSTR lpString,
     HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
     HWND hWnd,
     LPCWSTR lpString,
     HANDLE hData);




#line 6682 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
     HWND hWnd,
     LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
     HWND hWnd,
     LPCWSTR lpString);




#line 6700 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
     HWND hWnd,
     LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
     HWND hWnd,
     LPCWSTR lpString);




#line 6718 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsExA(
     HWND hWnd,
     PROPENUMPROCEXA lpEnumFunc,
     LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
     HWND hWnd,
     PROPENUMPROCEXW lpEnumFunc,
     LPARAM lParam);




#line 6738 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsA(
     HWND hWnd,
     PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
     HWND hWnd,
     PROPENUMPROCW lpEnumFunc);




#line 6756 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
     HWND hWnd,
     LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
     HWND hWnd,
     LPCWSTR lpString);




#line 6774 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextA(
     HWND hWnd,
     LPSTR lpString,
     int nMaxCount);
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
     HWND hWnd,
     LPWSTR lpString,
     int nMaxCount);




#line 6794 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
     HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
     HWND hWnd);




#line 6810 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
     HWND hWnd,
     LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
     HWND hWnd,
     LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
      LPRECT lpRect,
     DWORD dwStyle,
     BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
      LPRECT lpRect,
     DWORD dwStyle,
     BOOL bMenu,
     DWORD dwExStyle);





typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD_PTR dwContextId;      
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
     HWND,
     DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
     HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
     HMENU,
     DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
     HMENU);

#line 6883 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















#line 6899 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"











#line 6911 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 6921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 6928 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"











#line 6940 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 6947 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 6949 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







__declspec(dllimport)
int
__stdcall
MessageBoxA(
     HWND hWnd,
     LPCSTR lpText,
     LPCSTR lpCaption,
     UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
     HWND hWnd,
     LPCWSTR lpText,
     LPCWSTR lpCaption,
     UINT uType);




#line 6977 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxExA(
     HWND hWnd,
     LPCSTR lpText,
     LPCSTR lpCaption,
     UINT uType,
     WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
     HWND hWnd,
     LPCWSTR lpText,
     LPCWSTR lpCaption,
     UINT uType,
     WORD wLanguageId);




#line 7001 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#line 7041 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
     const MSGBOXPARAMSA *);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
     const MSGBOXPARAMSW *);




#line 7057 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 7058 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
     UINT uType);

#line 7067 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
ShowCursor(
     BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
     int X,
     int Y);

__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
     HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
     LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
     const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
     LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
     HWND hWnd,
     HBITMAP hBitmap,
     int nWidth,
     int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
     UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
     HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
     int X,
     int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
     LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
     HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
     HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
int
__stdcall
MapWindowPoints(
     HWND hWndFrom,
     HWND hWndTo,
      LPPOINT lpPoints,
     UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
     POINT Point);

__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
     HWND hWndParent,
     POINT Point);







__declspec(dllimport) HWND    __stdcall ChildWindowFromPointEx(  HWND,  POINT,  UINT);
#line 7207 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










































#line 7250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 7259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 7260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 7269 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
     int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
     int nIndex);


#line 7286 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
     int cElements,
     const INT * lpaElements,
     const COLORREF * lpaRgbValues);

#line 7296 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
     HDC hDC,
     const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
     HDC hDC,
     const RECT *lprc,
     HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
     HDC hDC,
     const RECT *lprc,
     HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
     HDC hDC,
     const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
     LPRECT lprc,
     int xLeft,
     int yTop,
     int xRight,
     int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
     LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
     LPRECT lprcDst,
     const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
      LPRECT lprc,
     int dx,
     int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
     LPRECT lprcDst,
     const RECT *lprcSrc1,
     const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
     LPRECT lprcDst,
     const RECT *lprcSrc1,
     const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
     LPRECT lprcDst,
     const RECT *lprcSrc1,
     const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
      LPRECT lprc,
     int dx,
     int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
     const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
     const RECT *lprc1,
     const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
     const RECT *lprc,
     POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
     HWND hWnd,
     int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
     HWND hWnd,
     int nIndex,
     WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
     HWND hWnd,
     int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
     HWND hWnd,
     int nIndex);




#line 7444 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
     HWND hWnd,
     int nIndex,
     LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
     HWND hWnd,
     int nIndex,
     LONG dwNewLong);




#line 7464 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















































#line 7514 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 7522 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 7524 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
WORD
__stdcall
GetClassWord(
     HWND hWnd,
     int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
     HWND hWnd,
     int nIndex,
     WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
     HWND hWnd,
     int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
     HWND hWnd,
     int nIndex);




#line 7557 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
     HWND hWnd,
     int nIndex,
     LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
     HWND hWnd,
     int nIndex,
     LONG dwNewLong);




#line 7577 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

















































#line 7627 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 7635 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 7637 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 7639 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
     DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
     DWORD dwDefaultLayout);
#line 7653 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
     HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
     HWND hWndChild,
     HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
     HWND hWndParent,
     WNDENUMPROC lpEnumFunc,
     LPARAM lParam);

__declspec(dllimport)
HWND
__stdcall
FindWindowA(
     LPCSTR lpClassName,
     LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
     LPCWSTR lpClassName,
     LPCWSTR lpWindowName);




#line 7699 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport) HWND    __stdcall FindWindowExA(  HWND,  HWND,  LPCSTR,  LPCSTR);
__declspec(dllimport) HWND    __stdcall FindWindowExW(  HWND,  HWND,  LPCWSTR,  LPCWSTR);




#line 7708 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 7710 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
     WNDENUMPROC lpEnumFunc,
     LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
     DWORD dwThreadId,
     WNDENUMPROC lpfn,
     LPARAM lParam);



__declspec(dllimport)
int
__stdcall
GetClassNameA(
     HWND hWnd,
     LPSTR lpClassName,
     int nMaxCount);
__declspec(dllimport)
int
__stdcall
GetClassNameW(
     HWND hWnd,
     LPWSTR lpClassName,
     int nMaxCount);




#line 7748 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
     HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
     HWND hWnd,
     LPDWORD lpdwProcessId);








#line 7774 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
     HWND hWnd);












#line 7796 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 7799 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetWindow(
     HWND hWnd,
     UINT uCmd);







__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
     int nFilterType,
     HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
     int nFilterType,
     HOOKPROC pfnFilterProc);




#line 7830 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





















#line 7852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
     int nCode,
     HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
     int idHook,
     HOOKPROC lpfn,
     HINSTANCE hmod,
     DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
     int idHook,
     HOOKPROC lpfn,
     HINSTANCE hmod,
     DWORD dwThreadId);




#line 7881 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
     HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
     HHOOK hhk,
     int nCode,
     WPARAM wParam,
     LPARAM lParam);










#line 7907 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 7908 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








































#line 7949 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 7954 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 7959 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






















#line 7982 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
     HMENU,
     UINT,
     UINT,
     UINT,
     UINT);
#line 7996 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


#line 8013 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



























#line 8041 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 8049 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
     HINSTANCE hInstance,
     LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
     HINSTANCE hInstance,
     LPCWSTR lpBitmapName);




#line 8071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
     HINSTANCE hInstance,
     LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
     HINSTANCE hInstance,
     LPCWSTR lpCursorName);




#line 8089 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
     LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
     LPCWSTR lpFileName);




#line 8105 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
     HINSTANCE hInst,
     int xHotSpot,
     int yHotSpot,
     int nWidth,
     int nHeight,
     const void *pvANDPlane,
     const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
     HCURSOR hCursor);









#line 8133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



















#line 8153 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 8157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
     HCURSOR hcur,
     DWORD   id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
     HINSTANCE hInstance,
     LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
     HINSTANCE hInstance,
     LPCWSTR lpIconName);




#line 8191 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
HICON
__stdcall
CreateIcon(
     HINSTANCE hInstance,
     int nWidth,
     int nHeight,
     BYTE cPlanes,
     BYTE cBitsPixel,
     const BYTE *lpbANDbits,
     const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
     HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
     PBYTE presbits,
     BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
     PBYTE presbits,
     BOOL  fIcon,
     int   cxDesired,
     int   cyDesired,
     UINT  Flags);
#line 8229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
     PBYTE presbits,
     DWORD dwResSize,
     BOOL fIcon,
     DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
     PBYTE presbits,
     DWORD dwResSize,
     BOOL  fIcon,
     DWORD dwVer,
     int   cxDesired,
     int   cyDesired,
     UINT  Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;
#line 8264 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





















__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
     HINSTANCE,
     LPCSTR,
     UINT,
     int,
     int,
     UINT);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
     HINSTANCE,
     LPCWSTR,
     UINT,
     int,
     int,
     UINT);




#line 8310 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
     HANDLE,
     UINT,
     int,
     int,
     UINT);








#line 8329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport) BOOL __stdcall DrawIconEx(  HDC hdc,  int xLeft,  int yTop,
               HICON hIcon,  int cxWidth,  int cyWidth,
               UINT istepIfAniCur,  HBRUSH hbrFlickerFreeDraw,  UINT diFlags);
#line 8334 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
     PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
     HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
     HICON hIcon,
     PICONINFO piconinfo);




#line 8358 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"












































































































#line 8467 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 8468 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





#line 8474 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 8477 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
LoadStringA(
     HINSTANCE hInstance,
     UINT uID,
     LPSTR lpBuffer,
     int nBufferMax);
__declspec(dllimport)
int
__stdcall
LoadStringW(
     HINSTANCE hInstance,
     UINT uID,
     LPWSTR lpBuffer,
     int nBufferMax);




#line 8499 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















#line 8515 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 8520 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 8525 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 8526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





























#line 8556 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 8559 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
















#line 8576 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






#line 8583 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









#line 8593 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"













































#line 8639 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 8644 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 8647 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







































#line 8687 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
















#line 8704 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



















#line 8724 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

























#line 8750 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 8753 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"











#line 8765 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
















#line 8782 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 8784 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"































__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
     HWND hDlg,
     LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
     HWND hDlg,
     LPMSG lpMsg);




#line 8832 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 8834 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
     HWND hDlg,
      LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
     HWND hDlg,
      LPSTR lpPathSpec,
     int nIDListBox,
     int nIDStaticPath,
     UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
     HWND hDlg,
      LPWSTR lpPathSpec,
     int nIDListBox,
     int nIDStaticPath,
     UINT uFileType);




#line 8865 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
     HWND hDlg,
     LPSTR lpString,
     int nCount,
     int nIDListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
     HWND hDlg,
     LPWSTR lpString,
     int nCount,
     int nIDListBox);




#line 8901 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
     HWND hDlg,
      LPSTR lpPathSpec,
     int nIDComboBox,
     int nIDStaticPath,
     UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
     HWND hDlg,
      LPWSTR lpPathSpec,
     int nIDComboBox,
     int nIDStaticPath,
     UINT uFiletype);




#line 8925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
     HWND hDlg,
     LPSTR lpString,
     int nCount,
     int nIDComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
     HWND hDlg,
     LPWSTR lpString,
     int nCount,
     int nIDComboBox);




#line 8947 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

























#line 8973 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 8981 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


































                                  




























































#line 9077 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 9080 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




#line 9085 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 9089 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 9091 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 9095 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 9097 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"























#line 9121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 9125 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"












































#line 9170 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 9172 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"











































#line 9216 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9217 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 9221 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 9225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 9227 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 9231 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















#line 9253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 9256 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"














#line 9271 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



#line 9275 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport) int     __stdcall SetScrollInfo( HWND,  int,  LPCSCROLLINFO,  BOOL);
__declspec(dllimport) BOOL    __stdcall GetScrollInfo( HWND,  int,   LPSCROLLINFO);

#line 9300 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9301 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9302 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
















#line 9319 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#line 9349 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
     HWND hWnd,
     HWND hWndMDIClient,
     UINT uMsg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
     HWND hWnd,
     HWND hWndMDIClient,
     UINT uMsg,
     WPARAM wParam,
     LPARAM lParam);




#line 9378 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)

LRESULT
__stdcall



#line 9387 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
DefMDIChildProcA(
     HWND hWnd,
     UINT uMsg,
     WPARAM wParam,
     LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 9400 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
DefMDIChildProcW(
     HWND hWnd,
     UINT uMsg,
     WPARAM wParam,
     LPARAM lParam);




#line 9410 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
     HWND hWndClient,
     LPMSG lpMsg);

#line 9421 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
     HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
     LPCSTR lpClassName,
     LPCSTR lpWindowName,
     DWORD dwStyle,
     int X,
     int Y,
     int nWidth,
     int nHeight,
     HWND hWndParent,
     HINSTANCE hInstance,
     LPARAM lParam
    );
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
     LPCWSTR lpClassName,
     LPCWSTR lpWindowName,
     DWORD dwStyle,
     int X,
     int Y,
     int nWidth,
     int nHeight,
     HWND hWndParent,
     HINSTANCE hInstance,
     LPARAM lParam
    );




#line 9463 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport) WORD    __stdcall TileWindows(  HWND hwndParent,  UINT wHow,  const RECT * lpRect,  UINT cKids,  const HWND  * lpKids);
__declspec(dllimport) WORD    __stdcall CascadeWindows(  HWND hwndParent,  UINT wHow,  const RECT * lpRect,  UINT cKids,   const HWND  * lpKids);
#line 9468 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9469 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 9471 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD  mkSize;


#line 9483 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD  mkSize;


#line 9492 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#line 9504 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 9532 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





































#line 9570 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
     HWND hWndMain,
     LPCSTR lpszHelp,
     UINT uCommand,
     ULONG_PTR dwData
    );
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
     HWND hWndMain,
     LPCWSTR lpszHelp,
     UINT uCommand,
     ULONG_PTR dwData
    );




#line 9596 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 9598 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"






__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
     HANDLE hProcess,
     DWORD uiFlags);

#line 9612 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





















































































#line 9698 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















#line 9714 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





#line 9720 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















#line 9736 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 9744 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"










































#line 9787 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"































#line 9819 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 9821 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"












typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 9878 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9879 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"















typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#line 9931 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9932 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 9933 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 9967 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 9993 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\tvout.h"










#pragma once
#line 13 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\tvout.h"





typedef struct _VIDEOPARAMETERS {
    GUID  Guid;                         
    ULONG dwOffset;                     
    ULONG dwCommand;                    
    ULONG dwFlags;                      
    ULONG dwMode;                       
    ULONG dwTVStandard;                 
    ULONG dwAvailableModes;             
    ULONG dwAvailableTVStandard;        
    ULONG dwFlickerFilter;              
    ULONG dwOverScanX;                  
    ULONG dwOverScanY;                  
    ULONG dwMaxUnscaledX;               
    ULONG dwMaxUnscaledY;               
    ULONG dwPositionX;                  
    ULONG dwPositionY;                  
    ULONG dwBrightness;                 
    ULONG dwContrast;                   
    ULONG dwCPType;                     
    ULONG dwCPCommand;                  
    ULONG dwCPStandard;                 
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;           
    UCHAR bOEMCopyProtection[256];      
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;


                                        












































#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\tvout.h"
#line 10014 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"











#line 10026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
     LPDEVMODEA  lpDevMode,
     DWORD       dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
     LPDEVMODEW  lpDevMode,
     DWORD       dwFlags);




#line 10047 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
     LPCSTR    lpszDeviceName,
     LPDEVMODEA  lpDevMode,
     HWND        hwnd,
     DWORD       dwflags,
     LPVOID      lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
     LPCWSTR    lpszDeviceName,
     LPDEVMODEW  lpDevMode,
     HWND        hwnd,
     DWORD       dwflags,
     LPVOID      lParam);




#line 10071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
     LPCSTR lpszDeviceName,
     DWORD iModeNum,
     LPDEVMODEA lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
     LPCWSTR lpszDeviceName,
     DWORD iModeNum,
     LPDEVMODEW lpDevMode);




#line 10094 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
     LPCSTR lpszDeviceName,
     DWORD iModeNum,
     LPDEVMODEA lpDevMode,
     DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
     LPCWSTR lpszDeviceName,
     DWORD iModeNum,
     LPDEVMODEW lpDevMode,
     DWORD dwFlags);




#line 10118 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
     LPCSTR lpDevice,
     DWORD iDevNum,
     PDISPLAY_DEVICEA lpDisplayDevice,
     DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
     LPCWSTR lpDevice,
     DWORD iDevNum,
     PDISPLAY_DEVICEW lpDisplayDevice,
     DWORD dwFlags);




#line 10143 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 10144 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 10146 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 10147 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoA(
     UINT uiAction,
     UINT uiParam,
      PVOID pvParam,
     UINT fWinIni);
__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoW(
     UINT uiAction,
     UINT uiParam,
      PVOID pvParam,
     UINT fWinIni);




#line 10170 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


#line 10173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;












typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;






























#line 10234 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;


















#line 10264 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
























typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 10332 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;















__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
     DWORD dwLevel
    );









__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
     DWORD dwErrCode,
     DWORD dwType
    );












__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
     POINT pt,
     DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
     LPCRECT lprc,
     DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(  HWND hwnd,  DWORD dwFlags);







typedef struct tagMONITORINFO
{
    DWORD   cbSize;
    RECT    rcMonitor;
    RECT    rcWork;
    DWORD   dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#line 10443 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


















#line 10462 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport) BOOL __stdcall GetMonitorInfoA(  HMONITOR hMonitor,  LPMONITORINFO lpmi);
__declspec(dllimport) BOOL __stdcall GetMonitorInfoW(  HMONITOR hMonitor,  LPMONITORINFO lpmi);




#line 10470 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
     HDC             hdc,
     LPCRECT         lprcClip,
     MONITORENUMPROC lpfnEnum,
     LPARAM          dwData);








__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
     DWORD event,
     HWND  hwnd,
     LONG  idObject,
     LONG  idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD         event,
    HWND          hwnd,
    LONG          idObject,
    LONG          idChild,
    DWORD         idEventThread,
    DWORD         dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
     DWORD        eventMin,
     DWORD        eventMax,
     HMODULE      hmodWinEventProc,
     WINEVENTPROC pfnWinEventProc,
     DWORD        idProcess,
     DWORD        idThread,
     DWORD        dwFlags);







#line 10526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"









__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
     HWINEVENTHOOK hWinEventHook);

































































































































































































































#line 10766 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




















































































































































































































typedef struct tagGUITHREADINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HWND    hwndActive;
    HWND    hwndFocus;
    HWND    hwndCapture;
    HWND    hwndMenuOwner;
    HWND    hwndMoveSize;
    HWND    hwndCaret;
    RECT    rcCaret;
} GUITHREADINFO, *PGUITHREADINFO,  * LPGUITHREADINFO;








#line 10999 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
     DWORD idThread,
     PGUITHREADINFO pgui);

__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
     HWND     hwnd,
     LPSTR pszFileName,
     UINT     cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
     HWND     hwnd,
     LPWSTR pszFileName,
     UINT     cchFileNameMax);




#line 11026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


































#line 11061 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







typedef struct tagCURSORINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HCURSOR hCursor;
    POINT   ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;



__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
     PCURSORINFO pci
);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT  rcWindow;
    RECT  rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT  cxWindowBorders;
    UINT  cyWindowBorders;
    ATOM  atomWindowType;
    WORD  wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
     HWND hwnd,
     PWINDOWINFO pwi
);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT  rcTitleBar;
    DWORD rgstate[5+1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
     HWND hwnd,
     PTITLEBARINFO pti
);




typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT  rcBar;          
    HMENU hMenu;          
    HWND  hwndMenu;       
    BOOL  fBarFocused:1;  
    BOOL  fFocused:1;     
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
     HWND hwnd,
     LONG idObject,
     LONG idItem,
     PMENUBARINFO pmbi
);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT  rcScrollBar;
    int   dxyLineButton;
    int   xyThumbTop;
    int   xyThumbBottom;
    int   reserved;
    DWORD rgstate[5+1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
     HWND hwnd,
     LONG idObject,
     PSCROLLBARINFO psbi
);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT  rcItem;
    RECT  rcButton;
    DWORD stateButton;
    HWND  hwndCombo;
    HWND  hwndItem;
    HWND  hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
     HWND hwndCombo,
     PCOMBOBOXINFO pcbi
);








__declspec(dllimport)
HWND
__stdcall
GetAncestor(
     HWND hwnd,
     UINT gaFlags
);








__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
     HWND hwndParent,
     POINT ptParentClientCoords
);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
     HWND  hwnd,
     LPSTR pszType,
     UINT  cchType
);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
     HWND  hwnd,
     LPWSTR pszType,
     UINT  cchType
);




#line 11258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"




typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int   cItems;
    int   cColumns;
    int   cRows;
    int   iColFocus;
    int   iRowFocus;
    int   cxItem;
    int   cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
     HWND hwnd,
     int iItem,
     PALTTABINFO pati,
     LPSTR pszItemText,
     UINT cchItemText
);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
     HWND hwnd,
     int iItem,
     PALTTABINFO pati,
     LPWSTR pszItemText,
     UINT cchItemText
);




#line 11300 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
     HWND hwnd
);

#line 11313 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 11314 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"








#line 11323 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"











#line 11335 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"













































































































































































































































































































































































#line 11701 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"







#line 11709 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"
#line 11710 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"


}
#line 11714 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"

#line 11716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winuser.h"





#line 165 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"





















extern "C" {
#line 24 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"








































#line 65 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"




















































































#line 150 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"















































































































































































































































#line 390 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"























































































































#line 510 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"










#line 521 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"





















#line 543 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"


























#line 570 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"























































#line 626 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"



























































typedef DWORD LGRPID;





typedef DWORD LCTYPE;





typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    CHAR    CodePageName[260];         
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    WCHAR   CodePageName[260];         
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
#line 739 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#line 768 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"






typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
#line 801 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"






typedef LONG    GEOID;
typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION      =       0x0001,
    GEO_LATITUDE    =       0x0002,
    GEO_LONGITUDE   =       0x0003,
    GEO_ISO2        =       0x0004,
    GEO_ISO3        =       0x0005,
    GEO_RFC1766     =       0x0006,
    GEO_LCID        =       0x0007,
    GEO_FRIENDLYNAME=       0x0008,
    GEO_OFFICIALNAME=       0x0009,
    GEO_TIMEZONES   =       0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
};





enum SYSGEOCLASS {
    GEOCLASS_NATION  = 16,
    GEOCLASS_REGION  = 14,
};








typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);


























#line 896 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"



























#line 924 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"



























__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
     UINT  CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
     UINT       CodePage,
     LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
     UINT          CodePage,
     DWORD         dwFlags,
     LPCPINFOEXA  lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
     UINT          CodePage,
     DWORD         dwFlags,
     LPCPINFOEXW  lpCPInfoEx);




#line 993 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
     BYTE  TestChar);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
     UINT  CodePage,
     BYTE  TestChar);

__declspec(dllimport)
int
__stdcall
MultiByteToWideChar(
     UINT     CodePage,
     DWORD    dwFlags,
     LPCSTR   lpMultiByteStr,
     int      cbMultiByte,
     LPWSTR  lpWideCharStr,
     int      cchWideChar);

__declspec(dllimport)
int
__stdcall
WideCharToMultiByte(
     UINT     CodePage,
     DWORD    dwFlags,
     LPCWSTR  lpWideCharStr,
     int      cchWideChar,
     LPSTR   lpMultiByteStr,
     int      cbMultiByte,
     LPCSTR   lpDefaultChar,
     LPBOOL  lpUsedDefaultChar);






__declspec(dllimport)
int
__stdcall
CompareStringA(
     LCID     Locale,
     DWORD    dwCmpFlags,
     LPCSTR  lpString1,
     int      cchCount1,
     LPCSTR  lpString2,
     int      cchCount2);
__declspec(dllimport)
int
__stdcall
CompareStringW(
     LCID     Locale,
     DWORD    dwCmpFlags,
     LPCWSTR  lpString1,
     int      cchCount1,
     LPCWSTR  lpString2,
     int      cchCount2);




#line 1061 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
int
__stdcall
LCMapStringA(
     LCID     Locale,
     DWORD    dwMapFlags,
     LPCSTR  lpSrcStr,
     int      cchSrc,
     LPSTR  lpDestStr,
     int      cchDest);
__declspec(dllimport)
int
__stdcall
LCMapStringW(
     LCID     Locale,
     DWORD    dwMapFlags,
     LPCWSTR  lpSrcStr,
     int      cchSrc,
     LPWSTR  lpDestStr,
     int      cchDest);




#line 1087 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
     LCID     Locale,
     LCTYPE   LCType,
     LPSTR  lpLCData,
     int      cchData);
__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
     LCID     Locale,
     LCTYPE   LCType,
     LPWSTR  lpLCData,
     int      cchData);




#line 1109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
     LCID     Locale,
     LCTYPE   LCType,
     LPCSTR  lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
     LCID     Locale,
     LCTYPE   LCType,
     LPCWSTR  lpLCData);




#line 1129 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
    LCID     Locale,
    CALID    Calendar,
    CALTYPE  CalType,
    LPSTR   lpCalData,
    int      cchData,
    LPDWORD  lpValue);
__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
    LCID     Locale,
    CALID    Calendar,
    CALTYPE  CalType,
    LPWSTR   lpCalData,
    int      cchData,
    LPDWORD  lpValue);




#line 1156 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
    LCID     Locale,
    CALID    Calendar,
    CALTYPE  CalType,
    LPCSTR  lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
    LCID     Locale,
    CALID    Calendar,
    CALTYPE  CalType,
    LPCWSTR  lpCalData);




#line 1178 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"
#line 1179 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
     LCID             Locale,
     DWORD            dwFlags,
     const SYSTEMTIME *lpTime,
     LPCSTR          lpFormat,
     LPSTR          lpTimeStr,
     int              cchTime);
__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
     LCID             Locale,
     DWORD            dwFlags,
     const SYSTEMTIME *lpTime,
     LPCWSTR          lpFormat,
     LPWSTR          lpTimeStr,
     int              cchTime);




#line 1205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetDateFormatA(
     LCID             Locale,
     DWORD            dwFlags,
     const SYSTEMTIME *lpDate,
     LPCSTR          lpFormat,
     LPSTR          lpDateStr,
     int              cchDate);
__declspec(dllimport)
int
__stdcall
GetDateFormatW(
     LCID             Locale,
     DWORD            dwFlags,
     const SYSTEMTIME *lpDate,
     LPCWSTR          lpFormat,
     LPWSTR          lpDateStr,
     int              cchDate);




#line 1231 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
     LCID             Locale,
     DWORD            dwFlags,
     LPCSTR          lpValue,
     const NUMBERFMTA *lpFormat,
     LPSTR          lpNumberStr,
     int              cchNumber);
__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
     LCID             Locale,
     DWORD            dwFlags,
     LPCWSTR          lpValue,
     const NUMBERFMTW *lpFormat,
     LPWSTR          lpNumberStr,
     int              cchNumber);




#line 1257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
     LCID               Locale,
     DWORD              dwFlags,
     LPCSTR            lpValue,
     const CURRENCYFMTA *lpFormat,
     LPSTR            lpCurrencyStr,
     int                cchCurrency);
__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
     LCID               Locale,
     DWORD              dwFlags,
     LPCWSTR            lpValue,
     const CURRENCYFMTW *lpFormat,
     LPWSTR            lpCurrencyStr,
     int                cchCurrency);




#line 1283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
     CALINFO_ENUMPROCA lpCalInfoEnumProc,
     LCID              Locale,
     CALID             Calendar,
     CALTYPE           CalType);
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
     CALINFO_ENUMPROCW lpCalInfoEnumProc,
     LCID              Locale,
     CALID             Calendar,
     CALTYPE           CalType);




#line 1305 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
     CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
     LCID                Locale,
     CALID               Calendar,
     CALTYPE             CalType);
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
     CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
     LCID                Locale,
     CALID               Calendar,
     CALTYPE             CalType);




#line 1328 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"
#line 1329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
     TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
     LCID              Locale,
     DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
     TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
     LCID              Locale,
     DWORD             dwFlags);




#line 1349 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
     DATEFMT_ENUMPROCA lpDateFmtEnumProc,
     LCID              Locale,
     DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
     DATEFMT_ENUMPROCW lpDateFmtEnumProc,
     LCID              Locale,
     DWORD             dwFlags);




#line 1369 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
     DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
     LCID                Locale,
     DWORD               dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
     DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
     LCID                Locale,
     DWORD               dwFlags);




#line 1390 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"
#line 1391 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
     LGRPID  LanguageGroup,
     DWORD   dwFlags);
#line 1400 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
     LCID   Locale,
     DWORD  dwFlags);

__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
    GEOID       Location,
    GEOTYPE     GeoType,
    LPSTR     lpGeoData,
    int         cchData,
    LANGID      LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
    GEOID       Location,
    GEOTYPE     GeoType,
    LPWSTR     lpGeoData,
    int         cchData,
    LANGID      LangId);




#line 1431 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
    GEOCLASS        GeoClass,
    GEOID           ParentGeoId,
    GEO_ENUMPROC    lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
    GEOCLASS    GeoClass);

__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
    GEOID       GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
      LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
     LCID  Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);
#line 1481 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);







__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
     LCID     Locale,
     DWORD    dwInfoType,
     LPCSTR  lpSrcStr,
     int      cchSrc,
     LPWORD  lpCharType);
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
     LCID     Locale,
     DWORD    dwInfoType,
     LPCWSTR  lpSrcStr,
     int      cchSrc,
     LPWORD  lpCharType);




#line 1531 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"












__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
     LCID     Locale,
     DWORD    dwInfoType,
     LPCSTR   lpSrcStr,
     int      cchSrc,
     LPWORD  lpCharType);

__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
     DWORD    dwInfoType,
     LPCWSTR  lpSrcStr,
     int      cchSrc,
     LPWORD  lpCharType);


__declspec(dllimport)
int
__stdcall
FoldStringA(
     DWORD    dwMapFlags,
     LPCSTR  lpSrcStr,
     int      cchSrc,
     LPSTR  lpDestStr,
     int      cchDest);
__declspec(dllimport)
int
__stdcall
FoldStringW(
     DWORD    dwMapFlags,
     LPCWSTR  lpSrcStr,
     int      cchSrc,
     LPWSTR  lpDestStr,
     int      cchDest);




#line 1586 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
     LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
     DWORD                   dwFlags,
     LONG_PTR                lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
     LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
     DWORD                   dwFlags,
     LONG_PTR                lParam);




#line 1607 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
     LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
     LGRPID                    LanguageGroup,
     DWORD                     dwFlags,
     LONG_PTR                  lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
     LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
     LGRPID                    LanguageGroup,
     DWORD                     dwFlags,
     LONG_PTR                  lParam);




#line 1629 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
     UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
     DWORD                dwFlags,
     LONG_PTR             lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
     UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
     DWORD                dwFlags,
     LONG_PTR             lParam);




#line 1649 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"
#line 1650 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
     LOCALE_ENUMPROCA lpLocaleEnumProc,
     DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
     LOCALE_ENUMPROCW lpLocaleEnumProc,
     DWORD            dwFlags);




#line 1668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
     CODEPAGE_ENUMPROCA lpCodePageEnumProc,
     DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
     CODEPAGE_ENUMPROCW lpCodePageEnumProc,
     DWORD              dwFlags);




#line 1686 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"


#line 1689 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"



}
#line 1694 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"

#line 1696 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"
#line 167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

























extern "C" {
#line 28 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;






















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;



















typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;











typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
























typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD  nFont;
    COORD  dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;

















#line 198 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"





typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
    DWORD CtrlType
    );






























__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );




#line 261 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputA(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputW(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );




#line 285 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
     HANDLE hConsoleInput,
     const INPUT_RECORD *lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
     HANDLE hConsoleInput,
     const INPUT_RECORD *lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsWritten
    );




#line 309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
     HANDLE hConsoleOutput,
     PCHAR_INFO lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
     HANDLE hConsoleOutput,
     PCHAR_INFO lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );




#line 335 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
     HANDLE hConsoleOutput,
     const CHAR_INFO *lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
     HANDLE hConsoleOutput,
     const CHAR_INFO *lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );




#line 361 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
     HANDLE hConsoleOutput,
     LPSTR lpCharacter,
      DWORD nLength,
     COORD dwReadCoord,
     LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
     HANDLE hConsoleOutput,
     LPWSTR lpCharacter,
      DWORD nLength,
     COORD dwReadCoord,
     LPDWORD lpNumberOfCharsRead
    );




#line 387 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
     HANDLE hConsoleOutput,
     LPWORD lpAttribute,
     DWORD nLength,
     COORD dwReadCoord,
     LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
     HANDLE hConsoleOutput,
     LPCSTR lpCharacter,
     DWORD nLength,
     COORD dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
     HANDLE hConsoleOutput,
     LPCWSTR lpCharacter,
     DWORD nLength,
     COORD dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );




#line 424 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
     HANDLE hConsoleOutput,
     const WORD *lpAttribute,
     DWORD nLength,
     COORD dwWriteCoord,
     LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
     HANDLE hConsoleOutput,
     CHAR  cCharacter,
     DWORD  nLength,
     COORD  dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
     HANDLE hConsoleOutput,
     WCHAR  cCharacter,
     DWORD  nLength,
     COORD  dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );




#line 461 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
     HANDLE hConsoleOutput,
     WORD   wAttribute,
     DWORD  nLength,
     COORD  dwWriteCoord,
     LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
     HANDLE hConsoleHandle,
     LPDWORD lpMode
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
     HANDLE hConsoleInput,
     LPDWORD lpNumberOfEvents
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
     HANDLE hConsoleOutput,
     PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
     HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
     HANDLE hConsoleOutput,
     PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



























#line 539 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
     LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
     HANDLE hConsoleHandle,
     DWORD dwMode
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
     HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
     HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
     HANDLE hConsoleOutput,
     COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
     HANDLE hConsoleOutput,
     COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
     HANDLE hConsoleOutput,
     const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
     HANDLE hConsoleOutput,
     const SMALL_RECT *lpScrollRectangle,
     const SMALL_RECT *lpClipRectangle,
     COORD dwDestinationOrigin,
     const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
     HANDLE hConsoleOutput,
     const SMALL_RECT *lpScrollRectangle,
     const SMALL_RECT *lpClipRectangle,
     COORD dwDestinationOrigin,
     const CHAR_INFO *lpFill
    );




#line 618 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
     HANDLE hConsoleOutput,
     BOOL bAbsolute,
     const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
     HANDLE hConsoleOutput,
     WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
     PHANDLER_ROUTINE HandlerRoutine,
     BOOL Add
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
     DWORD dwCtrlEvent,
     DWORD dwProcessGroupId
    );

__declspec(dllimport)
BOOL
__stdcall
AllocConsole( void );

__declspec(dllimport)
BOOL
__stdcall
FreeConsole( void );








#line 670 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
     LPSTR lpConsoleTitle,
     DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
     LPWSTR lpConsoleTitle,
     DWORD nSize
    );




#line 690 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
     LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
     LPCWSTR lpConsoleTitle
    );




#line 708 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleA(
     HANDLE hConsoleInput,
     LPVOID lpBuffer,
     DWORD nNumberOfCharsToRead,
     LPDWORD lpNumberOfCharsRead,
     LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleW(
     HANDLE hConsoleInput,
     LPVOID lpBuffer,
     DWORD nNumberOfCharsToRead,
     LPDWORD lpNumberOfCharsRead,
     LPVOID lpReserved
    );




#line 734 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
     HANDLE hConsoleOutput,
     const void *lpBuffer,
     DWORD nNumberOfCharsToWrite,
     LPDWORD lpNumberOfCharsWritten,
     LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
     HANDLE hConsoleOutput,
     const void *lpBuffer,
     DWORD nNumberOfCharsToWrite,
     LPDWORD lpNumberOfCharsWritten,
     LPVOID lpReserved
    );




#line 760 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
     DWORD dwDesiredAccess,
     DWORD dwShareMode,
     const SECURITY_ATTRIBUTES *lpSecurityAttributes,
     DWORD dwFlags,
     LPVOID lpScreenBufferData
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
     UINT wCodePageID
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
     UINT wCodePageID
    );




















#line 818 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"









#line 828 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"


}
#line 832 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

#line 834 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wincon.h"

#line 170 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"
















extern "C" {
#line 19 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"











#line 31 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"




































































































typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;



DWORD
__stdcall
VerFindFileA(
        DWORD uFlags,
        LPSTR szFileName,
        LPSTR szWinDir,
        LPSTR szAppDir,
        LPSTR szCurDir,
        PUINT lpuCurDirLen,
        LPSTR szDestDir,
        PUINT lpuDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
        DWORD uFlags,
        LPWSTR szFileName,
        LPWSTR szWinDir,
        LPWSTR szAppDir,
        LPWSTR szCurDir,
        PUINT lpuCurDirLen,
        LPWSTR szDestDir,
        PUINT lpuDestDirLen
        );




#line 179 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"

DWORD
__stdcall
VerInstallFileA(
        DWORD uFlags,
        LPSTR szSrcFileName,
        LPSTR szDestFileName,
        LPSTR szSrcDir,
        LPSTR szDestDir,
        LPSTR szCurDir,
        LPSTR szTmpFile,
        PUINT lpuTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
        DWORD uFlags,
        LPWSTR szSrcFileName,
        LPWSTR szDestFileName,
        LPWSTR szSrcDir,
        LPWSTR szDestDir,
        LPWSTR szCurDir,
        LPWSTR szTmpFile,
        PUINT lpuTmpFileLen
        );




#line 209 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"


DWORD
__stdcall
GetFileVersionInfoSizeA(
        LPSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      

DWORD
__stdcall
GetFileVersionInfoSizeW(
        LPWSTR lptstrFilename, 
        LPDWORD lpdwHandle
        );                      




#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"


BOOL
__stdcall
GetFileVersionInfoA(
        LPSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      

BOOL
__stdcall
GetFileVersionInfoW(
        LPWSTR lptstrFilename, 
        DWORD dwHandle,         
        DWORD dwLen,            
        LPVOID lpData
        );                      




#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"

DWORD
__stdcall
VerLanguageNameA(
        DWORD wLang,
        LPSTR szLang,
        DWORD nSize
        );
DWORD
__stdcall
VerLanguageNameW(
        DWORD wLang,
        LPWSTR szLang,
        DWORD nSize
        );




#line 273 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"

BOOL
__stdcall
VerQueryValueA(
        const LPVOID pBlock,
        LPSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
        const LPVOID pBlock,
        LPWSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );




#line 295 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"

#line 297 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"


}
#line 301 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"

#line 303 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winver.h"

#line 171 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 172 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"
























extern "C" {
#line 27 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"









typedef ACCESS_MASK REGSAM;





















struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

typedef
DWORD _cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 123 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

#line 125 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"


#line 128 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"













__declspec(dllimport)
LONG
__stdcall
RegCloseKey (
     HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegOverridePredefKey (
     HKEY hKey,
     HKEY hNewHKey
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenUserClassesRoot(
    HANDLE hToken,
    DWORD  dwOptions,
    REGSAM samDesired,
    PHKEY  phkResult
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenCurrentUser(
    REGSAM samDesired,
    PHKEY phkResult
    );

__declspec(dllimport)
LONG
__stdcall
RegDisablePredefinedCache(
    );

__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryA (
     LPCSTR lpMachineName,
     HKEY hKey,
     PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryW (
     LPCWSTR lpMachineName,
     HKEY hKey,
     PHKEY phkResult
    );




#line 201 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyA (
     HKEY hKey,
     LPCSTR lpSubKey,
     PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyW (
     HKEY hKey,
     LPCWSTR lpSubKey,
     PHKEY phkResult
    );




#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExA (
     HKEY hKey,
     LPCSTR lpSubKey,
     DWORD Reserved,
     LPSTR lpClass,
     DWORD dwOptions,
     REGSAM samDesired,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes,
     PHKEY phkResult,
     LPDWORD lpdwDisposition
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExW (
     HKEY hKey,
     LPCWSTR lpSubKey,
     DWORD Reserved,
     LPWSTR lpClass,
     DWORD dwOptions,
     REGSAM samDesired,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes,
     PHKEY phkResult,
     LPDWORD lpdwDisposition
    );




#line 257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyA (
     HKEY hKey,
     LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyW (
     HKEY hKey,
     LPCWSTR lpSubKey
    );




#line 277 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDeleteValueA (
     HKEY hKey,
     LPCSTR lpValueName
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteValueW (
     HKEY hKey,
     LPCWSTR lpValueName
    );




#line 297 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyA (
     HKEY hKey,
     DWORD dwIndex,
     LPSTR lpName,
     DWORD cbName
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyW (
     HKEY hKey,
     DWORD dwIndex,
     LPWSTR lpName,
     DWORD cbName
    );




#line 321 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExA (
     HKEY hKey,
     DWORD dwIndex,
     LPSTR lpName,
      LPDWORD lpcbName,
     LPDWORD lpReserved,
      LPSTR lpClass,
      LPDWORD lpcbClass,
     PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExW (
     HKEY hKey,
     DWORD dwIndex,
     LPWSTR lpName,
      LPDWORD lpcbName,
     LPDWORD lpReserved,
      LPWSTR lpClass,
      LPDWORD lpcbClass,
     PFILETIME lpftLastWriteTime
    );




#line 353 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumValueA (
     HKEY hKey,
     DWORD dwIndex,
     LPSTR lpValueName,
      LPDWORD lpcbValueName,
     LPDWORD lpReserved,
     LPDWORD lpType,
     LPBYTE lpData,
      LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumValueW (
     HKEY hKey,
     DWORD dwIndex,
     LPWSTR lpValueName,
      LPDWORD lpcbValueName,
     LPDWORD lpReserved,
     LPDWORD lpType,
     LPBYTE lpData,
      LPDWORD lpcbData
    );




#line 385 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegFlushKey (
     HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegGetKeySecurity (
     HKEY hKey,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPDWORD lpcbSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegLoadKeyA (
     HKEY    hKey,
     LPCSTR  lpSubKey,
     LPCSTR  lpFile
    );
__declspec(dllimport)
LONG
__stdcall
RegLoadKeyW (
     HKEY    hKey,
     LPCWSTR  lpSubKey,
     LPCWSTR  lpFile
    );




#line 424 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegNotifyChangeKeyValue (
     HKEY hKey,
     BOOL bWatchSubtree,
     DWORD dwNotifyFilter,
     HANDLE hEvent,
     BOOL fAsynchronus
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyA (
     HKEY hKey,
     LPCSTR lpSubKey,
     PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyW (
     HKEY hKey,
     LPCWSTR lpSubKey,
     PHKEY phkResult
    );




#line 457 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExA (
     HKEY hKey,
     LPCSTR lpSubKey,
     DWORD ulOptions,
     REGSAM samDesired,
     PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExW (
     HKEY hKey,
     LPCWSTR lpSubKey,
     DWORD ulOptions,
     REGSAM samDesired,
     PHKEY phkResult
    );




#line 483 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyA (
     HKEY hKey,
     LPSTR lpClass,
      LPDWORD lpcbClass,
     LPDWORD lpReserved,
     LPDWORD lpcSubKeys,
     LPDWORD lpcbMaxSubKeyLen,
     LPDWORD lpcbMaxClassLen,
     LPDWORD lpcValues,
     LPDWORD lpcbMaxValueNameLen,
     LPDWORD lpcbMaxValueLen,
     LPDWORD lpcbSecurityDescriptor,
     PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyW (
     HKEY hKey,
     LPWSTR lpClass,
      LPDWORD lpcbClass,
     LPDWORD lpReserved,
     LPDWORD lpcSubKeys,
     LPDWORD lpcbMaxSubKeyLen,
     LPDWORD lpcbMaxClassLen,
     LPDWORD lpcValues,
     LPDWORD lpcbMaxValueNameLen,
     LPDWORD lpcbMaxValueLen,
     LPDWORD lpcbSecurityDescriptor,
     PFILETIME lpftLastWriteTime
    );




#line 523 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueA (
     HKEY hKey,
     LPCSTR lpSubKey,
     LPSTR lpValue,
      PLONG   lpcbValue
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueW (
     HKEY hKey,
     LPCWSTR lpSubKey,
     LPWSTR lpValue,
      PLONG   lpcbValue
    );




#line 547 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesA (
     HKEY hKey,
     PVALENTA val_list,
     DWORD num_vals,
     LPSTR lpValueBuf,
      LPDWORD ldwTotsize
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesW (
     HKEY hKey,
     PVALENTW val_list,
     DWORD num_vals,
     LPWSTR lpValueBuf,
      LPDWORD ldwTotsize
    );




#line 574 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"
#line 575 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueExA (
     HKEY hKey,
     LPCSTR lpValueName,
     LPDWORD lpReserved,
     LPDWORD lpType,
      LPBYTE lpData,
      LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueExW (
     HKEY hKey,
     LPCWSTR lpValueName,
     LPDWORD lpReserved,
     LPDWORD lpType,
      LPBYTE lpData,
      LPDWORD lpcbData
    );




#line 603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyA (
     HKEY     hKey,
     LPCSTR  lpSubKey,
     LPCSTR  lpNewFile,
     LPCSTR  lpOldFile
    );
__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyW (
     HKEY     hKey,
     LPCWSTR  lpSubKey,
     LPCWSTR  lpNewFile,
     LPCWSTR  lpOldFile
    );




#line 627 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyA (
     HKEY hKey,
     LPCSTR lpFile,
     DWORD   dwFlags
    );
__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyW (
     HKEY hKey,
     LPCWSTR lpFile,
     DWORD   dwFlags
    );




#line 649 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSaveKeyA (
     HKEY hKey,
     LPCSTR lpFile,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LONG
__stdcall
RegSaveKeyW (
     HKEY hKey,
     LPCWSTR lpFile,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 671 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSetKeySecurity (
     HKEY hKey,
     SECURITY_INFORMATION SecurityInformation,
     PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegSetValueA (
     HKEY hKey,
     LPCSTR lpSubKey,
     DWORD dwType,
     LPCSTR lpData,
     DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueW (
     HKEY hKey,
     LPCWSTR lpSubKey,
     DWORD dwType,
     LPCWSTR lpData,
     DWORD cbData
    );




#line 706 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegSetValueExA (
     HKEY hKey,
     LPCSTR lpValueName,
     DWORD Reserved,
     DWORD dwType,
     const BYTE* lpData,
     DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueExW (
     HKEY hKey,
     LPCWSTR lpValueName,
     DWORD Reserved,
     DWORD dwType,
     const BYTE* lpData,
     DWORD cbData
    );




#line 735 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyA (
     HKEY    hKey,
     LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyW (
     HKEY    hKey,
     LPCWSTR lpSubKey
    );




#line 755 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"





__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
     LPSTR lpMachineName,
     LPSTR lpMessage,
     DWORD dwTimeout,
     BOOL bForceAppsClosed,
     BOOL bRebootAfterShutdown
    );
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
     LPWSTR lpMachineName,
     LPWSTR lpMessage,
     DWORD dwTimeout,
     BOOL bForceAppsClosed,
     BOOL bRebootAfterShutdown
    );




#line 785 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"


__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
     LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
     LPWSTR lpMachineName
    );




#line 804 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"





#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\reason.h"

































































    










#line 78 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\reason.h"
#line 810 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"












__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
     LPSTR lpMachineName,
     LPSTR lpMessage,
     DWORD dwTimeout,
     BOOL bForceAppsClosed,
     BOOL bRebootAfterShutdown,
     DWORD dwReason
    );
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
     LPWSTR lpMachineName,
     LPWSTR lpMessage,
     DWORD dwTimeout,
     BOOL bForceAppsClosed,
     BOOL bRebootAfterShutdown,
     DWORD dwReason
    );




#line 849 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegSaveKeyExA (
     HKEY hKey,
     LPCSTR lpFile,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes,
     DWORD Flags
    );
__declspec(dllimport)
LONG
__stdcall
RegSaveKeyExW (
     HKEY hKey,
     LPCWSTR lpFile,
     LPSECURITY_ATTRIBUTES lpSecurityAttributes,
     DWORD Flags
    );




#line 874 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
Wow64Win32ApiEntry (
    DWORD dwFuncNumber,
    DWORD dwFlag,
    DWORD dwRes
    );


}
#line 887 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"


#line 890 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"

#line 174 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"



























extern "C" {
#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"








































































#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"






#line 110 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"









#line 120 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"













#line 134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"



#line 138 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"





















#line 188 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"



#line 192 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetAddConnectionA(
      LPCSTR   lpRemoteName,
      LPCSTR   lpPassword,
      LPCSTR   lpLocalName
    );
DWORD __stdcall
WNetAddConnectionW(
      LPCWSTR   lpRemoteName,
      LPCWSTR   lpPassword,
      LPCWSTR   lpLocalName
    );




#line 210 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetAddConnection2A(
      LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
      DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection2W(
      LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
      DWORD          dwFlags
    );




#line 230 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetAddConnection3A(
      HWND           hwndOwner,
      LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
      DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection3W(
      HWND           hwndOwner,
      LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
      DWORD          dwFlags
    );




#line 252 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetCancelConnectionA(
      LPCSTR lpName,
      BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnectionW(
      LPCWSTR lpName,
      BOOL     fForce
    );




#line 268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetCancelConnection2A(
      LPCSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnection2W(
      LPCWSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );




#line 286 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetGetConnectionA(
      LPCSTR lpLocalName,
      LPSTR  lpRemoteName,
       LPDWORD  lpnLength
    );
DWORD __stdcall
WNetGetConnectionW(
      LPCWSTR lpLocalName,
      LPWSTR  lpRemoteName,
       LPDWORD  lpnLength
    );




#line 304 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"



DWORD __stdcall
WNetUseConnectionA(
     HWND            hwndOwner,
     LPNETRESOURCEA  lpNetResource,
     LPCSTR        lpPassword,
     LPCSTR        lpUserID,
     DWORD           dwFlags,
     LPSTR        lpAccessName,
      LPDWORD     lpBufferSize,
     LPDWORD        lpResult
    );
DWORD __stdcall
WNetUseConnectionW(
     HWND            hwndOwner,
     LPNETRESOURCEW  lpNetResource,
     LPCWSTR        lpPassword,
     LPCWSTR        lpUserID,
     DWORD           dwFlags,
     LPWSTR        lpAccessName,
      LPDWORD     lpBufferSize,
     LPDWORD        lpResult
    );




#line 334 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"
#line 335 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"






DWORD __stdcall
WNetConnectionDialog(
     HWND  hwnd,
     DWORD dwType
    );

DWORD __stdcall
WNetDisconnectDialog(
     HWND  hwnd,
     DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 375 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"














DWORD __stdcall
WNetConnectionDialog1A(
      LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetConnectionDialog1W(
      LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );




#line 402 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
#line 424 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"




DWORD __stdcall
WNetDisconnectDialog1A(
     LPDISCDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetDisconnectDialog1W(
     LPDISCDLGSTRUCTW lpConnDlgStruct
    );




#line 441 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"
#line 442 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"





DWORD __stdcall
WNetOpenEnumA(
      DWORD          dwScope,
      DWORD          dwType,
      DWORD          dwUsage,
      LPNETRESOURCEA lpNetResource,
      LPHANDLE       lphEnum
    );
DWORD __stdcall
WNetOpenEnumW(
      DWORD          dwScope,
      DWORD          dwType,
      DWORD          dwUsage,
      LPNETRESOURCEW lpNetResource,
      LPHANDLE       lphEnum
    );




#line 468 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetEnumResourceA(
      HANDLE  hEnum,
       LPDWORD lpcCount,
      LPVOID  lpBuffer,
       LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetEnumResourceW(
      HANDLE  hEnum,
       LPDWORD lpcCount,
      LPVOID  lpBuffer,
       LPDWORD lpBufferSize
    );




#line 488 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetCloseEnum(
     HANDLE   hEnum
    );


DWORD __stdcall
WNetGetResourceParentA(
     LPNETRESOURCEA lpNetResource,
     LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );
DWORD __stdcall
WNetGetResourceParentW(
     LPNETRESOURCEW lpNetResource,
     LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );




#line 512 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetGetResourceInformationA(
     LPNETRESOURCEA  lpNetResource,
     LPVOID          lpBuffer,
      LPDWORD         lpcbBuffer,
     LPSTR         *lplpSystem
    );
DWORD __stdcall
WNetGetResourceInformationW(
     LPNETRESOURCEW  lpNetResource,
     LPVOID          lpBuffer,
      LPDWORD         lpcbBuffer,
     LPWSTR         *lplpSystem
    );




#line 532 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"
#line 533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"








typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
#line 554 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
#line 572 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

DWORD __stdcall
WNetGetUniversalNameA(
      LPCSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID   lpBuffer,
       LPDWORD  lpBufferSize
     );
DWORD __stdcall
WNetGetUniversalNameW(
      LPCWSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID   lpBuffer,
       LPDWORD  lpBufferSize
     );




#line 592 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"





DWORD __stdcall
WNetGetUserA(
      LPCSTR  lpName,
      LPSTR   lpUserName,
       LPDWORD   lpnLength
    );
DWORD __stdcall
WNetGetUserW(
      LPCWSTR  lpName,
      LPWSTR   lpUserName,
       LPDWORD   lpnLength
    );




#line 614 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"











#line 626 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"



DWORD __stdcall
WNetGetProviderNameA(
     DWORD   dwNetType,
     LPSTR lpProviderName,
      LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetGetProviderNameW(
     DWORD   dwNetType,
     LPWSTR lpProviderName,
      LPDWORD lpBufferSize
    );




#line 646 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





DWORD __stdcall
WNetGetNetworkInformationA(
     LPCSTR          lpProvider,
     LPNETINFOSTRUCT   lpNetInfoStruct
    );
DWORD __stdcall
WNetGetNetworkInformationW(
     LPCWSTR          lpProvider,
     LPNETINFOSTRUCT   lpNetInfoStruct
    );




#line 677 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"





typedef UINT ( __stdcall *PFNGETPROFILEPATHA) (
    LPCSTR    pszUsername,
    LPSTR     pszBuffer,
    UINT        cbBuffer
    );
typedef UINT ( __stdcall *PFNGETPROFILEPATHW) (
    LPCWSTR    pszUsername,
    LPWSTR     pszBuffer,
    UINT        cbBuffer
    );




#line 697 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

typedef UINT ( __stdcall *PFNRECONCILEPROFILEA) (
    LPCSTR    pszCentralFile,
    LPCSTR    pszLocalFile,
    DWORD       dwFlags
    );
typedef UINT ( __stdcall *PFNRECONCILEPROFILEW) (
    LPCWSTR    pszCentralFile,
    LPCWSTR    pszLocalFile,
    DWORD       dwFlags
    );




#line 713 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"









typedef BOOL ( __stdcall *PFNPROCESSPOLICIESA) (
    HWND        hwnd,
    LPCSTR    pszPath,
    LPCSTR    pszUsername,
    LPCSTR    pszComputerName,
    DWORD       dwFlags
    );
typedef BOOL ( __stdcall *PFNPROCESSPOLICIESW) (
    HWND        hwnd,
    LPCWSTR    pszPath,
    LPCWSTR    pszUsername,
    LPCWSTR    pszComputerName,
    DWORD       dwFlags
    );




#line 741 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"


#line 744 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"





DWORD __stdcall
WNetGetLastErrorA(
      LPDWORD    lpError,
      LPSTR    lpErrorBuf,
      DWORD      nErrorBufSize,
      LPSTR    lpNameBuf,
      DWORD      nNameBufSize
    );
DWORD __stdcall
WNetGetLastErrorW(
      LPDWORD    lpError,
      LPWSTR    lpErrorBuf,
      DWORD      nErrorBufSize,
      LPWSTR    lpNameBuf,
      DWORD      nNameBufSize
    );




#line 770 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"





























#line 800 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"




















#line 821 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"












#line 834 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"






typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






DWORD __stdcall
MultinetGetConnectionPerformanceA(
         LPNETRESOURCEA lpNetResource,
         LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );
DWORD __stdcall
MultinetGetConnectionPerformanceW(
         LPNETRESOURCEW lpNetResource,
         LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );




#line 868 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"
#line 869 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"


}
#line 873 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

#line 875 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnetwk.h"

#line 177 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 178 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"




































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"














































extern "C" {
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"














































































































































































































































































































#line 352 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"






































































#line 423 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"




































#line 460 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"











































#line 504 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"



#line 508 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"











#line 520 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"









#line 530 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"


}
#line 534 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"


#line 537 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\stralign.h"

    

                                         



                                                      
#line 215 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"












#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"






























#line 32 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"


extern "C" {
#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"




































#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"


















































































































typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;




typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
#line 203 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"




typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE  Type;
    DWORD           Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD       dwResetPeriod;
    LPSTR       lpRebootMsg;
    LPSTR       lpCommand;
    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD       dwResetPeriod;
    LPWSTR      lpRebootMsg;
    LPWSTR      lpCommand;
    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;




typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
#line 246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"






struct SC_HANDLE__ { int unused; }; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
        SC_STATUS_PROCESS_INFO      = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
        SC_ENUM_PROCESS_INFO        = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
    DWORD   dwProcessId;
    DWORD   dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR             lpServiceName;
    LPSTR             lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR            lpServiceName;
    LPWSTR            lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
#line 321 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR                     lpServiceName;
    LPSTR                     lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR                    lpServiceName;
    LPWSTR                    lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;




typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
#line 339 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"





typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
#line 363 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"







typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#line 399 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );





#line 421 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"






typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
#line 442 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"





typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );






__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword,
    LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
    SC_HANDLE    hService,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword,
    LPCWSTR     lpDisplayName
    );




#line 500 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
    SC_HANDLE    hService,
    DWORD        dwInfoLevel,
    LPVOID       lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
    SC_HANDLE    hService,
    DWORD        dwInfoLevel,
    LPVOID       lpInfo
    );




#line 522 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
    SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
    SC_HANDLE           hService,
    DWORD               dwControl,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
    SC_HANDLE    hSCManager,
    LPCSTR     lpServiceName,
    LPCSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCSTR     lpBinaryPathName,
    LPCSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCSTR     lpDependencies,
    LPCSTR     lpServiceStartName,
    LPCSTR     lpPassword
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
    SC_HANDLE    hSCManager,
    LPCWSTR     lpServiceName,
    LPCWSTR     lpDisplayName,
    DWORD        dwDesiredAccess,
    DWORD        dwServiceType,
    DWORD        dwStartType,
    DWORD        dwErrorControl,
    LPCWSTR     lpBinaryPathName,
    LPCWSTR     lpLoadOrderGroup,
    LPDWORD      lpdwTagId,
    LPCWSTR     lpDependencies,
    LPCWSTR     lpServiceStartName,
    LPCWSTR     lpPassword
    );




#line 580 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteService(
    SC_HANDLE   hService
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
    SC_HANDLE               hService,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned
    );




#line 615 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSA  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
    SC_HANDLE               hSCManager,
    DWORD                   dwServiceType,
    DWORD                   dwServiceState,
    LPENUM_SERVICE_STATUSW  lpServices,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded,
    LPDWORD                 lpServicesReturned,
    LPDWORD                 lpResumeHandle
    );




#line 647 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
    SC_HANDLE                  hSCManager,
    SC_ENUM_TYPE               InfoLevel,
    DWORD                      dwServiceType,
    DWORD                      dwServiceState,
    LPBYTE                     lpServices,
    DWORD                      cbBufSize,
    LPDWORD                    pcbBytesNeeded,
    LPDWORD                    lpServicesReturned,
    LPDWORD                    lpResumeHandle,
    LPCSTR                   pszGroupName
    );
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
    SC_HANDLE                  hSCManager,
    SC_ENUM_TYPE               InfoLevel,
    DWORD                      dwServiceType,
    DWORD                      dwServiceState,
    LPBYTE                     lpServices,
    DWORD                      cbBufSize,
    LPDWORD                    pcbBytesNeeded,
    LPDWORD                    lpServicesReturned,
    LPDWORD                    lpResumeHandle,
    LPCWSTR                   pszGroupName
    );




#line 683 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpDisplayName,
    LPSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpDisplayName,
    LPWSTR                 lpServiceName,
    LPDWORD                 lpcchBuffer
    );




#line 707 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
    SC_HANDLE               hSCManager,
    LPCSTR                lpServiceName,
    LPSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
    SC_HANDLE               hSCManager,
    LPCWSTR                lpServiceName,
    LPWSTR                 lpDisplayName,
    LPDWORD                 lpcchBuffer
    );




#line 731 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
    SC_HANDLE   hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
    BOOL     BootAcceptable
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
    LPCSTR lpMachineName,
    LPCSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
    LPCWSTR lpMachineName,
    LPCWSTR lpDatabaseName,
    DWORD   dwDesiredAccess
    );




#line 767 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
    SC_HANDLE   hSCManager,
    LPCSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
    SC_HANDLE   hSCManager,
    LPCWSTR    lpServiceName,
    DWORD       dwDesiredAccess
    );




#line 789 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
    SC_HANDLE               hService,
    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );




#line 813 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
    SC_HANDLE   hService,
    DWORD       dwInfoLevel,
    LPBYTE      lpBuffer,
    DWORD       cbBufSize,
    LPDWORD     pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
    SC_HANDLE   hService,
    DWORD       dwInfoLevel,
    LPBYTE      lpBuffer,
    DWORD       cbBufSize,
    LPDWORD     pcbBytesNeeded
    );




#line 839 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
    SC_HANDLE                       hSCManager,
    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
    DWORD                           cbBufSize,
    LPDWORD                         pcbBytesNeeded
    );




#line 863 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
    DWORD                   cbBufSize,
    LPDWORD                 pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
    SC_HANDLE           hService,
    LPSERVICE_STATUS    lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
    SC_HANDLE           hService,
    SC_STATUS_TYPE      InfoLevel,
    LPBYTE              lpBuffer,
    DWORD               cbBufSize,
    LPDWORD             pcbBytesNeeded
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
    LPCSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
    LPCWSTR             lpServiceName,
    LPHANDLER_FUNCTION   lpHandlerProc
    );




#line 913 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
    LPCSTR                lpServiceName,
    LPHANDLER_FUNCTION_EX   lpHandlerProc,
    LPVOID                  lpContext
    );
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
    LPCWSTR                lpServiceName,
    LPHANDLER_FUNCTION_EX   lpHandlerProc,
    LPVOID                  lpContext
    );




#line 935 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
    SC_HANDLE               hService,
    SECURITY_INFORMATION    dwSecurityInformation,
    PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
    SERVICE_STATUS_HANDLE   hServiceStatus,
    LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
    const SERVICE_TABLE_ENTRYA *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
    const SERVICE_TABLE_ENTRYW *lpServiceStartTable
    );




#line 970 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
    SC_HANDLE            hService,
    DWORD                dwNumServiceArgs,
    LPCWSTR             *lpServiceArgVectors
    );




#line 993 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
    SC_LOCK     ScLock
    );



}
#line 1005 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"

#line 1007 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"
#line 228 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\mcx.h"












#pragma once
#line 15 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\mcx.h"

typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;

















































































































































































































































































































































































































































































































































































































































































#line 723 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\mcx.h"
#line 233 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 234 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"











extern "C" {
#line 14 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"






struct HIMC__ { int unused; }; typedef struct HIMC__ *HIMC;
struct HIMCC__ { int unused; }; typedef struct HIMCC__ *HIMCC;



#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

typedef HKL   *LPHKL;
typedef UINT  *LPUINT;

typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
#line 74 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"



typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING,  *NPRECONVERTSTRING,  *LPRECONVERTSTRING;

#line 89 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"



typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
#line 111 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"






typedef struct tagIMEMENUITEMINFOA {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    CHAR        szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA,  *NPIMEMENUITEMINFOA,  *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    WCHAR       szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW,  *NPIMEMENUITEMINFOW,  *LPIMEMENUITEMINFOW;






typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
#line 150 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

typedef struct tagIMECHARPOSITION {
    DWORD       dwSize;
    DWORD       dwCharPos;
    POINT       pt;
    UINT        cLineHeight;
    RECT        rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION,  *NPIMECHARPOSITION,  *LPIMECHARPOSITION;

typedef BOOL    (__stdcall* IMCENUMPROC)(HIMC, LPARAM);

#line 162 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"



HKL  __stdcall ImmInstallIMEA( LPCSTR lpszIMEFileName,  LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW( LPCWSTR lpszIMEFileName,  LPCWSTR lpszLayoutText);




#line 172 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL,  LPSTR,  UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL,  LPWSTR,  UINT uBufLen);




#line 182 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

UINT __stdcall ImmGetIMEFileNameA( HKL,  LPSTR,  UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL,  LPWSTR,  UINT uBufLen);




#line 190 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

DWORD __stdcall ImmGetProperty( HKL,  DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND,  DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND,  HIMC);
HIMC __stdcall ImmAssociateContext( HWND,  HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND,  HIMC,  DWORD);
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

LONG  __stdcall ImmGetCompositionStringA( HIMC,  DWORD,  LPVOID,  DWORD);
LONG  __stdcall ImmGetCompositionStringW( HIMC,  DWORD,  LPVOID,  DWORD);




#line 213 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

BOOL  __stdcall ImmSetCompositionStringA( HIMC,  DWORD dwIndex,  LPVOID lpComp,  DWORD,  LPVOID lpRead,  DWORD);
BOOL  __stdcall ImmSetCompositionStringW( HIMC,  DWORD dwIndex,  LPVOID lpComp,  DWORD,  LPVOID lpRead,  DWORD);




#line 221 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

DWORD __stdcall ImmGetCandidateListCountA( HIMC,  LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC,  LPDWORD lpdwListCount);




#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

DWORD __stdcall ImmGetCandidateListA( HIMC,  DWORD deIndex,  LPCANDIDATELIST,  DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC,  DWORD deIndex,  LPCANDIDATELIST,  DWORD dwBufLen);




#line 237 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

DWORD __stdcall ImmGetGuideLineA( HIMC,  DWORD dwIndex,  LPSTR,  DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW( HIMC,  DWORD dwIndex,  LPWSTR,  DWORD dwBufLen);




#line 245 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

BOOL __stdcall ImmGetConversionStatus( HIMC,  LPDWORD,  LPDWORD);
BOOL __stdcall ImmSetConversionStatus( HIMC,  DWORD,  DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC,  BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC,  LPLOGFONTA);
BOOL __stdcall ImmGetCompositionFontW( HIMC,  LPLOGFONTW);




#line 259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

BOOL __stdcall ImmSetCompositionFontA( HIMC,  LPLOGFONTA);
BOOL __stdcall ImmSetCompositionFontW( HIMC,  LPLOGFONTW);




#line 267 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"
#line 268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

BOOL    __stdcall ImmConfigureIMEA( HKL,  HWND,  DWORD,  LPVOID);
BOOL    __stdcall ImmConfigureIMEW( HKL,  HWND,  DWORD,  LPVOID);




#line 276 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

LRESULT __stdcall ImmEscapeA( HKL,  HIMC,  UINT,  LPVOID);
LRESULT __stdcall ImmEscapeW( HKL,  HIMC,  UINT,  LPVOID);




#line 284 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

DWORD   __stdcall ImmGetConversionListA( HKL,  HIMC,  LPCSTR,  LPCANDIDATELIST,  DWORD dwBufLen,  UINT uFlag);
DWORD   __stdcall ImmGetConversionListW( HKL,  HIMC,  LPCWSTR,  LPCANDIDATELIST,  DWORD dwBufLen,  UINT uFlag);




#line 292 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

BOOL    __stdcall ImmNotifyIME( HIMC,  DWORD dwAction,  DWORD dwIndex,  DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC,  LPPOINT);
BOOL __stdcall ImmSetStatusWindowPos( HIMC,  LPPOINT);
BOOL __stdcall ImmGetCompositionWindow( HIMC,  LPCOMPOSITIONFORM);
BOOL __stdcall ImmSetCompositionWindow( HIMC,  LPCOMPOSITIONFORM);
BOOL __stdcall ImmGetCandidateWindow( HIMC,  DWORD,  LPCANDIDATEFORM);
BOOL __stdcall ImmSetCandidateWindow( HIMC,  LPCANDIDATEFORM);

BOOL __stdcall ImmIsUIMessageA( HWND,  UINT,  WPARAM,  LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND,  UINT,  WPARAM,  LPARAM);




#line 309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"


UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);




#line 320 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

BOOL __stdcall ImmRegisterWordA( HKL,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszRegister);




#line 328 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

BOOL __stdcall ImmUnregisterWordA( HKL,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszUnregister);




#line 336 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

UINT __stdcall ImmGetRegisterWordStyleA( HKL,  UINT nItem,  LPSTYLEBUFA);
UINT __stdcall ImmGetRegisterWordStyleW( HKL,  UINT nItem,  LPSTYLEBUFW);




#line 344 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

UINT __stdcall ImmEnumRegisterWordA( HKL,  REGISTERWORDENUMPROCA,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszRegister,  LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL,  REGISTERWORDENUMPROCW,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszRegister,  LPVOID);




#line 352 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"


BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC,  DWORD,  DWORD,  LPIMEMENUITEMINFOA,  LPIMEMENUITEMINFOA,  DWORD);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC,  DWORD,  DWORD,  LPIMEMENUITEMINFOW,  LPIMEMENUITEMINFOW,  DWORD);




#line 363 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"
#line 364 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"




































































































































































































































































#line 625 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"





































































#line 695 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"








#line 704 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"


}
#line 708 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"

#line 710 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\imm.h"
#line 237 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 238 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 239 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 240 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"




#pragma warning(pop)





#line 251 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 252 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 255 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"
#line 258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\windows.h"

#line 121 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"




#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\zmouse.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\zmouse.h"














#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\zmouse.h"
   
   
























#line 60 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\zmouse.h"





















                                                 
#line 83 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\zmouse.h"











#line 95 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\zmouse.h"














































__inline HWND HwndMSWheel(
      PUINT puiMsh_MsgMouseWheel,
      PUINT puiMsh_Msg3DSupport,
      PUINT puiMsh_MsgScrollLines,
      PBOOL pf3DSupport,
      PINT  piScrollLines
)
{
   HWND hdlMsWheel;

   hdlMsWheel = FindWindowA(("MouseZ"), ("Magellan MSWHEEL"));

   *puiMsh_MsgMouseWheel = RegisterWindowMessageA("MSWHEEL_ROLLMSG");
   *puiMsh_Msg3DSupport = RegisterWindowMessageA("MSH_WHEELSUPPORT_MSG");
   *puiMsh_MsgScrollLines = RegisterWindowMessageA("MSH_SCROLL_LINES_MSG");

   if (*puiMsh_Msg3DSupport)
      *pf3DSupport = (BOOL)SendMessageA(hdlMsWheel, *puiMsh_Msg3DSupport, 0, 0);
   else
      *pf3DSupport = 0;  

   if (*puiMsh_MsgScrollLines)
      *piScrollLines = (int)SendMessageA(hdlMsWheel, *puiMsh_MsgScrollLines, 0, 0);
   else
      *piScrollLines = 3;  

   return(hdlMsWheel);
}
#line 126 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"

struct HKEY__;
typedef struct HKEY__ *HKEY;


	#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
























#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 27 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 45 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 46 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 65 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


extern "C" {
#line 69 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




























#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"






















#line 24 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
#line 25 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"














#line 41 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"























#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 65 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
#line 66 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"


extern "C" {
#line 70 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"








#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"






#line 86 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
#line 87 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"



struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"

typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);





#line 106 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"



















#line 126 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"


#line 129 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"




#line 134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"










typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;


#line 148 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"












































#line 193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"





#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"

typedef struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

typedef struct _PROPSHEETPAGEA_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;


typedef struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

typedef struct _PROPSHEETPAGEW_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;

typedef    PROPSHEETPAGEA_V3    PROPSHEETPAGEA_LATEST;
typedef    PROPSHEETPAGEW_V3    PROPSHEETPAGEW_LATEST;
typedef  LPPROPSHEETPAGEA_V3  LPPROPSHEETPAGEA_LATEST;
typedef  LPPROPSHEETPAGEW_V3  LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;








#line 268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
typedef    PROPSHEETPAGEA_V2    PROPSHEETPAGEA;
typedef    PROPSHEETPAGEW_V2    PROPSHEETPAGEW;
typedef  LPPROPSHEETPAGEA_V2  LPPROPSHEETPAGEA;
typedef  LPPROPSHEETPAGEW_V2  LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V2 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V2 LPCPROPSHEETPAGEW;







#line 282 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"









#line 292 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"





































#line 330 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"




















#line 351 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"

#line 353 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"









#line 363 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"






#line 370 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"


typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);







typedef struct _PROPSHEETHEADERA 
{
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union 
        {
            HICON       hIcon;
            LPCSTR      pszIcon;
        } ;
        LPCSTR          pszCaption;

        UINT            nPages;
        union 
        {
            UINT        nStartPage;
            LPCSTR      pStartPage;
        } ;
        union 
        {
            LPCPROPSHEETPAGEA ppsp;
            HPROPSHEETPAGE *phpage;
        } ;
        PFNPROPSHEETCALLBACK pfnCallback;


        union 
        {
            HBITMAP hbmWatermark;
            LPCSTR pszbmWatermark;
        } ;
        HPALETTE hplWatermark;
        union 
        {
            HBITMAP hbmHeader;     
            LPCSTR pszbmHeader;
        } ;
#line 419 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
} PROPSHEETHEADERA, *LPPROPSHEETHEADERA;

typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA;

typedef struct _PROPSHEETHEADERW 
{
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union 
        {
            HICON       hIcon;
            LPCWSTR     pszIcon;
        } ;
        LPCWSTR         pszCaption;


        UINT            nPages;
        union 
        {
            UINT        nStartPage;
            LPCWSTR     pStartPage;
        } ;
        union 
        {
            LPCPROPSHEETPAGEW ppsp;
            HPROPSHEETPAGE *phpage;
        } ;
        PFNPROPSHEETCALLBACK pfnCallback;


        union 
        {
            HBITMAP hbmWatermark;
            LPCWSTR pszbmWatermark;
        } ;
        HPALETTE hplWatermark;
        union 
        {
            HBITMAP hbmHeader;
            LPCWSTR pszbmHeader;
        } ;
#line 463 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
} PROPSHEETHEADERW, *LPPROPSHEETHEADERW;
typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW;











#line 477 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"













#line 491 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"














#line 506 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"


__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
__declspec(dllimport) BOOL           __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);

__declspec(dllimport) INT_PTR        __stdcall PropertySheetA(LPCPROPSHEETHEADERA);

__declspec(dllimport) INT_PTR        __stdcall PropertySheetW(LPCPROPSHEETHEADERW);







#line 523 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"



typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;


















#line 554 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"



#line 558 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
































































#line 623 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"












































#line 668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"






























#line 699 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"












#line 712 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"



































#line 748 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"






















































































































































































































































































































#line 1059 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"
#line 1060 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"




}
#line 1066 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 1068 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"


#line 1071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"

#line 98 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








































__declspec(dllimport) void __stdcall InitCommonControls(void);


typedef struct tagINITCOMMONCONTROLSEX {
    DWORD dwSize;             
    DWORD dwICC;              
} INITCOMMONCONTROLSEX, *LPINITCOMMONCONTROLSEX;
















#line 162 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


__declspec(dllimport) BOOL __stdcall InitCommonControlsEx(LPINITCOMMONCONTROLSEX);
#line 170 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 190 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






typedef struct tagCOLORSCHEME {
   DWORD            dwSize;
   COLORREF         clrBtnHighlight;       
   COLORREF         clrBtnShadow;          
} COLORSCHEME, *LPCOLORSCHEME;










#line 212 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 214 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 222 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 230 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 263 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







typedef struct tagNMTOOLTIPSCREATED
{
    NMHDR hdr;
    HWND hwndToolTips;
} NMTOOLTIPSCREATED, * LPNMTOOLTIPSCREATED;
#line 281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct tagNMMOUSE {
    NMHDR   hdr;
    DWORD_PTR dwItemSpec;
    DWORD_PTR dwItemData;
    POINT   pt;
    LPARAM  dwHitInfo; 
} NMMOUSE, *LPNMMOUSE;

typedef NMMOUSE NMCLICK;
typedef LPNMMOUSE LPNMCLICK;



typedef struct tagNMOBJECTNOTIFY {
    NMHDR   hdr;
    int     iItem;

    const IID *piid;


#line 304 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
    void *pObject;
    HRESULT hResult;
    DWORD dwFlags;    
} NMOBJECTNOTIFY, *LPNMOBJECTNOTIFY;



typedef struct tagNMKEY
{
    NMHDR hdr;
    UINT  nVKey;
    UINT  uFlags;
} NMKEY, *LPNMKEY;



typedef struct tagNMCHAR {
    NMHDR   hdr;
    UINT    ch;
    DWORD   dwItemPrev;     
    DWORD   dwItemNext;     
} NMCHAR, *LPNMCHAR;

#line 328 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













































#line 374 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 386 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





#line 392 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 393 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 398 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















#line 421 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 439 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 453 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagNMCUSTOMDRAWINFO
{
    NMHDR hdr;
    DWORD dwDrawStage;
    HDC hdc;
    RECT rc;
    DWORD_PTR dwItemSpec;  
    UINT  uItemState;
    LPARAM lItemlParam;
} NMCUSTOMDRAW, *LPNMCUSTOMDRAW;

typedef struct tagNMTTCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    UINT uDrawFlags;
} NMTTCUSTOMDRAW, *LPNMTTCUSTOMDRAW;

#line 472 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











struct _IMAGELIST;
typedef struct _IMAGELIST* HIMAGELIST;
#line 486 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct _IMAGELISTDRAWPARAMS 
{
    DWORD       cbSize;
    HIMAGELIST  himl;
    int         i;
    HDC         hdcDst;
    int         x;
    int         y;
    int         cx;
    int         cy;
    int         xBitmap;        
    int         yBitmap;        
    COLORREF    rgbBk;
    COLORREF    rgbFg;
    UINT        fStyle;
    DWORD       dwRop;




#line 510 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} IMAGELISTDRAWPARAMS, *LPIMAGELISTDRAWPARAMS;



#line 515 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 516 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 530 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_Create(int cx, int cy, UINT flags, int cInitial, int cGrow);
__declspec(dllimport) BOOL        __stdcall ImageList_Destroy(HIMAGELIST himl);

__declspec(dllimport) int         __stdcall ImageList_GetImageCount(HIMAGELIST himl);

__declspec(dllimport) BOOL        __stdcall ImageList_SetImageCount(HIMAGELIST himl, UINT uNewCount);
#line 537 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

__declspec(dllimport) int         __stdcall ImageList_Add(HIMAGELIST himl, HBITMAP hbmImage, HBITMAP hbmMask);

__declspec(dllimport) int         __stdcall ImageList_ReplaceIcon(HIMAGELIST himl, int i, HICON hicon);
__declspec(dllimport) COLORREF    __stdcall ImageList_SetBkColor(HIMAGELIST himl, COLORREF clrBk);
__declspec(dllimport) COLORREF    __stdcall ImageList_GetBkColor(HIMAGELIST himl);
__declspec(dllimport) BOOL        __stdcall ImageList_SetOverlayImage(HIMAGELIST himl, int iImage, int iOverlay);









#line 554 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















__declspec(dllimport) BOOL __stdcall ImageList_Draw(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, UINT fStyle);




__declspec(dllimport) BOOL        __stdcall ImageList_Replace(HIMAGELIST himl, int i, HBITMAP hbmImage, HBITMAP hbmMask);

__declspec(dllimport) int         __stdcall ImageList_AddMasked(HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask);
__declspec(dllimport) BOOL        __stdcall ImageList_DrawEx(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, int dx, int dy, COLORREF rgbBk, COLORREF rgbFg, UINT fStyle);

__declspec(dllimport) BOOL        __stdcall ImageList_DrawIndirect(IMAGELISTDRAWPARAMS* pimldp);
#line 585 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
__declspec(dllimport) BOOL        __stdcall ImageList_Remove(HIMAGELIST himl, int i);
__declspec(dllimport) HICON       __stdcall ImageList_GetIcon(HIMAGELIST himl, int i, UINT flags);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_LoadImageA(HINSTANCE hi, LPCSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_LoadImageW(HINSTANCE hi, LPCWSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags);





#line 595 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




__declspec(dllimport) BOOL        __stdcall ImageList_Copy(HIMAGELIST himlDst, int iDst, HIMAGELIST himlSrc, int iSrc, UINT uFlags);
#line 601 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

__declspec(dllimport) BOOL        __stdcall ImageList_BeginDrag(HIMAGELIST himlTrack, int iTrack, int dxHotspot, int dyHotspot);
__declspec(dllimport) void        __stdcall ImageList_EndDrag();
__declspec(dllimport) BOOL        __stdcall ImageList_DragEnter(HWND hwndLock, int x, int y);
__declspec(dllimport) BOOL        __stdcall ImageList_DragLeave(HWND hwndLock);
__declspec(dllimport) BOOL        __stdcall ImageList_DragMove(int x, int y);
__declspec(dllimport) BOOL        __stdcall ImageList_SetDragCursorImage(HIMAGELIST himlDrag, int iDrag, int dxHotspot, int dyHotspot);

__declspec(dllimport) BOOL        __stdcall ImageList_DragShowNolock(BOOL fShow);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_GetDragImage(POINT *ppt,POINT *pptHotspot);






















typedef struct _IMAGEINFO
{
    HBITMAP hbmImage;
    HBITMAP hbmMask;
    int     Unused1;
    int     Unused2;
    RECT    rcImage;
} IMAGEINFO, *LPIMAGEINFO;
#line 642 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

__declspec(dllimport) BOOL        __stdcall ImageList_GetIconSize(HIMAGELIST himl, int *cx, int *cy);
__declspec(dllimport) BOOL        __stdcall ImageList_SetIconSize(HIMAGELIST himl, int cx, int cy);
__declspec(dllimport) BOOL        __stdcall ImageList_GetImageInfo(HIMAGELIST himl, int i, IMAGEINFO *pImageInfo);
__declspec(dllimport) HIMAGELIST  __stdcall ImageList_Merge(HIMAGELIST himl1, int i1, HIMAGELIST himl2, int i2, int dx, int dy);

__declspec(dllimport) HIMAGELIST  __stdcall ImageList_Duplicate(HIMAGELIST himl);
#line 650 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 653 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 656 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 671 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 675 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 683 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





#line 689 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 692 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 696 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct _HD_TEXTFILTERA
{
    LPSTR pszText;                      
    INT cchTextMax;                     
} HD_TEXTFILTERA, *LPHD_TEXTFILTERA;

typedef struct _HD_TEXTFILTERW
{
    LPWSTR pszText;                     
    INT cchTextMax;                     
} HD_TEXTFILTERW, *LPHD_TEXTFILTERW;

#line 730 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 738 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct _HD_ITEMA
{
    UINT    mask;
    int     cxy;
    LPSTR   pszText;
    HBITMAP hbm;
    int     cchTextMax;
    int     fmt;
    LPARAM  lParam;

    int     iImage;        
    int     iOrder;        
#line 753 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

    UINT    type;           
    void *  pvFilter;       
#line 757 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} HDITEMA, *LPHDITEMA;





typedef struct _HD_ITEMW
{
    UINT    mask;
    int     cxy;
    LPWSTR   pszText;
    HBITMAP hbm;
    int     cchTextMax;
    int     fmt;
    LPARAM  lParam;

    int     iImage;        
    int     iOrder;
#line 776 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

    UINT    type;           
    void *  pvFilter;       
#line 780 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} HDITEMW, *LPHDITEMW;









#line 791 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 804 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 807 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 821 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 826 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 840 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 858 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 871 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct _HD_LAYOUT
{
    RECT *prc;
    WINDOWPOS *pwpos;
} HDLAYOUT, *LPHDLAYOUT;














#line 901 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 911 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct _HD_HITTESTINFO
{
    POINT pt;
    UINT flags;
    int iItem;
} HDHITTESTINFO, *LPHDHITTESTINFO;

















































#line 968 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 979 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 990 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 1010 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















#line 1033 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 1037 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
























#line 1062 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 1063 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 1075 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct tagNMHEADERA
{
    NMHDR   hdr;
    int     iItem;
    int     iButton;
    HDITEMA *pitem;
}  NMHEADERA, *LPNMHEADERA;


typedef struct tagNMHEADERW
{
    NMHDR   hdr;
    int     iItem;
    int     iButton;
    HDITEMW *pitem;
} NMHEADERW, *LPNMHEADERW;







#line 1101 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagNMHDDISPINFOW
{
    NMHDR   hdr;
    int     iItem;
    UINT    mask;
    LPWSTR  pszText;
    int     cchTextMax;
    int     iImage;
    LPARAM  lParam;
} NMHDDISPINFOW, *LPNMHDDISPINFOW;

typedef struct tagNMHDDISPINFOA
{
    NMHDR   hdr;
    int     iItem;
    UINT    mask;
    LPSTR   pszText;
    int     cchTextMax;
    int     iImage;
    LPARAM  lParam;
} NMHDDISPINFOA, *LPNMHDDISPINFOA;








#line 1132 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct tagNMHDFILTERBTNCLICK
{
    NMHDR hdr;
    INT iItem;
    RECT rc;
} NMHDFILTERBTNCLICK, *LPNMHDFILTERBTNCLICK;
#line 1141 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 1143 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 1158 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 1162 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct _TBBUTTON {
    int iBitmap;
    int idCommand;
    BYTE fsState;
    BYTE fsStyle;



    BYTE bReserved[2];          
#line 1173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
    DWORD_PTR dwData;
    INT_PTR iString;
} TBBUTTON, * PTBBUTTON, *LPTBBUTTON;
typedef const TBBUTTON *LPCTBBUTTON;


typedef struct _COLORMAP {
    COLORREF from;
    COLORREF to;
} COLORMAP, *LPCOLORMAP;

__declspec(dllimport) HWND __stdcall CreateToolbarEx(HWND hwnd, DWORD ws, UINT wID, int nBitmaps,
                        HINSTANCE hBMInst, UINT_PTR wBMID, LPCTBBUTTON lpButtons,
                        int iNumButtons, int dxButton, int dyButton,
                        int dxBitmap, int dyBitmap, UINT uStructSize);

__declspec(dllimport) HBITMAP __stdcall CreateMappedBitmap(HINSTANCE hInstance, INT_PTR idBitmap,
                                  UINT wFlags, LPCOLORMAP lpColorMap,
                                  int iNumMaps);










#line 1203 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 1206 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 1215 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 1219 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 1228 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 1233 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 1246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 1248 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 1253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 1258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct _NMTBCUSTOMDRAW {
    NMCUSTOMDRAW nmcd;
    HBRUSH hbrMonoDither;
    HBRUSH hbrLines;                
    HPEN hpenLines;                 

    COLORREF clrText;               
    COLORREF clrMark;               
    COLORREF clrTextHighlight;      
    COLORREF clrBtnFace;            
    COLORREF clrBtnHighlight;       
    COLORREF clrHighlightHotTrack;  
                                    
    RECT rcText;                    

    int nStringBkMode;
    int nHLStringBkMode;


#line 1281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} NMTBCUSTOMDRAW, * LPNMTBCUSTOMDRAW;







#line 1290 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 1295 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 1305 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 1313 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct tagTBADDBITMAP {
        HINSTANCE       hInst;
        UINT_PTR        nID;
} TBADDBITMAP, *LPTBADDBITMAP;









#line 1332 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



































#line 1368 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 1376 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 1378 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 1386 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








typedef struct tagTBSAVEPARAMSA {
    HKEY hkr;
    LPCSTR pszSubKey;
    LPCSTR pszValueName;
} TBSAVEPARAMSA, *LPTBSAVEPARAMSA;

typedef struct tagTBSAVEPARAMSW {
    HKEY hkr;
    LPCWSTR pszSubKey;
    LPCWSTR pszValueName;
} TBSAVEPARAMSW, *LPTBSAVEPARAMW;







#line 1413 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 1415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






































#line 1454 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 1464 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








typedef struct {
    int   iButton;
    DWORD dwFlags;
} TBINSERTMARK, * LPTBINSERTMARK;


























#line 1503 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 1505 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct {
    HINSTANCE       hInstOld;
    UINT_PTR        nIDOld;
    HINSTANCE       hInstNew;
    UINT_PTR        nIDNew;
    int             nButtons;
} TBREPLACEBITMAP, *LPTBREPLACEBITMAP;


















#line 1532 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct {
    UINT cbSize;
    DWORD dwMask;
    int idCommand;
    int iImage;
    BYTE fsState;
    BYTE fsStyle;
    WORD cx;
    DWORD_PTR lParam;
    LPSTR pszText;
    int cchText;
} TBBUTTONINFOA, *LPTBBUTTONINFOA;

typedef struct {
    UINT cbSize;
    DWORD dwMask;
    int idCommand;
    int iImage;
    BYTE fsState;
    BYTE fsStyle;
    WORD cx;
    DWORD_PTR lParam;
    LPWSTR pszText;
    int cchText;
} TBBUTTONINFOW, *LPTBBUTTONINFOW;







#line 1567 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 1581 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















#line 1598 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 1602 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 1612 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 1615 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




















#line 1636 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 1641 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 1655 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct tagNMTBHOTITEM
{
    NMHDR   hdr;
    int     idOld;
    int     idNew;
    DWORD   dwFlags;           
} NMTBHOTITEM, * LPNMTBHOTITEM;




























#line 1696 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct tagNMTBSAVE
{
    NMHDR hdr;
    DWORD* pData;
    DWORD* pCurrent;
    UINT cbData;
    int iItem;
    int cButtons;
    TBBUTTON tbButton;
} NMTBSAVE, *LPNMTBSAVE;

typedef struct tagNMTBRESTORE
{
    NMHDR hdr;
    DWORD* pData;
    DWORD* pCurrent;
    UINT cbData;
    int iItem;
    int cButtons;
    int cbBytesPerRecord;
    TBBUTTON tbButton;
} NMTBRESTORE, *LPNMTBRESTORE;
#line 1724 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagNMTBGETINFOTIPA
{
    NMHDR hdr;
    LPSTR pszText;
    int cchTextMax;
    int iItem;
    LPARAM lParam;
} NMTBGETINFOTIPA, *LPNMTBGETINFOTIPA;

typedef struct tagNMTBGETINFOTIPW
{
    NMHDR hdr;
    LPWSTR pszText;
    int cchTextMax;
    int iItem;
    LPARAM lParam;
} NMTBGETINFOTIPW, *LPNMTBGETINFOTIPW;









#line 1752 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct {
    NMHDR  hdr;
    DWORD dwMask;     
    int idCommand;    
    DWORD_PTR lParam;  
    int iImage;       
    LPSTR pszText;    
    int cchText;      
} NMTBDISPINFOA, *LPNMTBDISPINFOA;

typedef struct {
    NMHDR hdr;
    DWORD dwMask;      
    int idCommand;    
    DWORD_PTR lParam;  
    int iImage;       
    LPWSTR pszText;   
    int cchText;      
} NMTBDISPINFOW, *LPNMTBDISPINFOW;










#line 1787 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 1794 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 1801 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 1815 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct tagNMTOOLBARA {
    NMHDR   hdr;
    int     iItem;
    TBBUTTON tbButton;
    int     cchText;
    LPSTR   pszText;

    RECT    rcButton;
#line 1829 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} NMTOOLBARA, *LPNMTOOLBARA;
#line 1831 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct tagNMTOOLBARW {
    NMHDR   hdr;
    int     iItem;
    TBBUTTON tbButton;
    int     cchText;
    LPWSTR   pszText;

    RECT    rcButton;
#line 1843 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} NMTOOLBARW, *LPNMTOOLBARW;
#line 1845 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 1854 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 1856 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 1858 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















#line 1874 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 1878 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 1898 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagREBARINFO
{
    UINT        cbSize;
    UINT        fMask;

    HIMAGELIST  himl;


#line 1911 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
}   REBARINFO, *LPREBARINFO;
















#line 1929 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 1930 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 1931 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 1946 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagREBARBANDINFOA
{
    UINT        cbSize;
    UINT        fMask;
    UINT        fStyle;
    COLORREF    clrFore;
    COLORREF    clrBack;
    LPSTR       lpText;
    UINT        cch;
    int         iImage;
    HWND        hwndChild;
    UINT        cxMinChild;
    UINT        cyMinChild;
    UINT        cx;
    HBITMAP     hbmBack;
    UINT        wID;

    UINT        cyChild;
    UINT        cyMaxChild;
    UINT        cyIntegral;
    UINT        cxIdeal;
    LPARAM      lParam;
    UINT        cxHeader;
#line 1971 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
}   REBARBANDINFOA, *LPREBARBANDINFOA;
typedef REBARBANDINFOA const *LPCREBARBANDINFOA;




typedef struct tagREBARBANDINFOW
{
    UINT        cbSize;
    UINT        fMask;
    UINT        fStyle;
    COLORREF    clrFore;
    COLORREF    clrBack;
    LPWSTR      lpText;
    UINT        cch;
    int         iImage;
    HWND        hwndChild;
    UINT        cxMinChild;
    UINT        cyMinChild;
    UINT        cx;
    HBITMAP     hbmBack;
    UINT        wID;

    UINT        cyChild;
    UINT        cyMaxChild;
    UINT        cyIntegral;
    UINT        cxIdeal;
    LPARAM      lParam;
    UINT        cxHeader;
#line 2001 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
}   REBARBANDINFOW, *LPREBARBANDINFOW;
typedef REBARBANDINFOW const *LPCREBARBANDINFOW;











#line 2015 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 2023 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





#line 2029 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















#line 2046 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 2049 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 2060 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




        
        











#line 2078 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















#line 2095 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 2100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















#line 2120 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 2125 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2129 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagNMREBARCHILDSIZE
{
    NMHDR hdr;
    UINT uBand;
    UINT wID;
    RECT rcChild;
    RECT rcBand;
} NMREBARCHILDSIZE, *LPNMREBARCHILDSIZE;

typedef struct tagNMREBAR
{
    NMHDR   hdr;
    DWORD   dwMask;           
    UINT    uBand;
    UINT    fStyle;
    UINT    wID;
    LPARAM  lParam;
} NMREBAR, *LPNMREBAR;







typedef struct tagNMRBAUTOSIZE
{
    NMHDR hdr;
    BOOL fChanged;
    RECT rcTarget;
    RECT rcActual;
} NMRBAUTOSIZE, *LPNMRBAUTOSIZE;


typedef struct tagNMREBARCHEVRON
{
    NMHDR hdr;
    UINT uBand;
    UINT wID;
    LPARAM lParam;
    RECT rc;
    LPARAM lParamNM;
} NMREBARCHEVRON, *LPNMREBARCHEVRON;
#line 2174 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















#line 2190 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 2198 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct _RB_HITTESTINFO
{
    POINT pt;
    UINT flags;
    int iBand;
} RBHITTESTINFO, *LPRBHITTESTINFO;

#line 2207 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 2209 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 2211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 2226 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2230 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 2242 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












typedef struct tagTOOLINFOA {
    UINT cbSize;
    UINT uFlags;
    HWND hwnd;
    UINT_PTR uId;
    RECT rect;
    HINSTANCE hinst;
    LPSTR lpszText;

    LPARAM lParam;
#line 2265 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 2268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} TTTOOLINFOA,  *PTOOLINFOA, *LPTTTOOLINFOA;

typedef struct tagTOOLINFOW {
    UINT cbSize;
    UINT uFlags;
    HWND hwnd;
    UINT_PTR uId;
    RECT rect;
    HINSTANCE hinst;
    LPWSTR lpszText;

    LPARAM lParam;
#line 2281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 2284 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} TTTOOLINFOW,  *PTOOLINFOW, *LPTTTOOLINFOW;











#line 2297 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 2308 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




















#line 2329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 2331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"























































#line 2387 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 2390 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





#line 2396 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 2409 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




























#line 2438 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 2439 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2443 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 2452 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct _TT_HITTESTINFOA {
    HWND hwnd;
    POINT pt;
    TTTOOLINFOA ti;
} TTHITTESTINFOA, *LPTTHITTESTINFOA;

typedef struct _TT_HITTESTINFOW {
    HWND hwnd;
    POINT pt;
    TTTOOLINFOW ti;
} TTHITTESTINFOW, *LPTTHITTESTINFOW;







#line 2474 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 2486 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 2504 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







typedef struct tagNMTTDISPINFOA {
    NMHDR hdr;
    LPSTR lpszText;
    char szText[80];
    HINSTANCE hinst;
    UINT uFlags;

    LPARAM lParam;
#line 2520 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} NMTTDISPINFOA, *LPNMTTDISPINFOA;

typedef struct tagNMTTDISPINFOW {
    NMHDR hdr;
    LPWSTR lpszText;
    WCHAR szText[80];
    HINSTANCE hinst;
    UINT uFlags;

    LPARAM lParam;
#line 2531 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} NMTTDISPINFOW, *LPNMTTDISPINFOW;









#line 2542 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 2544 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 2556 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 2561 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



__declspec(dllimport) void __stdcall DrawStatusTextA(HDC hDC, LPRECT lprc, LPCSTR pszText, UINT uFlags);
__declspec(dllimport) void __stdcall DrawStatusTextW(HDC hDC, LPRECT lprc, LPCWSTR pszText, UINT uFlags);

__declspec(dllimport) HWND __stdcall CreateStatusWindowA(LONG style, LPCSTR lpszText, HWND hwndParent, UINT wID);
__declspec(dllimport) HWND __stdcall CreateStatusWindowW(LONG style, LPCWSTR lpszText, HWND hwndParent, UINT wID);







#line 2577 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 2587 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2591 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"























#line 2615 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 2616 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 2627 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 2637 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 2645 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 2652 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 2657 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 2659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





__declspec(dllimport) void __stdcall MenuHelp(UINT uMsg, WPARAM wParam, LPARAM lParam, HMENU hMainMenu, HINSTANCE hInst, HWND hwndStatus, UINT *lpwIDs);
__declspec(dllimport) BOOL __stdcall ShowHideMenuCtl(HWND hWnd, UINT_PTR uFlags, LPINT lpInfo);
__declspec(dllimport) void __stdcall GetEffectiveClientRect(HWND hWnd, LPRECT lprc, LPINT lpInfo);



#line 2671 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















#line 2687 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2691 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 2710 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 2713 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2717 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











































#line 2761 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2765 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 2784 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 2786 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct tagDRAGLISTINFO {
    UINT uNotification;
    HWND hWnd;
    POINT ptCursor;
} DRAGLISTINFO, *LPDRAGLISTINFO;













__declspec(dllimport) BOOL __stdcall MakeDragList(HWND hLB);
__declspec(dllimport) void __stdcall DrawInsert(HWND handParent, HWND hLB, int nItem);

__declspec(dllimport) int __stdcall LBItemFromPt(HWND hLB, POINT pt, BOOL bAutoScroll);

#line 2815 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















#line 2831 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2835 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct _UDACCEL {
    UINT nSec;
    UINT nInc;
} UDACCEL, *LPUDACCEL;
















#line 2858 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 2877 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2881 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

__declspec(dllimport) HWND __stdcall CreateUpDownControl(DWORD dwStyle, int x, int y, int cx, int cy,
                                HWND hParent, int nID, HINSTANCE hInst,
                                HWND hBuddy,
                                int nUpper, int nLower, int nPos);







#line 2894 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct _NM_UPDOWN
{
    NMHDR hdr;
    int iPos;
    int iDelta;
} NMUPDOWN, *LPNMUPDOWN;



#line 2905 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















#line 2921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 2925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 2932 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










typedef struct
{
   int iLow;
   int iHigh;
} PBRANGE, *PPBRANGE;




#line 2952 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 2954 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 2957 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 2971 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
























#line 2996 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 3000 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 3002 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 3020 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















#line 3037 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 3041 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 3060 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















#line 3083 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

































#line 3117 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 3121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















#line 3144 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 3149 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct tagLVITEMA
{
    UINT mask;
    int iItem;
    int iSubItem;
    UINT state;
    UINT stateMask;
    LPSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;

    int iIndent;
#line 3168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 3173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} LVITEMA, *LPLVITEMA;

typedef struct tagLVITEMW
{
    UINT mask;
    int iItem;
    int iSubItem;
    UINT state;
    UINT stateMask;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;

    int iIndent;
#line 3189 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 3194 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} LVITEMW, *LPLVITEMW;










#line 3206 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 3215 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 3220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 3225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 3233 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 3245 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 3257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"























































#line 3313 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct tagLVFINDINFOA
{
    UINT flags;
    LPCSTR psz;
    LPARAM lParam;
    POINT pt;
    UINT vkDirection;
} LVFINDINFOA, *LPFINDINFOA;

typedef struct tagLVFINDINFOW
{
    UINT flags;
    LPCWSTR psz;
    LPARAM lParam;
    POINT pt;
    UINT vkDirection;
} LVFINDINFOW, *LPFINDINFOW;





#line 3339 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 3347 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
































#line 3380 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















#line 3403 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct tagLVHITTESTINFO
{
    POINT pt;
    UINT flags;
    int iItem;

    int iSubItem;    
#line 3414 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} LVHITTESTINFO, *LPLVHITTESTINFO;






































#line 3454 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 3473 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






typedef struct tagLVCOLUMNA
{
    UINT mask;
    int fmt;
    int cx;
    LPSTR pszText;
    int cchTextMax;
    int iSubItem;

    int iImage;
    int iOrder;
#line 3491 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} LVCOLUMNA, *LPLVCOLUMNA;

typedef struct tagLVCOLUMNW
{
    UINT mask;
    int fmt;
    int cx;
    LPWSTR pszText;
    int cchTextMax;
    int iSubItem;

    int iImage;
    int iOrder;
#line 3505 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} LVCOLUMNW, *LPLVCOLUMNW;









#line 3516 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 3526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 3537 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 3545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 3557 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 3569 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


























#line 3596 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






























































#line 3659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 3668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 3677 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 3695 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 3708 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 3717 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef int (__stdcall *PFNLVCOMPARE)(LPARAM, LPARAM, LPARAM);
































#line 3752 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 3771 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




















#line 3792 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 3796 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 3803 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





































#line 3841 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















































typedef struct tagLVBKIMAGEA
{
    ULONG ulFlags;              
    HBITMAP hbm;
    LPSTR pszImage;
    UINT cchImageMax;
    int xOffsetPercent;
    int yOffsetPercent;
} LVBKIMAGEA, *LPLVBKIMAGEA;
typedef struct tagLVBKIMAGEW
{
    ULONG ulFlags;              
    HBITMAP hbm;
    LPWSTR pszImage;
    UINT cchImageMax;
    int xOffsetPercent;
    int yOffsetPercent;
} LVBKIMAGEW, *LPLVBKIMAGEW;











#line 3918 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

























































































































































































































































































#line 4200 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 4212 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 4221 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 4230 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagNMLISTVIEW
{
    NMHDR   hdr;
    int     iItem;
    int     iSubItem;
    UINT    uNewState;
    UINT    uOldState;
    UINT    uChanged;
    POINT   ptAction;
    LPARAM  lParam;
} NMLISTVIEW, *LPNMLISTVIEW;








typedef struct tagNMITEMACTIVATE
{
    NMHDR   hdr;
    int     iItem;
    int     iSubItem;
    UINT    uNewState;
    UINT    uOldState;
    UINT    uChanged;
    POINT   ptAction;
    LPARAM  lParam;
    UINT    uKeyFlags;
} NMITEMACTIVATE, *LPNMITEMACTIVATE;





#line 4268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct tagNMLVCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    COLORREF clrText;
    COLORREF clrTextBk;

    int iSubItem;
#line 4281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 4295 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} NMLVCUSTOMDRAW, *LPNMLVCUSTOMDRAW;










typedef struct tagNMLVCACHEHINT
{
    NMHDR   hdr;
    int     iFrom;
    int     iTo;
} NMLVCACHEHINT, *LPNMLVCACHEHINT;





typedef struct tagNMLVFINDITEMA
{
    NMHDR   hdr;
    int     iStart;
    LVFINDINFOA lvfi;
} NMLVFINDITEMA, *LPNMLVFINDITEMA;

typedef struct tagNMLVFINDITEMW
{
    NMHDR   hdr;
    int     iStart;
    LVFINDINFOW lvfi;
} NMLVFINDITEMW, *LPNMLVFINDITEMW;





















#line 4352 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagNMLVODSTATECHANGE
{
    NMHDR hdr;
    int iFrom;
    int iTo;
    UINT uNewState;
    UINT uOldState;
} NMLVODSTATECHANGE, *LPNMLVODSTATECHANGE;




#line 4366 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



























#line 4394 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 4395 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




#line 4400 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















#line 4417 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 4430 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct tagLVDISPINFO {
    NMHDR hdr;
    LVITEMA item;
} NMLVDISPINFOA, *LPNMLVDISPINFOA;

typedef struct tagLVDISPINFOW {
    NMHDR hdr;
    LVITEMW item;
} NMLVDISPINFOW, *LPNMLVDISPINFOW;





#line 4448 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 4457 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 4460 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 4461 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagLVKEYDOWN
{
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} NMLVKEYDOWN, *LPNMLVKEYDOWN;


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 4471 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 4472 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 4476 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct tagNMLVGETINFOTIPA
{
    NMHDR hdr;
    DWORD dwFlags;
    LPSTR pszText;
    int cchTextMax;
    int iItem;
    int iSubItem;
    LPARAM lParam;
} NMLVGETINFOTIPA, *LPNMLVGETINFOTIPA;

typedef struct tagNMLVGETINFOTIPW
{
    NMHDR hdr;
    DWORD dwFlags;
    LPWSTR pszText;
    int cchTextMax;
    int iItem;
    int iSubItem;
    LPARAM lParam;
} NMLVGETINFOTIPW, *LPNMLVGETINFOTIPW;
















#line 4516 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 4519 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 4532 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 4534 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 4548 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 4552 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





















#line 4574 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 4577 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 4578 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct _TREEITEM *HTREEITEM;










#line 4594 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 4603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 4623 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagTVITEMA {
    UINT      mask;
    HTREEITEM hItem;
    UINT      state;
    UINT      stateMask;
    LPSTR     pszText;
    int       cchTextMax;
    int       iImage;
    int       iSelectedImage;
    int       cChildren;
    LPARAM    lParam;
} TVITEMA, *LPTVITEMA;

typedef struct tagTVITEMW {
    UINT      mask;
    HTREEITEM hItem;
    UINT      state;
    UINT      stateMask;
    LPWSTR    pszText;
    int       cchTextMax;
    int       iImage;
    int       iSelectedImage;
    int       cChildren;
    LPARAM    lParam;
} TVITEMW, *LPTVITEMW;



typedef struct tagTVITEMEXA {
    UINT      mask;
    HTREEITEM hItem;
    UINT      state;
    UINT      stateMask;
    LPSTR     pszText;
    int       cchTextMax;
    int       iImage;
    int       iSelectedImage;
    int       cChildren;
    LPARAM    lParam;
    int       iIntegral;
} TVITEMEXA, *LPTVITEMEXA;

typedef struct tagTVITEMEXW {
    UINT      mask;
    HTREEITEM hItem;
    UINT      state;
    UINT      stateMask;
    LPWSTR    pszText;
    int       cchTextMax;
    int       iImage;
    int       iSelectedImage;
    int       cChildren;
    LPARAM    lParam;
    int       iIntegral;
} TVITEMEXW, *LPTVITEMEXW;




typedef TVITEMEXA TVITEMEX;
typedef LPTVITEMEXA LPTVITEMEX;
#line 4689 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 4691 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 4699 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 4719 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








typedef struct tagTVINSERTSTRUCTA {
    HTREEITEM hParent;
    HTREEITEM hInsertAfter;

    union
    {
        TVITEMEXA itemex;
        TVITEMA  item;
    } ;


#line 4739 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} TVINSERTSTRUCTA, *LPTVINSERTSTRUCTA;

typedef struct tagTVINSERTSTRUCTW {
    HTREEITEM hParent;
    HTREEITEM hInsertAfter;

    union
    {
        TVITEMEXW itemex;
        TVITEMW  item;
    } ;


#line 4753 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} TVINSERTSTRUCTW, *LPTVINSERTSTRUCTW;









#line 4764 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 4772 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
























#line 4797 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















































#line 4852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 4856 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 4870 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 4889 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 4902 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 4914 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



























#line 4942 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagTVHITTESTINFO {
    POINT       pt;
    UINT        flags;
    HTREEITEM   hItem;
} TVHITTESTINFO, *LPTVHITTESTINFO;

















































#line 4998 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 5007 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 5025 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









































#line 5067 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
































#line 5100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











#line 5112 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef int (__stdcall *PFNTVCOMPARE)(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);








#line 5123 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagTVSORTCB
{
        HTREEITEM       hParent;
        PFNTVCOMPARE    lpfnCompare;
        LPARAM          lParam;
} TVSORTCB, *LPTVSORTCB;














#line 5145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagNMTREEVIEWA {
    NMHDR       hdr;
    UINT        action;
    TVITEMA    itemOld;
    TVITEMA    itemNew;
    POINT       ptDrag;
} NMTREEVIEWA, *LPNMTREEVIEWA;


typedef struct tagNMTREEVIEWW {
    NMHDR       hdr;
    UINT        action;
    TVITEMW    itemOld;
    TVITEMW    itemNew;
    POINT       ptDrag;
} NMTREEVIEWW, *LPNMTREEVIEWW;








#line 5174 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


























#line 5201 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef struct tagTVDISPINFOA {
    NMHDR hdr;
    TVITEMA item;
} NMTVDISPINFOA, *LPNMTVDISPINFOA;

typedef struct tagTVDISPINFOW {
    NMHDR hdr;
    TVITEMW item;
} NMTVDISPINFOW, *LPNMTVDISPINFOW;








#line 5222 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


























#line 5249 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







#line 5257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 5260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 5261 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagTVKEYDOWN {
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} NMTVKEYDOWN, *LPNMTVKEYDOWN;


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 5270 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 5271 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


























#line 5298 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagNMTVCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    COLORREF     clrText;
    COLORREF     clrTextBk;

    int iLevel;
#line 5310 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
} NMTVCUSTOMDRAW, *LPNMTVCUSTOMDRAW;
#line 5312 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






typedef struct tagNMTVGETINFOTIPA
{
    NMHDR hdr;
    LPSTR pszText;
    int cchTextMax;
    HTREEITEM hItem;
    LPARAM lParam;
} NMTVGETINFOTIPA, *LPNMTVGETINFOTIPA;

typedef struct tagNMTVGETINFOTIPW
{
    NMHDR hdr;
    LPWSTR pszText;
    int cchTextMax;
    HTREEITEM hItem;
    LPARAM lParam;
} NMTVGETINFOTIPW, *LPNMTVGETINFOTIPW;










#line 5346 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 5356 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 5358 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 5373 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











typedef struct tagCOMBOBOXEXITEMA
{
    UINT mask;
    INT_PTR iItem;
    LPSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    int iOverlay;
    int iIndent;
    LPARAM lParam;
} COMBOBOXEXITEMA, *PCOMBOBOXEXITEMA;
typedef COMBOBOXEXITEMA const *PCCOMBOEXITEMA;


typedef struct tagCOMBOBOXEXITEMW
{
    UINT mask;
    INT_PTR iItem;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    int iOverlay;
    int iIndent;
    LPARAM lParam;
} COMBOBOXEXITEMW, *PCOMBOBOXEXITEMW;
typedef COMBOBOXEXITEMW const *PCCOMBOEXITEMW;









#line 5422 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 5442 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 5456 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 5460 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








typedef struct {
    NMHDR hdr;
    COMBOBOXEXITEMA ceItem;
} NMCOMBOBOXEXA, *PNMCOMBOBOXEXA;

typedef struct {
    NMHDR hdr;
    COMBOBOXEXITEMW ceItem;
} NMCOMBOBOXEXW, *PNMCOMBOBOXEXW;









#line 5487 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 5497 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 5501 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 5510 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 5520 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 5522 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 5529 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"











typedef struct {
    NMHDR hdr;
    int   iItemid;
    WCHAR szText[260];
}NMCBEDRAGBEGINW, *LPNMCBEDRAGBEGINW, *PNMCBEDRAGBEGINW;


typedef struct {
    NMHDR hdr;
    int   iItemid;
    char szText[260];
}NMCBEDRAGBEGINA, *LPNMCBEDRAGBEGINA, *PNMCBEDRAGBEGINA;









#line 5562 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 5563 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





typedef struct {
        NMHDR hdr;
        BOOL fChanged;
        int iNewSelection;
        WCHAR szText[260];
        int iWhy;
} NMCBEENDEDITW, *LPNMCBEENDEDITW, *PNMCBEENDEDITW;

typedef struct {
        NMHDR hdr;
        BOOL fChanged;
        int iNewSelection;
        char szText[260];
        int iWhy;
} NMCBEENDEDITA, *LPNMCBEENDEDITA,*PNMCBEENDEDITA;









#line 5593 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 5595 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 5597 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















#line 5614 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 5618 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 5627 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 5630 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





#line 5636 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 5655 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


























#line 5682 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 5685 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 5695 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct tagTCITEMHEADERA
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPSTR pszText;
    int cchTextMax;
    int iImage;
} TCITEMHEADERA, *LPTCITEMHEADERA;

typedef struct tagTCITEMHEADERW
{
    UINT mask;
    UINT lpReserved1;
    UINT lpReserved2;
    LPWSTR pszText;
    int cchTextMax;
    int iImage;
} TCITEMHEADERW, *LPTCITEMHEADERW;







#line 5724 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 5735 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct tagTCITEMA
{
    UINT mask;

    DWORD dwState;
    DWORD dwStateMask;



#line 5747 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
    LPSTR pszText;
    int cchTextMax;
    int iImage;

    LPARAM lParam;
} TCITEMA, *LPTCITEMA;

typedef struct tagTCITEMW
{
    UINT mask;

    DWORD dwState;
    DWORD dwStateMask;



#line 5764 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
    LPWSTR pszText;
    int cchTextMax;
    int iImage;

    LPARAM lParam;
} TCITEMW, *LPTCITEMW;







#line 5778 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 5788 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 5801 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












#line 5814 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










































#line 5857 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagTCHITTESTINFO
{
    POINT pt;
    UINT flags;
} TCHITTESTINFO, *LPTCHITTESTINFO;































































#line 5927 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"























#line 5951 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 5960 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 5963 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 5964 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

typedef struct tagTCKEYDOWN
{
    NMHDR hdr;
    WORD wVKey;
    UINT flags;
} NMTCKEYDOWN;


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 5974 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 5975 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"





#line 5981 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 5984 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 5985 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 6003 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








#line 6012 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










#line 6023 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



















#line 6043 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 6045 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 6060 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



typedef DWORD MONTHDAYSTATE, *LPMONTHDAYSTATE;






























































































typedef struct {
        UINT cbSize;
        POINT pt;

        UINT uHit;   
        SYSTEMTIME st;
} MCHITTESTINFO, *PMCHITTESTINFO;
















































































#line 6246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagNMSELCHANGE
{
    NMHDR           nmhdr;  

    SYSTEMTIME      stSelStart;
    SYSTEMTIME      stSelEnd;
} NMSELCHANGE, *LPNMSELCHANGE;










typedef struct tagNMDAYSTATE
{
    NMHDR           nmhdr;  

    SYSTEMTIME      stStart;
    int             cDayState;

    LPMONTHDAYSTATE prgDayState; 
} NMDAYSTATE, *LPNMDAYSTATE;





typedef NMSELCHANGE NMSELECT, *LPNMSELECT;















#line 6298 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






                                


#line 6308 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 6309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 6324 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










































#line 6367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
























#line 6392 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"









#line 6402 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







typedef struct tagNMDATETIMECHANGE
{
    NMHDR       nmhdr;
    DWORD       dwFlags;    
    SYSTEMTIME  st;         
} NMDATETIMECHANGE, *LPNMDATETIMECHANGE;



typedef struct tagNMDATETIMESTRINGA
{
    NMHDR      nmhdr;
    LPCSTR     pszUserString;  
    SYSTEMTIME st;             
    DWORD      dwFlags;        
} NMDATETIMESTRINGA, *LPNMDATETIMESTRINGA;

typedef struct tagNMDATETIMESTRINGW
{
    NMHDR      nmhdr;
    LPCWSTR    pszUserString;  
    SYSTEMTIME st;             
    DWORD      dwFlags;        
} NMDATETIMESTRINGW, *LPNMDATETIMESTRINGW;









#line 6443 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagNMDATETIMEWMKEYDOWNA
{
    NMHDR      nmhdr;
    int        nVirtKey;  
    LPCSTR     pszFormat; 
    SYSTEMTIME st;        
} NMDATETIMEWMKEYDOWNA, *LPNMDATETIMEWMKEYDOWNA;

typedef struct tagNMDATETIMEWMKEYDOWNW
{
    NMHDR      nmhdr;
    int        nVirtKey;  
    LPCWSTR    pszFormat; 
    SYSTEMTIME st;        
} NMDATETIMEWMKEYDOWNW, *LPNMDATETIMEWMKEYDOWNW;









#line 6472 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagNMDATETIMEFORMATA
{
    NMHDR nmhdr;
    LPCSTR  pszFormat;   
    SYSTEMTIME st;       
    LPCSTR pszDisplay;   
    CHAR szDisplay[64];  
} NMDATETIMEFORMATA, *LPNMDATETIMEFORMATA;

typedef struct tagNMDATETIMEFORMATW
{
    NMHDR nmhdr;
    LPCWSTR pszFormat;   
    SYSTEMTIME st;       
    LPCWSTR pszDisplay;  
    WCHAR szDisplay[64]; 
} NMDATETIMEFORMATW, *LPNMDATETIMEFORMATW;









#line 6503 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




typedef struct tagNMDATETIMEFORMATQUERYA
{
    NMHDR nmhdr;
    LPCSTR pszFormat;  
    SIZE szMax;        
} NMDATETIMEFORMATQUERYA, *LPNMDATETIMEFORMATQUERYA;

typedef struct tagNMDATETIMEFORMATQUERYW
{
    NMHDR nmhdr;
    LPCWSTR pszFormat; 
    SIZE szMax;        
} NMDATETIMEFORMATQUERYW, *LPNMDATETIMEFORMATQUERYW;









#line 6530 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 6545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 6546 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

























#line 6572 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct tagNMIPADDRESS
{
        NMHDR hdr;
        int iField;
        int iValue;
} NMIPADDRESS, *LPNMIPADDRESS;


















#line 6599 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 6618 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"










































































































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 6725 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 6726 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


typedef struct {
    NMHDR hdr;
    WORD fwKeys;            
    RECT rcParent;          
    int  iDir;              
    int  iXpos;             
    int  iYpos;             
    int  iScroll;           
}NMPGSCROLL, *LPNMPGSCROLL;


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 6740 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 6741 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"








typedef struct {
    NMHDR   hdr;
    DWORD   dwFlag;
    int     iWidth;
    int     iHeight;
}NMPGCALCSIZE, *LPNMPGCALCSIZE;
















typedef struct tagNMPGHOTITEM
{
    NMHDR   hdr;
    int     idOld;
    int     idNew;
    DWORD   dwFlags;           
} NMPGHOTITEM, * LPNMPGHOTITEM;

#line 6780 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"















#line 6796 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"













#line 6810 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















#line 6827 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 6831 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












































#line 6876 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 6879 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 6897 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 6901 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 6903 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 6921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 6925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






















#line 6948 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 6950 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 6968 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 6972 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 6974 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


















#line 6993 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 6997 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 6999 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














#line 7014 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 7032 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



#line 7036 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 7038 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"



























































#line 7098 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 7099 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"







void __stdcall InitMUILanguage(LANGID uiLang);


LANGID __stdcall GetMUILanguage(void);
#line 7111 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 7113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
















































__declspec(dllimport)
BOOL
__stdcall
_TrackMouseEvent(
    LPTRACKMOUSEEVENT lpEventTrack);

#line 7168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
























__declspec(dllimport) BOOL __stdcall FlatSB_EnableScrollBar(HWND, int, UINT);
__declspec(dllimport) BOOL __stdcall FlatSB_ShowScrollBar(HWND, int code, BOOL);

__declspec(dllimport) BOOL __stdcall FlatSB_GetScrollRange(HWND, int code, LPINT, LPINT);
__declspec(dllimport) BOOL __stdcall FlatSB_GetScrollInfo(HWND, int code, LPSCROLLINFO);

__declspec(dllimport) int __stdcall FlatSB_GetScrollPos(HWND, int code);


__declspec(dllimport) BOOL __stdcall FlatSB_GetScrollProp(HWND, int propIndex, LPINT);




#line 7207 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


__declspec(dllimport) int __stdcall FlatSB_SetScrollPos(HWND, int code, int pos, BOOL fRedraw);

__declspec(dllimport) int __stdcall FlatSB_SetScrollInfo(HWND, int code, LPSCROLLINFO, BOOL fRedraw);


__declspec(dllimport) int __stdcall FlatSB_SetScrollRange(HWND, int code, int min, int max, BOOL fRedraw);
__declspec(dllimport) BOOL __stdcall FlatSB_SetScrollProp(HWND, UINT index, INT_PTR newValue, BOOL);


__declspec(dllimport) BOOL __stdcall InitializeFlatSB(HWND);
__declspec(dllimport) HRESULT __stdcall UninitializeFlatSB(HWND);

#line 7222 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 7224 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 7226 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 7228 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

















#line 7246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"






#line 7253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9858 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"
#line 9859 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"




}
#line 9865 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 9867 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"


#line 9870 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"

#line 132 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"

	
	
	
	
		
		
	#line 140 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"

	
		
		
	#line 145 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"
#line 146 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"



#line 150 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"


	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"
















#pragma once
#line 19 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"





#pragma warning(disable:4514)       
 
#line 27 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"


extern "C" {
#line 31 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"






#line 38 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"























































































































































































































































































































































































}   
#line 415 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"




extern "C" {
#line 421 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"















#line 437 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"


























































































































#line 560 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"

























#line 586 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"
































































































































































































































































































typedef char            _TCHAR;
typedef signed char     _TSCHAR;
typedef unsigned char   _TUCHAR;
typedef char            _TXCHAR;
typedef int             _TINT;

#line 881 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"





































































#line 951 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"
__inline size_t __cdecl _tclen(const char *_cpc) { return (_cpc,1); }
__inline void __cdecl _tccpy(char *_pc1, const char *_cpc2) { *_pc1 = *_cpc2; }
__inline int __cdecl _tccmp(const char *_cpc1, const char *_cpc2) { return (int) (((unsigned char)*_cpc1)-((unsigned char)*_cpc2)); }
#line 955 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"








































#line 996 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"
__inline char * __cdecl _strdec(const char * _cpc1, const char * _cpc2) { return (char *)((_cpc1)>=(_cpc2) ? 0 : (_cpc2-1)); }
__inline char * __cdecl _strinc(const char * _pc) { return (char *)(_pc+1); }
__inline unsigned int __cdecl _strnextc(const char * _cpc) { return (unsigned int)*_cpc; }
__inline char * __cdecl _strninc(const char * _pc, size_t _sz) { return (char *)(_pc+_sz); }
__inline size_t __cdecl _strncnt( const char * _cpc, size_t _sz) { size_t len; len = strlen(_cpc); return (len>_sz) ? _sz : len; }
__inline char * __cdecl _strspnp( const char * _cpc1, const char * _cpc2) { return (*(_cpc1 += strspn(_cpc1,_cpc2))!='\0') ? (char*)_cpc1 : 0; }
#line 1003 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"


#line 1006 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"

#line 1008 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"










}   
#line 1020 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"

#line 1022 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\tchar.h"
#line 153 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"
#line 154 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"


















inline HTASK GetWindowTask(HWND hWnd)
	{ return (HTASK)::GetWindowThreadProcessId(hWnd, 0); }
#line 175 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"




inline HWND GetNextWindow(HWND hWnd, UINT nDirection)
	{ return ::GetWindow(hWnd, nDirection); }
#line 182 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"




inline BOOL __stdcall DrawState(HDC hdc, HBRUSH hbr, DRAWSTATEPROC lpOutputFunc,
	LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT fuFlags)




	{ return ::DrawStateA(hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy,
		fuFlags); }
#line 195 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"
#line 196 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"




inline void __stdcall DrawStatusText(HDC hDC, LPRECT lprc, LPCTSTR szText,
	UINT uFlags)



	{ ::DrawStatusTextA(hDC, lprc, szText, uFlags); }
#line 207 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"
#line 208 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxv_w32.h"



inline BOOL __stdcall FreeResource(HGLOBAL) { return 1; }


inline int __stdcall UnlockResource(HGLOBAL) { return 0; }


#line 145 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"







	
#line 154 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"








	
#line 164 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"























#line 188 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"
#line 189 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"




#line 194 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"

#line 196 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"







	
#line 205 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"








	
#line 215 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"

















	
#line 234 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
#line 239 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
#line 244 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
#line 249 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"


	
	
#line 254 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"





	
#line 261 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"

	
#line 264 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
#line 269 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"

	
#line 272 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
#line 277 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"

	
#line 280 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"








#line 289 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"
#line 290 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"
#line 291 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
#line 296 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"









	
	
#line 308 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
	
#line 314 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
	
#line 320 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
	
#line 326 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
	
	
	
#line 334 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"



	
#line 339 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"


	
#line 343 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"


	
#line 347 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxver_.h"







#line 28 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"







	
		


			#pragma comment(lib, "nafxcw.lib")
		#line 41 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
	





#line 48 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


















#line 67 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"















	

#line 85 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
		#pragma comment(lib, "libc.lib")
	#line 87 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 88 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 89 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

#pragma comment(lib, "kernel32.lib")
#pragma comment(lib, "user32.lib")
#pragma comment(lib, "gdi32.lib")
#pragma comment(lib, "comdlg32.lib")
#pragma comment(lib, "winspool.lib")
#pragma comment(lib, "advapi32.lib")
#pragma comment(lib, "shell32.lib")
#pragma comment(lib, "comctl32.lib")


#pragma comment(linker, "/include:__afxForceEXCLUDE")











#line 113 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"





struct CRuntimeClass;          

class CObject;                        

	class CException;                 
		class CArchiveException;      
		class CFileException;         
		class CSimpleException;
			class CMemoryException;       
			class CNotSupportedException; 

	class CFile;                      
		class CStdioFile;             
		class CMemFile;               


class CString;                        
class CTimeSpan;                      
class CTime;                          
struct CFileStatus;                   
struct CMemoryState;                  

class CArchive;                       
class CDumpContext;                   








	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"






#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"







#pragma pack(push,8)
#line 34 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"


extern "C" {
#line 38 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"


















#line 57 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"






























#line 88 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"



















#line 108 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"

#line 110 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"






























#line 141 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"





struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;

#line 159 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"












#line 172 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"












#line 185 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"



































 extern FILE _iob[];
#line 222 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"









#line 232 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"


typedef __int64 fpos_t;







#line 243 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"
#line 244 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"


#line 247 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"




























 int __cdecl _filbuf(FILE *);
 int __cdecl _flsbuf(int, FILE *);




 FILE * __cdecl _fsopen(const char *, const char *, int);
#line 283 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"

 void __cdecl clearerr(FILE *);
 int __cdecl fclose(FILE *);
 int __cdecl _fcloseall(void);




 FILE * __cdecl _fdopen(int, const char *);
#line 293 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"

 int __cdecl feof(FILE *);
 int __cdecl ferror(FILE *);
 int __cdecl fflush(FILE *);
 int __cdecl fgetc(FILE *);
 int __cdecl _fgetchar(void);
 int __cdecl fgetpos(FILE *, fpos_t *);
 char * __cdecl fgets(char *, int, FILE *);




 int __cdecl _fileno(FILE *);
#line 307 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"

 int __cdecl _flushall(void);
 FILE * __cdecl fopen(const char *, const char *);
 int __cdecl fprintf(FILE *, const char *, ...);
 int __cdecl fputc(int, FILE *);
 int __cdecl _fputchar(int);
 int __cdecl fputs(const char *, FILE *);
 size_t __cdecl fread(void *, size_t, size_t, FILE *);
 FILE * __cdecl freopen(const char *, const char *, FILE *);
 int __cdecl fscanf(FILE *, const char *, ...);
 int __cdecl fsetpos(FILE *, const fpos_t *);
 int __cdecl fseek(FILE *, long, int);
 long __cdecl ftell(FILE *);
 size_t __cdecl fwrite(const void *, size_t, size_t, FILE *);
 int __cdecl getc(FILE *);
 int __cdecl getchar(void);
 int __cdecl _getmaxstdio(void);
 char * __cdecl gets(char *);
 int __cdecl _getw(FILE *);
 void __cdecl perror(const char *);
 int __cdecl _pclose(FILE *);
 FILE * __cdecl _popen(const char *, const char *);
 int __cdecl printf(const char *, ...);
 int __cdecl putc(int, FILE *);
 int __cdecl putchar(int);
 int __cdecl puts(const char *);
 int __cdecl _putw(int, FILE *);
 int __cdecl remove(const char *);
 int __cdecl rename(const char *, const char *);
 void __cdecl rewind(FILE *);
 int __cdecl _rmtmp(void);
 int __cdecl scanf(const char *, ...);
 void __cdecl setbuf(FILE *, char *);
 int __cdecl _setmaxstdio(int);
 int __cdecl setvbuf(FILE *, char *, int, size_t);
 int __cdecl _snprintf(char *, size_t, const char *, ...);
 int __cdecl sprintf(char *, const char *, ...);
 int __cdecl sscanf(const char *, const char *, ...);
 char * __cdecl _tempnam(const char *, const char *);
 FILE * __cdecl tmpfile(void);
 char * __cdecl tmpnam(char *);
 int __cdecl ungetc(int, FILE *);
 int __cdecl _unlink(const char *);
 int __cdecl vfprintf(FILE *, const char *, va_list);
 int __cdecl vprintf(const char *, va_list);
 int __cdecl _vsnprintf(char *, size_t, const char *, va_list);
 int __cdecl vsprintf(char *, const char *, va_list);













 FILE * __cdecl _wfsopen(const wchar_t *, const wchar_t *, int);
#line 369 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"

 wint_t __cdecl fgetwc(FILE *);
 wint_t __cdecl _fgetwchar(void);
 wint_t __cdecl fputwc(wint_t, FILE *);
 wint_t __cdecl _fputwchar(wint_t);
 wint_t __cdecl getwc(FILE *);
 wint_t __cdecl getwchar(void);
 wint_t __cdecl putwc(wint_t, FILE *);
 wint_t __cdecl putwchar(wint_t);
 wint_t __cdecl ungetwc(wint_t, FILE *);

 wchar_t * __cdecl fgetws(wchar_t *, int, FILE *);
 int __cdecl fputws(const wchar_t *, FILE *);
 wchar_t * __cdecl _getws(wchar_t *);
 int __cdecl _putws(const wchar_t *);

 int __cdecl fwprintf(FILE *, const wchar_t *, ...);
 int __cdecl wprintf(const wchar_t *, ...);
 int __cdecl _snwprintf(wchar_t *, size_t, const wchar_t *, ...);
 int __cdecl swprintf(wchar_t *, const wchar_t *, ...);
 int __cdecl vfwprintf(FILE *, const wchar_t *, va_list);
 int __cdecl vwprintf(const wchar_t *, va_list);
 int __cdecl _vsnwprintf(wchar_t *, size_t, const wchar_t *, va_list);
 int __cdecl vswprintf(wchar_t *, const wchar_t *, va_list);
 int __cdecl fwscanf(FILE *, const wchar_t *, ...);
 int __cdecl swscanf(const wchar_t *, const wchar_t *, ...);
 int __cdecl wscanf(const wchar_t *, ...);






 FILE * __cdecl _wfdopen(int, const wchar_t *);
 FILE * __cdecl _wfopen(const wchar_t *, const wchar_t *);
 FILE * __cdecl _wfreopen(const wchar_t *, const wchar_t *, FILE *);
 void __cdecl _wperror(const wchar_t *);
 FILE * __cdecl _wpopen(const wchar_t *, const wchar_t *);
 int __cdecl _wremove(const wchar_t *);
 wchar_t * __cdecl _wtempnam(const wchar_t *, const wchar_t *);
 wchar_t * __cdecl _wtmpnam(wchar_t *);



#line 414 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"
#line 415 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"


#line 418 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"
































 int __cdecl fcloseall(void);
 FILE * __cdecl fdopen(int, const char *);
 int __cdecl fgetchar(void);
 int __cdecl fileno(FILE *);
 int __cdecl flushall(void);
 int __cdecl fputchar(int);
 int __cdecl getw(FILE *);
 int __cdecl putw(int, FILE *);
 int __cdecl rmtmp(void);
 char * __cdecl tempnam(const char *, const char *);
 int __cdecl unlink(const char *);

#line 463 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"


}
#line 467 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"


#pragma pack(pop)
#line 471 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"

#line 473 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdio.h"
#line 151 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 152 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
















#pragma once
#line 19 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"






#line 26 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"







#pragma pack(push,8)
#line 35 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


extern "C" {
#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


















#line 58 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"










































typedef int (__cdecl * _onexit_t)(void);



#line 105 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

#line 107 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;


#line 125 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"



































#line 161 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

















#line 179 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
 extern int errno;               
 extern unsigned long _doserrno; 
#line 182 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"







 extern char * _sys_errlist[];   
 extern int _sys_nerr;           





























#line 221 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

 extern int __argc;          
 extern char ** __argv;      

 extern wchar_t ** __wargv;  
#line 227 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"




 extern char ** _environ;    

 extern wchar_t ** _wenviron;    
#line 235 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
#line 236 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

 extern char * _pgmptr;      

 extern wchar_t * _wpgmptr;  
#line 241 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

#line 243 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


 extern int _fmode;          
 extern int _fileinfo;       




 extern unsigned int _osver;
 extern unsigned int _winver;
 extern unsigned int _winmajor;
 extern unsigned int _winminor;





 __declspec(noreturn) void   __cdecl abort(void);
 __declspec(noreturn) void   __cdecl exit(int);



#line 266 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"



#line 270 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
        int    __cdecl abs(int);
#line 272 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
 double __cdecl atof(const char *);
 int    __cdecl atoi(const char *);
 long   __cdecl atol(const char *);



 void * __cdecl bsearch(const void *, const void *, size_t, size_t,
        int (__cdecl *)(const void *, const void *));
 void * __cdecl calloc(size_t, size_t);
 div_t  __cdecl div(int, int);
 void   __cdecl free(void *);
 char * __cdecl getenv(const char *);
 char * __cdecl _itoa(int, char *, int);

 char * __cdecl _i64toa(__int64, char *, int);
 char * __cdecl _ui64toa(unsigned __int64, char *, int);
 __int64 __cdecl _atoi64(const char *);
#line 291 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


#line 294 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
        long __cdecl labs(long);
#line 296 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
 ldiv_t __cdecl ldiv(long, long);
 char * __cdecl _ltoa(long, char *, int);
 void * __cdecl malloc(size_t);
 int    __cdecl mblen(const char *, size_t);
 size_t __cdecl _mbstrlen(const char *s);
 int    __cdecl mbtowc(wchar_t *, const char *, size_t);
 size_t __cdecl mbstowcs(wchar_t *, const char *, size_t);
 void   __cdecl qsort(void *, size_t, size_t, int (__cdecl *)
        (const void *, const void *));
 int    __cdecl rand(void);
 void * __cdecl realloc(void *, size_t);
 int    __cdecl _set_error_mode(int);
 void   __cdecl srand(unsigned int);
 double __cdecl strtod(const char *, char **);
 long   __cdecl strtol(const char *, char **, int);



 unsigned long __cdecl strtoul(const char *, char **, int);

 int    __cdecl system(const char *);
#line 318 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
 char * __cdecl _ultoa(unsigned long, char *, int);
 int    __cdecl wctomb(char *, wchar_t);
 size_t __cdecl wcstombs(char *, const wchar_t *, size_t);







 wchar_t * __cdecl _itow (int, wchar_t *, int);
 wchar_t * __cdecl _ltow (long, wchar_t *, int);
 wchar_t * __cdecl _ultow (unsigned long, wchar_t *, int);
 double __cdecl wcstod(const wchar_t *, wchar_t **);
 long   __cdecl wcstol(const wchar_t *, wchar_t **, int);
 unsigned long __cdecl wcstoul(const wchar_t *, wchar_t **, int);
 wchar_t * __cdecl _wgetenv(const wchar_t *);
 int    __cdecl _wsystem(const wchar_t *);
 int __cdecl _wtoi(const wchar_t *);
 long __cdecl _wtol(const wchar_t *);

 wchar_t * __cdecl _i64tow(__int64, wchar_t *, int);
 wchar_t * __cdecl _ui64tow(unsigned __int64, wchar_t *, int);
 __int64   __cdecl _wtoi64(const wchar_t *);
#line 343 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


#line 346 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
#line 347 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"




 char * __cdecl _ecvt(double, int, int *, int *);

 __declspec(noreturn) void   __cdecl _exit(int);


#line 357 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
 char * __cdecl _fcvt(double, int, int *, int *);
 char * __cdecl _fullpath(char *, const char *, size_t);
 char * __cdecl _gcvt(double, int, char *);
        unsigned long __cdecl _lrotl(unsigned long, int);
        unsigned long __cdecl _lrotr(unsigned long, int);

 void   __cdecl _makepath(char *, const char *, const char *, const char *,
        const char *);
#line 366 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
        _onexit_t __cdecl _onexit(_onexit_t);
 void   __cdecl perror(const char *);
 int    __cdecl _putenv(const char *);
        unsigned int __cdecl _rotl(unsigned int, int);
        unsigned int __cdecl _rotr(unsigned int, int);
 void   __cdecl _searchenv(const char *, const char *, char *);

 void   __cdecl _splitpath(const char *, char *, char *, char *, char *);
#line 375 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
 void   __cdecl _swab(char *, char *, int);






 wchar_t * __cdecl _wfullpath(wchar_t *, const wchar_t *, size_t);
 void   __cdecl _wmakepath(wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *,
        const wchar_t *);
 void   __cdecl _wperror(const wchar_t *);
 int    __cdecl _wputenv(const wchar_t *);
 void   __cdecl _wsearchenv(const wchar_t *, const wchar_t *, wchar_t *);
 void   __cdecl _wsplitpath(const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *);


#line 392 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
#line 393 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"




 void __cdecl _seterrormode(int);
 void __cdecl _beep(unsigned, unsigned);
 void __cdecl _sleep(unsigned long);
#line 401 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


#line 404 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"







 int __cdecl tolower(int);
#line 413 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

 int __cdecl toupper(int);
#line 416 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

#line 418 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

















 char * __cdecl ecvt(double, int, int *, int *);
 char * __cdecl fcvt(double, int, int *, int *);
 char * __cdecl gcvt(double, int, char *);
 char * __cdecl itoa(int, char *, int);
 char * __cdecl ltoa(long, char *, int);
        _onexit_t __cdecl onexit(_onexit_t);
 int    __cdecl putenv(const char *);
 void   __cdecl swab(char *, char *, int);
 char * __cdecl ultoa(unsigned long, char *, int);

#line 446 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

#line 448 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


}

#line 453 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"


#pragma pack(pop)
#line 457 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"

#line 459 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stdlib.h"
#line 154 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 155 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"
















#pragma once
#line 19 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"






#line 26 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"







#pragma pack(push,8)
#line 35 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"


extern "C" {
#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"


















#line 58 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"
















#line 75 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"




typedef long time_t;        

#line 82 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"


typedef long clock_t;

#line 87 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"



















struct tm {
        int tm_sec;     
        int tm_min;     
        int tm_hour;    
        int tm_mday;    
        int tm_mon;     
        int tm_year;    
        int tm_wday;    
        int tm_yday;    
        int tm_isdst;   
        };

#line 119 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"












 extern int _daylight;


 extern long _dstbias;


 extern long _timezone;


 extern char * _tzname[2];




 char * __cdecl asctime(const struct tm *);
 char * __cdecl ctime(const time_t *);
 clock_t __cdecl clock(void);
 double __cdecl difftime(time_t, time_t);
 struct tm * __cdecl gmtime(const time_t *);
 struct tm * __cdecl localtime(const time_t *);
 time_t __cdecl mktime(struct tm *);
 size_t __cdecl strftime(char *, size_t, const char *,
        const struct tm *);
 char * __cdecl _strdate(char *);
 char * __cdecl _strtime(char *);
 time_t __cdecl time(time_t *);




 void __cdecl _tzset(void);
#line 163 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"



unsigned __cdecl _getsystime(struct tm *);
unsigned __cdecl _setsystime(struct tm *, unsigned);












 
 wchar_t * __cdecl _wasctime(const struct tm *);
 wchar_t * __cdecl _wctime(const time_t *);
 size_t __cdecl wcsftime(wchar_t *, size_t, const wchar_t *,
        const struct tm *);
 wchar_t * __cdecl _wstrdate(wchar_t *);
 wchar_t * __cdecl _wstrtime(wchar_t *);


#line 190 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"
#line 191 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"








 extern int daylight;
 extern long timezone;
 extern char * tzname[2];

 void __cdecl tzset(void);

#line 206 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"



}
#line 211 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"


#pragma pack(pop)
#line 215 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"

#line 217 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\time.h"
#line 157 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 158 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"






#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"













#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"
















#line 56 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"





#line 62 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"





#line 68 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"








#line 77 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"








#line 86 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"
































#line 119 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\limits.h"
#line 160 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 161 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"






#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"



extern "C" {
#line 30 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"

















#line 48 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"































#line 80 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"
 extern int errno;
#line 82 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"





typedef int ptrdiff_t;

#line 90 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"






















}
#line 114 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"

#line 116 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\stddef.h"
#line 163 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 164 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"






	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"













#pragma once
#line 16 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"






#line 23 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"



extern "C" {
#line 28 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"


 





















 





typedef void *_HFILE; 

















typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);

 





 









typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);

 
























 













typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);

typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        unsigned long lCounts[5];
        unsigned long lSizes[5];
        unsigned long lHighWaterCount;
        unsigned long lTotalCount;
} _CrtMemState;


 








 

























































































































































































































































































































































#line 503 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"


}





 







inline void* __cdecl operator new(unsigned int s, int, const char *, int)
        { return ::operator new(s); }


inline void __cdecl operator delete(void * _P, int, const char *, int)
        { ::operator delete(_P); }
#line 526 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"






























#line 557 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"

#line 559 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"

#line 561 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"

#line 563 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\crtdbg.h"
#line 171 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 172 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 173 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"










#pragma pack(push, 4)
#line 185 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"





struct __POSITION { };
typedef __POSITION* POSITION;

struct _AFX_DOUBLE  { BYTE doubleBits[sizeof(double)]; };
struct _AFX_FLOAT   { BYTE floatBits[sizeof(float)]; };






















































inline void __cdecl AfxTrace(LPCTSTR, ...) { }






#line 257 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"













#pragma warning(disable: 4127)  
#pragma warning(disable: 4134)  
#pragma warning(disable: 4201)  
#pragma warning(disable: 4511)  
#pragma warning(disable: 4512)  
#pragma warning(disable: 4514)  
#pragma warning(disable: 4710)  
#pragma warning(disable: 4705)  
#pragma warning(disable: 4191)  


#pragma warning(disable: 4701)  
#pragma warning(disable: 4702)  
#pragma warning(disable: 4791)  
#pragma warning(disable: 4189)  
#pragma warning(disable: 4390)  
#line 287 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"








#line 296 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"





#line 302 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"










BOOL __stdcall AfxInitialize(BOOL bDLL = 0, DWORD dwVersion = 0x0600);







struct CRuntimeClass
{

	LPCSTR m_lpszClassName;
	int m_nObjectSize;
	UINT m_wSchema; 
	CObject* (__stdcall* m_pfnCreateObject)(); 



	CRuntimeClass* m_pBaseClass;
#line 332 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


	CObject* CreateObject();
	BOOL IsDerivedFrom(const CRuntimeClass* pBaseClass) const;


	void Store(CArchive& ar) const;
	static CRuntimeClass* __stdcall Load(CArchive& ar, UINT* pwSchemaNum);

	
	CRuntimeClass* m_pNextClass;       
};








	typedef LPWSTR BSTR;
#line 354 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 355 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

struct CStringData
{
	long nRefs;             
	int nDataLength;        
	int nAllocLength;       
	

	TCHAR* data()           
		{ return (TCHAR*)(this+1); }
};

class CString
{
public:


	
	CString();
	
	CString(const CString& stringSrc);
	
	CString(TCHAR ch, int nRepeat = 1);
	
	CString(LPCSTR lpsz);
	
	CString(LPCWSTR lpsz);
	
	CString(LPCSTR lpch, int nLength);
	
	CString(LPCWSTR lpch, int nLength);
	
	CString(const unsigned char* psz);



	
	int GetLength() const;
	
	BOOL IsEmpty() const;
	
	void Empty();

	
	TCHAR GetAt(int nIndex) const;
	
	TCHAR operator[](int nIndex) const;
	
	void SetAt(int nIndex, TCHAR ch);
	
	operator LPCTSTR() const;

	

	
	const CString& operator=(const CString& stringSrc);
	
	const CString& operator=(TCHAR ch);



	
	const CString& operator=(LPCSTR lpsz);
	
	const CString& operator=(LPCWSTR lpsz);
	
	const CString& operator=(const unsigned char* psz);

	

	
	const CString& operator+=(const CString& string);

	
	const CString& operator+=(TCHAR ch);




	
	const CString& operator+=(LPCTSTR lpsz);

	friend CString __stdcall operator+(const CString& string1,
			const CString& string2);
	friend CString __stdcall operator+(const CString& string, TCHAR ch);
	friend CString __stdcall operator+(TCHAR ch, const CString& string);




	friend CString __stdcall operator+(const CString& string, LPCTSTR lpsz);
	friend CString __stdcall operator+(LPCTSTR lpsz, const CString& string);

	

	
	int Compare(LPCTSTR lpsz) const;
	
	int CompareNoCase(LPCTSTR lpsz) const;
	
	int Collate(LPCTSTR lpsz) const;
	
	int CollateNoCase(LPCTSTR lpsz) const;

	

	
	CString Mid(int nFirst, int nCount) const;
	
	CString Mid(int nFirst) const;
	
	CString Left(int nCount) const;
	
	CString Right(int nCount) const;

	
	CString SpanIncluding(LPCTSTR lpszCharSet) const;
	
	CString SpanExcluding(LPCTSTR lpszCharSet) const;

	

	
	void MakeUpper();
	
	void MakeLower();
	
	void MakeReverse();

	

	
	void TrimRight();
	
	void TrimLeft();

	

	
	void TrimRight(TCHAR chTarget);
	
	
	void TrimRight(LPCTSTR lpszTargets);
	
	void TrimLeft(TCHAR chTarget);
	
	
	void TrimLeft(LPCTSTR lpszTargets);

	

	
	int Replace(TCHAR chOld, TCHAR chNew);
	
	
	int Replace(LPCTSTR lpszOld, LPCTSTR lpszNew);
	
	int Remove(TCHAR chRemove);
	
	
	int Insert(int nIndex, TCHAR ch);
	
	
	int Insert(int nIndex, LPCTSTR pstr);
	
	int Delete(int nIndex, int nCount = 1);

	

	
	int Find(TCHAR ch) const;
	
	int ReverseFind(TCHAR ch) const;
	
	int Find(TCHAR ch, int nStart) const;
	
	int FindOneOf(LPCTSTR lpszCharSet) const;
	
	int Find(LPCTSTR lpszSub) const;
	
	int Find(LPCTSTR lpszSub, int nStart) const;

	

	
	void __cdecl Format(LPCTSTR lpszFormat, ...);
	
	void __cdecl Format(UINT nFormatID, ...);
	
	void FormatV(LPCTSTR lpszFormat, va_list argList);

	

	
	void __cdecl FormatMessageA(LPCTSTR lpszFormat, ...);
	
	void __cdecl FormatMessageA(UINT nFormatID, ...);

	




	friend CArchive& __stdcall operator<<(CArchive& ar, const CString& string);
	friend CArchive& __stdcall operator>>(CArchive& ar, CString& string);

	
	BOOL LoadStringA(UINT nID);


	

	
	void CharToOemA();
	
	void OemToCharA();
#line 572 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


	

	
	BSTR AllocSysString() const;
	
	BSTR SetSysString(BSTR* pbstr) const;
#line 581 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

	

	
	LPTSTR GetBuffer(int nMinBufLength);
	
	void ReleaseBuffer(int nNewLength = -1);
	
	LPTSTR GetBufferSetLength(int nNewLength);
	
	void FreeExtra();

	

	
	LPTSTR LockBuffer();
	
	void UnlockBuffer();


public:
	~CString();
	int GetAllocLength() const;

protected:
	LPTSTR m_pchData;   

	
	CStringData* GetData() const;
	void Init();
	void AllocCopy(CString& dest, int nCopyLen, int nCopyIndex, int nExtraLen) const;
	void AllocBuffer(int nLen);
	void AssignCopy(int nSrcLen, LPCTSTR lpszSrcData);
	void ConcatCopy(int nSrc1Len, LPCTSTR lpszSrc1Data, int nSrc2Len, LPCTSTR lpszSrc2Data);
	void ConcatInPlace(int nSrcLen, LPCTSTR lpszSrcData);
	void CopyBeforeWrite();
	void AllocBeforeWrite(int nLen);
	void Release();
	static void __stdcall Release(CStringData* pData);
	static int __stdcall SafeStrlen(LPCTSTR lpsz);
	static void __fastcall FreeData(CStringData* pData);
};


bool __stdcall operator==(const CString& s1, const CString& s2);
bool __stdcall operator==(const CString& s1, LPCTSTR s2);
bool __stdcall operator==(LPCTSTR s1, const CString& s2);
bool __stdcall operator!=(const CString& s1, const CString& s2);
bool __stdcall operator!=(const CString& s1, LPCTSTR s2);
bool __stdcall operator!=(LPCTSTR s1, const CString& s2);
bool __stdcall operator<(const CString& s1, const CString& s2);
bool __stdcall operator<(const CString& s1, LPCTSTR s2);
bool __stdcall operator<(LPCTSTR s1, const CString& s2);
bool __stdcall operator>(const CString& s1, const CString& s2);
bool __stdcall operator>(const CString& s1, LPCTSTR s2);
bool __stdcall operator>(LPCTSTR s1, const CString& s2);
bool __stdcall operator<=(const CString& s1, const CString& s2);
bool __stdcall operator<=(const CString& s1, LPCTSTR s2);
bool __stdcall operator<=(LPCTSTR s1, const CString& s2);
bool __stdcall operator>=(const CString& s1, const CString& s2);
bool __stdcall operator>=(const CString& s1, LPCTSTR s2);
bool __stdcall operator>=(LPCTSTR s1, const CString& s2);


int __cdecl _wcstombsz(char* mbstr, const wchar_t* wcstr, size_t count);
int __cdecl _mbstowcsz(wchar_t* wcstr, const char* mbstr, size_t count);


extern  TCHAR afxChNil;




extern LPCTSTR _afxPchNil;

#line 657 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"







class __declspec(novtable) CObject
#line 666 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
{
public:


	virtual CRuntimeClass* GetRuntimeClass() const;
	virtual ~CObject();  

	
	void* __stdcall operator new(size_t nSize);
	void* __stdcall operator new(size_t, void* p);
	void __stdcall operator delete(void* p);

	void __stdcall operator delete(void* p, void* pPlace);
#line 680 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"







#line 688 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

	
	
	
protected:
	CObject();
private:
	CObject(const CObject& objectSrc);              
	void operator=(const CObject& objectSrc);       


public:
	BOOL IsSerializable() const;
	BOOL IsKindOf(const CRuntimeClass* pClass) const;


	virtual void Serialize(CArchive& ar);





#line 711 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


public:
	static const  CRuntimeClass classCObject;



};







const CObject* __cdecl AfxDynamicDownCast(CRuntimeClass* pClass, const CObject* pObject);
CObject* __cdecl AfxDynamicDownCast(CRuntimeClass* pClass, CObject* pObject);










#line 739 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"






























#line 770 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"















void __stdcall AfxClassInit(CRuntimeClass* pNewClass);
struct AFX_CLASSINIT
	{ AFX_CLASSINIT(CRuntimeClass* pNewClass) { AfxClassInit(pNewClass); } };
struct AFX_CLASSINIT_COMPAT
	{ AFX_CLASSINIT_COMPAT(CRuntimeClass* pNewClass); };



































#line 826 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"





































class __declspec(novtable) CException : public CObject
#line 865 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
{
	
	public: static const  CRuntimeClass classCException; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CException();   
	CException(BOOL bAutoDelete);   


	void Delete();  

	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
	virtual int ReportError(UINT nType = 0x00000000L, UINT nMessageID = 0);


public:
	virtual ~CException();
	BOOL m_bAutoDelete;








};




class __declspec(novtable) CSimpleException : public CException
#line 900 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
{
	
	

public:

	CSimpleException();
	CSimpleException(BOOL bAutoDelete);


	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);


public:
	virtual ~CSimpleException();
	BOOL m_bAutoDelete;

	void InitString();      

protected:
	BOOL m_bInitialized;
	BOOL m_bLoaded;
	TCHAR m_szMessage[128];
	UINT m_nResourceID;




};






	
	void __stdcall AfxThrowLastCleanup();
#line 939 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


void __stdcall AfxTryCleanup();




#line 947 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


struct AFX_EXCEPTION_LINK
{













	AFX_EXCEPTION_LINK* m_pLinkPrev;    
	CException* m_pException;   

	AFX_EXCEPTION_LINK();       
	~AFX_EXCEPTION_LINK()       
		{ AfxTryCleanup(); };
};


struct AFX_EXCEPTION_CONTEXT
{
	AFX_EXCEPTION_LINK* m_pLinkTop;

	
};


typedef int (__cdecl * _PNH)( size_t );

#line 984 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

_PNH __stdcall AfxGetNewHandler();
_PNH __stdcall AfxSetNewHandler(_PNH pfnNewHandler);
int __cdecl AfxNewHandler(size_t nSize);

void __stdcall AfxAbort();




















































































#line 1075 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"




class CMemoryException : public CSimpleException
{
	public: static const  CRuntimeClass classCMemoryException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CMemoryException();


public:
	CMemoryException(BOOL bAutoDelete);
	CMemoryException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CMemoryException();
};

class CNotSupportedException : public CSimpleException
{
	public: static const  CRuntimeClass classCNotSupportedException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CNotSupportedException();


public:
	CNotSupportedException(BOOL bAutoDelete);
	CNotSupportedException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CNotSupportedException();
};

class CArchiveException : public CException
{
	public: static const  CRuntimeClass classCArchiveException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	enum {
		none,
		generic,
		readOnly,
		endOfFile,
		writeOnly,
		badIndex,
		badClass,
		badSchema
	};


	CArchiveException(int cause = CArchiveException::none,
		LPCTSTR lpszArchiveName = 0);


	int m_cause;
	CString m_strFileName;


public:
	virtual ~CArchiveException();



	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
};

class CFileException : public CException
{
	public: static const  CRuntimeClass classCFileException; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	enum {
		none,
		generic,
		fileNotFound,
		badPath,
		tooManyOpenFiles,
		accessDenied,
		invalidFile,
		removeCurrentDir,
		directoryFull,
		badSeek,
		hardIO,
		sharingViolation,
		lockViolation,
		diskFull,
		endOfFile
	};


	CFileException(int cause = CFileException::none, LONG lOsError = -1,
		LPCTSTR lpszArchiveName = 0);


	int     m_cause;
	LONG    m_lOsError;
	CString m_strFileName;


	
	static int __stdcall OsErrorToException(LONG lOsError);
	static int __stdcall ErrnoToException(int nErrno);

	
	static void __stdcall ThrowOsError(LONG lOsError, LPCTSTR lpszFileName = 0);
	static void __stdcall ThrowErrno(int nErrno, LPCTSTR lpszFileName = 0);


public:
	virtual ~CFileException();



	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
};




void __stdcall AfxThrowMemoryException();
void __stdcall AfxThrowNotSupportedException();
void __stdcall AfxThrowArchiveException(int cause,
	LPCTSTR lpszArchiveName = 0);
void __stdcall AfxThrowFileException(int cause, LONG lOsError = -1,
	LPCTSTR lpszFileName = 0);




class CFile : public CObject
{
	public: static const  CRuntimeClass classCFile; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	enum OpenFlags {
		modeRead =          0x0000,
		modeWrite =         0x0001,
		modeReadWrite =     0x0002,
		shareCompat =       0x0000,
		shareExclusive =    0x0010,
		shareDenyWrite =    0x0020,
		shareDenyRead =     0x0030,
		shareDenyNone =     0x0040,
		modeNoInherit =     0x0080,
		modeCreate =        0x1000,
		modeNoTruncate =    0x2000,
		typeText =          0x4000, 
		typeBinary =   (int)0x8000 
		};

	enum Attribute {
		normal =    0x00,
		readOnly =  0x01,
		hidden =    0x02,
		system =    0x04,
		volume =    0x08,
		directory = 0x10,
		archive =   0x20
		};

	enum SeekPosition { begin = 0x0, current = 0x1, end = 0x2 };

	enum { hFileNull = -1 };


	CFile();
	CFile(int hFile);
	CFile(LPCTSTR lpszFileName, UINT nOpenFlags);


	UINT m_hFile;
	operator HFILE() const;

	virtual DWORD GetPosition() const;
	BOOL GetStatus(CFileStatus& rStatus) const;
	virtual CString GetFileName() const;
	virtual CString GetFileTitle() const;
	virtual CString GetFilePath() const;
	virtual void SetFilePath(LPCTSTR lpszNewName);


	virtual BOOL Open(LPCTSTR lpszFileName, UINT nOpenFlags,
		CFileException* pError = 0);

	static void __stdcall Rename(LPCTSTR lpszOldName,
				LPCTSTR lpszNewName);
	static void __stdcall Remove(LPCTSTR lpszFileName);
	static BOOL __stdcall GetStatus(LPCTSTR lpszFileName,
				CFileStatus& rStatus);
	static void __stdcall SetStatus(LPCTSTR lpszFileName,
				const CFileStatus& status);

	DWORD SeekToEnd();
	void SeekToBegin();

	
	DWORD ReadHuge(void* lpBuffer, DWORD dwCount);
	void WriteHuge(const void* lpBuffer, DWORD dwCount);


	virtual CFile* Duplicate() const;

	virtual LONG Seek(LONG lOff, UINT nFrom);
	virtual void SetLength(DWORD dwNewLen);
	virtual DWORD GetLength() const;

	virtual UINT Read(void* lpBuf, UINT nCount);
	virtual void Write(const void* lpBuf, UINT nCount);

	virtual void LockRange(DWORD dwPos, DWORD dwCount);
	virtual void UnlockRange(DWORD dwPos, DWORD dwCount);

	virtual void Abort();
	virtual void Flush();
	virtual void Close();


public:
	virtual ~CFile();




	enum BufferCommand { bufferRead, bufferWrite, bufferCommit, bufferCheck };
	virtual UINT GetBufferPtr(UINT nCommand, UINT nCount = 0,
		void** ppBufStart = 0, void** ppBufMax = 0);

protected:
	BOOL m_bCloseOnDelete;
	CString m_strFileName;
};




class CStdioFile : public CFile
{
	public: static const  CRuntimeClass classCStdioFile; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CStdioFile();
	CStdioFile(FILE* pOpenStream);
	CStdioFile(LPCTSTR lpszFileName, UINT nOpenFlags);


	FILE* m_pStream;    
						


	
	virtual void WriteString(LPCTSTR lpsz);
	virtual LPTSTR ReadString(LPTSTR lpsz, UINT nMax);
	virtual BOOL ReadString(CString& rString);


public:
	virtual ~CStdioFile();



	virtual DWORD GetPosition() const;
	virtual BOOL Open(LPCTSTR lpszFileName, UINT nOpenFlags,
		CFileException* pError = 0);
	virtual UINT Read(void* lpBuf, UINT nCount);
	virtual void Write(const void* lpBuf, UINT nCount);
	virtual LONG Seek(LONG lOff, UINT nFrom);
	virtual void Abort();
	virtual void Flush();
	virtual void Close();

	
	virtual CFile* Duplicate() const;
	virtual void LockRange(DWORD dwPos, DWORD dwCount);
	virtual void UnlockRange(DWORD dwPos, DWORD dwCount);
};




class CMemFile : public CFile
{
	public: static const  CRuntimeClass classCMemFile; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CMemFile(UINT nGrowBytes = 1024);
	CMemFile(BYTE* lpBuffer, UINT nBufferSize, UINT nGrowBytes = 0);


	void Attach(BYTE* lpBuffer, UINT nBufferSize, UINT nGrowBytes = 0);
	BYTE* Detach();


protected:
	virtual BYTE* Alloc(DWORD nBytes);
	virtual BYTE* Realloc(BYTE* lpMem, DWORD nBytes);
	virtual BYTE* Memcpy(BYTE* lpMemTarget, const BYTE* lpMemSource, UINT nBytes);
	virtual void Free(BYTE* lpMem);
	virtual void GrowFile(DWORD dwNewLen);


protected:
	UINT m_nGrowBytes;
	DWORD m_nPosition;
	DWORD m_nBufferSize;
	DWORD m_nFileSize;
	BYTE* m_lpBuffer;
	BOOL m_bAutoDelete;

public:
	virtual ~CMemFile();




	virtual DWORD GetPosition() const;
	BOOL GetStatus(CFileStatus& rStatus) const;
	virtual LONG Seek(LONG lOff, UINT nFrom);
	virtual void SetLength(DWORD dwNewLen);
	virtual UINT Read(void* lpBuf, UINT nCount);
	virtual void Write(const void* lpBuf, UINT nCount);
	virtual void Abort();
	virtual void Flush();
	virtual void Close();
	virtual UINT GetBufferPtr(UINT nCommand, UINT nCount = 0,
		void** ppBufStart = 0, void** ppBufMax = 0);

	
	virtual CFile* Duplicate() const;
	virtual void LockRange(DWORD dwPos, DWORD dwCount);
	virtual void UnlockRange(DWORD dwPos, DWORD dwCount);
};




class CFileFind : public CObject
{
public:
	CFileFind();
	virtual ~CFileFind();


public:
	DWORD GetLength() const;

	__int64 GetLength64() const;
#line 1423 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
	virtual CString GetFileName() const;
	virtual CString GetFilePath() const;
	virtual CString GetFileTitle() const;
	virtual CString GetFileURL() const;
	virtual CString GetRoot() const;

	virtual BOOL GetLastWriteTime(FILETIME* pTimeStamp) const;
	virtual BOOL GetLastAccessTime(FILETIME* pTimeStamp) const;
	virtual BOOL GetCreationTime(FILETIME* pTimeStamp) const;
	virtual BOOL GetLastWriteTime(CTime& refTime) const;
	virtual BOOL GetLastAccessTime(CTime& refTime) const;
	virtual BOOL GetCreationTime(CTime& refTime) const;

	virtual BOOL MatchesMask(DWORD dwMask) const;

	virtual BOOL IsDots() const;
	
	BOOL IsReadOnly() const;
	BOOL IsDirectory() const;
	BOOL IsCompressed() const;
	BOOL IsSystem() const;
	BOOL IsHidden() const;
	BOOL IsTemporary() const;
	BOOL IsNormal() const;
	BOOL IsArchived() const;


	void Close();
	virtual BOOL FindFile(LPCTSTR pstrName = 0, DWORD dwUnused = 0);
	virtual BOOL FindNextFileA();

protected:
	virtual void CloseContext();


protected:
	void* m_pFoundInfo;
	void* m_pNextInfo;
	HANDLE m_hContext;
	BOOL m_bGotLast;
	CString m_strRoot;
	TCHAR m_chDirSeparator;     






	public: static const  CRuntimeClass classCFileFind; virtual CRuntimeClass* GetRuntimeClass() const;
};




class CTimeSpan
{
public:


	CTimeSpan();
	CTimeSpan(time_t time);
	CTimeSpan(LONG lDays, int nHours, int nMins, int nSecs);

	CTimeSpan(const CTimeSpan& timeSpanSrc);
	const CTimeSpan& operator=(const CTimeSpan& timeSpanSrc);


	
	LONG GetDays() const;   
	LONG GetTotalHours() const;
	int GetHours() const;
	LONG GetTotalMinutes() const;
	int GetMinutes() const;
	LONG GetTotalSeconds() const;
	int GetSeconds() const;


	
	CTimeSpan operator-(CTimeSpan timeSpan) const;
	CTimeSpan operator+(CTimeSpan timeSpan) const;
	const CTimeSpan& operator+=(CTimeSpan timeSpan);
	const CTimeSpan& operator-=(CTimeSpan timeSpan);
	BOOL operator==(CTimeSpan timeSpan) const;
	BOOL operator!=(CTimeSpan timeSpan) const;
	BOOL operator<(CTimeSpan timeSpan) const;
	BOOL operator>(CTimeSpan timeSpan) const;
	BOOL operator<=(CTimeSpan timeSpan) const;
	BOOL operator>=(CTimeSpan timeSpan) const;





	CString Format(LPCTSTR pFormat) const;
	CString Format(UINT nID) const;

	



	friend CArchive& __stdcall operator<<(CArchive& ar, CTimeSpan timeSpan);
	friend CArchive& __stdcall operator>>(CArchive& ar, CTimeSpan& rtimeSpan);

private:
	time_t m_timeSpan;
	friend class CTime;
};

class CTime
{
public:


	static CTime __stdcall GetTickCount();

	CTime();
	CTime(time_t time);
	CTime(int nYear, int nMonth, int nDay, int nHour, int nMin, int nSec,
		int nDST = -1);
	CTime(WORD wDosDate, WORD wDosTime, int nDST = -1);
	CTime(const CTime& timeSrc);

	CTime(const SYSTEMTIME& sysTime, int nDST = -1);
	CTime(const FILETIME& fileTime, int nDST = -1);
	const CTime& operator=(const CTime& timeSrc);
	const CTime& operator=(time_t t);


	struct tm* GetGmtTm(struct tm* ptm = 0) const;
	struct tm* GetLocalTm(struct tm* ptm = 0) const;
	BOOL GetAsSystemTime(SYSTEMTIME& timeDest) const;

	time_t GetTime() const;
	int GetYear() const;
	int GetMonth() const;       
	int GetDay() const;         
	int GetHour() const;
	int GetMinute() const;
	int GetSecond() const;
	int GetDayOfWeek() const;   


	
	CTimeSpan operator-(CTime time) const;
	CTime operator-(CTimeSpan timeSpan) const;
	CTime operator+(CTimeSpan timeSpan) const;
	const CTime& operator+=(CTimeSpan timeSpan);
	const CTime& operator-=(CTimeSpan timeSpan);
	BOOL operator==(CTime time) const;
	BOOL operator!=(CTime time) const;
	BOOL operator<(CTime time) const;
	BOOL operator>(CTime time) const;
	BOOL operator<=(CTime time) const;
	BOOL operator>=(CTime time) const;

	
	CString Format(LPCTSTR pFormat) const;
	CString FormatGmt(LPCTSTR pFormat) const;
	CString Format(UINT nFormatID) const;
	CString FormatGmt(UINT nFormatID) const;







	



	friend CArchive& __stdcall operator<<(CArchive& ar, CTime time);
	friend CArchive& __stdcall operator>>(CArchive& ar, CTime& rtime);

private:
	time_t m_time;
};




struct CFileStatus
{
	CTime m_ctime;          
	CTime m_mtime;          
	CTime m_atime;          
	LONG m_size;            
	BYTE m_attribute;       
	BYTE _m_padding;        
	TCHAR m_szFullName[260]; 




};





BOOL __stdcall AfxIsValidAddress(const void* lp,
			UINT nBytes, BOOL bReadWrite = 1);
BOOL __stdcall AfxIsValidString(LPCWSTR lpsz, int nLength = -1);
BOOL __stdcall AfxIsValidString(LPCSTR lpsz, int nLength = -1);


































































































#line 1726 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"













#line 1740 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

#line 1742 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"





class CPtrArray;
class CMapPtrToPtr;
class CDocument;

class CArchive
{
public:

	enum Mode { store = 0, load = 1, bNoFlushOnDelete = 2, bNoByteSwap = 4 };

	CArchive(CFile* pFile, UINT nMode, int nBufSize = 4096, void* lpBuf = 0);
	~CArchive();


	BOOL IsLoading() const;
	BOOL IsStoring() const;
	BOOL IsByteSwapping() const;
	BOOL IsBufferEmpty() const;

	CFile* GetFile() const;
	UINT GetObjectSchema(); 
	void SetObjectSchema(UINT nSchema);

	
	
	CDocument* m_pDocument;


	UINT Read(void* lpBuf, UINT nMax);
	void Write(const void* lpBuf, UINT nMax);
	void Flush();
	void Close();
	void Abort();   

	
	void WriteString(LPCTSTR lpsz);
	LPTSTR ReadString(LPTSTR lpsz, UINT nMax);
	BOOL ReadString(CString& rString);

public:
	
	
	friend CArchive& __stdcall operator<<(CArchive& ar, const CObject* pOb);

	friend CArchive& __stdcall operator>>(CArchive& ar, CObject*& pOb);
	friend CArchive& __stdcall operator>>(CArchive& ar, const CObject*& pOb);

	
	CArchive& operator<<(BYTE by);
	CArchive& operator<<(WORD w);
	CArchive& operator<<(LONG l);
	CArchive& operator<<(DWORD dw);
	CArchive& operator<<(float f);
	CArchive& operator<<(double d);

	CArchive& operator<<(int i);
	CArchive& operator<<(short w);
	CArchive& operator<<(char ch);
	CArchive& operator<<(unsigned u);

	
	CArchive& operator>>(BYTE& by);
	CArchive& operator>>(WORD& w);
	CArchive& operator>>(DWORD& dw);
	CArchive& operator>>(LONG& l);
	CArchive& operator>>(float& f);
	CArchive& operator>>(double& d);

	CArchive& operator>>(int& i);
	CArchive& operator>>(short& w);
	CArchive& operator>>(char& ch);
	CArchive& operator>>(unsigned& u);

	
	CObject* ReadObject(const CRuntimeClass* pClass);
	void WriteObject(const CObject* pOb);
	
	void MapObject(const CObject* pOb);

	
	void WriteClass(const CRuntimeClass* pClassRef);
	CRuntimeClass* ReadClass(const CRuntimeClass* pClassRefRequested = 0,
		UINT* pSchema = 0, DWORD* pObTag = 0);
	void SerializeClass(const CRuntimeClass* pClassRef);

	
	void SetStoreParams(UINT nHashSize = 2053, UINT nBlockSize = 128);
	void SetLoadParams(UINT nGrowBy = 1024);


public:
	BOOL m_bForceFlat;  
	BOOL m_bDirectBuffer;   
	void FillBuffer(UINT nBytesNeeded);
	void CheckCount();  

	
	DWORD ReadCount();
	void WriteCount(DWORD dwCount);

	
	UINT m_nObjectSchema;
	CString m_strFileName;

protected:
	
	CArchive(const CArchive& arSrc);
	void operator=(const CArchive& arSrc);

	BOOL m_nMode;
	BOOL m_bUserBuf;
	int m_nBufSize;
	CFile* m_pFile;
	BYTE* m_lpBufCur;
	BYTE* m_lpBufMax;
	BYTE* m_lpBufStart;

	
	UINT m_nMapCount;
	union
	{
		CPtrArray* m_pLoadArray;
		CMapPtrToPtr* m_pStoreMap;
	};
	
	CMapPtrToPtr* m_pSchemaMap;

	
	UINT m_nGrowSize;
	UINT m_nHashSize;
};















#line 1894 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

void __stdcall AfxDumpStack(DWORD dwFlags = 0x0002);

class CDumpContext
{
public:
	CDumpContext(CFile* pFile = 0);


	int GetDepth() const;      
	void SetDepth(int nNewDepth);


	CDumpContext& operator<<(LPCTSTR lpsz);



	CDumpContext& operator<<(LPCWSTR lpsz); 
#line 1913 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
	CDumpContext& operator<<(const void* lp);
	CDumpContext& operator<<(const CObject* pOb);
	CDumpContext& operator<<(const CObject& ob);
	CDumpContext& operator<<(BYTE by);
	CDumpContext& operator<<(WORD w);
	CDumpContext& operator<<(UINT u);
	CDumpContext& operator<<(LONG l);
	CDumpContext& operator<<(DWORD dw);
	CDumpContext& operator<<(float f);
	CDumpContext& operator<<(double d);
	CDumpContext& operator<<(int n);
	void HexDump(LPCTSTR lpszLine, BYTE* pby, int nBytes, int nWidth);
	void Flush();


protected:
	
	CDumpContext(const CDumpContext& dcSrc);
	void operator=(const CDumpContext& dcSrc);
	void OutputString(LPCTSTR lpsz);

	int m_nDepth;

public:
	CFile* m_pFile;
};










#pragma pack(pop)
#line 1951 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"


















#pragma component(minrebuild, off)
#line 21 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"

#pragma component(mintypeinfo, on)
#line 24 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"


#pragma pack(push, 4)
#line 28 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"





	
	class CByteArray;           
	class CWordArray;           
	class CDWordArray;          
	class CUIntArray;           
	class CPtrArray;            
	class CObArray;             

	
	class CPtrList;             
	class CObList;              

	
	class CMapWordToOb;         
	class CMapWordToPtr;        
	class CMapPtrToWord;        
	class CMapPtrToPtr;         

	
	class CStringArray;         
	class CStringList;          
	class CMapStringToPtr;      
	class CMapStringToOb;       
	class CMapStringToString;   








class CByteArray : public CObject
{

	public: static  CRuntimeClass classCByteArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CByteArray* &pOb);
public:


	CByteArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	BYTE GetAt(int nIndex) const;
	void SetAt(int nIndex, BYTE newElement);

	BYTE& ElementAt(int nIndex);

	
	const BYTE* GetData() const;
	BYTE* GetData();

	
	void SetAtGrow(int nIndex, BYTE newElement);

	int Add(BYTE newElement);

	int Append(const CByteArray& src);
	void Copy(const CByteArray& src);

	
	BYTE operator[](int nIndex) const;
	BYTE& operator[](int nIndex);

	
	void InsertAt(int nIndex, BYTE newElement, int nCount = 1);

	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CByteArray* pNewArray);


protected:
	BYTE* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   


public:
	~CByteArray();

	void Serialize(CArchive&);





protected:
	
	typedef BYTE BASE_TYPE;
	typedef BYTE BASE_ARG_TYPE;
};




class CWordArray : public CObject
{

	public: static  CRuntimeClass classCWordArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CWordArray* &pOb);
public:


	CWordArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	WORD GetAt(int nIndex) const;
	void SetAt(int nIndex, WORD newElement);

	WORD& ElementAt(int nIndex);

	
	const WORD* GetData() const;
	WORD* GetData();

	
	void SetAtGrow(int nIndex, WORD newElement);

	int Add(WORD newElement);

	int Append(const CWordArray& src);
	void Copy(const CWordArray& src);

	
	WORD operator[](int nIndex) const;
	WORD& operator[](int nIndex);

	
	void InsertAt(int nIndex, WORD newElement, int nCount = 1);

	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CWordArray* pNewArray);


protected:
	WORD* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   


public:
	~CWordArray();

	void Serialize(CArchive&);





protected:
	
	typedef WORD BASE_TYPE;
	typedef WORD BASE_ARG_TYPE;
};




class CDWordArray : public CObject
{

	public: static  CRuntimeClass classCDWordArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CDWordArray* &pOb);
public:


	CDWordArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	DWORD GetAt(int nIndex) const;
	void SetAt(int nIndex, DWORD newElement);

	DWORD& ElementAt(int nIndex);

	
	const DWORD* GetData() const;
	DWORD* GetData();

	
	void SetAtGrow(int nIndex, DWORD newElement);

	int Add(DWORD newElement);

	int Append(const CDWordArray& src);
	void Copy(const CDWordArray& src);

	
	DWORD operator[](int nIndex) const;
	DWORD& operator[](int nIndex);

	
	void InsertAt(int nIndex, DWORD newElement, int nCount = 1);

	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CDWordArray* pNewArray);


protected:
	DWORD* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   


public:
	~CDWordArray();

	void Serialize(CArchive&);





protected:
	
	typedef DWORD BASE_TYPE;
	typedef DWORD BASE_ARG_TYPE;
};




class CUIntArray : public CObject
{

	public: static const  CRuntimeClass classCUIntArray; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CUIntArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	UINT GetAt(int nIndex) const;
	void SetAt(int nIndex, UINT newElement);

	UINT& ElementAt(int nIndex);

	
	const UINT* GetData() const;
	UINT* GetData();

	
	void SetAtGrow(int nIndex, UINT newElement);

	int Add(UINT newElement);

	int Append(const CUIntArray& src);
	void Copy(const CUIntArray& src);

	
	UINT operator[](int nIndex) const;
	UINT& operator[](int nIndex);

	
	void InsertAt(int nIndex, UINT newElement, int nCount = 1);

	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CUIntArray* pNewArray);


protected:
	UINT* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   


public:
	~CUIntArray();





protected:
	
	typedef UINT BASE_TYPE;
	typedef UINT BASE_ARG_TYPE;
};




class CPtrArray : public CObject
{

	public: static const  CRuntimeClass classCPtrArray; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CPtrArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	void* GetAt(int nIndex) const;
	void SetAt(int nIndex, void* newElement);

	void*& ElementAt(int nIndex);

	
	const void** GetData() const;
	void** GetData();

	
	void SetAtGrow(int nIndex, void* newElement);

	int Add(void* newElement);

	int Append(const CPtrArray& src);
	void Copy(const CPtrArray& src);

	
	void* operator[](int nIndex) const;
	void*& operator[](int nIndex);

	
	void InsertAt(int nIndex, void* newElement, int nCount = 1);

	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CPtrArray* pNewArray);


protected:
	void** m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   


public:
	~CPtrArray();





protected:
	
	typedef void* BASE_TYPE;
	typedef void* BASE_ARG_TYPE;
};




class CObArray : public CObject
{

	public: static  CRuntimeClass classCObArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CObArray* &pOb);
public:


	CObArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	CObject* GetAt(int nIndex) const;
	void SetAt(int nIndex, CObject* newElement);

	CObject*& ElementAt(int nIndex);

	
	const CObject** GetData() const;
	CObject** GetData();

	
	void SetAtGrow(int nIndex, CObject* newElement);

	int Add(CObject* newElement);

	int Append(const CObArray& src);
	void Copy(const CObArray& src);

	
	CObject* operator[](int nIndex) const;
	CObject*& operator[](int nIndex);

	
	void InsertAt(int nIndex, CObject* newElement, int nCount = 1);

	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CObArray* pNewArray);


protected:
	CObject** m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   


public:
	~CObArray();

	void Serialize(CArchive&);





protected:
	
	typedef CObject* BASE_TYPE;
	typedef CObject* BASE_ARG_TYPE;
};




class CStringArray : public CObject
{

	public: static  CRuntimeClass classCStringArray; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CStringArray* &pOb);
public:


	CStringArray();


	int GetSize() const;
	int GetUpperBound() const;
	void SetSize(int nNewSize, int nGrowBy = -1);


	
	void FreeExtra();
	void RemoveAll();

	
	CString GetAt(int nIndex) const;
	void SetAt(int nIndex, LPCTSTR newElement);

	void SetAt(int nIndex, const CString& newElement);

	CString& ElementAt(int nIndex);

	
	const CString* GetData() const;
	CString* GetData();

	
	void SetAtGrow(int nIndex, LPCTSTR newElement);

	void SetAtGrow(int nIndex, const CString& newElement);

	int Add(LPCTSTR newElement);

	int Add(const CString& newElement);

	int Append(const CStringArray& src);
	void Copy(const CStringArray& src);

	
	CString operator[](int nIndex) const;
	CString& operator[](int nIndex);

	
	void InsertAt(int nIndex, LPCTSTR newElement, int nCount = 1);

	void InsertAt(int nIndex, const CString& newElement, int nCount = 1);

	void RemoveAt(int nIndex, int nCount = 1);
	void InsertAt(int nStartIndex, CStringArray* pNewArray);


protected:
	CString* m_pData;   
	int m_nSize;     
	int m_nMaxSize;  
	int m_nGrowBy;   

	void InsertEmpty(int nIndex, int nCount);


public:
	~CStringArray();

	void Serialize(CArchive&);





protected:
	
	typedef CString BASE_TYPE;
	typedef LPCTSTR BASE_ARG_TYPE;
};




class CPtrList : public CObject
{

	public: static const  CRuntimeClass classCPtrList; virtual CRuntimeClass* GetRuntimeClass() const;

protected:
	struct CNode
	{
		CNode* pNext;
		CNode* pPrev;
		void* data;
	};
public:


	CPtrList(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	void*& GetHead();
	void* GetHead() const;
	void*& GetTail();
	void* GetTail() const;


	
	void* RemoveHead();
	void* RemoveTail();

	
	POSITION AddHead(void* newElement);
	POSITION AddTail(void* newElement);


	
	void AddHead(CPtrList* pNewList);
	void AddTail(CPtrList* pNewList);

	
	void RemoveAll();

	
	POSITION GetHeadPosition() const;
	POSITION GetTailPosition() const;
	void*& GetNext(POSITION& rPosition); 
	void* GetNext(POSITION& rPosition) const; 
	void*& GetPrev(POSITION& rPosition); 
	void* GetPrev(POSITION& rPosition) const; 

	
	void*& GetAt(POSITION position);
	void* GetAt(POSITION position) const;
	void SetAt(POSITION pos, void* newElement);

	void RemoveAt(POSITION position);

	
	POSITION InsertBefore(POSITION position, void* newElement);
	POSITION InsertAfter(POSITION position, void* newElement);


	
	POSITION Find(void* searchValue, POSITION startAfter = 0) const;
						
						
	POSITION FindIndex(int nIndex) const;
						


protected:
	CNode* m_pNodeHead;
	CNode* m_pNodeTail;
	int m_nCount;
	CNode* m_pNodeFree;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CNode* NewNode(CNode*, CNode*);
	void FreeNode(CNode*);

public:
	~CPtrList();




	
	typedef void* BASE_TYPE;
	typedef void* BASE_ARG_TYPE;
};




class CObList : public CObject
{

	public: static  CRuntimeClass classCObList; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CObList* &pOb);

protected:
	struct CNode
	{
		CNode* pNext;
		CNode* pPrev;
		CObject* data;
	};
public:


	CObList(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	CObject*& GetHead();
	CObject* GetHead() const;
	CObject*& GetTail();
	CObject* GetTail() const;


	
	CObject* RemoveHead();
	CObject* RemoveTail();

	
	POSITION AddHead(CObject* newElement);
	POSITION AddTail(CObject* newElement);


	
	void AddHead(CObList* pNewList);
	void AddTail(CObList* pNewList);

	
	void RemoveAll();

	
	POSITION GetHeadPosition() const;
	POSITION GetTailPosition() const;
	CObject*& GetNext(POSITION& rPosition); 
	CObject* GetNext(POSITION& rPosition) const; 
	CObject*& GetPrev(POSITION& rPosition); 
	CObject* GetPrev(POSITION& rPosition) const; 

	
	CObject*& GetAt(POSITION position);
	CObject* GetAt(POSITION position) const;
	void SetAt(POSITION pos, CObject* newElement);

	void RemoveAt(POSITION position);

	
	POSITION InsertBefore(POSITION position, CObject* newElement);
	POSITION InsertAfter(POSITION position, CObject* newElement);


	
	POSITION Find(CObject* searchValue, POSITION startAfter = 0) const;
						
						
	POSITION FindIndex(int nIndex) const;
						


protected:
	CNode* m_pNodeHead;
	CNode* m_pNodeTail;
	int m_nCount;
	CNode* m_pNodeFree;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CNode* NewNode(CNode*, CNode*);
	void FreeNode(CNode*);

public:
	~CObList();

	void Serialize(CArchive&);




	
	typedef CObject* BASE_TYPE;
	typedef CObject* BASE_ARG_TYPE;
};




class CStringList : public CObject
{

	public: static  CRuntimeClass classCStringList; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CStringList* &pOb);

protected:
	struct CNode
	{
		CNode* pNext;
		CNode* pPrev;
		CString data;
	};
public:


	CStringList(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	CString& GetHead();
	CString GetHead() const;
	CString& GetTail();
	CString GetTail() const;


	
	CString RemoveHead();
	CString RemoveTail();

	
	POSITION AddHead(LPCTSTR newElement);
	POSITION AddTail(LPCTSTR newElement);

	POSITION AddHead(const CString& newElement);
	POSITION AddTail(const CString& newElement);


	
	void AddHead(CStringList* pNewList);
	void AddTail(CStringList* pNewList);

	
	void RemoveAll();

	
	POSITION GetHeadPosition() const;
	POSITION GetTailPosition() const;
	CString& GetNext(POSITION& rPosition); 
	CString GetNext(POSITION& rPosition) const; 
	CString& GetPrev(POSITION& rPosition); 
	CString GetPrev(POSITION& rPosition) const; 

	
	CString& GetAt(POSITION position);
	CString GetAt(POSITION position) const;
	void SetAt(POSITION pos, LPCTSTR newElement);

	void SetAt(POSITION pos, const CString& newElement);

	void RemoveAt(POSITION position);

	
	POSITION InsertBefore(POSITION position, LPCTSTR newElement);
	POSITION InsertAfter(POSITION position, LPCTSTR newElement);

	POSITION InsertBefore(POSITION position, const CString& newElement);
	POSITION InsertAfter(POSITION position, const CString& newElement);


	
	POSITION Find(LPCTSTR searchValue, POSITION startAfter = 0) const;
						
						
	POSITION FindIndex(int nIndex) const;
						


protected:
	CNode* m_pNodeHead;
	CNode* m_pNodeTail;
	int m_nCount;
	CNode* m_pNodeFree;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CNode* NewNode(CNode*, CNode*);
	void FreeNode(CNode*);

public:
	~CStringList();

	void Serialize(CArchive&);




	
	typedef CString BASE_TYPE;
	typedef LPCTSTR BASE_ARG_TYPE;
};




class CMapWordToPtr : public CObject
{

	public: static const  CRuntimeClass classCMapWordToPtr; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		WORD key;
		void* value;
	};

public:


	CMapWordToPtr(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(WORD key, void*& rValue) const;


	
	void*& operator[](WORD key);

	
	void SetAt(WORD key, void* newValue);

	
	BOOL RemoveKey(WORD key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, WORD& rKey, void*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(WORD key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(WORD, UINT&) const;

public:
	~CMapWordToPtr();






protected:
	
	typedef WORD BASE_KEY;
	typedef WORD BASE_ARG_KEY;
	typedef void* BASE_VALUE;
	typedef void* BASE_ARG_VALUE;
};




class CMapPtrToWord : public CObject
{

	public: static const  CRuntimeClass classCMapPtrToWord; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		void* key;
		WORD value;
	};

public:


	CMapPtrToWord(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(void* key, WORD& rValue) const;


	
	WORD& operator[](void* key);

	
	void SetAt(void* key, WORD newValue);

	
	BOOL RemoveKey(void* key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, void*& rKey, WORD& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(void* key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(void*, UINT&) const;

public:
	~CMapPtrToWord();






protected:
	
	typedef void* BASE_KEY;
	typedef void* BASE_ARG_KEY;
	typedef WORD BASE_VALUE;
	typedef WORD BASE_ARG_VALUE;
};




class CMapPtrToPtr : public CObject
{

	public: static const  CRuntimeClass classCMapPtrToPtr; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		void* key;
		void* value;
	};

public:


	CMapPtrToPtr(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(void* key, void*& rValue) const;


	
	void*& operator[](void* key);

	
	void SetAt(void* key, void* newValue);

	
	BOOL RemoveKey(void* key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, void*& rKey, void*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(void* key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(void*, UINT&) const;

public:
	~CMapPtrToPtr();





	void* GetValueAt(void* key) const;


protected:
	
	typedef void* BASE_KEY;
	typedef void* BASE_ARG_KEY;
	typedef void* BASE_VALUE;
	typedef void* BASE_ARG_VALUE;
};




class CMapWordToOb : public CObject
{

	public: static  CRuntimeClass classCMapWordToOb; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CMapWordToOb* &pOb);
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;

		WORD key;
		CObject* value;
	};

public:


	CMapWordToOb(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(WORD key, CObject*& rValue) const;


	
	CObject*& operator[](WORD key);

	
	void SetAt(WORD key, CObject* newValue);

	
	BOOL RemoveKey(WORD key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, WORD& rKey, CObject*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(WORD key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(WORD, UINT&) const;

public:
	~CMapWordToOb();

	void Serialize(CArchive&);






protected:
	
	typedef WORD BASE_KEY;
	typedef WORD BASE_ARG_KEY;
	typedef CObject* BASE_VALUE;
	typedef CObject* BASE_ARG_VALUE;
};




class CMapStringToPtr : public CObject
{

	public: static const  CRuntimeClass classCMapStringToPtr; virtual CRuntimeClass* GetRuntimeClass() const;
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;
		UINT nHashValue;  
		CString key;
		void* value;
	};

public:


	CMapStringToPtr(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(LPCTSTR key, void*& rValue) const;
	BOOL LookupKey(LPCTSTR key, LPCTSTR& rKey) const;


	
	void*& operator[](LPCTSTR key);

	
	void SetAt(LPCTSTR key, void* newValue);

	
	BOOL RemoveKey(LPCTSTR key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, CString& rKey, void*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(LPCTSTR key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(LPCTSTR, UINT&) const;

public:
	~CMapStringToPtr();





protected:
	
	typedef CString BASE_KEY;
	typedef LPCTSTR BASE_ARG_KEY;
	typedef void* BASE_VALUE;
	typedef void* BASE_ARG_VALUE;
};




class CMapStringToOb : public CObject
{

	public: static  CRuntimeClass classCMapStringToOb; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CMapStringToOb* &pOb);
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;
		UINT nHashValue;  
		CString key;
		CObject* value;
	};

public:


	CMapStringToOb(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(LPCTSTR key, CObject*& rValue) const;
	BOOL LookupKey(LPCTSTR key, LPCTSTR& rKey) const;


	
	CObject*& operator[](LPCTSTR key);

	
	void SetAt(LPCTSTR key, CObject* newValue);

	
	BOOL RemoveKey(LPCTSTR key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, CString& rKey, CObject*& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(LPCTSTR key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(LPCTSTR, UINT&) const;

public:
	~CMapStringToOb();

	void Serialize(CArchive&);





protected:
	
	typedef CString BASE_KEY;
	typedef LPCTSTR BASE_ARG_KEY;
	typedef CObject* BASE_VALUE;
	typedef CObject* BASE_ARG_VALUE;
};




class CMapStringToString : public CObject
{

	public: static  CRuntimeClass classCMapStringToString; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();  friend CArchive& __stdcall operator>>(CArchive& ar, CMapStringToString* &pOb);
protected:
	
	struct CAssoc
	{
		CAssoc* pNext;
		UINT nHashValue;  
		CString key;
		CString value;
	};

public:


	CMapStringToString(int nBlockSize = 10);


	
	int GetCount() const;
	BOOL IsEmpty() const;

	
	BOOL Lookup(LPCTSTR key, CString& rValue) const;
	BOOL LookupKey(LPCTSTR key, LPCTSTR& rKey) const;


	
	CString& operator[](LPCTSTR key);

	
	void SetAt(LPCTSTR key, LPCTSTR newValue);

	
	BOOL RemoveKey(LPCTSTR key);
	void RemoveAll();

	
	POSITION GetStartPosition() const;
	void GetNextAssoc(POSITION& rNextPosition, CString& rKey, CString& rValue) const;

	
	UINT GetHashTableSize() const;
	void InitHashTable(UINT hashSize, BOOL bAllocNow = 1);


	
	UINT HashKey(LPCTSTR key) const;


protected:
	CAssoc** m_pHashTable;
	UINT m_nHashTableSize;
	int m_nCount;
	CAssoc* m_pFreeList;
	struct CPlex* m_pBlocks;
	int m_nBlockSize;

	CAssoc* NewAssoc();
	void FreeAssoc(CAssoc*);
	CAssoc* GetAssocAt(LPCTSTR, UINT&) const;

public:
	~CMapStringToString();

	void Serialize(CArchive&);





protected:
	
	typedef CString BASE_KEY;
	typedef LPCTSTR BASE_ARG_KEY;
	typedef CString BASE_VALUE;
	typedef LPCTSTR BASE_ARG_VALUE;
};



#pragma pack(pop)
#line 1471 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"


	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"














#pragma pack(push, 4)
#line 17 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"


	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxtls_.h"














#pragma pack(push, 4)
#line 17 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxtls_.h"






class CSimpleList;
class CThreadSlotData;                  
class CThreadLocalObject;               
class CProcessLocalObject;              
class CNoTrackObject;








class CSimpleList
{
public:
	CSimpleList(int nNextOffset = 0);
	void Construct(int nNextOffset);


	BOOL IsEmpty() const;
	void AddHead(void* p);
	void RemoveAll();
	void* GetHead() const;
	void* GetNext(void* p) const;
	BOOL Remove(void* p);


	void* m_pHead;
	size_t m_nNextOffset;

	void** GetNextPtr(void* p) const;   
};

inline CSimpleList::CSimpleList(int nNextOffset)
	{ m_pHead = 0; m_nNextOffset = nNextOffset; }
inline void CSimpleList::Construct(int nNextOffset)
	{ ((void)0); m_nNextOffset = nNextOffset; }
inline BOOL CSimpleList::IsEmpty() const
	{ return m_pHead == 0; }
inline void** CSimpleList::GetNextPtr(void* p) const
	{ ((void)0); return (void**)((BYTE*)p+m_nNextOffset); }
inline void CSimpleList::RemoveAll()
	{ m_pHead = 0; }
inline void* CSimpleList::GetHead() const
	{ return m_pHead; }
inline void* CSimpleList::GetNext(void* prevElement) const
	{ return *GetNextPtr(prevElement); }

template<class TYPE>
class CTypedSimpleList : public CSimpleList
{
public:
	CTypedSimpleList(int nNextOffset = 0)
		: CSimpleList(nNextOffset) { }
	void AddHead(TYPE p)
		{ CSimpleList::AddHead(p); }
	TYPE GetHead()
		{ return (TYPE)CSimpleList::GetHead(); }
	TYPE GetNext(TYPE p)
		{ return (TYPE)CSimpleList::GetNext(p); }
	BOOL Remove(TYPE p)
		{ return CSimpleList::Remove((TYPE)p); }
	operator TYPE()
		{ return (TYPE)CSimpleList::GetHead(); }
};




struct CThreadData; 
struct CSlotData;   

class CThreadSlotData
{
public:
	CThreadSlotData();


	int AllocSlot();
	void FreeSlot(int nSlot);
	void* GetValue(int nSlot);
	void SetValue(int nSlot, void* pValue);
	
	void DeleteValues(HINSTANCE hInst, BOOL bAll = 0);
	
	void AssignInstance(HINSTANCE hInst);


	DWORD m_tlsIndex;   

	int m_nAlloc;       
	int m_nRover;       
	int m_nMax;         
	CSlotData* m_pSlotData; 
	CTypedSimpleList<CThreadData*> m_list;  
	CRITICAL_SECTION m_sect;

	void* GetThreadValue(int nSlot); 
	void* __stdcall operator new(size_t, void* p)
		{ return p; }
	void DeleteValues(CThreadData* pData, HINSTANCE hInst);
	~CThreadSlotData();
};

class __declspec(novtable) CNoTrackObject
{
public:
	void* __stdcall operator new(size_t nSize);
	void __stdcall operator delete(void*);






#line 140 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxtls_.h"
	virtual ~CNoTrackObject() { }
};

class __declspec(novtable) CThreadLocalObject
{
public:

	CNoTrackObject* GetData(CNoTrackObject* (__stdcall* pfnCreateObject)());
	CNoTrackObject* GetDataNA();


	int m_nSlot;
	~CThreadLocalObject();
};

class __declspec(novtable) CProcessLocalObject
{
public:

	CNoTrackObject* GetData(CNoTrackObject* (__stdcall* pfnCreateObject)());


	CNoTrackObject* volatile m_pObject;
	~CProcessLocalObject();
};

template<class TYPE>
class CThreadLocal : public CThreadLocalObject
{

public:
	inline TYPE* GetData()
	{
		TYPE* pData = (TYPE*)CThreadLocalObject::GetData(&CreateObject);
		((void)0);
		return pData;
	}
	inline TYPE* GetDataNA()
	{
		TYPE* pData = (TYPE*)CThreadLocalObject::GetDataNA();
		return pData;
	}
	inline operator TYPE*()
		{ return GetData(); }
	inline TYPE* operator->()
		{ return GetData(); }


public:
	static CNoTrackObject* __stdcall CreateObject()
		{ return new TYPE; }
};






template<class TYPE>
class CProcessLocal : public CProcessLocalObject
{

public:
	inline TYPE* GetData()
	{
		TYPE* pData = (TYPE*)CProcessLocalObject::GetData(&CreateObject);
		((void)0);
		return pData;
	}
	inline TYPE* GetDataNA()
		{ return (TYPE*)m_pObject; }
	inline operator TYPE*()
		{ return GetData(); }
	inline TYPE* operator->()
		{ return GetData(); }


public:
	static CNoTrackObject* __stdcall CreateObject()
		{ return new TYPE; }
};








void __stdcall AfxInitLocalData(HINSTANCE hInstInit);
void __stdcall AfxTermLocalData(HINSTANCE hInstTerm, BOOL bAll = 0);
void __stdcall AfxTlsAddRef();
void __stdcall AfxTlsRelease();


#pragma pack(pop)
#line 237 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxtls_.h"




#line 242 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxtls_.h"


#line 20 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"
#line 21 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"


























class _AFX_WIN_STATE : public CNoTrackObject
{

public:
	_AFX_WIN_STATE();
	virtual ~_AFX_WIN_STATE();

	
	HBRUSH m_hDlgBkBrush; 
	COLORREF m_crDlgTextClr;
#line 58 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"

public:
	
	BOOL m_bUserAbort;
};

extern   CProcessLocal<_AFX_WIN_STATE> _afxWinState;






struct ITypeInfo;
typedef ITypeInfo* LPTYPEINFO;

struct ITypeLib;
typedef ITypeLib* LPTYPELIB;

typedef struct _GUID GUID;




class CTypeLibCache
{
public:
	CTypeLibCache() : m_cRef(0), m_lcid((LCID)-1), m_ptlib(0), m_ptinfo(0) {}
	void Lock();
	void Unlock();
	BOOL Lookup(LCID lcid, LPTYPELIB* pptlib);
	void Cache(LCID lcid, LPTYPELIB ptlib);
	BOOL LookupTypeInfo(LCID lcid, const GUID & guid, LPTYPEINFO* pptinfo);
	void CacheTypeInfo(LCID lcid, const GUID & guid, LPTYPEINFO ptinfo);
	const GUID* m_pTypeLibID;

protected:
	LCID m_lcid;
	LPTYPELIB m_ptlib;
	GUID m_guidInfo;
	LPTYPEINFO m_ptinfo;
	long m_cRef;
};

#line 103 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"





class CWinThread;
class CHandleMap;
class CFrameWnd;






template<class TYPE>
class CEmbeddedButActsLikePtr
{
public:
	inline TYPE* operator->() { return &m_data; }
	inline operator TYPE*() { return &m_data; }
	TYPE m_data;
};


class AFX_MODULE_THREAD_STATE : public CNoTrackObject
{
public:
	AFX_MODULE_THREAD_STATE();
	virtual ~AFX_MODULE_THREAD_STATE();

	
	CWinThread* m_pCurrentWinThread;

	
	CTypedSimpleList<CFrameWnd*> m_frameList;

	
	DWORD m_nTempMapLock;           
	CHandleMap* m_pmapHWND;
	CHandleMap* m_pmapHMENU;
	CHandleMap* m_pmapHDC;
	CHandleMap* m_pmapHGDIOBJ;
	CHandleMap* m_pmapHIMAGELIST;

	
	_PNH m_pfnNewHandler;


	
	HWND m_hSocketWindow;





	CMapPtrToPtr* m_pmapSocketHandle;
	CMapPtrToPtr* m_pmapDeadSockets;
	CPtrList* m_plistSocketNotifications;
#line 162 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"
#line 163 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"
};


class CWinApp;
class COleObjectFactory;

class CWnd;






class COccManager;
class COleControlLock;
#line 179 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"


class _AFX_DAO_STATE;
#line 183 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"

class CTypeLibCacheMap : public CMapPtrToPtr
{
public:
	virtual void RemoveAll(void* pExcept);
};


class AFX_MODULE_STATE : public CNoTrackObject
{
public:





	AFX_MODULE_STATE(BOOL bDLL);
#line 201 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"
	~AFX_MODULE_STATE();

	CWinApp* m_pCurrentWinApp;
	HINSTANCE m_hCurrentInstanceHandle;
	HINSTANCE m_hCurrentResourceHandle;
	LPCTSTR m_lpszCurrentAppName;
	BYTE m_bDLL;    
	BYTE m_bSystem; 
	BYTE m_bReserved[2]; 

	DWORD m_fRegisteredClasses; 

	



	CTypedSimpleList<CRuntimeClass*> m_classList;

	




	CTypedSimpleList<COleObjectFactory*> m_factoryList;
#line 226 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"
	
	long m_nObjectCount;
	BOOL m_bUserCtrl;

	
	TCHAR m_szUnregisterList[4096];





	
	




	void (__stdcall *m_pfnFilterToolTipMessage)(MSG*, CWnd*);










	
	COccManager* m_pOccManager;
	
	CTypedSimpleList<COleControlLock*> m_lockList;
#line 259 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"


	_AFX_DAO_STATE* m_pDaoState;
#line 263 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"


	
	CTypeLibCache m_typeLibCache;
	CTypeLibCacheMap* m_pTypeLibCacheMap;
#line 269 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"

	
	 CThreadLocal<AFX_MODULE_THREAD_STATE> m_thread;
};

AFX_MODULE_STATE* __stdcall AfxGetAppModuleState();



AFX_MODULE_STATE* __stdcall AfxGetModuleState();
AFX_MODULE_STATE* __stdcall AfxGetStaticModuleState();

AFX_MODULE_THREAD_STATE* __stdcall AfxGetModuleThreadState();





#line 288 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"



























#line 316 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"





class CView;
class CToolTipCtrl;
class CControlBar;

class _AFX_THREAD_STATE : public CNoTrackObject
{
public:
	_AFX_THREAD_STATE();
	virtual ~_AFX_THREAD_STATE();

	
	AFX_MODULE_STATE* m_pModuleState;
	AFX_MODULE_STATE* m_pPrevModuleState;

	
	void* m_pSafetyPoolBuffer;    

	
	AFX_EXCEPTION_CONTEXT m_exceptionContext;

	
	CWnd* m_pWndInit;
	CWnd* m_pAlternateWndInit;      
	DWORD m_dwPropStyle;
	DWORD m_dwPropExStyle;
	HWND m_hWndInit;
	BOOL m_bDlgCreate;
	HHOOK m_hHookOldCbtFilter;
	HHOOK m_hHookOldMsgFilter;

	
	MSG m_lastSentMsg;              
	HWND m_hTrackingWindow;         
	HMENU m_hTrackingMenu;
	TCHAR m_szTempClassName[96];    
	HWND m_hLockoutNotifyWindow;    
	BOOL m_bInMsgFilter;

	
	CView* m_pRoutingView;          
	CFrameWnd* m_pRoutingFrame;     

	
	BOOL m_bWaitForDataSource;

	
	CToolTipCtrl* m_pToolTip;
	CWnd* m_pLastHit;       
	int m_nLastHit;         
	TTTOOLINFOA m_lastInfo;    
	int m_nLastStatus;      
	CControlBar* m_pLastStatus; 

	
	CWnd* m_pWndPark;       
	long m_nCtrlRef;        
	BOOL m_bNeedTerm;       
};

extern   CThreadLocal<_AFX_THREAD_STATE> _afxThreadState;

_AFX_THREAD_STATE* __stdcall AfxGetThreadState();




#pragma pack(pop)
#line 389 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"




#line 394 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxstat_.h"


#line 1474 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"
#line 1475 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"






#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.inl"
















inline int CByteArray::GetSize() const
	{ return m_nSize; }
inline int CByteArray::GetUpperBound() const
	{ return m_nSize-1; }
inline void CByteArray::RemoveAll()
	{ SetSize(0); }
inline BYTE CByteArray::GetAt(int nIndex) const
	{ ((void)0);
		return m_pData[nIndex]; }
inline void CByteArray::SetAt(int nIndex, BYTE newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline BYTE& CByteArray::ElementAt(int nIndex)
	{ ((void)0);
		return m_pData[nIndex]; }
inline const BYTE* CByteArray::GetData() const
	{ return (const BYTE*)m_pData; }
inline BYTE* CByteArray::GetData()
	{ return (BYTE*)m_pData; }
inline int CByteArray::Add(BYTE newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline BYTE CByteArray::operator[](int nIndex) const
	{ return GetAt(nIndex); }
inline BYTE& CByteArray::operator[](int nIndex)
	{ return ElementAt(nIndex); }




inline int CWordArray::GetSize() const
	{ return m_nSize; }
inline int CWordArray::GetUpperBound() const
	{ return m_nSize-1; }
inline void CWordArray::RemoveAll()
	{ SetSize(0); }
inline WORD CWordArray::GetAt(int nIndex) const
	{ ((void)0);
		return m_pData[nIndex]; }
inline void CWordArray::SetAt(int nIndex, WORD newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline WORD& CWordArray::ElementAt(int nIndex)
	{ ((void)0);
		return m_pData[nIndex]; }
inline const WORD* CWordArray::GetData() const
	{ return (const WORD*)m_pData; }
inline WORD* CWordArray::GetData()
	{ return (WORD*)m_pData; }
inline int CWordArray::Add(WORD newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline WORD CWordArray::operator[](int nIndex) const
	{ return GetAt(nIndex); }
inline WORD& CWordArray::operator[](int nIndex)
	{ return ElementAt(nIndex); }




inline int CDWordArray::GetSize() const
	{ return m_nSize; }
inline int CDWordArray::GetUpperBound() const
	{ return m_nSize-1; }
inline void CDWordArray::RemoveAll()
	{ SetSize(0); }
inline DWORD CDWordArray::GetAt(int nIndex) const
	{ ((void)0);
		return m_pData[nIndex]; }
inline void CDWordArray::SetAt(int nIndex, DWORD newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline DWORD& CDWordArray::ElementAt(int nIndex)
	{ ((void)0);
		return m_pData[nIndex]; }
inline const DWORD* CDWordArray::GetData() const
	{ return (const DWORD*)m_pData; }
inline DWORD* CDWordArray::GetData()
	{ return (DWORD*)m_pData; }
inline int CDWordArray::Add(DWORD newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline DWORD CDWordArray::operator[](int nIndex) const
	{ return GetAt(nIndex); }
inline DWORD& CDWordArray::operator[](int nIndex)
	{ return ElementAt(nIndex); }




inline int CUIntArray::GetSize() const
	{ return m_nSize; }
inline int CUIntArray::GetUpperBound() const
	{ return m_nSize-1; }
inline void CUIntArray::RemoveAll()
	{ SetSize(0); }
inline UINT CUIntArray::GetAt(int nIndex) const
	{ ((void)0);
		return m_pData[nIndex]; }
inline void CUIntArray::SetAt(int nIndex, UINT newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline UINT& CUIntArray::ElementAt(int nIndex)
	{ ((void)0);
		return m_pData[nIndex]; }
inline const UINT* CUIntArray::GetData() const
	{ return (const UINT*)m_pData; }
inline UINT* CUIntArray::GetData()
	{ return (UINT*)m_pData; }
inline int CUIntArray::Add(UINT newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline UINT CUIntArray::operator[](int nIndex) const
	{ return GetAt(nIndex); }
inline UINT& CUIntArray::operator[](int nIndex)
	{ return ElementAt(nIndex); }




inline int CPtrArray::GetSize() const
	{ return m_nSize; }
inline int CPtrArray::GetUpperBound() const
	{ return m_nSize-1; }
inline void CPtrArray::RemoveAll()
	{ SetSize(0); }
inline void* CPtrArray::GetAt(int nIndex) const
	{ ((void)0);
		return m_pData[nIndex]; }
inline void CPtrArray::SetAt(int nIndex, void* newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline void*& CPtrArray::ElementAt(int nIndex)
	{ ((void)0);
		return m_pData[nIndex]; }
inline const void** CPtrArray::GetData() const
	{ return (const void**)m_pData; }
inline void** CPtrArray::GetData()
	{ return (void**)m_pData; }
inline int CPtrArray::Add(void* newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline void* CPtrArray::operator[](int nIndex) const
	{ return GetAt(nIndex); }
inline void*& CPtrArray::operator[](int nIndex)
	{ return ElementAt(nIndex); }




inline int CObArray::GetSize() const
	{ return m_nSize; }
inline int CObArray::GetUpperBound() const
	{ return m_nSize-1; }
inline void CObArray::RemoveAll()
	{ SetSize(0); }
inline CObject* CObArray::GetAt(int nIndex) const
	{ ((void)0);
		return m_pData[nIndex]; }
inline void CObArray::SetAt(int nIndex, CObject* newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline CObject*& CObArray::ElementAt(int nIndex)
	{ ((void)0);
		return m_pData[nIndex]; }
inline const CObject** CObArray::GetData() const
	{ return (const CObject**)m_pData; }
inline CObject** CObArray::GetData()
	{ return (CObject**)m_pData; }
inline int CObArray::Add(CObject* newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline CObject* CObArray::operator[](int nIndex) const
	{ return GetAt(nIndex); }
inline CObject*& CObArray::operator[](int nIndex)
	{ return ElementAt(nIndex); }




inline int CStringArray::GetSize() const
	{ return m_nSize; }
inline int CStringArray::GetUpperBound() const
	{ return m_nSize-1; }
inline void CStringArray::RemoveAll()
	{ SetSize(0); }
inline CString CStringArray::GetAt(int nIndex) const
	{ ((void)0);
		return m_pData[nIndex]; }
inline void CStringArray::SetAt(int nIndex, LPCTSTR newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline void CStringArray::SetAt(int nIndex, const CString& newElement)
	{ ((void)0);
		m_pData[nIndex] = newElement; }

inline CString& CStringArray::ElementAt(int nIndex)
	{ ((void)0);
		return m_pData[nIndex]; }
inline const CString* CStringArray::GetData() const
	{ return (const CString*)m_pData; }
inline CString* CStringArray::GetData()
	{ return (CString*)m_pData; }
inline int CStringArray::Add(LPCTSTR newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline int CStringArray::Add(const CString& newElement)
	{ int nIndex = m_nSize;
		SetAtGrow(nIndex, newElement);
		return nIndex; }

inline CString CStringArray::operator[](int nIndex) const
	{ return GetAt(nIndex); }
inline CString& CStringArray::operator[](int nIndex)
	{ return ElementAt(nIndex); }




inline int CPtrList::GetCount() const
	{ return m_nCount; }
inline BOOL CPtrList::IsEmpty() const
	{ return m_nCount == 0; }
inline void*& CPtrList::GetHead()
	{ ((void)0);
		return m_pNodeHead->data; }
inline void* CPtrList::GetHead() const
	{ ((void)0);
		return m_pNodeHead->data; }
inline void*& CPtrList::GetTail()
	{ ((void)0);
		return m_pNodeTail->data; }
inline void* CPtrList::GetTail() const
	{ ((void)0);
		return m_pNodeTail->data; }
inline POSITION CPtrList::GetHeadPosition() const
	{ return (POSITION) m_pNodeHead; }
inline POSITION CPtrList::GetTailPosition() const
	{ return (POSITION) m_pNodeTail; }
inline void*& CPtrList::GetNext(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
inline void* CPtrList::GetNext(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
inline void*& CPtrList::GetPrev(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
inline void* CPtrList::GetPrev(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
inline void*& CPtrList::GetAt(POSITION position)
	{ CNode* pNode = (CNode*) position;
		((void)0);
		return pNode->data; }
inline void* CPtrList::GetAt(POSITION position) const
	{ CNode* pNode = (CNode*) position;
		((void)0);
		return pNode->data; }
inline void CPtrList::SetAt(POSITION pos, void* newElement)
	{ CNode* pNode = (CNode*) pos;
		((void)0);
		pNode->data = newElement; }





inline int CObList::GetCount() const
	{ return m_nCount; }
inline BOOL CObList::IsEmpty() const
	{ return m_nCount == 0; }
inline CObject*& CObList::GetHead()
	{ ((void)0);
		return m_pNodeHead->data; }
inline CObject* CObList::GetHead() const
	{ ((void)0);
		return m_pNodeHead->data; }
inline CObject*& CObList::GetTail()
	{ ((void)0);
		return m_pNodeTail->data; }
inline CObject* CObList::GetTail() const
	{ ((void)0);
		return m_pNodeTail->data; }
inline POSITION CObList::GetHeadPosition() const
	{ return (POSITION) m_pNodeHead; }
inline POSITION CObList::GetTailPosition() const
	{ return (POSITION) m_pNodeTail; }
inline CObject*& CObList::GetNext(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
inline CObject* CObList::GetNext(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
inline CObject*& CObList::GetPrev(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
inline CObject* CObList::GetPrev(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
inline CObject*& CObList::GetAt(POSITION position)
	{ CNode* pNode = (CNode*) position;
		((void)0);
		return pNode->data; }
inline CObject* CObList::GetAt(POSITION position) const
	{ CNode* pNode = (CNode*) position;
		((void)0);
		return pNode->data; }
inline void CObList::SetAt(POSITION pos, CObject* newElement)
	{ CNode* pNode = (CNode*) pos;
		((void)0);
		pNode->data = newElement; }





inline int CStringList::GetCount() const
	{ return m_nCount; }
inline BOOL CStringList::IsEmpty() const
	{ return m_nCount == 0; }
inline CString& CStringList::GetHead()
	{ ((void)0);
		return m_pNodeHead->data; }
inline CString CStringList::GetHead() const
	{ ((void)0);
		return m_pNodeHead->data; }
inline CString& CStringList::GetTail()
	{ ((void)0);
		return m_pNodeTail->data; }
inline CString CStringList::GetTail() const
	{ ((void)0);
		return m_pNodeTail->data; }
inline POSITION CStringList::GetHeadPosition() const
	{ return (POSITION) m_pNodeHead; }
inline POSITION CStringList::GetTailPosition() const
	{ return (POSITION) m_pNodeTail; }
inline CString& CStringList::GetNext(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
inline CString CStringList::GetNext(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pNext;
		return pNode->data; }
inline CString& CStringList::GetPrev(POSITION& rPosition) 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
inline CString CStringList::GetPrev(POSITION& rPosition) const 
	{ CNode* pNode = (CNode*) rPosition;
		((void)0);
		rPosition = (POSITION) pNode->pPrev;
		return pNode->data; }
inline CString& CStringList::GetAt(POSITION position)
	{ CNode* pNode = (CNode*) position;
		((void)0);
		return pNode->data; }
inline CString CStringList::GetAt(POSITION position) const
	{ CNode* pNode = (CNode*) position;
		((void)0);
		return pNode->data; }
inline void CStringList::SetAt(POSITION pos, LPCTSTR newElement)
	{ CNode* pNode = (CNode*) pos;
		((void)0);
		pNode->data = newElement; }

inline void CStringList::SetAt(POSITION pos, const CString& newElement)
	{ CNode* pNode = (CNode*) pos;
		((void)0);
		pNode->data = newElement; }





inline int CMapWordToPtr::GetCount() const
	{ return m_nCount; }
inline BOOL CMapWordToPtr::IsEmpty() const
	{ return m_nCount == 0; }
inline void CMapWordToPtr::SetAt(WORD key, void* newValue)
	{ (*this)[key] = newValue; }
inline POSITION CMapWordToPtr::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
inline UINT CMapWordToPtr::GetHashTableSize() const
	{ return m_nHashTableSize; }




inline int CMapPtrToWord::GetCount() const
	{ return m_nCount; }
inline BOOL CMapPtrToWord::IsEmpty() const
	{ return m_nCount == 0; }
inline void CMapPtrToWord::SetAt(void* key, WORD newValue)
	{ (*this)[key] = newValue; }
inline POSITION CMapPtrToWord::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
inline UINT CMapPtrToWord::GetHashTableSize() const
	{ return m_nHashTableSize; }




inline int CMapPtrToPtr::GetCount() const
	{ return m_nCount; }
inline BOOL CMapPtrToPtr::IsEmpty() const
	{ return m_nCount == 0; }
inline void CMapPtrToPtr::SetAt(void* key, void* newValue)
	{ (*this)[key] = newValue; }
inline POSITION CMapPtrToPtr::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
inline UINT CMapPtrToPtr::GetHashTableSize() const
	{ return m_nHashTableSize; }




inline int CMapWordToOb::GetCount() const
	{ return m_nCount; }
inline BOOL CMapWordToOb::IsEmpty() const
	{ return m_nCount == 0; }
inline void CMapWordToOb::SetAt(WORD key, CObject* newValue)
	{ (*this)[key] = newValue; }
inline POSITION CMapWordToOb::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
inline UINT CMapWordToOb::GetHashTableSize() const
	{ return m_nHashTableSize; }



inline int CMapStringToPtr::GetCount() const
	{ return m_nCount; }
inline BOOL CMapStringToPtr::IsEmpty() const
	{ return m_nCount == 0; }
inline void CMapStringToPtr::SetAt(LPCTSTR key, void* newValue)
	{ (*this)[key] = newValue; }
inline POSITION CMapStringToPtr::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
inline UINT CMapStringToPtr::GetHashTableSize() const
	{ return m_nHashTableSize; }



inline int CMapStringToOb::GetCount() const
	{ return m_nCount; }
inline BOOL CMapStringToOb::IsEmpty() const
	{ return m_nCount == 0; }
inline void CMapStringToOb::SetAt(LPCTSTR key, CObject* newValue)
	{ (*this)[key] = newValue; }
inline POSITION CMapStringToOb::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
inline UINT CMapStringToOb::GetHashTableSize() const
	{ return m_nHashTableSize; }



inline int CMapStringToString::GetCount() const
	{ return m_nCount; }
inline BOOL CMapStringToString::IsEmpty() const
	{ return m_nCount == 0; }
inline void CMapStringToString::SetAt(LPCTSTR key, LPCTSTR newValue)
	{ (*this)[key] = newValue; }
inline POSITION CMapStringToString::GetStartPosition() const
	{ return (m_nCount == 0) ? 0 : ((POSITION)-1L); }
inline UINT CMapStringToString::GetHashTableSize() const
	{ return m_nHashTableSize; }



#line 528 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.inl"
#line 1482 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"
#line 1483 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"





#pragma component(minrebuild, on)
#line 1490 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"

#pragma component(mintypeinfo, off)
#line 1493 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"

#line 1495 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxcoll.h"


#line 1954 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
	


#line 1958 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"











#line 1970 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"















inline CObject::CObject()
	{ }
inline CObject::~CObject()
	{ }
inline void CObject::Serialize(CArchive&)
	{  }
inline void* __stdcall CObject::operator new(size_t, void* p)
	{ return p; }


inline void __stdcall CObject::operator delete(void* p)
	{ ::operator delete(p); }

inline void __stdcall CObject::operator delete(void* p, void*)
	{ ::operator delete(p); }
#line 32 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline void* __stdcall CObject::operator new(size_t nSize)
	{ return ::operator new(nSize); }







#line 42 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline const CObject* __cdecl AfxDynamicDownCast(CRuntimeClass* pClass, const CObject* pObject)
	{ return (const CObject*)AfxDynamicDownCast(pClass, (CObject*)pObject); }






inline CException::~CException()
	{ }
inline CSimpleException::CSimpleException()
	{ m_bInitialized = 0; m_bLoaded = 0; }
inline CSimpleException::CSimpleException(BOOL bAutoDelete)
	: CException(bAutoDelete) { m_bInitialized = 0; m_bLoaded = 0; }

inline CSimpleException::~CSimpleException()
	{ }
#line 60 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"

inline CMemoryException::CMemoryException()
	: CSimpleException() { }
inline CMemoryException::CMemoryException(BOOL bAutoDelete, UINT nResourceID)
	: CSimpleException(bAutoDelete) { m_nResourceID = nResourceID; }
inline CMemoryException::~CMemoryException()
	{ }
inline CNotSupportedException::CNotSupportedException()
	: CSimpleException() { }
inline CNotSupportedException::CNotSupportedException(BOOL bAutoDelete, UINT nResourceID)
	: CSimpleException(bAutoDelete) { m_nResourceID = nResourceID; }
inline CNotSupportedException::~CNotSupportedException()
	{ }
inline CArchiveException::CArchiveException(int cause,
	LPCTSTR lpszFileName )
	{ m_cause = cause; m_strFileName = lpszFileName; }
inline CArchiveException::~CArchiveException()
	{ }
inline CFileException::CFileException(int cause, LONG lOsError,
	LPCTSTR pstrFileName )
	{ m_cause = cause; m_lOsError = lOsError; m_strFileName = pstrFileName; }
inline CFileException::~CFileException()
	{ }


inline CFile::operator HFILE() const
	{ return m_hFile; }
inline DWORD CFile::ReadHuge(void* lpBuffer, DWORD dwCount)
	{ return (DWORD)Read(lpBuffer, (UINT)dwCount); }
inline void CFile::WriteHuge(const void* lpBuffer, DWORD dwCount)
	{ Write(lpBuffer, (UINT)dwCount); }
inline DWORD CFile::SeekToEnd()
	{ return Seek(0, CFile::end); }
inline void CFile::SeekToBegin()
	{ Seek(0, CFile::begin); }
inline void CFile::SetFilePath(LPCTSTR lpszNewName)
{
	((void)0);
	((void)0);
	m_strFileName = lpszNewName;
}


inline BOOL CFileFind::IsReadOnly() const
	{ return MatchesMask(0x00000001); }
inline BOOL CFileFind::IsDirectory() const
	{ return MatchesMask(0x00000010); }
inline BOOL CFileFind::IsCompressed() const
	{ return MatchesMask(0x00000800); }
inline BOOL CFileFind::IsSystem() const
	{ return MatchesMask(0x00000004); }
inline BOOL CFileFind::IsHidden() const
	{ return MatchesMask(0x00000002); }
inline BOOL CFileFind::IsTemporary() const
	{ return MatchesMask(0x00000100); }
inline BOOL CFileFind::IsNormal() const
	{ return MatchesMask(0x00000080); }
inline BOOL CFileFind::IsArchived() const
	{ return MatchesMask(0x00000020); }


inline CStringData* CString::GetData() const
	{ ((void)0); return ((CStringData*)m_pchData)-1; }
inline void CString::Init()
	{ m_pchData = ((CString&)*(CString*)&_afxPchNil).m_pchData; }

inline CString::CString()
	{ m_pchData = ((CString&)*(CString*)&_afxPchNil).m_pchData; }
#line 129 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline CString::CString(const unsigned char* lpsz)
	{ Init(); *this = (LPCSTR)lpsz; }
inline const CString& CString::operator=(const unsigned char* lpsz)
	{ *this = (LPCSTR)lpsz; return *this; }











inline int CString::GetLength() const
	{ return GetData()->nDataLength; }
inline int CString::GetAllocLength() const
	{ return GetData()->nAllocLength; }
inline BOOL CString::IsEmpty() const
	{ return GetData()->nDataLength == 0; }
inline CString::operator LPCTSTR() const
	{ return m_pchData; }
inline int __stdcall CString::SafeStrlen(LPCTSTR lpsz)
	{ return (lpsz == 0) ? 0 : lstrlenA(lpsz); }


inline int CString::Compare(LPCTSTR lpsz) const
	{ ((void)0); return strcmp(m_pchData, lpsz); }    
inline int CString::CompareNoCase(LPCTSTR lpsz) const
	{ ((void)0); return _stricmp(m_pchData, lpsz); }   


inline int CString::Collate(LPCTSTR lpsz) const
	{ ((void)0); return strcoll(m_pchData, lpsz); }   
inline int CString::CollateNoCase(LPCTSTR lpsz) const
	{ ((void)0); return _stricoll(m_pchData, lpsz); }   

inline TCHAR CString::GetAt(int nIndex) const
{
	((void)0);
	((void)0);
	return m_pchData[nIndex];
}
inline TCHAR CString::operator[](int nIndex) const
{
	
	((void)0);
	((void)0);
	return m_pchData[nIndex];
}
inline bool __stdcall operator==(const CString& s1, const CString& s2)
	{ return s1.Compare(s2) == 0; }
inline bool __stdcall operator==(const CString& s1, LPCTSTR s2)
	{ return s1.Compare(s2) == 0; }
inline bool __stdcall operator==(LPCTSTR s1, const CString& s2)
	{ return s2.Compare(s1) == 0; }
inline bool __stdcall operator!=(const CString& s1, const CString& s2)
	{ return s1.Compare(s2) != 0; }
inline bool __stdcall operator!=(const CString& s1, LPCTSTR s2)
	{ return s1.Compare(s2) != 0; }
inline bool __stdcall operator!=(LPCTSTR s1, const CString& s2)
	{ return s2.Compare(s1) != 0; }
inline bool __stdcall operator<(const CString& s1, const CString& s2)
	{ return s1.Compare(s2) < 0; }
inline bool __stdcall operator<(const CString& s1, LPCTSTR s2)
	{ return s1.Compare(s2) < 0; }
inline bool __stdcall operator<(LPCTSTR s1, const CString& s2)
	{ return s2.Compare(s1) > 0; }
inline bool __stdcall operator>(const CString& s1, const CString& s2)
	{ return s1.Compare(s2) > 0; }
inline bool __stdcall operator>(const CString& s1, LPCTSTR s2)
	{ return s1.Compare(s2) > 0; }
inline bool __stdcall operator>(LPCTSTR s1, const CString& s2)
	{ return s2.Compare(s1) < 0; }
inline bool __stdcall operator<=(const CString& s1, const CString& s2)
	{ return s1.Compare(s2) <= 0; }
inline bool __stdcall operator<=(const CString& s1, LPCTSTR s2)
	{ return s1.Compare(s2) <= 0; }
inline bool __stdcall operator<=(LPCTSTR s1, const CString& s2)
	{ return s2.Compare(s1) >= 0; }
inline bool __stdcall operator>=(const CString& s1, const CString& s2)
	{ return s1.Compare(s2) >= 0; }
inline bool __stdcall operator>=(const CString& s1, LPCTSTR s2)
	{ return s1.Compare(s2) >= 0; }
inline bool __stdcall operator>=(LPCTSTR s1, const CString& s2)
	{ return s2.Compare(s1) <= 0; }



inline CTimeSpan::CTimeSpan()
	{ }
#line 222 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline CTimeSpan::CTimeSpan(time_t time)
	{ m_timeSpan = time; }
inline CTimeSpan::CTimeSpan(LONG lDays, int nHours, int nMins, int nSecs)
	{ m_timeSpan = nSecs + 60* (nMins + 60* (nHours + 24* lDays)); }
inline CTimeSpan::CTimeSpan(const CTimeSpan& timeSpanSrc)
	{ m_timeSpan = timeSpanSrc.m_timeSpan; }
inline const CTimeSpan& CTimeSpan::operator=(const CTimeSpan& timeSpanSrc)
	{ m_timeSpan = timeSpanSrc.m_timeSpan; return *this; }
inline LONG CTimeSpan::GetDays() const
	{ return m_timeSpan / (24*3600L); }
inline LONG CTimeSpan::GetTotalHours() const
	{ return m_timeSpan/3600; }
inline int CTimeSpan::GetHours() const
	{ return (int)(GetTotalHours() - GetDays()*24); }
inline LONG CTimeSpan::GetTotalMinutes() const
	{ return m_timeSpan/60; }
inline int CTimeSpan::GetMinutes() const
	{ return (int)(GetTotalMinutes() - GetTotalHours()*60); }
inline LONG CTimeSpan::GetTotalSeconds() const
	{ return m_timeSpan; }
inline int CTimeSpan::GetSeconds() const
	{ return (int)(GetTotalSeconds() - GetTotalMinutes()*60); }
inline CTimeSpan CTimeSpan::operator-(CTimeSpan timeSpan) const
	{ return CTimeSpan(m_timeSpan - timeSpan.m_timeSpan); }
inline CTimeSpan CTimeSpan::operator+(CTimeSpan timeSpan) const
	{ return CTimeSpan(m_timeSpan + timeSpan.m_timeSpan); }
inline const CTimeSpan& CTimeSpan::operator+=(CTimeSpan timeSpan)
	{ m_timeSpan += timeSpan.m_timeSpan; return *this; }
inline const CTimeSpan& CTimeSpan::operator-=(CTimeSpan timeSpan)
	{ m_timeSpan -= timeSpan.m_timeSpan; return *this; }
inline BOOL CTimeSpan::operator==(CTimeSpan timeSpan) const
	{ return m_timeSpan == timeSpan.m_timeSpan; }
inline BOOL CTimeSpan::operator!=(CTimeSpan timeSpan) const
	{ return m_timeSpan != timeSpan.m_timeSpan; }
inline BOOL CTimeSpan::operator<(CTimeSpan timeSpan) const
	{ return m_timeSpan < timeSpan.m_timeSpan; }
inline BOOL CTimeSpan::operator>(CTimeSpan timeSpan) const
	{ return m_timeSpan > timeSpan.m_timeSpan; }
inline BOOL CTimeSpan::operator<=(CTimeSpan timeSpan) const
	{ return m_timeSpan <= timeSpan.m_timeSpan; }
inline BOOL CTimeSpan::operator>=(CTimeSpan timeSpan) const
	{ return m_timeSpan >= timeSpan.m_timeSpan; }



inline CTime::CTime()
	{ }
#line 270 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline CTime::CTime(time_t time)
	{ m_time = time; }

inline CTime::CTime(const CTime& timeSrc)
	{ m_time = timeSrc.m_time; }
#line 276 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline const CTime& CTime::operator=(const CTime& timeSrc)
	{ m_time = timeSrc.m_time; return *this; }
inline const CTime& CTime::operator=(time_t t)
	{ m_time = t; return *this; }
inline time_t CTime::GetTime() const
	{ return m_time; }
inline int CTime::GetYear() const
	{ return (GetLocalTm(0)->tm_year) + 1900; }
inline int CTime::GetMonth() const
	{ return GetLocalTm(0)->tm_mon + 1; }
inline int CTime::GetDay() const
	{ return GetLocalTm(0)->tm_mday; }
inline int CTime::GetHour() const
	{ return GetLocalTm(0)->tm_hour; }
inline int CTime::GetMinute() const
	{ return GetLocalTm(0)->tm_min; }
inline int CTime::GetSecond() const
	{ return GetLocalTm(0)->tm_sec; }
inline int CTime::GetDayOfWeek() const
	{ return GetLocalTm(0)->tm_wday + 1; }
inline CTimeSpan CTime::operator-(CTime time) const
	{ return CTimeSpan(m_time - time.m_time); }
inline CTime CTime::operator-(CTimeSpan timeSpan) const
	{ return CTime(m_time - timeSpan.m_timeSpan); }
inline CTime CTime::operator+(CTimeSpan timeSpan) const
	{ return CTime(m_time + timeSpan.m_timeSpan); }
inline const CTime& CTime::operator+=(CTimeSpan timeSpan)
	{ m_time += timeSpan.m_timeSpan; return *this; }
inline const CTime& CTime::operator-=(CTimeSpan timeSpan)
	{ m_time -= timeSpan.m_timeSpan; return *this; }
inline BOOL CTime::operator==(CTime time) const
	{ return m_time == time.m_time; }
inline BOOL CTime::operator!=(CTime time) const
	{ return m_time != time.m_time; }
inline BOOL CTime::operator<(CTime time) const
	{ return m_time < time.m_time; }
inline BOOL CTime::operator>(CTime time) const
	{ return m_time > time.m_time; }
inline BOOL CTime::operator<=(CTime time) const
	{ return m_time <= time.m_time; }
inline BOOL CTime::operator>=(CTime time) const
	{ return m_time >= time.m_time; }



inline BOOL CArchive::IsLoading() const
	{ return (m_nMode & CArchive::load) != 0; }
inline BOOL CArchive::IsStoring() const
	{ return (m_nMode & CArchive::load) == 0; }
inline BOOL CArchive::IsByteSwapping() const
	{ return (m_nMode & CArchive::bNoByteSwap) == 0; }
inline BOOL CArchive::IsBufferEmpty() const
	{ return m_lpBufCur == m_lpBufMax; }
inline CFile* CArchive::GetFile() const
	{ return m_pFile; }
inline void CArchive::SetObjectSchema(UINT nSchema)
	{ m_nObjectSchema = nSchema; }
inline void CArchive::SetStoreParams(UINT nHashSize, UINT nBlockSize)
{
	((void)0);
	((void)0);    
	m_nHashSize = nHashSize;
	m_nGrowSize = nBlockSize;
}
inline void CArchive::SetLoadParams(UINT nGrowBy)
{
	((void)0);
	((void)0);   
	m_nGrowSize = nGrowBy;
}
inline CArchive& CArchive::operator<<(int i)
	{ return CArchive::operator<<((LONG)i); }
inline CArchive& CArchive::operator<<(unsigned u)
	{ return CArchive::operator<<((LONG)u); }
inline CArchive& CArchive::operator<<(short w)
	{ return CArchive::operator<<((WORD)w); }
inline CArchive& CArchive::operator<<(char ch)
	{ return CArchive::operator<<((BYTE)ch); }
inline CArchive& CArchive::operator<<(BYTE by)
	{ if (m_lpBufCur + sizeof(BYTE) > m_lpBufMax) Flush();
		*( BYTE*)m_lpBufCur = by; m_lpBufCur += sizeof(BYTE); return *this; }

inline CArchive& CArchive::operator<<(WORD w)
	{ if (m_lpBufCur + sizeof(WORD) > m_lpBufMax) Flush();
		*( WORD*)m_lpBufCur = w; m_lpBufCur += sizeof(WORD); return *this; }
inline CArchive& CArchive::operator<<(LONG l)
	{ if (m_lpBufCur + sizeof(LONG) > m_lpBufMax) Flush();
		*( LONG*)m_lpBufCur = l; m_lpBufCur += sizeof(LONG); return *this; }
inline CArchive& CArchive::operator<<(DWORD dw)
	{ if (m_lpBufCur + sizeof(DWORD) > m_lpBufMax) Flush();
		*( DWORD*)m_lpBufCur = dw; m_lpBufCur += sizeof(DWORD); return *this; }
inline CArchive& CArchive::operator<<(float f)
	{ if (m_lpBufCur + sizeof(float) > m_lpBufMax) Flush();
		*( _AFX_FLOAT*)m_lpBufCur = *(_AFX_FLOAT*)&f; m_lpBufCur += sizeof(float); return *this;
	}
inline CArchive& CArchive::operator<<(double d)
	{ if (m_lpBufCur + sizeof(double) > m_lpBufMax) Flush();
		*( _AFX_DOUBLE*)m_lpBufCur = *(_AFX_DOUBLE*)&d; m_lpBufCur += sizeof(double); return *this; }
#line 375 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline CArchive& CArchive::operator>>(int& i)
	{ return CArchive::operator>>((LONG&)i); }
inline CArchive& CArchive::operator>>(unsigned& u)
	{ return CArchive::operator>>((LONG&)u); }
inline CArchive& CArchive::operator>>(short& w)
	{ return CArchive::operator>>((WORD&)w); }
inline CArchive& CArchive::operator>>(char& ch)
	{ return CArchive::operator>>((BYTE&)ch); }
inline CArchive& CArchive::operator>>(BYTE& by)
	{ if (m_lpBufCur + sizeof(BYTE) > m_lpBufMax)
			FillBuffer(sizeof(BYTE) - (UINT)(m_lpBufMax - m_lpBufCur));
		by = *( BYTE*)m_lpBufCur; m_lpBufCur += sizeof(BYTE); return *this; }

inline CArchive& CArchive::operator>>(WORD& w)
	{ if (m_lpBufCur + sizeof(WORD) > m_lpBufMax)
			FillBuffer(sizeof(WORD) - (UINT)(m_lpBufMax - m_lpBufCur));
		w = *( WORD*)m_lpBufCur; m_lpBufCur += sizeof(WORD); return *this; }
inline CArchive& CArchive::operator>>(DWORD& dw)
	{ if (m_lpBufCur + sizeof(DWORD) > m_lpBufMax)
			FillBuffer(sizeof(DWORD) - (UINT)(m_lpBufMax - m_lpBufCur));
		dw = *( DWORD*)m_lpBufCur; m_lpBufCur += sizeof(DWORD); return *this; }
inline CArchive& CArchive::operator>>(float& f)
	{ if (m_lpBufCur + sizeof(float) > m_lpBufMax)
			FillBuffer(sizeof(float) - (UINT)(m_lpBufMax - m_lpBufCur));
		*(_AFX_FLOAT*)&f = *( _AFX_FLOAT*)m_lpBufCur; m_lpBufCur += sizeof(float); return *this; }
inline CArchive& CArchive::operator>>(double& d)
	{ if (m_lpBufCur + sizeof(double) > m_lpBufMax)
			FillBuffer(sizeof(double) - (UINT)(m_lpBufMax - m_lpBufCur));
		*(_AFX_DOUBLE*)&d = *( _AFX_DOUBLE*)m_lpBufCur; m_lpBufCur += sizeof(double); return *this; }
inline CArchive& CArchive::operator>>(LONG& l)
	{ if (m_lpBufCur + sizeof(LONG) > m_lpBufMax)
			FillBuffer(sizeof(LONG) - (UINT)(m_lpBufMax - m_lpBufCur));
		l = *( LONG*)m_lpBufCur; m_lpBufCur += sizeof(LONG); return *this; }
#line 409 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
inline CArchive::CArchive(const CArchive& )
	{ }
inline void CArchive::operator=(const CArchive& )
	{ }
inline CArchive& __stdcall operator<<(CArchive& ar, const CObject* pOb)
	{ ar.WriteObject(pOb); return ar; }
inline CArchive& __stdcall operator>>(CArchive& ar, CObject*& pOb)
	{ pOb = ar.ReadObject(0); return ar; }
inline CArchive& __stdcall operator>>(CArchive& ar, const CObject*& pOb)
	{ pOb = ar.ReadObject(0); return ar; }



inline int CDumpContext::GetDepth() const
	{ return m_nDepth; }
inline void CDumpContext::SetDepth(int nNewDepth)
	{ m_nDepth = nNewDepth; }
inline CDumpContext::CDumpContext(const CDumpContext& )
	{ }
inline void CDumpContext::operator=(const CDumpContext& )
	{ }



#line 434 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.inl"
#line 1972 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"
#line 1973 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"





#pragma component(minrebuild, on)
#line 1980 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

#pragma component(mintypeinfo, off)
#line 1983 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"

#line 1985 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afx.h"


#line 20 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
#line 21 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"




	#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
 



















#line 22 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
#line 23 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"








#line 32 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"








#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
#line 43 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 47 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
#line 48 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


extern "C" {            
#line 52 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"



struct HDROP__ { int unused; }; typedef struct HDROP__ *HDROP;

extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileA(HDROP,UINT,LPSTR,UINT);
extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileW(HDROP,UINT,LPWSTR,UINT);




#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall DragQueryPoint(HDROP,LPPOINT);
extern "C" __declspec(dllimport) void __stdcall DragFinish(HDROP);
extern "C" __declspec(dllimport) void __stdcall DragAcceptFiles(HWND,BOOL);

extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);




#line 75 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);




#line 82 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) LPWSTR * __stdcall  CommandLineToArgvW(LPCWSTR lpCmdLine, int*pNumArgs);

extern "C" __declspec(dllimport) INT __stdcall ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
extern "C" __declspec(dllimport) INT __stdcall ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);




#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) HICON __stdcall DuplicateIcon(HINSTANCE hInst, HICON hIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconA(HINSTANCE hInst, LPSTR lpIconPath, LPWORD lpiIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR lpIconPath, LPWORD lpiIcon);




#line 99 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) HICON __stdcall ExtractIconA(HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
extern "C" __declspec(dllimport) HICON __stdcall ExtractIconW(HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);




#line 106 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


typedef struct _DRAGINFOA {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    LPSTR   lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    LPWSTR  lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;




typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
#line 129 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"














                                        
                                        


















typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam; 
} APPBARDATA, *PAPPBARDATA;


extern "C" __declspec(dllimport) UINT_PTR __stdcall SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData);





extern "C" __declspec(dllimport) DWORD __stdcall   DoEnvironmentSubstA(LPSTR szString, UINT cchString);
extern "C" __declspec(dllimport) DWORD __stdcall   DoEnvironmentSubstW(LPWSTR szString, UINT cchString);




#line 187 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);




#line 196 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


















                                      










#line 226 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

typedef WORD FILEOP_FLAGS;




                                
                                
                                
                                




typedef WORD PRINTEROP_FLAGS;

#line 246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"








typedef struct _SHFILEOPSTRUCTA
{
        HWND            hwnd;
        UINT            wFunc;
        LPCSTR          pFrom;
        LPCSTR          pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCSTR           lpszProgressTitle; 
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
        HWND            hwnd;
        UINT            wFunc;
        LPCWSTR         pFrom;
        LPCWSTR         pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCWSTR          lpszProgressTitle; 
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;




typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
#line 283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

extern "C" __declspec(dllimport) int __stdcall SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);
extern "C" __declspec(dllimport) int __stdcall SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);




#line 291 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) void __stdcall SHFreeNameMappings(HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR   pszOldPath;
    LPSTR   pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR  pszOldPath;
    LPWSTR  pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;




typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#line 314 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"



















#line 334 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"































#line 366 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


#line 369 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"





















typedef struct _SHELLEXECUTEINFOA
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCSTR   lpVerb;
        LPCSTR   lpFile;
        LPCSTR   lpParameters;
        LPCSTR   lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCSTR   lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
        HANDLE hMonitor;
        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  lpVerb;
        LPCWSTR  lpFile;
        LPCWSTR  lpParameters;
        LPCWSTR  lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCWSTR  lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
        HANDLE hMonitor;
        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;




typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
#line 441 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExA(LPSHELLEXECUTEINFOA lpExecInfo);
extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExW(LPSHELLEXECUTEINFOW lpExecInfo);




#line 449 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) void __stdcall WinExecErrorA(HWND hwnd, int error, LPCSTR lpstrFileName, LPCSTR lpstrTitle);
extern "C" __declspec(dllimport) void __stdcall WinExecErrorW(HWND hwnd, int error, LPCWSTR lpstrFileName, LPCWSTR lpstrTitle);




#line 456 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"



typedef struct _SHCREATEPROCESSINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  pszFile;
        LPCWSTR  pszParameters;
        LPCWSTR  pszCurrentDirectory;
         HANDLE hUserToken;
         LPSECURITY_ATTRIBUTES lpProcessAttributes;
         LPSECURITY_ATTRIBUTES lpThreadAttributes;
         BOOL bInheritHandles;
         DWORD dwCreationFlags;
         LPSTARTUPINFOW lpStartupInfo;
         LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

extern "C" __declspec(dllimport) BOOL __stdcall SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi);










typedef struct _SHQUERYRBINFO {
    DWORD   cbSize;

    __int64 i64Size;
    __int64 i64NumItems;



#line 496 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
} SHQUERYRBINFO, *LPSHQUERYRBINFO;









extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);




#line 513 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);




#line 520 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"









typedef struct _NOTIFYICONDATAA {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;


#line 539 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
        CHAR   szTip[128];
#line 541 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

        DWORD dwState;
        DWORD dwStateMask;
        CHAR   szInfo[256];
        union {
            UINT  uTimeout;
            UINT  uVersion;
        } ;
        CHAR   szInfoTitle[64];
        DWORD dwInfoFlags;
#line 552 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


#line 555 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;


#line 566 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
        WCHAR  szTip[128];
#line 568 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

        DWORD dwState;
        DWORD dwStateMask;
        WCHAR  szInfo[256];
        union {
            UINT  uTimeout;
            UINT  uVersion;
        } ;
        WCHAR  szInfoTitle[64];
        DWORD dwInfoFlags;
#line 579 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


#line 582 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;




typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
#line 590 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"








#line 599 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"







#line 607 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"






#line 614 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"






#line 621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"









#line 631 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"







#line 639 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


#line 642 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

















#line 660 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
#line 661 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);




#line 669 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"




























typedef struct _SHFILEINFOA
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        CHAR        szDisplayName[260];    
        CHAR        szTypeName[80];             
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        WCHAR       szDisplayName[260];    
        WCHAR       szTypeName[80];             
} SHFILEINFOW;



typedef SHFILEINFOA SHFILEINFO;
#line 718 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"



#line 722 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"





















                                                
#line 745 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags);
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags);




#line 753 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"




extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);




#line 764 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags);




#line 771 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"






#line 778 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


















extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);




#line 803 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


#line 806 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"















extern "C" __declspec(dllimport) HRESULT __stdcall SHLoadNonloadedIconOverlayIdentifiers(void);




















extern "C" __declspec(dllimport) HRESULT __stdcall SHIsFileAvailableOffline(LPCWSTR pwszPath, LPDWORD pdwStatus);




                                            
                                            

#line 851 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"



extern "C" __declspec(dllimport) HRESULT __stdcall SHSetLocalizedName(LPWSTR pszPath, LPCWSTR pszResModule, int idsRes);



























#line 883 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


















#line 902 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


}
#line 906 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 909 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"
#line 910 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

#line 912 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shellapi.h"

#line 26 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
#line 27 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"





















#pragma component(minrebuild, off)
#line 24 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"











#line 36 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"


































































































#line 135 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"






#line 142 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"
















































































#line 223 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"




























#line 252 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"















	








	




















#line 298 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"
















































































































































































#line 475 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"



































#line 511 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"

























































#line 569 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"



















	




















































































































































































#pragma component(minrebuild, on)
#line 771 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"

#line 773 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxres.h"


#line 30 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
#line 31 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"






#pragma component(minrebuild, off)
#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

#pragma component(mintypeinfo, on)
#line 42 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


#pragma comment(lib, "uuid.lib")
#line 46 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"








#pragma pack(push, 4)
#line 56 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"




class CSize;
class CPoint;
class CRect;


	
		
			class CResourceException;
			class CUserException;    

	class CGdiObject;            
		class CPen;              
		class CBrush;            
		class CFont;             
		class CBitmap;           
		class CPalette;          
		class CRgn;              

	class CDC;                   
		class CClientDC;         
		class CWindowDC;         
		class CPaintDC;          

	class CMenu;                 

	class CCmdTarget;            
		class CWnd;                 
			class CDialog;          

			
			class CStatic;          
			class CButton;          
			class CListBox;         
				class CCheckListBox;
			class CComboBox;        
			class CEdit;            
			class CScrollBar;       

			
			class CFrameWnd;        
				class CMDIFrameWnd; 
				class CMDIChildWnd; 
				class CMiniFrameWnd;

			
			class CView;            
				class CScrollView;  

		class CWinThread;           
			class CWinApp;          

		class CDocTemplate;         
			class CSingleDocTemplate;
			class CMultiDocTemplate; 

		class CDocument;            



class CCmdUI;           
class CDataExchange;    
class CCommandLineInfo; 
class CDocManager;      






#line 130 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"







class CSize : public tagSIZE
{
public:


	
	CSize();
	
	CSize(int initCX, int initCY);
	
	CSize(SIZE initSize);
	
	CSize(POINT initPt);
	
	CSize(DWORD dwSize);


	BOOL operator==(SIZE size) const;
	BOOL operator!=(SIZE size) const;
	void operator+=(SIZE size);
	void operator-=(SIZE size);


	CSize operator+(SIZE size) const;
	CSize operator-(SIZE size) const;
	CSize operator-() const;


	CPoint operator+(POINT point) const;
	CPoint operator-(POINT point) const;


	CRect operator+(const RECT* lpRect) const;
	CRect operator-(const RECT* lpRect) const;
};




class CPoint : public tagPOINT
{
public:


	
	CPoint();
	
	CPoint(int initX, int initY);
	
	CPoint(POINT initPt);
	
	CPoint(SIZE initSize);
	
	CPoint(DWORD dwPoint);




	void Offset(int xOffset, int yOffset);
	void Offset(POINT point);
	void Offset(SIZE size);

	BOOL operator==(POINT point) const;
	BOOL operator!=(POINT point) const;
	void operator+=(SIZE size);
	void operator-=(SIZE size);
	void operator+=(POINT point);
	void operator-=(POINT point);


	CPoint operator+(SIZE size) const;
	CPoint operator-(SIZE size) const;
	CPoint operator-() const;
	CPoint operator+(POINT point) const;


	CSize operator-(POINT point) const;


	CRect operator+(const RECT* lpRect) const;
	CRect operator-(const RECT* lpRect) const;
};




typedef const RECT* LPCRECT;    

class CRect : public tagRECT
{
public:



	
	CRect();
	
	CRect(int l, int t, int r, int b);
	
	CRect(const RECT& srcRect);
	
	CRect(LPCRECT lpSrcRect);
	
	CRect(POINT point, SIZE size);
	
	CRect(POINT topLeft, POINT bottomRight);



	
	int Width() const;
	
	int Height() const;
	
	CSize Size() const;
	
	CPoint& TopLeft();
	
	CPoint& BottomRight();
	
	const CPoint& TopLeft() const;
	
	const CPoint& BottomRight() const;
	
	CPoint CenterPoint() const;
	
	void SwapLeftRight();
	static void SwapLeftRight(LPRECT lpRect);

	
	operator LPRECT();
	operator LPCRECT() const;

	
	BOOL IsRectEmpty() const;
	
	BOOL IsRectNull() const;
	
	BOOL PtInRect(POINT point) const;



	
	void SetRect(int x1, int y1, int x2, int y2);
	void SetRect(POINT topLeft, POINT bottomRight);
	
	void SetRectEmpty();
	
	void CopyRect(LPCRECT lpSrcRect);
	
	BOOL EqualRect(LPCRECT lpRect) const;

	
	
	void InflateRect(int x, int y);
	void InflateRect(SIZE size);
	void InflateRect(LPCRECT lpRect);
	void InflateRect(int l, int t, int r, int b);
	
	
	void DeflateRect(int x, int y);
	void DeflateRect(SIZE size);
	void DeflateRect(LPCRECT lpRect);
	void DeflateRect(int l, int t, int r, int b);

	
	void OffsetRect(int x, int y);
	void OffsetRect(SIZE size);
	void OffsetRect(POINT point);
	void NormalizeRect();

	
	BOOL IntersectRect(LPCRECT lpRect1, LPCRECT lpRect2);

	
	BOOL UnionRect(LPCRECT lpRect1, LPCRECT lpRect2);

	
	BOOL SubtractRect(LPCRECT lpRectSrc1, LPCRECT lpRectSrc2);


	void operator=(const RECT& srcRect);
	BOOL operator==(const RECT& rect) const;
	BOOL operator!=(const RECT& rect) const;
	void operator+=(POINT point);
	void operator+=(SIZE size);
	void operator+=(LPCRECT lpRect);
	void operator-=(POINT point);
	void operator-=(SIZE size);
	void operator-=(LPCRECT lpRect);
	void operator&=(const RECT& rect);
	void operator|=(const RECT& rect);


	CRect operator+(POINT point) const;
	CRect operator-(POINT point) const;
	CRect operator+(LPCRECT lpRect) const;
	CRect operator+(SIZE size) const;
	CRect operator-(SIZE size) const;
	CRect operator-(LPCRECT lpRect) const;
	CRect operator&(const RECT& rect2) const;
	CRect operator|(const RECT& rect2) const;
	CRect MulDiv(int nMultiplier, int nDivisor) const;
};









CArchive& __stdcall operator<<(CArchive& ar, SIZE size);
CArchive& __stdcall operator<<(CArchive& ar, POINT point);
CArchive& __stdcall operator<<(CArchive& ar, const RECT& rect);
CArchive& __stdcall operator>>(CArchive& ar, SIZE& size);
CArchive& __stdcall operator>>(CArchive& ar, POINT& point);
CArchive& __stdcall operator>>(CArchive& ar, RECT& rect);




class CResourceException : public CSimpleException    
{
	public: static const  CRuntimeClass classCResourceException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CResourceException();


public:
	CResourceException(BOOL bAutoDelete);
	CResourceException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CResourceException();
};

class CUserException : public CSimpleException   
{
	public: static const  CRuntimeClass classCUserException; virtual CRuntimeClass* GetRuntimeClass() const;
public:
	CUserException();


public:
	CUserException(BOOL bAutoDelete);
	CUserException(BOOL bAutoDelete, UINT nResourceID);
	virtual ~CUserException();
};

void __stdcall AfxThrowResourceException();
void __stdcall AfxThrowUserException();




class CGdiObject : public CObject
{
	public: static const  CRuntimeClass classCGdiObject; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
public:


	HGDIOBJ m_hObject;                  
	operator HGDIOBJ() const;
	HGDIOBJ GetSafeHandle() const;

	static CGdiObject* __stdcall FromHandle(HGDIOBJ hObject);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HGDIOBJ hObject);
	HGDIOBJ Detach();


	CGdiObject(); 
	BOOL DeleteObject();


	int GetObjectA(int nCount, LPVOID lpObject) const;
	UINT GetObjectType() const;
	BOOL CreateStockObject(int nIndex);
	BOOL UnrealizeObject();
	BOOL operator==(const CGdiObject& obj) const;
	BOOL operator!=(const CGdiObject& obj) const;


public:
	virtual ~CGdiObject();




};




class CPen : public CGdiObject
{
	public: static const  CRuntimeClass classCPen; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CPen* __stdcall FromHandle(HPEN hPen);


	CPen();
	CPen(int nPenStyle, int nWidth, COLORREF crColor);
	CPen(int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush,
		int nStyleCount = 0, const DWORD* lpStyle = 0);
	BOOL CreatePen(int nPenStyle, int nWidth, COLORREF crColor);
	BOOL CreatePen(int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush,
		int nStyleCount = 0, const DWORD* lpStyle = 0);
	BOOL CreatePenIndirect(LPLOGPEN lpLogPen);


	operator HPEN() const;
	int GetLogPen(LOGPEN* pLogPen);
	int GetExtLogPen(EXTLOGPEN* pLogPen);


public:
	virtual ~CPen();



};

class CBrush : public CGdiObject
{
	public: static const  CRuntimeClass classCBrush; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CBrush* __stdcall FromHandle(HBRUSH hBrush);


	CBrush();
	CBrush(COLORREF crColor);             
	CBrush(int nIndex, COLORREF crColor); 
	CBrush(CBitmap* pBitmap);          

	BOOL CreateSolidBrush(COLORREF crColor);
	BOOL CreateHatchBrush(int nIndex, COLORREF crColor);
	BOOL CreateBrushIndirect(const LOGBRUSH* lpLogBrush);
	BOOL CreatePatternBrush(CBitmap* pBitmap);
	BOOL CreateDIBPatternBrush(HGLOBAL hPackedDIB, UINT nUsage);
	BOOL CreateDIBPatternBrush(const void* lpPackedDIB, UINT nUsage);
	BOOL CreateSysColorBrush(int nIndex);


	operator HBRUSH() const;
	int GetLogBrush(LOGBRUSH* pLogBrush);


public:
	virtual ~CBrush();



};

class CFont : public CGdiObject
{
	public: static const  CRuntimeClass classCFont; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CFont* __stdcall FromHandle(HFONT hFont);


	CFont();
	BOOL CreateFontIndirectA(const LOGFONT* lpLogFont);
	BOOL CreateFontA(int nHeight, int nWidth, int nEscapement,
			int nOrientation, int nWeight, BYTE bItalic, BYTE bUnderline,
			BYTE cStrikeOut, BYTE nCharSet, BYTE nOutPrecision,
			BYTE nClipPrecision, BYTE nQuality, BYTE nPitchAndFamily,
			LPCTSTR lpszFacename);
	BOOL CreatePointFont(int nPointSize, LPCTSTR lpszFaceName, CDC* pDC = 0);
	BOOL CreatePointFontIndirect(const LOGFONT* lpLogFont, CDC* pDC = 0);


	operator HFONT() const;
	int GetLogFont(LOGFONT* pLogFont);


public:
	virtual ~CFont();



};

class CBitmap : public CGdiObject
{
	public: static const  CRuntimeClass classCBitmap; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CBitmap* __stdcall FromHandle(HBITMAP hBitmap);


	CBitmap();

	BOOL LoadBitmapA(LPCTSTR lpszResourceName);
	BOOL LoadBitmapA(UINT nIDResource);
	BOOL LoadOEMBitmap(UINT nIDBitmap); 
	BOOL LoadMappedBitmap(UINT nIDBitmap, UINT nFlags = 0,
		LPCOLORMAP lpColorMap = 0, int nMapSize = 0);
	BOOL CreateBitmap(int nWidth, int nHeight, UINT nPlanes, UINT nBitcount,
			const void* lpBits);
	BOOL CreateBitmapIndirect(LPBITMAP lpBitmap);
	BOOL CreateCompatibleBitmap(CDC* pDC, int nWidth, int nHeight);
	BOOL CreateDiscardableBitmap(CDC* pDC, int nWidth, int nHeight);


	operator HBITMAP() const;
	int GetBitmap(BITMAP* pBitMap);


	DWORD SetBitmapBits(DWORD dwCount, const void* lpBits);
	DWORD GetBitmapBits(DWORD dwCount, LPVOID lpBits) const;
	CSize SetBitmapDimension(int nWidth, int nHeight);
	CSize GetBitmapDimension() const;


public:
	virtual ~CBitmap();



};

class CPalette : public CGdiObject
{
	public: static const  CRuntimeClass classCPalette; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CPalette* __stdcall FromHandle(HPALETTE hPalette);


	CPalette();
	BOOL CreatePalette(LPLOGPALETTE lpLogPalette);
	BOOL CreateHalftonePalette(CDC* pDC);


	operator HPALETTE() const;
	int GetEntryCount();
	UINT GetPaletteEntries(UINT nStartIndex, UINT nNumEntries,
			LPPALETTEENTRY lpPaletteColors) const;
	UINT SetPaletteEntries(UINT nStartIndex, UINT nNumEntries,
			LPPALETTEENTRY lpPaletteColors);


	void AnimatePalette(UINT nStartIndex, UINT nNumEntries,
			LPPALETTEENTRY lpPaletteColors);
	UINT GetNearestPaletteIndex(COLORREF crColor) const;
	BOOL ResizePalette(UINT nNumEntries);


	virtual ~CPalette();
};

class CRgn : public CGdiObject
{
	public: static const  CRuntimeClass classCRgn; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	static CRgn* __stdcall FromHandle(HRGN hRgn);
	operator HRGN() const;


	CRgn();
	BOOL CreateRectRgn(int x1, int y1, int x2, int y2);
	BOOL CreateRectRgnIndirect(LPCRECT lpRect);
	BOOL CreateEllipticRgn(int x1, int y1, int x2, int y2);
	BOOL CreateEllipticRgnIndirect(LPCRECT lpRect);
	BOOL CreatePolygonRgn(LPPOINT lpPoints, int nCount, int nMode);
	BOOL CreatePolyPolygonRgn(LPPOINT lpPoints, LPINT lpPolyCounts,
			int nCount, int nPolyFillMode);
	BOOL CreateRoundRectRgn(int x1, int y1, int x2, int y2, int x3, int y3);
	BOOL CreateFromPath(CDC* pDC);
	BOOL CreateFromData(const XFORM* lpXForm, int nCount,
		const RGNDATA* pRgnData);


	void SetRectRgn(int x1, int y1, int x2, int y2);
	void SetRectRgn(LPCRECT lpRect);
	int CombineRgn(CRgn* pRgn1, CRgn* pRgn2, int nCombineMode);
	int CopyRgn(CRgn* pRgnSrc);
	BOOL EqualRgn(CRgn* pRgn) const;
	int OffsetRgn(int x, int y);
	int OffsetRgn(POINT point);
	int GetRgnBox(LPRECT lpRect) const;
	BOOL PtInRegion(int x, int y) const;
	BOOL PtInRegion(POINT point) const;
	BOOL RectInRegion(LPCRECT lpRect) const;
	int GetRegionData(LPRGNDATA lpRgnData, int nCount) const;


	virtual ~CRgn();
};




class CDC : public CObject
{
	public: static const  CRuntimeClass classCDC; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
public:


	HDC m_hDC;          
	HDC m_hAttribDC;    
	operator HDC() const;
	HDC GetSafeHdc() const; 
	CWnd* GetWindow() const;

	static CDC* __stdcall FromHandle(HDC hDC);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HDC hDC);   
	HDC Detach();

	virtual void SetAttribDC(HDC hDC);  
	virtual void SetOutputDC(HDC hDC);  
	virtual void ReleaseAttribDC();     
	virtual void ReleaseOutputDC();     

	BOOL IsPrinting() const;            

	CPen* GetCurrentPen() const;
	CBrush* GetCurrentBrush() const;
	CPalette* GetCurrentPalette() const;
	CFont* GetCurrentFont() const;
	CBitmap* GetCurrentBitmap() const;

	
	DWORD GetLayout() const;
	DWORD SetLayout(DWORD dwLayout);


	CDC();
	BOOL CreateDCA(LPCTSTR lpszDriverName, LPCTSTR lpszDeviceName,
		LPCTSTR lpszOutput, const void* lpInitData);
	BOOL CreateICA(LPCTSTR lpszDriverName, LPCTSTR lpszDeviceName,
		LPCTSTR lpszOutput, const void* lpInitData);
	BOOL CreateCompatibleDC(CDC* pDC);

	BOOL DeleteDC();


	virtual int SaveDC();
	virtual BOOL RestoreDC(int nSavedDC);
	int GetDeviceCaps(int nIndex) const;
	UINT SetBoundsRect(LPCRECT lpRectBounds, UINT flags);
	UINT GetBoundsRect(LPRECT lpRectBounds, UINT flags);
	BOOL ResetDCA(const DEVMODE* lpDevMode);


	CPoint GetBrushOrg() const;
	CPoint SetBrushOrg(int x, int y);
	CPoint SetBrushOrg(POINT point);
	int EnumObjects(int nObjectType,
			int (__stdcall* lpfn)(LPVOID, LPARAM), LPARAM lpData);


public:
	virtual CGdiObject* SelectStockObject(int nIndex);
	CPen* SelectObject(CPen* pPen);
	CBrush* SelectObject(CBrush* pBrush);
	virtual CFont* SelectObject(CFont* pFont);
	CBitmap* SelectObject(CBitmap* pBitmap);
	int SelectObject(CRgn* pRgn);       
	CGdiObject* SelectObject(CGdiObject* pObject);
		


	COLORREF GetNearestColor(COLORREF crColor) const;
	CPalette* SelectPalette(CPalette* pPalette, BOOL bForceBackground);
	UINT RealizePalette();
	void UpdateColors();


	COLORREF GetBkColor() const;
	int GetBkMode() const;
	int GetPolyFillMode() const;
	int GetROP2() const;
	int GetStretchBltMode() const;
	COLORREF GetTextColor() const;

	virtual COLORREF SetBkColor(COLORREF crColor);
	int SetBkMode(int nBkMode);
	int SetPolyFillMode(int nPolyFillMode);
	int SetROP2(int nDrawMode);
	int SetStretchBltMode(int nStretchMode);
	virtual COLORREF SetTextColor(COLORREF crColor);

	BOOL GetColorAdjustment(LPCOLORADJUSTMENT lpColorAdjust) const;
	BOOL SetColorAdjustment(const COLORADJUSTMENT* lpColorAdjust);


	int GetMapMode() const;
	CPoint GetViewportOrg() const;
	virtual int SetMapMode(int nMapMode);
	
	virtual CPoint SetViewportOrg(int x, int y);
			CPoint SetViewportOrg(POINT point);
	virtual CPoint OffsetViewportOrg(int nWidth, int nHeight);

	
	CSize GetViewportExt() const;
	virtual CSize SetViewportExt(int cx, int cy);
			CSize SetViewportExt(SIZE size);
	virtual CSize ScaleViewportExt(int xNum, int xDenom, int yNum, int yDenom);

	
	CPoint GetWindowOrg() const;
	CPoint SetWindowOrg(int x, int y);
	CPoint SetWindowOrg(POINT point);
	CPoint OffsetWindowOrg(int nWidth, int nHeight);

	
	CSize GetWindowExt() const;
	virtual CSize SetWindowExt(int cx, int cy);
			CSize SetWindowExt(SIZE size);
	virtual CSize ScaleWindowExt(int xNum, int xDenom, int yNum, int yDenom);


	void DPtoLP(LPPOINT lpPoints, int nCount = 1) const;
	void DPtoLP(LPRECT lpRect) const;
	void DPtoLP(LPSIZE lpSize) const;
	void LPtoDP(LPPOINT lpPoints, int nCount = 1) const;
	void LPtoDP(LPRECT lpRect) const;
	void LPtoDP(LPSIZE lpSize) const;


	void DPtoHIMETRIC(LPSIZE lpSize) const;
	void LPtoHIMETRIC(LPSIZE lpSize) const;
	void HIMETRICtoDP(LPSIZE lpSize) const;
	void HIMETRICtoLP(LPSIZE lpSize) const;


	BOOL FillRgn(CRgn* pRgn, CBrush* pBrush);
	BOOL FrameRgn(CRgn* pRgn, CBrush* pBrush, int nWidth, int nHeight);
	BOOL InvertRgn(CRgn* pRgn);
	BOOL PaintRgn(CRgn* pRgn);


	virtual int GetClipBox(LPRECT lpRect) const;
	virtual BOOL PtVisible(int x, int y) const;
			BOOL PtVisible(POINT point) const;
	virtual BOOL RectVisible(LPCRECT lpRect) const;
			int SelectClipRgn(CRgn* pRgn);
			int ExcludeClipRect(int x1, int y1, int x2, int y2);
			int ExcludeClipRect(LPCRECT lpRect);
			int ExcludeUpdateRgn(CWnd* pWnd);
			int IntersectClipRect(int x1, int y1, int x2, int y2);
			int IntersectClipRect(LPCRECT lpRect);
			int OffsetClipRgn(int x, int y);
			int OffsetClipRgn(SIZE size);
	int SelectClipRgn(CRgn* pRgn, int nMode);


	CPoint GetCurrentPosition() const;
	CPoint MoveTo(int x, int y);
	CPoint MoveTo(POINT point);
	BOOL LineTo(int x, int y);
	BOOL LineTo(POINT point);
	BOOL Arc(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
	BOOL Arc(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
	BOOL Polyline(LPPOINT lpPoints, int nCount);

	BOOL AngleArc(int x, int y, int nRadius, float fStartAngle, float fSweepAngle);
	BOOL ArcTo(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
	BOOL ArcTo(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
	int GetArcDirection() const;
	int SetArcDirection(int nArcDirection);

	BOOL PolyDraw(const POINT* lpPoints, const BYTE* lpTypes, int nCount);
	BOOL PolylineTo(const POINT* lpPoints, int nCount);
	BOOL PolyPolyline(const POINT* lpPoints,
		const DWORD* lpPolyPoints, int nCount);

	BOOL PolyBezier(const POINT* lpPoints, int nCount);
	BOOL PolyBezierTo(const POINT* lpPoints, int nCount);


	void FillRect(LPCRECT lpRect, CBrush* pBrush);
	void FrameRect(LPCRECT lpRect, CBrush* pBrush);
	void InvertRect(LPCRECT lpRect);
	BOOL DrawIcon(int x, int y, HICON hIcon);
	BOOL DrawIcon(POINT point, HICON hIcon);

	BOOL DrawState(CPoint pt, CSize size, HBITMAP hBitmap, UINT nFlags,
		HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, CBitmap* pBitmap, UINT nFlags,
		CBrush* pBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, HICON hIcon, UINT nFlags,
		HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, HICON hIcon, UINT nFlags,
		CBrush* pBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, LPCTSTR lpszText, UINT nFlags,
		BOOL bPrefixText = 1, int nTextLen = 0, HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, LPCTSTR lpszText, UINT nFlags,
		BOOL bPrefixText = 1, int nTextLen = 0, CBrush* pBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, DRAWSTATEPROC lpDrawProc,
		LPARAM lData, UINT nFlags, HBRUSH hBrush = 0);
	BOOL DrawState(CPoint pt, CSize size, DRAWSTATEPROC lpDrawProc,
		LPARAM lData, UINT nFlags, CBrush* pBrush = 0);
#line 840 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	BOOL Chord(int x1, int y1, int x2, int y2, int x3, int y3,
		int x4, int y4);
	BOOL Chord(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
	void DrawFocusRect(LPCRECT lpRect);
	BOOL Ellipse(int x1, int y1, int x2, int y2);
	BOOL Ellipse(LPCRECT lpRect);
	BOOL Pie(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
	BOOL Pie(LPCRECT lpRect, POINT ptStart, POINT ptEnd);
	BOOL Polygon(LPPOINT lpPoints, int nCount);
	BOOL PolyPolygon(LPPOINT lpPoints, LPINT lpPolyCounts, int nCount);
	BOOL Rectangle(int x1, int y1, int x2, int y2);
	BOOL Rectangle(LPCRECT lpRect);
	BOOL RoundRect(int x1, int y1, int x2, int y2, int x3, int y3);
	BOOL RoundRect(LPCRECT lpRect, POINT point);


	BOOL PatBlt(int x, int y, int nWidth, int nHeight, DWORD dwRop);
	BOOL BitBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
		int xSrc, int ySrc, DWORD dwRop);
	BOOL StretchBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
		int xSrc, int ySrc, int nSrcWidth, int nSrcHeight, DWORD dwRop);
	COLORREF GetPixel(int x, int y) const;
	COLORREF GetPixel(POINT point) const;
	COLORREF SetPixel(int x, int y, COLORREF crColor);
	COLORREF SetPixel(POINT point, COLORREF crColor);
	BOOL FloodFill(int x, int y, COLORREF crColor);
	BOOL ExtFloodFill(int x, int y, COLORREF crColor, UINT nFillType);
	BOOL MaskBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
		int xSrc, int ySrc, CBitmap& maskBitmap, int xMask, int yMask,
		DWORD dwRop);
	BOOL PlgBlt(LPPOINT lpPoint, CDC* pSrcDC, int xSrc, int ySrc,
		int nWidth, int nHeight, CBitmap& maskBitmap, int xMask, int yMask);
	BOOL SetPixelV(int x, int y, COLORREF crColor);
	BOOL SetPixelV(POINT point, COLORREF crColor);


	virtual BOOL TextOutA(int x, int y, LPCTSTR lpszString, int nCount);
			BOOL TextOutA(int x, int y, const CString& str);
	virtual BOOL ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
				LPCTSTR lpszString, UINT nCount, LPINT lpDxWidths);
			BOOL ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
				const CString& str, LPINT lpDxWidths);
	virtual CSize TabbedTextOutA(int x, int y, LPCTSTR lpszString, int nCount,
				int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin);
			CSize TabbedTextOutA(int x, int y, const CString& str,
				int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin);
	virtual int DrawTextA(LPCTSTR lpszString, int nCount, LPRECT lpRect,
				UINT nFormat);
			int DrawTextA(const CString& str, LPRECT lpRect, UINT nFormat);
	CSize GetTextExtent(LPCTSTR lpszString, int nCount) const;
	CSize GetTextExtent(const CString& str) const;
	CSize GetOutputTextExtent(LPCTSTR lpszString, int nCount) const;
	CSize GetOutputTextExtent(const CString& str) const;
	CSize GetTabbedTextExtentA(LPCTSTR lpszString, int nCount,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	CSize GetTabbedTextExtentA(const CString& str,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	CSize GetOutputTabbedTextExtent(LPCTSTR lpszString, int nCount,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	CSize GetOutputTabbedTextExtent(const CString& str,
		int nTabPositions, LPINT lpnTabStopPositions) const;
	virtual BOOL GrayStringA(CBrush* pBrush,
		BOOL (__stdcall* lpfnOutput)(HDC, LPARAM, int), LPARAM lpData,
			int nCount, int x, int y, int nWidth, int nHeight);
	UINT GetTextAlign() const;
	UINT SetTextAlign(UINT nFlags);
	int GetTextFaceA(int nCount, LPTSTR lpszFacename) const;
	int GetTextFaceA(CString& rString) const;
	BOOL GetTextMetricsA(LPTEXTMETRIC lpMetrics) const;
	BOOL GetOutputTextMetrics(LPTEXTMETRIC lpMetrics) const;
	int SetTextJustification(int nBreakExtra, int nBreakCount);
	int GetTextCharacterExtra() const;
	int SetTextCharacterExtra(int nCharExtra);



	BOOL DrawEdge(LPRECT lpRect, UINT nEdge, UINT nFlags);
	BOOL DrawFrameControl(LPRECT lpRect, UINT nType, UINT nState);
#line 921 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	BOOL ScrollDC(int dx, int dy, LPCRECT lpRectScroll, LPCRECT lpRectClip,
		CRgn* pRgnUpdate, LPRECT lpRectUpdate);


	BOOL GetCharWidthA(UINT nFirstChar, UINT nLastChar, LPINT lpBuffer) const;
	BOOL GetOutputCharWidth(UINT nFirstChar, UINT nLastChar, LPINT lpBuffer) const;
	DWORD SetMapperFlags(DWORD dwFlag);
	CSize GetAspectRatioFilter() const;

	BOOL GetCharABCWidthsA(UINT nFirstChar, UINT nLastChar, LPABC lpabc) const;
	DWORD GetFontData(DWORD dwTable, DWORD dwOffset, LPVOID lpData, DWORD cbData) const;
	int GetKerningPairsA(int nPairs, LPKERNINGPAIR lpkrnpair) const;
	UINT GetOutlineTextMetricsA(UINT cbData, LPOUTLINETEXTMETRIC lpotm) const;
	DWORD GetGlyphOutlineA(UINT nChar, UINT nFormat, LPGLYPHMETRICS lpgm,
		DWORD cbBuffer, LPVOID lpBuffer, const MAT2* lpmat2) const;

	BOOL GetCharABCWidthsA(UINT nFirstChar, UINT nLastChar,
		LPABCFLOAT lpABCF) const;
	BOOL GetCharWidthA(UINT nFirstChar, UINT nLastChar,
		float* lpFloatBuffer) const;


	virtual int Escape(int nEscape, int nCount,
		LPCSTR lpszInData, LPVOID lpOutData);
	int Escape(int nEscape, int nInputSize, LPCSTR lpszInputData,
		int nOutputSize, LPSTR lpszOutputData);
	int DrawEscape(int nEscape, int nInputSize, LPCSTR lpszInputData);

	
	int StartDocA(LPCTSTR lpszDocName);  
	int StartDocA(LPDOCINFO lpDocInfo);
	int StartPage();
	int EndPage();
	int SetAbortProc(BOOL (__stdcall* lpfn)(HDC, int));
	int AbortDoc();
	int EndDoc();


	BOOL PlayMetaFile(HMETAFILE hMF);
	BOOL PlayMetaFile(HENHMETAFILE hEnhMetaFile, LPCRECT lpBounds);
	BOOL AddMetaFileComment(UINT nDataSize, const BYTE* pCommentData);
		


	BOOL AbortPath();
	BOOL BeginPath();
	BOOL CloseFigure();
	BOOL EndPath();
	BOOL FillPath();
	BOOL FlattenPath();
	BOOL StrokeAndFillPath();
	BOOL StrokePath();
	BOOL WidenPath();
	float GetMiterLimit() const;
	BOOL SetMiterLimit(float fMiterLimit);
	int GetPath(LPPOINT lpPoints, LPBYTE lpTypes, int nCount) const;
	BOOL SelectClipPath(int nMode);


	static CBrush* __stdcall GetHalftoneBrush();
	void DrawDragRect(LPCRECT lpRect, SIZE size,
		LPCRECT lpRectLast, SIZE sizeLast,
		CBrush* pBrush = 0, CBrush* pBrushLast = 0);
	void FillSolidRect(LPCRECT lpRect, COLORREF clr);
	void FillSolidRect(int x, int y, int cx, int cy, COLORREF clr);
	void Draw3dRect(LPCRECT lpRect, COLORREF clrTopLeft, COLORREF clrBottomRight);
	void Draw3dRect(int x, int y, int cx, int cy,
		COLORREF clrTopLeft, COLORREF clrBottomRight);


public:
	virtual ~CDC();





	
	BOOL m_bPrinting;
	HGDIOBJ SelectObject(HGDIOBJ);      

protected:
	
	static CGdiObject* __stdcall SelectGdiObject(HDC hDC, HGDIOBJ h);
};




class CPaintDC : public CDC
{
	public: static const  CRuntimeClass classCPaintDC; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPaintDC(CWnd* pWnd);   


protected:
	HWND m_hWnd;
public:
	PAINTSTRUCT m_ps;       


public:
	virtual ~CPaintDC();




};

class CClientDC : public CDC
{
	public: static const  CRuntimeClass classCClientDC; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CClientDC(CWnd* pWnd);


protected:
	HWND m_hWnd;


public:
	virtual ~CClientDC();




};

class CWindowDC : public CDC
{
	public: static const  CRuntimeClass classCWindowDC; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CWindowDC(CWnd* pWnd);


protected:
	HWND m_hWnd;


public:
	virtual ~CWindowDC();




};




class CMenu : public CObject
{
	public: static const  CRuntimeClass classCMenu; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
public:


	CMenu();

	BOOL CreateMenu();
	BOOL CreatePopupMenu();
	BOOL LoadMenuA(LPCTSTR lpszResourceName);
	BOOL LoadMenuA(UINT nIDResource);
	BOOL LoadMenuIndirectA(const void* lpMenuTemplate);
	BOOL DestroyMenu();


	HMENU m_hMenu;          
	HMENU GetSafeHmenu() const;
	operator HMENU() const;

	static CMenu* __stdcall FromHandle(HMENU hMenu);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HMENU hMenu);
	HMENU Detach();


	BOOL DeleteMenu(UINT nPosition, UINT nFlags);
	BOOL TrackPopupMenu(UINT nFlags, int x, int y,
						CWnd* pWnd, LPCRECT lpRect = 0);
	BOOL operator==(const CMenu& menu) const;
	BOOL operator!=(const CMenu& menu) const;


	BOOL AppendMenuA(UINT nFlags, UINT nIDNewItem = 0,
					LPCTSTR lpszNewItem = 0);
	BOOL AppendMenuA(UINT nFlags, UINT nIDNewItem, const CBitmap* pBmp);
	UINT CheckMenuItem(UINT nIDCheckItem, UINT nCheck);
	UINT EnableMenuItem(UINT nIDEnableItem, UINT nEnable);
	UINT GetMenuItemCount() const;
	UINT GetMenuItemID(int nPos) const;
	UINT GetMenuState(UINT nID, UINT nFlags) const;
	int GetMenuStringA(UINT nIDItem, LPTSTR lpString, int nMaxCount,
					UINT nFlags) const;
	int GetMenuStringA(UINT nIDItem, CString& rString, UINT nFlags) const;
	BOOL GetMenuItemInfoA(UINT nIDItem, LPMENUITEMINFO lpMenuItemInfo,
					BOOL fByPos = 0);
	CMenu* GetSubMenu(int nPos) const;
	BOOL InsertMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem = 0,
					LPCTSTR lpszNewItem = 0);
	BOOL InsertMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem,
					const CBitmap* pBmp);
	BOOL ModifyMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem = 0,
					LPCTSTR lpszNewItem = 0);
	BOOL ModifyMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem,
					const CBitmap* pBmp);
	BOOL RemoveMenu(UINT nPosition, UINT nFlags);
	BOOL SetMenuItemBitmaps(UINT nPosition, UINT nFlags,
					const CBitmap* pBmpUnchecked, const CBitmap* pBmpChecked);
	BOOL CheckMenuRadioItem(UINT nIDFirst, UINT nIDLast, UINT nIDItem, UINT nFlags);
	BOOL SetDefaultItem(UINT uItem, BOOL fByPos = 0);
	UINT GetDefaultItem(UINT gmdiFlags, BOOL fByPos = 0);


	BOOL SetMenuContextHelpId(DWORD dwContextHelpId);
	DWORD GetMenuContextHelpId() const;


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);


public:
	virtual ~CMenu();




	static CMenu* __stdcall CMenu::FromHandlePermanent(HMENU hMenu);
};




struct AFX_MSGMAP_ENTRY;       

struct AFX_MSGMAP
{



	const AFX_MSGMAP* pBaseMap;
#line 1172 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	const AFX_MSGMAP_ENTRY* lpEntries;
};


















#line 1193 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"





















#line 1215 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"






#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmsg_.h"












































enum AfxSig
{
	AfxSig_end = 0,     

	AfxSig_bD,      
	AfxSig_bb,      
	AfxSig_bWww,    
	AfxSig_hDWw,    
	AfxSig_hDw,     
	AfxSig_iwWw,    
	AfxSig_iww,     
	AfxSig_iWww,    
	AfxSig_is,      
	AfxSig_lwl,     
	AfxSig_lwwM,    
	AfxSig_vv,      

	AfxSig_vw,      
	AfxSig_vww,     
	AfxSig_vvii,    
	AfxSig_vwww,    
	AfxSig_vwii,    
	AfxSig_vwl,     
	AfxSig_vbWW,    
	AfxSig_vD,      
	AfxSig_vM,      
	AfxSig_vMwb,    

	AfxSig_vW,      
	AfxSig_vWww,    
	AfxSig_vWp,     
	AfxSig_vWh,     
	AfxSig_vwW,     
	AfxSig_vwWb,    
	AfxSig_vwwW,    
	AfxSig_vwwx,    
	AfxSig_vs,      
	AfxSig_vOWNER,  
	AfxSig_iis,     
	AfxSig_wp,      
	AfxSig_wv,      
	AfxSig_vPOS,    
	AfxSig_vCALC,   
	AfxSig_vNMHDRpl,    
	AfxSig_bNMHDRpl,    
	AfxSig_vwNMHDRpl,   
	AfxSig_bwNMHDRpl,   
	AfxSig_bHELPINFO,   
	AfxSig_vwSIZING,    

	
	AfxSig_cmdui,   
	AfxSig_cmduiw,  
	AfxSig_vpv,     
	AfxSig_bpv,     

	
	AfxSig_vwwh,                
	AfxSig_vwp,                 
	AfxSig_bw = AfxSig_bb,      
	AfxSig_bh = AfxSig_bb,      
	AfxSig_iw = AfxSig_bb,      
	AfxSig_ww = AfxSig_bb,      
	AfxSig_bv = AfxSig_wv,      
	AfxSig_hv = AfxSig_wv,      
	AfxSig_vb = AfxSig_vw,      
	AfxSig_vbh = AfxSig_vww,    
	AfxSig_vbw = AfxSig_vww,    
	AfxSig_vhh = AfxSig_vww,    
	AfxSig_vh = AfxSig_vw,      
	AfxSig_viSS = AfxSig_vwl,   
	AfxSig_bwl = AfxSig_lwl,
	AfxSig_vwMOVING = AfxSig_vwSIZING,  

	AfxSig_vW2,                 
	AfxSig_bWCDS,               
	AfxSig_bwsp,                
	AfxSig_vws,
};














		
		




		
		





































































































































#line 280 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmsg_.h"















































































































































































































































































































































































































































#line 1222 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"





class CDataExchange
{

public:
	BOOL m_bSaveAndValidate;   
	CWnd* m_pDlgWnd;           


	HWND PrepareCtrl(int nIDC);     
	HWND PrepareEditCtrl(int nIDC); 
	void Fail();                    


	CWnd* PrepareOleCtrl(int nIDC); 
#line 1242 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	CDataExchange(CWnd* pDlgWnd, BOOL bSaveAndValidate);

	HWND m_hWndLastControl;    
	BOOL m_bEditLastControl;   
};

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdd_.h"















class COleCurrency;    
class COleDateTime;    


void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, BYTE& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, short& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, int& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, UINT& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, long& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, DWORD& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, LPTSTR value, int nMaxLen);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, float& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, double& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, COleCurrency& value);
void __stdcall DDX_Text(CDataExchange* pDX, int nIDC, COleDateTime& value);


void __stdcall DDX_Check(CDataExchange* pDX, int nIDC, int& value);
void __stdcall DDX_Radio(CDataExchange* pDX, int nIDC, int& value);
void __stdcall DDX_LBString(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_CBString(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_LBIndex(CDataExchange* pDX, int nIDC, int& index);
void __stdcall DDX_CBIndex(CDataExchange* pDX, int nIDC, int& index);
void __stdcall DDX_LBStringExact(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_CBStringExact(CDataExchange* pDX, int nIDC, CString& value);
void __stdcall DDX_Scroll(CDataExchange* pDX, int nIDC, int& value);
void __stdcall DDX_Slider(CDataExchange* pDX, int nIDC, int& value);

void __stdcall DDX_MonthCalCtrl(CDataExchange* pDX, int nIDC, CTime& value);
void __stdcall DDX_MonthCalCtrl(CDataExchange* pDX, int nIDC, COleDateTime& value);
void __stdcall DDX_DateTimeCtrl(CDataExchange* pDX, int nIDC, CTime& value);
void __stdcall DDX_DateTimeCtrl(CDataExchange* pDX, int nIDC, COleDateTime& value);


void __stdcall DDX_Control(CDataExchange* pDX, int nIDC, CWnd& rControl);







void __stdcall DDV_MinMaxByte(CDataExchange* pDX, BYTE value, BYTE minVal, BYTE maxVal);
void __stdcall DDV_MinMaxShort(CDataExchange* pDX, short value, short minVal, short maxVal);
void __stdcall DDV_MinMaxInt(CDataExchange* pDX, int value, int minVal, int maxVal);
void __stdcall DDV_MinMaxLong(CDataExchange* pDX, long value, long minVal, long maxVal);
void __stdcall DDV_MinMaxUInt(CDataExchange* pDX, UINT value, UINT minVal, UINT maxVal);
void __stdcall DDV_MinMaxDWord(CDataExchange* pDX, DWORD value, DWORD minVal, DWORD maxVal);
void __stdcall DDV_MinMaxFloat(CDataExchange* pDX, float const& value, float minVal, float maxVal);
void __stdcall DDV_MinMaxDouble(CDataExchange* pDX, double const& value, double minVal, double maxVal);


void __stdcall DDV_MinMaxSlider(CDataExchange* pDX, DWORD value, DWORD minVal, DWORD maxVal);
void __stdcall DDV_MinMaxDateTime(CDataExchange* pDX, CTime& refValue, const CTime* refMinRange, const CTime* refMaxRange);
void __stdcall DDV_MinMaxDateTime(CDataExchange* pDX, COleDateTime& refValue, const COleDateTime* refMinRange, const COleDateTime* refMaxRange);
void __stdcall DDV_MinMaxMonth(CDataExchange* pDX, CTime& refValue, const CTime* pMinRange, const CTime* pMaxRange);
void __stdcall DDV_MinMaxMonth(CDataExchange* pDX, COleDateTime& refValue, const COleDateTime* refMinRange, const COleDateTime* refMaxRange);



void __stdcall DDV_MaxChars(CDataExchange* pDX, CString const& value, int nChars);


#line 1251 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"




typedef LONG HRESULT;

struct IUnknown;
typedef IUnknown* LPUNKNOWN;

struct IDispatch;
typedef IDispatch* LPDISPATCH;

struct IConnectionPoint;
typedef IConnectionPoint* LPCONNECTIONPOINT;

struct IEnumOLEVERB;
typedef IEnumOLEVERB* LPENUMOLEVERB;

typedef struct _GUID GUID;
typedef GUID IID;
typedef GUID CLSID;




typedef long DISPID;
typedef unsigned short VARTYPE;
typedef long SCODE;


typedef WCHAR OLECHAR;


#line 1285 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
typedef OLECHAR* BSTR;

struct tagDISPPARAMS;
typedef tagDISPPARAMS DISPPARAMS;

struct tagVARIANT;
typedef tagVARIANT VARIANT;

struct ITypeInfo;
typedef ITypeInfo* LPTYPEINFO;

struct ITypeLib;
typedef ITypeLib* LPTYPELIB;





struct AFX_CMDHANDLERINFO;  
struct AFX_EVENT;           
class CTypeLibCache;        






struct AFX_INTERFACEMAP_ENTRY
{
	const void* piid;       
	size_t nOffset;         
};

struct AFX_INTERFACEMAP
{



	const AFX_INTERFACEMAP* pBaseMap;
#line 1325 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	const AFX_INTERFACEMAP_ENTRY* pEntry; 
};



















#line 1347 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

#line 1349 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"






struct AFX_DISPMAP_ENTRY;

struct AFX_DISPMAP
{



	const AFX_DISPMAP* pBaseMap;
#line 1364 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	const AFX_DISPMAP_ENTRY* lpEntries;
	UINT* lpEntryCount;
	DWORD* lpStockPropMask;
};






















#line 1391 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

#line 1393 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"






struct AFX_OLECMDMAP_ENTRY
{
   const GUID* pguid;   
   ULONG       cmdID;   
   UINT        nID;     
};

struct AFX_OLECMDMAP
{



	const AFX_OLECMDMAP* pBaseMap;
#line 1413 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	const AFX_OLECMDMAP_ENTRY* lpEntries;
};


















#line 1434 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"





















#line 1456 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"





class COleCmdUI;

#line 1464 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"






struct AFX_EVENTSINKMAP_ENTRY;

struct AFX_EVENTSINKMAP
{



	const AFX_EVENTSINKMAP* pBaseMap;
#line 1479 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	const AFX_EVENTSINKMAP_ENTRY* lpEntries;
	UINT* lpEntryCount;
};




















#line 1503 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

#line 1505 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"






struct AFX_CONNECTIONMAP_ENTRY
{
	const void* piid;   
	size_t nOffset;         
};

struct AFX_CONNECTIONMAP
{



	const AFX_CONNECTIONMAP* pBaseMap;
#line 1524 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	const AFX_CONNECTIONMAP_ENTRY* pEntry; 
};


















#line 1545 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

#line 1547 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"





class COccManager;      
#line 1554 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"




class __declspec(novtable) CCmdTarget : public CObject
#line 1560 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
{
	public: static const  CRuntimeClass classCCmdTarget; virtual CRuntimeClass* GetRuntimeClass() const;
protected:

public:

	CCmdTarget();


	LPDISPATCH GetIDispatch(BOOL bAddRef);
		
	static CCmdTarget* __stdcall FromIDispatch(LPDISPATCH lpDispatch);
		
	BOOL IsResultExpected();
		


	void EnableAutomation();
		
	void EnableConnections();
		

	void BeginWaitCursor();
	void EndWaitCursor();
	void RestoreWaitCursor();       


	
	BOOL EnumOleVerbs(LPENUMOLEVERB* ppenumOleVerb);
	BOOL DoOleVerb(LONG iVerb, LPMSG lpMsg, HWND hWndParent, LPCRECT lpRect);
#line 1591 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	
	
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);


	
	virtual void OnFinalRelease();
#line 1602 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	
	virtual BOOL IsInvokeAllowed(DISPID dispid);
#line 1607 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	
	void EnableTypeLib();
	HRESULT GetTypeInfoOfGuid(LCID lcid, const GUID& guid,
		LPTYPEINFO* ppTypeInfo);
	virtual BOOL GetDispatchIID(IID* pIID);
	virtual UINT GetTypeInfoCount();
	virtual CTypeLibCache* GetTypeLibCache();
	virtual HRESULT GetTypeLib(LCID lcid, LPTYPELIB* ppTypeLib);
#line 1618 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


public:
	virtual ~CCmdTarget();





	void GetNotSupported();
	void SetNotSupported();
#line 1630 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

protected:
	friend class CView;

	CView* GetRoutingView();
	CFrameWnd* GetRoutingFrame();
	static CView* __stdcall GetRoutingView_();
	static CFrameWnd* __stdcall GetRoutingFrame_();
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;       


	private: static const AFX_OLECMDMAP_ENTRY _commandEntries[]; protected: static  const AFX_OLECMDMAP commandMap; virtual const AFX_OLECMDMAP* GetCommandMap() const;
	friend class COleCmdUI;
#line 1644 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	private: static const AFX_DISPMAP_ENTRY _dispatchEntries[]; static UINT _dispatchEntryCount; static DWORD _dwStockPropMask; protected: static  const AFX_DISPMAP dispatchMap; virtual const AFX_DISPMAP* GetDispatchMap() const;
	private: static const AFX_CONNECTIONMAP_ENTRY _connectionEntries[]; protected: static  const AFX_CONNECTIONMAP connectionMap; virtual const AFX_CONNECTIONMAP* GetConnectionMap() const;
	private: static const AFX_INTERFACEMAP_ENTRY _interfaceEntries[]; protected: static  const AFX_INTERFACEMAP interfaceMap; virtual const AFX_INTERFACEMAP* GetInterfaceMap() const;


	private: static const AFX_EVENTSINKMAP_ENTRY _eventsinkEntries[]; static UINT _eventsinkEntryCount; protected: static  const AFX_EVENTSINKMAP eventsinkMap; virtual const AFX_EVENTSINKMAP* GetEventSinkMap() const;
#line 1653 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	
public:
	
	long m_dwRef;
	LPUNKNOWN m_pOuterUnknown;  
	DWORD m_xInnerUnknown;  

public:
	
	void EnableAggregation();       
	void ExternalDisconnect();      
	LPUNKNOWN GetControllingUnknown();
		

	
	DWORD InternalQueryInterface(const void*, LPVOID* ppvObj);
	DWORD InternalAddRef();
	DWORD InternalRelease();
	
	DWORD ExternalQueryInterface(const void*, LPVOID* ppvObj);
	DWORD ExternalAddRef();
	DWORD ExternalRelease();

	
	LPUNKNOWN GetInterface(const void*);
	LPUNKNOWN QueryAggregates(const void*);

	
	virtual BOOL OnCreateAggregates();
	virtual LPUNKNOWN GetInterfaceHook(const void*);

	
protected:
	struct XDispatch
	{
		DWORD m_vtbl;   



	} m_xDispatch;
	BOOL m_bResultExpected;

	
	void GetStandardProp(const AFX_DISPMAP_ENTRY* pEntry,
		VARIANT* pvarResult, UINT* puArgErr);
	SCODE SetStandardProp(const AFX_DISPMAP_ENTRY* pEntry,
		DISPPARAMS* pDispParams, UINT* puArgErr);

	
	static UINT __stdcall GetEntryCount(const AFX_DISPMAP* pDispMap);
	const AFX_DISPMAP_ENTRY* __stdcall GetDispEntry(LONG memid);
	static LONG __stdcall MemberIDFromName(const AFX_DISPMAP* pDispMap, LPCTSTR lpszName);

	
	static UINT __stdcall GetStackSize(const BYTE* pbParams, VARTYPE vtResult);





	SCODE PushStackArgs(BYTE* pStack, const BYTE* pbParams,
		void* pResult, VARTYPE vtResult, DISPPARAMS* pDispParams,
		UINT* puArgErr, VARIANT* rgTempVars);
#line 1718 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	SCODE CallMemberFunc(const AFX_DISPMAP_ENTRY* pEntry, WORD wFlags,
		VARIANT* pvarResult, DISPPARAMS* pDispParams, UINT* puArgErr);

	friend class COleDispatchImpl;


public:
	
	BOOL OnEvent(UINT idCtrl, AFX_EVENT* pEvent,
		AFX_CMDHANDLERINFO* pHandlerInfo);
protected:
	const AFX_EVENTSINKMAP_ENTRY* __stdcall GetEventSinkEntry(UINT idCtrl,
		AFX_EVENT* pEvent);
#line 1732 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	
	struct XConnPtContainer
	{
		DWORD m_vtbl;   



	} m_xConnPtContainer;







	virtual BOOL GetExtraConnectionPoints(CPtrArray* pConnPoints);
	virtual LPCONNECTIONPOINT GetConnectionHook(const IID& iid);

	friend class COleConnPtContainer;

#line 1754 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
};

class CCmdUI        
{
public:

	UINT m_nID;
	UINT m_nIndex;          

	
	CMenu* m_pMenu;         
	CMenu* m_pSubMenu;      
							

	
	CWnd* m_pOther;         


	virtual void Enable(BOOL bOn = 1);
	virtual void SetCheck(int nCheck = 1);   
	virtual void SetRadio(BOOL bOn = 1);
	virtual void SetText(LPCTSTR lpszText);


	void ContinueRouting();


	CCmdUI();
	BOOL m_bEnableChanged;
	BOOL m_bContinueRouting;
	UINT m_nIndexMax;       

	CMenu* m_pParentMenu;   
							

	BOOL DoUpdate(CCmdTarget* pTarget, BOOL bDisableIfNoHndler);
};







#line 1799 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
typedef void ( CCmdTarget::*AFX_PMSG)(void);

enum AFX_DISPMAP_FLAGS
{
	afxDispCustom = 0,
	afxDispStock = 1
};

struct AFX_DISPMAP_ENTRY
{
	LPCTSTR lpszName;       
	long lDispID;           
	LPCSTR lpszParams;      
	WORD vt;                
	AFX_PMSG pfn;           
	AFX_PMSG pfnSet;        
	size_t nPropOffset;     
	AFX_DISPMAP_FLAGS flags;
};

struct AFX_EVENTSINKMAP_ENTRY
{
	AFX_DISPMAP_ENTRY dispEntry;
	UINT nCtrlIDFirst;
	UINT nCtrlIDLast;
};


enum DSCSTATE
{
	dscNoState = 0,
	dscOKToDo,
	dscCancelled,
	dscSyncBefore,
	dscAboutToDo,
	dscFailedToDo,
	dscSyncAfter,
	dscDidEvent
};

enum DSCREASON
{
	dscNoReason = 0,
	dscClose,
	dscCommit,
	dscDelete,
	dscEdit,
	dscInsert,
	dscModify,
	dscMove
};





struct CCreateContext;      
struct CPrintInfo;          

struct AFX_MSGMAP_ENTRY
{
	UINT nMessage;   
	UINT nCode;      
	UINT nID;        
	UINT nLastID;    
	UINT nSig;       
	AFX_PMSG pfn;    
};




class COleDropTarget;   
class COleControlContainer;
class COleControlSite;

























class CWnd : public CCmdTarget
{
	public: static const  CRuntimeClass classCWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();
protected:
	static const MSG* __stdcall GetCurrentMessage();


public:
	HWND m_hWnd;            
	operator HWND() const;
	BOOL operator==(const CWnd& wnd) const;
	BOOL operator!=(const CWnd& wnd) const;

	HWND GetSafeHwnd() const;
	DWORD GetStyle() const;
	DWORD GetExStyle() const;
	BOOL ModifyStyle(DWORD dwRemove, DWORD dwAdd, UINT nFlags = 0);
	BOOL ModifyStyleEx(DWORD dwRemove, DWORD dwAdd, UINT nFlags = 0);

	CWnd* GetOwner() const;
	void SetOwner(CWnd* pOwnerWnd);


	CWnd();

	static CWnd* __stdcall FromHandle(HWND hWnd);
	static CWnd* __stdcall FromHandlePermanent(HWND hWnd);
	static void __stdcall DeleteTempMap();
	BOOL Attach(HWND hWndNew);
	HWND Detach();

	
	virtual void PreSubclassWindow();
	BOOL SubclassWindow(HWND hWnd);
	BOOL SubclassDlgItem(UINT nID, CWnd* pParent);
	HWND UnsubclassWindow();

	
	BOOL ExecuteDlgInit(LPCTSTR lpszResourceName);
	BOOL ExecuteDlgInit(LPVOID lpResource);

public:
	
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = 0);

	
	BOOL CreateEx(DWORD dwExStyle, LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		int x, int y, int nWidth, int nHeight,
		HWND hWndParent, HMENU nIDorHMenu, LPVOID lpParam = 0);

	BOOL CreateEx(DWORD dwExStyle, LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		LPVOID lpParam = 0);


	
	BOOL CreateControl(const IID & clsid, LPCTSTR pszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID, CFile* pPersist=0,
		BOOL bStorage=0, BSTR bstrLicKey=0);

	BOOL CreateControl(LPCTSTR pszClass, LPCTSTR pszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID, CFile* pPersist=0,
		BOOL bStorage=0, BSTR bstrLicKey=0);

   
   BOOL CreateControl( const IID & clsid, LPCTSTR pszWindowName, DWORD dwStyle,
	  const POINT* ppt, const SIZE* psize, CWnd* pParentWnd, UINT nID,
	  CFile* pPersist = 0, BOOL bStorage = 0, BSTR bstrLicKey = 0 );

	LPUNKNOWN GetControlUnknown();
#line 1977 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	virtual BOOL DestroyWindow();

	
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);

	
	enum AdjustType { adjustBorder = 0, adjustOutside = 1 };
	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);


	int GetDlgCtrlID() const;
	int SetDlgCtrlID(int nID);
		
	CWnd* GetDlgItem(int nID) const;
		
	void GetDlgItem(int nID, HWND* phWnd) const;
		
	CWnd* GetDescendantWindow(int nID, BOOL bOnlyPerm = 0) const;
		
	void SendMessageToDescendants(UINT message, WPARAM wParam = 0,
		LPARAM lParam = 0, BOOL bDeep = 1, BOOL bOnlyPerm = 0);
	CFrameWnd* GetParentFrame() const;
	CWnd* GetTopLevelParent() const;
	CWnd* GetTopLevelOwner() const;
	CWnd* GetParentOwner() const;
	CFrameWnd* GetTopLevelFrame() const;
	static CWnd* __stdcall GetSafeOwner(CWnd* pParent = 0, HWND* pWndTop = 0);


	LRESULT SendMessageA(UINT message, WPARAM wParam = 0, LPARAM lParam = 0);
	BOOL PostMessageA(UINT message, WPARAM wParam = 0, LPARAM lParam = 0);

	BOOL SendNotifyMessageA(UINT message, WPARAM wParam, LPARAM lParam);
	BOOL SendChildNotifyLastMsg(LRESULT* pResult = 0);


	BOOL IsDialogMessageA(LPMSG lpMsg);


	void SetWindowTextA(LPCTSTR lpszString);
	int GetWindowTextA(LPTSTR lpszStringBuf, int nMaxCount) const;
	void GetWindowTextA(CString& rString) const;
	int GetWindowTextLengthA() const;
	void SetFont(CFont* pFont, BOOL bRedraw = 1);
	CFont* GetFont() const;


	CMenu* GetMenu() const;
	BOOL SetMenu(CMenu* pMenu);
	void DrawMenuBar();
	CMenu* GetSystemMenu(BOOL bRevert) const;
	BOOL HiliteMenuItem(CMenu* pMenu, UINT nIDHiliteItem, UINT nHilite);


	BOOL IsIconic() const;
	BOOL IsZoomed() const;
	void MoveWindow(int x, int y, int nWidth, int nHeight,
				BOOL bRepaint = 1);
	void MoveWindow(LPCRECT lpRect, BOOL bRepaint = 1);
	int SetWindowRgn(HRGN hRgn, BOOL bRedraw);
	int GetWindowRgn(HRGN hRgn) const;

	static  const CWnd wndTop; 
	static  const CWnd wndBottom; 
	static  const CWnd wndTopMost; 
	static  const CWnd wndNoTopMost; 

	BOOL SetWindowPos(const CWnd* pWndInsertAfter, int x, int y,
				int cx, int cy, UINT nFlags);
	UINT ArrangeIconicWindows();
	void BringWindowToTop();
	void GetWindowRect(LPRECT lpRect) const;
	void GetClientRect(LPRECT lpRect) const;

	BOOL GetWindowPlacement(WINDOWPLACEMENT* lpwndpl) const;
	BOOL SetWindowPlacement(const WINDOWPLACEMENT* lpwndpl);


	void ClientToScreen(LPPOINT lpPoint) const;
	void ClientToScreen(LPRECT lpRect) const;
	void ScreenToClient(LPPOINT lpPoint) const;
	void ScreenToClient(LPRECT lpRect) const;
	void MapWindowPoints(CWnd* pwndTo, LPPOINT lpPoint, UINT nCount) const;
	void MapWindowPoints(CWnd* pwndTo, LPRECT lpRect) const;


	CDC* BeginPaint(LPPAINTSTRUCT lpPaint);
	void EndPaint(LPPAINTSTRUCT lpPaint);
	CDC* GetDC();
	CDC* GetWindowDC();
	int ReleaseDC(CDC* pDC);
	void Print(CDC* pDC, DWORD dwFlags) const;
	void PrintClient(CDC* pDC, DWORD dwFlags) const;

	void UpdateWindow();
	void SetRedraw(BOOL bRedraw = 1);
	BOOL GetUpdateRect(LPRECT lpRect, BOOL bErase = 0);
	int GetUpdateRgn(CRgn* pRgn, BOOL bErase = 0);
	void Invalidate(BOOL bErase = 1);
	void InvalidateRect(LPCRECT lpRect, BOOL bErase = 1);
	void InvalidateRgn(CRgn* pRgn, BOOL bErase = 1);
	void ValidateRect(LPCRECT lpRect);
	void ValidateRgn(CRgn* pRgn);
	BOOL ShowWindow(int nCmdShow);
	BOOL IsWindowVisible() const;
	void ShowOwnedPopups(BOOL bShow = 1);

	CDC* GetDCEx(CRgn* prgnClip, DWORD flags);
	BOOL LockWindowUpdate();    
	void UnlockWindowUpdate();
	BOOL RedrawWindow(LPCRECT lpRectUpdate = 0,
		CRgn* prgnUpdate = 0,
		UINT flags = 0x0001 | 0x0100 | 0x0004);
	BOOL EnableScrollBar(int nSBFlags, UINT nArrowFlags = 0x0000);


	UINT SetTimer(UINT nIDEvent, UINT nElapse,
		void (__stdcall* lpfnTimer)(HWND, UINT, UINT, DWORD));
	BOOL KillTimer(int nIDEvent);


	BOOL EnableToolTips(BOOL bEnable = 1);
	BOOL EnableTrackingToolTips(BOOL bEnable = 1);
	static void __stdcall CancelToolTips(BOOL bKeys = 0);
	void FilterToolTipMessage(MSG* pMsg);

	
	virtual int OnToolHitTest(CPoint point, TTTOOLINFOA* pTI) const;


	BOOL IsWindowEnabled() const;
	BOOL EnableWindow(BOOL bEnable = 1);

	
	static CWnd* __stdcall GetActiveWindow();
	CWnd* SetActiveWindow();

	
	BOOL SetForegroundWindow();
	static CWnd* __stdcall GetForegroundWindow();

	
	static CWnd* __stdcall GetCapture();
	CWnd* SetCapture();
	static CWnd* __stdcall GetFocus();
	CWnd* SetFocus();

	static CWnd* __stdcall GetDesktopWindow();


	void CloseWindow();
	BOOL OpenIcon();



	void CheckDlgButton(int nIDButton, UINT nCheck);
	void CheckRadioButton(int nIDFirstButton, int nIDLastButton,
					int nIDCheckButton);
	int GetCheckedRadioButton(int nIDFirstButton, int nIDLastButton);
	int DlgDirListA(LPTSTR lpPathSpec, int nIDListBox,
					int nIDStaticPath, UINT nFileType);
	int DlgDirListComboBoxA(LPTSTR lpPathSpec, int nIDComboBox,
					int nIDStaticPath, UINT nFileType);
	BOOL DlgDirSelect(LPTSTR lpString, int nIDListBox);
	BOOL DlgDirSelectComboBox(LPTSTR lpString, int nIDComboBox);

	UINT GetDlgItemInt(int nID, BOOL* lpTrans = 0,
					BOOL bSigned = 1) const;
	int GetDlgItemTextA(int nID, LPTSTR lpStr, int nMaxCount) const;
	int GetDlgItemTextA(int nID, CString& rString) const;
	CWnd* GetNextDlgGroupItem(CWnd* pWndCtl, BOOL bPrevious = 0) const;

	CWnd* GetNextDlgTabItem(CWnd* pWndCtl, BOOL bPrevious = 0) const;
	UINT IsDlgButtonChecked(int nIDButton) const;
	LRESULT SendDlgItemMessageA(int nID, UINT message,
					WPARAM wParam = 0, LPARAM lParam = 0);
	void SetDlgItemInt(int nID, UINT nValue, BOOL bSigned = 1);
	void SetDlgItemTextA(int nID, LPCTSTR lpszString);


	int GetScrollPos(int nBar) const;
	void GetScrollRange(int nBar, LPINT lpMinPos, LPINT lpMaxPos) const;
	void ScrollWindow(int xAmount, int yAmount,
					LPCRECT lpRect = 0,
					LPCRECT lpClipRect = 0);
	int SetScrollPos(int nBar, int nPos, BOOL bRedraw = 1);
	void SetScrollRange(int nBar, int nMinPos, int nMaxPos,
			BOOL bRedraw = 1);
	void ShowScrollBar(UINT nBar, BOOL bShow = 1);
	void EnableScrollBarCtrl(int nBar, BOOL bEnable = 1);
	virtual CScrollBar* GetScrollBarCtrl(int nBar) const;
			

	int ScrollWindowEx(int dx, int dy,
				LPCRECT lpRectScroll, LPCRECT lpRectClip,
				CRgn* prgnUpdate, LPRECT lpRectUpdate, UINT flags);
	BOOL SetScrollInfo(int nBar, LPSCROLLINFO lpScrollInfo,
		BOOL bRedraw = 1);
	BOOL GetScrollInfo(int nBar, LPSCROLLINFO lpScrollInfo, UINT nMask = (0x0001 | 0x0002 | 0x0004 | 0x0010));
	int GetScrollLimit(int nBar);


	CWnd* ChildWindowFromPoint(POINT point) const;
	CWnd* ChildWindowFromPoint(POINT point, UINT nFlags) const;
	static CWnd* __stdcall FindWindowA(LPCTSTR lpszClassName, LPCTSTR lpszWindowName);
	CWnd* GetNextWindow(UINT nFlag = 2) const;
	CWnd* GetTopWindow() const;

	CWnd* GetWindow(UINT nCmd) const;
	CWnd* GetLastActivePopup() const;

	BOOL IsChild(const CWnd* pWnd) const;
	CWnd* GetParent() const;
	CWnd* SetParent(CWnd* pWndNewParent);
	static CWnd* __stdcall WindowFromPoint(POINT point);


	BOOL FlashWindow(BOOL bInvert);
	int MessageBoxA(LPCTSTR lpszText, LPCTSTR lpszCaption = 0,
			UINT nType = 0x00000000L);


	BOOL ChangeClipboardChain(HWND hWndNext);
	HWND SetClipboardViewer();
	BOOL OpenClipboard();
	static CWnd* __stdcall GetClipboardOwner();
	static CWnd* __stdcall GetClipboardViewer();
	static CWnd* __stdcall GetOpenClipboardWindow();


	void CreateCaret(CBitmap* pBitmap);
	void CreateSolidCaret(int nWidth, int nHeight);
	void CreateGrayCaret(int nWidth, int nHeight);
	static CPoint __stdcall GetCaretPos();
	static void __stdcall SetCaretPos(POINT point);
	void HideCaret();
	void ShowCaret();


	void DragAcceptFiles(BOOL bAccept = 1);


	HICON SetIcon(HICON hIcon, BOOL bBigIcon);
	HICON GetIcon(BOOL bBigIcon) const;


	BOOL SetWindowContextHelpId(DWORD dwContextHelpId);
	DWORD GetWindowContextHelpId() const;


public:
	BOOL UpdateData(BOOL bSaveAndValidate = 1);
			


	 void OnHelp();          
	 void OnHelpIndex();     
	 void OnHelpFinder();    
	 void OnHelpUsing();     
	virtual void WinHelpA(DWORD dwData, UINT nCmd = 0x0001L);


public:
	enum RepositionFlags
		{ reposDefault = 0, reposQuery = 1, reposExtra = 2 };
	void RepositionBars(UINT nIDFirst, UINT nIDLast, UINT nIDLeftOver,
		UINT nFlag = reposDefault, LPRECT lpRectParam = 0,
		LPCRECT lpRectClient = 0, BOOL bStretch = 1);

	
	void UpdateDialogControls(CCmdTarget* pTarget, BOOL bDisableIfNoHndler);
	void CenterWindow(CWnd* pAlternateOwner = 0);
	int RunModalLoop(DWORD dwFlags = 0);
	virtual BOOL ContinueModal();
	virtual void EndModalLoop(int nResult);



	void __cdecl InvokeHelper(DISPID dwDispID, WORD wFlags,
		VARTYPE vtRet, void* pvRet, const BYTE* pbParamInfo, ...);
	void __cdecl SetProperty(DISPID dwDispID, VARTYPE vtProp, ...);
	void GetProperty(DISPID dwDispID, VARTYPE vtProp, void* pvProp) const;
	IUnknown* GetDSCCursor();
	void BindDefaultProperty(DISPID dwDispID, VARTYPE vtProp, LPCTSTR szFieldName, CWnd* pDSCWnd);
	void BindProperty(DISPID dwDispId, CWnd* pWndDSC);
#line 2265 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


protected:
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
	virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);

	 void OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized);
	 void OnActivateApp(BOOL bActive, HTASK hTask);
	 LRESULT OnActivateTopLevel(WPARAM, LPARAM);
	 void OnCancelMode();
	 void OnChildActivate();
	 void OnClose();
	 void OnContextMenu(CWnd* pWnd, CPoint pos);
	 BOOL OnCopyData(CWnd* pWnd, COPYDATASTRUCT* pCopyDataStruct);
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);

	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);

	 void OnDestroy();
	 void OnEnable(BOOL bEnable);
	 void OnEndSession(BOOL bEnding);
	 void OnEnterIdle(UINT nWhy, CWnd* pWho);
	 BOOL OnEraseBkgnd(CDC* pDC);
	 void OnGetMinMaxInfo(MINMAXINFO* lpMMI);
	 BOOL OnHelpInfo(HELPINFO* lpHelpInfo);
	 void OnIconEraseBkgnd(CDC* pDC);
	 void OnKillFocus(CWnd* pNewWnd);
	 LRESULT OnMenuChar(UINT nChar, UINT nFlags, CMenu* pMenu);
	 void OnMenuSelect(UINT nItemID, UINT nFlags, HMENU hSysMenu);
	 void OnMove(int x, int y);
	 void OnPaint();
	 void OnParentNotify(UINT message, LPARAM lParam);
	 HCURSOR OnQueryDragIcon();
	 BOOL OnQueryEndSession();
	 BOOL OnQueryNewPalette();
	 BOOL OnQueryOpen();
	 void OnSetFocus(CWnd* pOldWnd);
	 void OnShowWindow(BOOL bShow, UINT nStatus);
	 void OnSize(UINT nType, int cx, int cy);
	 void OnTCard(UINT idAction, DWORD dwActionData);
	 void OnWindowPosChanging(WINDOWPOS* lpwndpos);
	 void OnWindowPosChanged(WINDOWPOS* lpwndpos);


	 BOOL OnNcActivate(BOOL bActive);
	 void OnNcCalcSize(BOOL bCalcValidRects, NCCALCSIZE_PARAMS* lpncsp);
	 BOOL OnNcCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnNcDestroy();
	 UINT OnNcHitTest(CPoint point);
	 void OnNcLButtonDblClk(UINT nHitTest, CPoint point);
	 void OnNcLButtonDown(UINT nHitTest, CPoint point);
	 void OnNcLButtonUp(UINT nHitTest, CPoint point);
	 void OnNcMButtonDblClk(UINT nHitTest, CPoint point);
	 void OnNcMButtonDown(UINT nHitTest, CPoint point);
	 void OnNcMButtonUp(UINT nHitTest, CPoint point);
	 void OnNcMouseMove(UINT nHitTest, CPoint point);
	 void OnNcPaint();
	 void OnNcRButtonDblClk(UINT nHitTest, CPoint point);
	 void OnNcRButtonDown(UINT nHitTest, CPoint point);
	 void OnNcRButtonUp(UINT nHitTest, CPoint point);


	 void OnDropFiles(HDROP hDropInfo);
	 void OnPaletteIsChanging(CWnd* pRealizeWnd);
	 void OnSysChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnSysCommand(UINT nID, LPARAM lParam);
	 void OnSysDeadChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnSysKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnSysKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnCompacting(UINT nCpuTime);
	 void OnDevModeChange(LPTSTR lpDeviceName);
	 void OnFontChange();
	 void OnPaletteChanged(CWnd* pFocusWnd);
	 void OnSpoolerStatus(UINT nStatus, UINT nJobs);
	 void OnSysColorChange();
	 void OnTimeChange();
	 void OnSettingChange(UINT uFlags, LPCTSTR lpszSection);
	 void OnWinIniChange(LPCTSTR lpszSection);


	 void OnChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnDeadChar(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags);
	 void OnLButtonDblClk(UINT nFlags, CPoint point);
	 void OnLButtonDown(UINT nFlags, CPoint point);
	 void OnLButtonUp(UINT nFlags, CPoint point);
	 void OnMButtonDblClk(UINT nFlags, CPoint point);
	 void OnMButtonDown(UINT nFlags, CPoint point);
	 void OnMButtonUp(UINT nFlags, CPoint point);
	 int OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message);
	 void OnMouseMove(UINT nFlags, CPoint point);
	 BOOL OnMouseWheel(UINT nFlags, short zDelta, CPoint pt);
	 LRESULT OnRegisteredMouseWheel(WPARAM wParam, LPARAM lParam);
	 void OnRButtonDblClk(UINT nFlags, CPoint point);
	 void OnRButtonDown(UINT nFlags, CPoint point);
	 void OnRButtonUp(UINT nFlags, CPoint point);
	 BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);
	 void OnTimer(UINT nIDEvent);


	 void OnInitMenu(CMenu* pMenu);
	 void OnInitMenuPopup(CMenu* pPopupMenu, UINT nIndex, BOOL bSysMenu);


	 void OnAskCbFormatName(UINT nMaxCount, LPTSTR lpszString);
	 void OnChangeCbChain(HWND hWndRemove, HWND hWndAfter);
	 void OnDestroyClipboard();
	 void OnDrawClipboard();
	 void OnHScrollClipboard(CWnd* pClipAppWnd, UINT nSBCode, UINT nPos);
	 void OnPaintClipboard(CWnd* pClipAppWnd, HGLOBAL hPaintStruct);
	 void OnRenderAllFormats();
	 void OnRenderFormat(UINT nFormat);
	 void OnSizeClipboard(CWnd* pClipAppWnd, HGLOBAL hRect);
	 void OnVScrollClipboard(CWnd* pClipAppWnd, UINT nSBCode, UINT nPos);


	 int OnCompareItem(int nIDCtl, LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	 void OnDeleteItem(int nIDCtl, LPDELETEITEMSTRUCT lpDeleteItemStruct);
	 void OnDrawItem(int nIDCtl, LPDRAWITEMSTRUCT lpDrawItemStruct);
	 UINT OnGetDlgCode();
	 void OnMeasureItem(int nIDCtl, LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	 int OnCharToItem(UINT nChar, CListBox* pListBox, UINT nIndex);
	 int OnVKeyToItem(UINT nKey, CListBox* pListBox, UINT nIndex);


	 void OnMDIActivate(BOOL bActivate,
		CWnd* pActivateWnd, CWnd* pDeactivateWnd);


	 void OnEnterMenuLoop(BOOL bIsTrackPopupMenu);
	 void OnExitMenuLoop(BOOL bIsTrackPopupMenu);


	 void OnStyleChanged(int nStyleType, LPSTYLESTRUCT lpStyleStruct);
	 void OnStyleChanging(int nStyleType, LPSTYLESTRUCT lpStyleStruct);
	 void OnSizing(UINT nSide, LPRECT lpRect);
	 void OnMoving(UINT nSide, LPRECT lpRect);
	 void OnCaptureChanged(CWnd* pWnd);
	 BOOL OnDeviceChange(UINT nEventType, DWORD dwData);


protected:
	
	virtual WNDPROC* GetSuperWndProcAddr();

	
	virtual void DoDataExchange(CDataExchange* pDX);

public:
	
	virtual void BeginModalState();
	virtual void EndModalState();

	
	virtual BOOL PreTranslateMessage(MSG* pMsg);


	
	virtual BOOL OnAmbientProperty(COleControlSite* pSite, DISPID dispid,
		VARIANT* pvar);
#line 2429 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

protected:
	
	virtual LRESULT WindowProc(UINT message, WPARAM wParam, LPARAM lParam);
	virtual BOOL OnWndMsg(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult);

	
	LRESULT Default();
	virtual LRESULT DefWindowProcA(UINT message, WPARAM wParam, LPARAM lParam);

	
	virtual void PostNcDestroy();

	
	virtual BOOL OnChildNotify(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult);
		
	BOOL ReflectChildNotify(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult);
	static BOOL __stdcall ReflectLastMsg(HWND hWndChild, LRESULT* pResult = 0);


public:
	virtual ~CWnd();
	virtual BOOL CheckAutoCenter();





	
	BOOL SubclassCtl3d(int nControlType = -1);
		
	BOOL SubclassDlg3d(DWORD dwMask = 0xFFFF );
		
#line 2463 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	static BOOL __stdcall GrayCtlColor(HDC hDC, HWND hWnd, UINT nCtlColor,
		HBRUSH hbrGray, COLORREF clrText);

	HBRUSH OnGrayCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
#line 2468 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	
	BOOL HandleFloatingSysCommand(UINT nID, LPARAM lParam);
	BOOL IsTopParentActive() const;
	void ActivateTopParent();
	static BOOL __stdcall WalkPreTranslateTree(HWND hWndStop, MSG* pMsg);
	static CWnd* __stdcall GetDescendantWindow(HWND hWnd, int nID,
		BOOL bOnlyPerm);
	static void __stdcall SendMessageToDescendants(HWND hWnd, UINT message,
		WPARAM wParam, LPARAM lParam, BOOL bDeep, BOOL bOnlyPerm);
	virtual BOOL IsFrameWnd() const; 
	virtual void OnFinalRelease();
	BOOL PreTranslateInput(LPMSG lpMsg);
	static BOOL __stdcall ModifyStyle(HWND hWnd, DWORD dwRemove, DWORD dwAdd,
		UINT nFlags);
	static BOOL __stdcall ModifyStyleEx(HWND hWnd, DWORD dwRemove, DWORD dwAdd,
		UINT nFlags);
	static void __stdcall _FilterToolTipMessage(MSG* pMsg, CWnd* pWnd);
	BOOL _EnableToolTips(BOOL bEnable, UINT nFlag);
	static HWND __stdcall GetSafeOwner_(HWND hWnd, HWND* pWndTop);

public:
	HWND m_hWndOwner;   
	UINT m_nFlags;      

protected:
	WNDPROC m_pfnSuper; 
	static const UINT m_nMsgDragList;
	int m_nModalResult; 

	COleDropTarget* m_pDropTarget;  
	friend class COleDropTarget;
	friend class CFrameWnd;

	
	BOOL CreateDlg(LPCTSTR lpszTemplateName, CWnd* pParentWnd);
	BOOL CreateDlgIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd);
	BOOL CreateDlgIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd,
		HINSTANCE hInst);


	COleControlContainer* m_pCtrlCont;  
	COleControlSite* m_pCtrlSite;       
	friend class COccManager;
	friend class COleControlSite;
	friend class COleControlContainer;
	BOOL InitControlContainer();
	virtual BOOL SetOccDialogInfo(struct _AFX_OCC_DIALOG_INFO* pOccDialogInfo);
	void AttachControlSite(CHandleMap* pMap);
public:
	void AttachControlSite(CWnd* pWndParent);
#line 2520 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

protected:
	
	friend LRESULT __stdcall _AfxSendMsgHook(int, WPARAM, LPARAM);
	friend void __stdcall _AfxStandardSubclass(HWND);
	friend LRESULT __stdcall _AfxCbtFilterHook(int, WPARAM, LPARAM);
	friend LRESULT __stdcall AfxCallWndProc(CWnd*, HWND, UINT, WPARAM, LPARAM);

	
	 LRESULT OnNTCtlColor(WPARAM wParam, LPARAM lParam);

	 LRESULT OnQuery3dControls(WPARAM, LPARAM);
#line 2533 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	 LRESULT OnDisplayChange(WPARAM, LPARAM);
	 LRESULT OnDragList(WPARAM, LPARAM);

	
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;

private:
	CWnd(HWND hWnd);    
};


LPCTSTR __stdcall AfxRegisterWndClass(UINT nClassStyle,
	HCURSOR hCursor = 0, HBRUSH hbrBackground = 0, HICON hIcon = 0);

BOOL __stdcall AfxRegisterClass(WNDCLASS* lpWndClass);


BOOL __stdcall AfxInitRichEdit();


LRESULT __stdcall AfxWndProc(HWND, UINT, WPARAM, LPARAM);

WNDPROC __stdcall AfxGetAfxWndProc();


typedef void ( CWnd::*AFX_PMSGW)(void);
	

typedef void ( CWinThread::*AFX_PMSGT)(void);
	




class CDialog : public CWnd
{
	public: static const  CRuntimeClass classCDialog; virtual CRuntimeClass* GetRuntimeClass() const;

	
public:
	CDialog();

	BOOL Create(LPCTSTR lpszTemplateName, CWnd* pParentWnd = 0);
	BOOL Create(UINT nIDTemplate, CWnd* pParentWnd = 0);
	BOOL CreateIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd = 0,
		void* lpDialogInit = 0);
	BOOL CreateIndirect(HGLOBAL hDialogTemplate, CWnd* pParentWnd = 0);

	
public:
	CDialog(LPCTSTR lpszTemplateName, CWnd* pParentWnd = 0);
	CDialog(UINT nIDTemplate, CWnd* pParentWnd = 0);
	BOOL InitModalIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd = 0,
		void* lpDialogInit = 0);
	BOOL InitModalIndirect(HGLOBAL hDialogTemplate, CWnd* pParentWnd = 0);


public:
	void MapDialogRect(LPRECT lpRect) const;
	void SetHelpID(UINT nIDR);


public:
	
	virtual int DoModal();

	
	void NextDlgCtrl() const;
	void PrevDlgCtrl() const;
	void GotoDlgCtrl(CWnd* pWndCtrl);

	
	void SetDefID(UINT nID);
	DWORD GetDefID() const;

	
	void EndDialog(int nResult);


	virtual BOOL OnInitDialog();
	virtual void OnSetFont(CFont* pFont);
protected:
	virtual void OnOK();
	virtual void OnCancel();


public:
	virtual ~CDialog();




	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual BOOL CheckAutoCenter();

protected:
	UINT m_nIDHelp;                 

	
	LPCTSTR m_lpszTemplateName;     
	HGLOBAL m_hDialogTemplate;      
	LPCDLGTEMPLATE m_lpDialogTemplate;  
	void* m_lpDialogInit;           
	CWnd* m_pParentWnd;             
	HWND m_hWndTop;                 


	_AFX_OCC_DIALOG_INFO* m_pOccDialogInfo;
	virtual BOOL SetOccDialogInfo(_AFX_OCC_DIALOG_INFO* pOccDialogInfo);
#line 2646 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	virtual void PreInitDialog();

	
	HWND PreModal();
	void PostModal();

	BOOL CreateIndirect(LPCDLGTEMPLATE lpDialogTemplate, CWnd* pParentWnd,
		void* lpDialogInit, HINSTANCE hInst);
	BOOL CreateIndirect(HGLOBAL hDialogTemplate, CWnd* pParentWnd,
		HINSTANCE hInst);

protected:
	
	 LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
	 LRESULT OnHelpHitTest(WPARAM wParam, LPARAM lParam);
	 LRESULT HandleInitDialog(WPARAM, LPARAM);
	 LRESULT HandleSetFont(WPARAM, LPARAM);
	

	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
#line 2667 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};







class CStatic : public CWnd
{
	public: static const  CRuntimeClass classCStatic; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CStatic();
	BOOL Create(LPCTSTR lpszText, DWORD dwStyle,
				const RECT& rect, CWnd* pParentWnd, UINT nID = 0xffff);


	HICON SetIcon(HICON hIcon);
	HICON GetIcon() const;


	HENHMETAFILE SetEnhMetaFile(HENHMETAFILE hMetaFile);
	HENHMETAFILE GetEnhMetaFileA() const;
	HBITMAP SetBitmap(HBITMAP hBitmap);
	HBITMAP GetBitmap() const;
	HCURSOR SetCursor(HCURSOR hCursor);
	HCURSOR GetCursor();
#line 2698 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


public:
	virtual ~CStatic();
};

class CButton : public CWnd
{
	public: static const  CRuntimeClass classCButton; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CButton();
	BOOL Create(LPCTSTR lpszCaption, DWORD dwStyle,
				const RECT& rect, CWnd* pParentWnd, UINT nID);


	UINT GetState() const;
	void SetState(BOOL bHighlight);
	int GetCheck() const;
	void SetCheck(int nCheck);
	UINT GetButtonStyle() const;
	void SetButtonStyle(UINT nStyle, BOOL bRedraw = 1);


	HICON SetIcon(HICON hIcon);
	HICON GetIcon() const;
	HBITMAP SetBitmap(HBITMAP hBitmap);
	HBITMAP GetBitmap() const;
	HCURSOR SetCursor(HCURSOR hCursor);
	HCURSOR GetCursor();
#line 2730 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);


public:
	virtual ~CButton();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};

class CListBox : public CWnd
{
	public: static const  CRuntimeClass classCListBox; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CListBox();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);



	
	int GetCount() const;
	int GetHorizontalExtent() const;
	void SetHorizontalExtent(int cxExtent);
	int GetTopIndex() const;
	int SetTopIndex(int nIndex);
	LCID GetLocale() const;
	LCID SetLocale(LCID nNewLocale);

	int InitStorage(int nItems, UINT nBytes);
	UINT ItemFromPoint(CPoint pt, BOOL& bOutside) const;
#line 2764 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
	
	int GetCurSel() const;
	int SetCurSel(int nSelect);

	
	int GetSel(int nIndex) const;           
	int SetSel(int nIndex, BOOL bSelect = 1);
	int GetSelCount() const;
	int GetSelItems(int nMaxItems, LPINT rgIndex) const;
	void SetAnchorIndex(int nIndex);
	int GetAnchorIndex() const;

	
	DWORD GetItemData(int nIndex) const;
	int SetItemData(int nIndex, DWORD dwItemData);
	void* GetItemDataPtr(int nIndex) const;
	int SetItemDataPtr(int nIndex, void* pData);
	int GetItemRect(int nIndex, LPRECT lpRect) const;
	int GetText(int nIndex, LPTSTR lpszBuffer) const;
	void GetText(int nIndex, CString& rString) const;
	int GetTextLen(int nIndex) const;

	
	void SetColumnWidth(int cxWidth);
	BOOL SetTabStops(int nTabStops, LPINT rgTabStops);
	void SetTabStops();
	BOOL SetTabStops(const int& cxEachStop);    

	int SetItemHeight(int nIndex, UINT cyItemHeight);
	int GetItemHeight(int nIndex) const;
	int FindStringExact(int nIndexStart, LPCTSTR lpszFind) const;
	int GetCaretIndex() const;
	int SetCaretIndex(int nIndex, BOOL bScroll = 1);


	
	int AddString(LPCTSTR lpszItem);
	int DeleteString(UINT nIndex);
	int InsertString(int nIndex, LPCTSTR lpszItem);
	void ResetContent();
	int Dir(UINT attr, LPCTSTR lpszWildCard);

	
	int FindString(int nStartAfter, LPCTSTR lpszItem) const;
	int SelectString(int nStartAfter, LPCTSTR lpszItem);
	int SelItemRange(BOOL bSelect, int nFirstItem, int nLastItem);


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	virtual int CompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	virtual void DeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);
	virtual int VKeyToItem(UINT nKey, UINT nIndex);
	virtual int CharToItem(UINT nKey, UINT nIndex);


public:
	virtual ~CListBox();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};

class CCheckListBox : public CListBox
{
	public: static const  CRuntimeClass classCCheckListBox; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CCheckListBox();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	void SetCheckStyle(UINT nStyle);
	UINT GetCheckStyle();
	void SetCheck(int nIndex, int nCheck);
	int GetCheck(int nIndex);
	void Enable(int nIndex, BOOL bEnabled = 1);
	BOOL IsEnabled(int nIndex);

	virtual CRect OnGetCheckPosition(CRect rectItem, CRect rectCheckBox);


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);


protected:
	void PreDrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	void PreMeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	int PreCompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	void PreDeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);

	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);

   void SetSelectionCheck( int nCheck );





	int CalcMinimumItemHeight();
	void InvalidateCheck(int nIndex);
	void InvalidateItem(int nIndex);
	int CheckFromPoint(CPoint point, BOOL& bInCheck);

	int m_cyText;
	UINT m_nStyle;

	
protected:
	
	 void OnLButtonDown(UINT nFlags, CPoint point);
	 void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnLButtonDblClk(UINT nFlags, CPoint point);
	 LRESULT OnSetFont(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBAddString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBFindString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBFindStringExact(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBGetItemData(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBGetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBInsertString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBSelectString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBSetItemData(WPARAM wParam, LPARAM lParam);
	 LRESULT OnLBSetItemHeight(WPARAM wParam, LPARAM lParam);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};

class CComboBox : public CWnd
{
	public: static const  CRuntimeClass classCComboBox; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CComboBox();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	
	int GetCount() const;
	int GetCurSel() const;
	int SetCurSel(int nSelect);
	LCID GetLocale() const;
	LCID SetLocale(LCID nNewLocale);

	int GetTopIndex() const;
	int SetTopIndex(int nIndex);
	int InitStorage(int nItems, UINT nBytes);
	void SetHorizontalExtent(UINT nExtent);
	UINT GetHorizontalExtent() const;
	int SetDroppedWidth(UINT nWidth);
	int GetDroppedWidth() const;

	
	DWORD GetEditSel() const;
	BOOL LimitText(int nMaxChars);
	BOOL SetEditSel(int nStartChar, int nEndChar);

	
	DWORD GetItemData(int nIndex) const;
	int SetItemData(int nIndex, DWORD dwItemData);
	void* GetItemDataPtr(int nIndex) const;
	int SetItemDataPtr(int nIndex, void* pData);
	int GetLBText(int nIndex, LPTSTR lpszText) const;
	void GetLBText(int nIndex, CString& rString) const;
	int GetLBTextLen(int nIndex) const;

	int SetItemHeight(int nIndex, UINT cyItemHeight);
	int GetItemHeight(int nIndex) const;
	int FindStringExact(int nIndexStart, LPCTSTR lpszFind) const;
	int SetExtendedUI(BOOL bExtended = 1);
	BOOL GetExtendedUI() const;
	void GetDroppedControlRect(LPRECT lprect) const;
	BOOL GetDroppedState() const;


	
	void ShowDropDown(BOOL bShowIt = 1);

	
	int AddString(LPCTSTR lpszString);
	int DeleteString(UINT nIndex);
	int InsertString(int nIndex, LPCTSTR lpszString);
	void ResetContent();
	int Dir(UINT attr, LPCTSTR lpszWildCard);

	
	int FindString(int nStartAfter, LPCTSTR lpszString) const;
	int SelectString(int nStartAfter, LPCTSTR lpszString);

	
	void Clear();
	void Copy();
	void Cut();
	void Paste();


	virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
	virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);
	virtual int CompareItem(LPCOMPAREITEMSTRUCT lpCompareItemStruct);
	virtual void DeleteItem(LPDELETEITEMSTRUCT lpDeleteItemStruct);


public:
	virtual ~CComboBox();
protected:
	virtual BOOL OnChildNotify(UINT, WPARAM, LPARAM, LRESULT*);
};

class CEdit : public CWnd
{
	public: static const  CRuntimeClass classCEdit; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CEdit();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	BOOL CanUndo() const;
	int GetLineCount() const;
	BOOL GetModify() const;
	void SetModify(BOOL bModified = 1);
	void GetRect(LPRECT lpRect) const;
	DWORD GetSel() const;
	void GetSel(int& nStartChar, int& nEndChar) const;
	HLOCAL GetHandle() const;
	void SetHandle(HLOCAL hBuffer);

	void SetMargins(UINT nLeft, UINT nRight);
	DWORD GetMargins() const;
	void SetLimitText(UINT nMax);
	UINT GetLimitText() const;
	CPoint PosFromChar(UINT nChar) const;
	int CharFromPos(CPoint pt) const;
#line 3001 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	
	int GetLine(int nIndex, LPTSTR lpszBuffer) const;
	int GetLine(int nIndex, LPTSTR lpszBuffer, int nMaxLength) const;


	void EmptyUndoBuffer();
	BOOL FmtLines(BOOL bAddEOL);

	void LimitText(int nChars = 0);
	int LineFromChar(int nIndex = -1) const;
	int LineIndex(int nLine = -1) const;
	int LineLength(int nLine = -1) const;
	void LineScroll(int nLines, int nChars = 0);
	void ReplaceSel(LPCTSTR lpszNewText, BOOL bCanUndo = 0);
	void SetPasswordChar(TCHAR ch);
	void SetRect(LPCRECT lpRect);
	void SetRectNP(LPCRECT lpRect);
	void SetSel(DWORD dwSelection, BOOL bNoScroll = 0);
	void SetSel(int nStartChar, int nEndChar, BOOL bNoScroll = 0);
	BOOL SetTabStops(int nTabStops, LPINT rgTabStops);
	void SetTabStops();
	BOOL SetTabStops(const int& cxEachStop);    

	
	BOOL Undo();
	void Clear();
	void Copy();
	void Cut();
	void Paste();

	BOOL SetReadOnly(BOOL bReadOnly = 1);
	int GetFirstVisibleLine() const;
	TCHAR GetPasswordChar() const;


public:
	virtual ~CEdit();
};

class CScrollBar : public CWnd
{
	public: static const  CRuntimeClass classCScrollBar; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CScrollBar();
	BOOL Create(DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID);


	int GetScrollPos() const;
	int SetScrollPos(int nPos, BOOL bRedraw = 1);
	void GetScrollRange(LPINT lpMinPos, LPINT lpMaxPos) const;
	void SetScrollRange(int nMinPos, int nMaxPos, BOOL bRedraw = 1);
	void ShowScrollBar(BOOL bShow = 1);

	BOOL EnableScrollBar(UINT nArrowFlags = 0x0000);

	BOOL SetScrollInfo(LPSCROLLINFO lpScrollInfo, BOOL bRedraw = 1);
	BOOL GetScrollInfo(LPSCROLLINFO lpScrollInfo, UINT nMask = (0x0001 | 0x0002 | 0x0004 | 0x0010));
	int GetScrollLimit();


public:
	virtual ~CScrollBar();
};









struct CPrintPreviewState;  
class CControlBar;          
class CReBar;               

class CDockBar;             
class CMiniDockFrameWnd;    
class CDockState;           

class COleFrameHook;        

class CFrameWnd : public CWnd
{
	public: static const  CRuntimeClass classCFrameWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	static  const CRect rectDefault;
	CFrameWnd();

	BOOL LoadAccelTable(LPCTSTR lpszResourceName);
	BOOL Create(LPCTSTR lpszClassName,
				LPCTSTR lpszWindowName,
				DWORD dwStyle = (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L),
				const RECT& rect = rectDefault,
				CWnd* pParentWnd = 0,        
				LPCTSTR lpszMenuName = 0,
				DWORD dwExStyle = 0,
				CCreateContext* pContext = 0);

	
	virtual BOOL LoadFrame(UINT nIDResource,
				DWORD dwDefaultStyle = (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L) | 0x00008000L,
				CWnd* pParentWnd = 0,
				CCreateContext* pContext = 0);

	
	CWnd* CreateView(CCreateContext* pContext, UINT nID = 0xE900);


	virtual CDocument* GetActiveDocument();

	
	CView* GetActiveView() const;           
	void SetActiveView(CView* pViewNew, BOOL bNotify = 1);
		

	
	virtual CFrameWnd* GetActiveFrame();

	
	virtual void GetMessageString(UINT nID, CString& rMessage) const;

	BOOL m_bAutoMenuEnable;
		

	BOOL IsTracking() const;


	virtual void RecalcLayout(BOOL bNotify = 1);
	virtual void ActivateFrame(int nCmdShow = -1);
	void InitialUpdateFrame(CDocument* pDoc, BOOL bMakeVisible);
	void SetTitle(LPCTSTR lpszTitle);
	CString GetTitle() const;

	
	void SetMessageText(LPCTSTR lpszText);
	void SetMessageText(UINT nID);

	
	void EnableDocking(DWORD dwDockStyle);
	void DockControlBar(CControlBar* pBar, UINT nDockBarID = 0,
		LPCRECT lpRect = 0);
	void FloatControlBar(CControlBar* pBar, CPoint point,
		DWORD dwStyle = 0x2000L);
	CControlBar* GetControlBar(UINT nID);

	
	virtual void BeginModalState();
	virtual void EndModalState();
	BOOL InModalState() const;
	void ShowOwnedWindows(BOOL bShow);

	
	void LoadBarState(LPCTSTR lpszProfileName);
	void SaveBarState(LPCTSTR lpszProfileName) const;
	void ShowControlBar(CControlBar* pBar, BOOL bShow, BOOL bDelay);
	void SetDockState(const CDockState& state);
	void GetDockState(CDockState& state) const;


	virtual void OnSetPreviewMode(BOOL bPreview, CPrintPreviewState* pState);
	virtual CWnd* GetMessageBar();

	
	enum BorderCmd
		{ borderGet = 1, borderRequest = 2, borderSet = 3 };
	virtual BOOL NegotiateBorderSpace(UINT nBorderCmd, LPRECT lpRectBorder);

protected:
	virtual BOOL OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext);


public:
	 void OnContextHelp();   
	 void OnUpdateControlBarMenu(CCmdUI* pCmdUI);
	 BOOL OnBarCheck(UINT nID);


public:
	virtual ~CFrameWnd();
	int m_nWindow;  
					
					

	HMENU m_hMenuDefault;       
	HACCEL m_hAccelTable;       
	DWORD m_dwPromptContext;    
	BOOL m_bHelpMode;           
	CFrameWnd* m_pNextFrameWnd; 
	CRect m_rectBorder;         
	COleFrameHook* m_pNotifyHook;

	CPtrList m_listControlBars; 
								
	int m_nShowDelay;           

	CMiniDockFrameWnd* CreateFloatingFrame(DWORD dwStyle);
	DWORD CanDock(CRect rect, DWORD dwDockStyle,
		CDockBar** ppDockBar = 0); 
	void AddControlBar(CControlBar *pBar);
	void RemoveControlBar(CControlBar *pBar);
	void DockControlBar(CControlBar* pBar, CDockBar* pDockBar,
		LPCRECT lpRect = 0);
	void ReDockControlBar(CControlBar* pBar, CDockBar* pDockBar,
		LPCRECT lpRect = 0);
	void NotifyFloatingWindows(DWORD dwFlags);
	void DestroyDockBars();

protected:
	UINT m_nIDHelp;             
	UINT m_nIDTracking;         
	UINT m_nIDLastMessage;      
	CView* m_pViewActive;       
	BOOL (__stdcall* m_lpfnCloseProc)(CFrameWnd* pFrameWnd);
	UINT m_cModalStack;         
	HWND* m_phWndDisable;       
	HMENU m_hMenuAlt;           
	CString m_strTitle;         
	BOOL m_bInRecalcLayout;     
	CRuntimeClass* m_pFloatingFrameClass;
	static const DWORD dwDockBarMap[4][2];

public:




	virtual BOOL IsFrameWnd() const;
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual void OnUpdateFrameTitle(BOOL bAddToTitle);
	virtual void OnUpdateFrameMenu(HMENU hMenuAlt);
	virtual HACCEL GetDefaultAccelerator();
	virtual BOOL PreTranslateMessage(MSG* pMsg);

	
	enum IdleFlags
		{ idleMenu = 1, idleTitle = 2, idleNotify = 4, idleLayout = 8 };
	UINT m_nIdleFlags;          
	virtual void DelayUpdateFrameMenu(HMENU hMenuAlt);
	void DelayUpdateFrameTitle();
	void DelayRecalcLayout(BOOL bNotify = 1);

	
	BOOL CanEnterHelpMode();
	virtual void ExitHelpMode();

	
public:
	void UpdateFrameTitleForDocument(LPCTSTR lpszDocName);
protected:
	LPCTSTR GetIconWndClass(DWORD dwDefaultStyle, UINT nIDResource);
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
	virtual void PostNcDestroy();   
	int OnCreateHelper(LPCREATESTRUCT lpcs, CCreateContext* pContext);
	void BringToTop(int nCmdShow);
		

	
	BOOL ProcessHelpMsg(MSG& msg, DWORD* pContext);
	HWND SetHelpCapture(POINT point, BOOL* pbDescendant);

	
	void AddFrameWnd();
	void RemoveFrameWnd();

	friend class CWnd;  
	friend class CReBar; 

	
	
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnDestroy();
	 void OnClose();
	 void OnInitMenu(CMenu*);
	 void OnInitMenuPopup(CMenu*, UINT, BOOL);
	 void OnMenuSelect(UINT nItemID, UINT nFlags, HMENU hSysMenu);
	 LRESULT OnPopMessageString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnSetMessageString(WPARAM wParam, LPARAM lParam);
	 LRESULT OnHelpPromptAddr(WPARAM wParam, LPARAM lParam);
	 void OnIdleUpdateCmdUI();
	 void OnEnterIdle(UINT nWhy, CWnd* pWho);
	 void OnSetFocus(CWnd* pOldWnd);
	 void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnSize(UINT nType, int cx, int cy);
	 BOOL OnEraseBkgnd(CDC* pDC);
	 void OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized);
	 BOOL OnNcActivate(BOOL bActive);
	 void OnSysCommand(UINT nID, LONG lParam);
	 BOOL OnQueryEndSession();
	 void OnEndSession(BOOL bEnding);
	 void OnDropFiles(HDROP hDropInfo);
	 BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);
	 LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
	 LRESULT OnHelpHitTest(WPARAM wParam, LPARAM lParam);
	 LRESULT OnActivateTopLevel(WPARAM wParam, LPARAM lParam);
	 void OnEnable(BOOL bEnable);
	 void OnPaletteChanged(CWnd* pFocusWnd);
	 BOOL OnQueryNewPalette();
	
	 BOOL OnToolTipText(UINT nID, NMHDR* pNMHDR, LRESULT* pResult);
	 void OnUpdateKeyIndicator(CCmdUI* pCmdUI);
	 void OnHelp();
	 void OnUpdateContextHelp(CCmdUI* pCmdUI);
	
protected:
	 LRESULT OnDDEInitiate(WPARAM wParam, LPARAM lParam);
	 LRESULT OnDDEExecute(WPARAM wParam, LPARAM lParam);
	 LRESULT OnDDETerminate(WPARAM wParam, LPARAM lParam);
	 LRESULT OnRegisteredMouseWheel(WPARAM wParam, LPARAM lParam);
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;

	friend class CWinApp;
};




class CMDIFrameWnd : public CFrameWnd
{
	public: static const  CRuntimeClass classCMDIFrameWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();

public:

	CMDIFrameWnd();


	void MDIActivate(CWnd* pWndActivate);
	CMDIChildWnd* MDIGetActive(BOOL* pbMaximized = 0) const;
	void MDIIconArrange();
	void MDIMaximize(CWnd* pWnd);
	void MDINext();
	void MDIRestore(CWnd* pWnd);
	CMenu* MDISetMenu(CMenu* pFrameMenu, CMenu* pWindowMenu);
	void MDITile();
	void MDICascade();
	void MDITile(int nType);
	void MDICascade(int nType);
	CMDIChildWnd* CreateNewChild(CRuntimeClass* pClass, UINT nResource,
		HMENU hMenu = 0, HACCEL hAccel = 0);


	
	virtual BOOL CreateClient(LPCREATESTRUCT lpCreateStruct, CMenu* pWindowMenu);
	
	virtual HMENU GetWindowMenuPopup(HMENU hMenuBar);


public:
	HWND m_hWndMDIClient;       





	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL LoadFrame(UINT nIDResource,
				DWORD dwDefaultStyle = (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L) | 0x00008000L,
				CWnd* pParentWnd = 0,
				CCreateContext* pContext = 0);
	virtual BOOL OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual void OnUpdateFrameTitle(BOOL bAddToTitle);
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual void OnUpdateFrameMenu(HMENU hMenuAlt);
	virtual void DelayUpdateFrameMenu(HMENU hMenuAlt);
	virtual CFrameWnd* GetActiveFrame();

protected:
	virtual LRESULT DefWindowProcA(UINT nMsg, WPARAM wParam, LPARAM lParam);
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);

	
	 void OnDestroy();
	 void OnSize(UINT nType, int cx, int cy);
	 void OnUpdateMDIWindowCmd(CCmdUI* pCmdUI);
	 BOOL OnMDIWindowCmd(UINT nID);
	 void OnWindowNew();
	 LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
	 void OnIdleUpdateCmdUI();
	 LRESULT OnMenuChar(UINT nChar, UINT, CMenu*);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};

class CMDIChildWnd : public CFrameWnd
{
	public: static const  CRuntimeClass classCMDIChildWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	CMDIChildWnd();

	virtual BOOL Create(LPCTSTR lpszClassName,
				LPCTSTR lpszWindowName,
				DWORD dwStyle = 0x40000000L | 0x10000000L | (0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L),
				const RECT& rect = rectDefault,
				CMDIFrameWnd* pParentWnd = 0,
				CCreateContext* pContext = 0);


	CMDIFrameWnd* GetMDIFrame();


	void MDIDestroy();
	void MDIActivate();
	void MDIMaximize();
	void MDIRestore();
	void SetHandles(HMENU hMenu, HACCEL hAccel);


protected:
	HMENU m_hMenuShared;        

public:





	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual BOOL LoadFrame(UINT nIDResource, DWORD dwDefaultStyle,
					CWnd* pParentWnd, CCreateContext* pContext = 0);
		
	virtual BOOL DestroyWindow();
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual void ActivateFrame(int nCmdShow = -1);
	virtual void OnUpdateFrameMenu(BOOL bActive, CWnd* pActivateWnd,
		HMENU hMenuAlt);

	BOOL m_bPseudoInactive;     
								

protected:
	virtual CWnd* GetMessageBar();
	virtual void OnUpdateFrameTitle(BOOL bAddToTitle);
	virtual LRESULT DefWindowProcA(UINT nMsg, WPARAM wParam, LPARAM lParam);
	BOOL UpdateClientEdge(LPRECT lpRect = 0);

	
	 void OnMDIActivate(BOOL bActivate, CWnd*, CWnd*);
	 int OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message);
	 int OnCreate(LPCREATESTRUCT lpCreateStruct);
	 BOOL OnNcCreate(LPCREATESTRUCT lpCreateStruct);
	 void OnSize(UINT nType, int cx, int cy);
	 void OnWindowPosChanging(LPWINDOWPOS lpWndPos);
	 BOOL OnNcActivate(BOOL bActive);
	 void OnDestroy();
	 BOOL OnToolTipText(UINT nID, NMHDR* pNMHDR, LRESULT* pResult);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};











class CMiniFrameWnd : public CFrameWnd
{
	public: static const  CRuntimeClass classCMiniFrameWnd; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();


public:
	CMiniFrameWnd();
	BOOL Create(LPCTSTR lpClassName, LPCTSTR lpWindowName,
		DWORD dwStyle, const RECT& rect,
		CWnd* pParentWnd = 0, UINT nID = 0);
	BOOL CreateEx(DWORD dwExStyle, LPCTSTR lpClassName, LPCTSTR lpWindowName,
		DWORD dwStyle, const RECT& rect,
		CWnd* pParentWnd = 0, UINT nID = 0);


public:
	~CMiniFrameWnd();

	static void __cdecl Initialize();

	
	 BOOL OnNcActivate(BOOL bActive);
	 void OnNcCalcSize(BOOL bCalcValidRects, NCCALCSIZE_PARAMS* lpParams);
	 UINT OnNcHitTest(CPoint point);
	 void OnNcPaint();
	 void OnNcLButtonDown(UINT nHitTest, CPoint pt);
	 void OnLButtonUp(UINT nFlags, CPoint pt);
	 void OnMouseMove(UINT nFlags, CPoint pt);
	 void OnSysCommand(UINT nID, LPARAM lParam);
	 void OnGetMinMaxInfo(MINMAXINFO* pMMI);
	 LRESULT OnGetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnGetTextLength(WPARAM wParam, LPARAM lParam);
	 LRESULT OnSetText(WPARAM wParam, LPARAM lParam);
	 LRESULT OnFloatStatus(WPARAM wParam, LPARAM lParam);
	 LRESULT OnQueryCenterWnd(WPARAM wParam, LPARAM lParam);
	 BOOL OnNcCreate(LPCREATESTRUCT lpcs);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;

public:
	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);

	static void __stdcall CalcBorders(LPRECT lpClientRect,
		DWORD dwStyle = 0x00040000L | 0x00C00000L, DWORD dwExStyle = 0);

protected:
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);

protected:
	BOOL m_bSysTracking;
	BOOL m_bInSys;
	BOOL m_bActive;
	CString m_strCaption;

	void InvertSysMenu();
};




class CPrintDialog;     
class CPreviewView;     
class CSplitterWnd;     
class COleServerDoc;    

typedef DWORD DROPEFFECT;
class COleDataObject;   




class __declspec(novtable) CView : public CWnd
#line 3546 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
{
	public: static const  CRuntimeClass classCView; virtual CRuntimeClass* GetRuntimeClass() const;


protected:
	CView();


public:
	CDocument* GetDocument() const;


public:
	
	BOOL DoPreparePrinting(CPrintInfo* pInfo);


public:
	virtual BOOL IsSelected(const CObject* pDocItem) const; 

	
	virtual BOOL OnScroll(UINT nScrollCode, UINT nPos, BOOL bDoScroll = 1);
	virtual BOOL OnScrollBy(CSize sizeScroll, BOOL bDoScroll = 1);

	
	virtual DROPEFFECT OnDragEnter(COleDataObject* pDataObject,
		DWORD dwKeyState, CPoint point);
	virtual DROPEFFECT OnDragOver(COleDataObject* pDataObject,
		DWORD dwKeyState, CPoint point);
	virtual void OnDragLeave();
	virtual BOOL OnDrop(COleDataObject* pDataObject,
		DROPEFFECT dropEffect, CPoint point);
	virtual DROPEFFECT OnDropEx(COleDataObject* pDataObject,
		DROPEFFECT dropDefault, DROPEFFECT dropList, CPoint point);
	virtual DROPEFFECT OnDragScroll(DWORD dwKeyState, CPoint point);

	virtual void OnPrepareDC(CDC* pDC, CPrintInfo* pInfo = 0);

	virtual void OnInitialUpdate(); 

protected:
	
	virtual void OnActivateView(BOOL bActivate, CView* pActivateView,
					CView* pDeactiveView);
	virtual void OnActivateFrame(UINT nState, CFrameWnd* pFrameWnd);

	
	virtual void OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint);
	virtual void OnDraw(CDC* pDC) = 0;

	
	virtual BOOL OnPreparePrinting(CPrintInfo* pInfo);
		

	virtual void OnBeginPrinting(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnPrint(CDC* pDC, CPrintInfo* pInfo);
	virtual void OnEndPrinting(CDC* pDC, CPrintInfo* pInfo);

	
	virtual void OnEndPrintPreview(CDC* pDC, CPrintInfo* pInfo, POINT point,
		CPreviewView* pView);


public:
	virtual ~CView();





	
	BOOL DoPrintPreview(UINT nIDResource, CView* pPrintView,
			CRuntimeClass* pPreviewViewClass, CPrintPreviewState* pState);

	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);
	virtual CScrollBar* GetScrollBarCtrl(int nBar) const;
	static CSplitterWnd* __stdcall GetParentSplitter(
		const CWnd* pWnd, BOOL bAnyState);

protected:
	CDocument* m_pDocument;

public:
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
protected:
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);
	virtual void PostNcDestroy();

	
	friend class CDocument;
	friend class CDocTemplate;
	friend class CPreviewView;
	friend class CFrameWnd;
	friend class CMDIFrameWnd;
	friend class CMDIChildWnd;
	friend class CSplitterWnd;
	friend class COleServerDoc;
	friend class CDocObjectServer;

	
	 int OnCreate(LPCREATESTRUCT lpcs);
	 void OnDestroy();
	 void OnPaint();
	 int OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message);
	
	 void OnUpdateSplitCmd(CCmdUI* pCmdUI);
	 BOOL OnSplitCmd(UINT nID);
	 void OnUpdateNextPaneMenu(CCmdUI* pCmdUI);
	 BOOL OnNextPaneCmd(UINT nID);

	
	 void OnFilePrint();
	 void OnFilePrintPreview();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};







class __declspec(novtable) CCtrlView : public CView
#line 3673 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
{
	public: static const  CRuntimeClass classCCtrlView; virtual CRuntimeClass* GetRuntimeClass() const; static CObject* __stdcall CreateObject();

public:
	CCtrlView(LPCTSTR lpszClass, DWORD dwStyle);


protected:
	CString m_strClass;
	DWORD m_dwDefaultStyle;


	virtual void OnDraw(CDC*);
	virtual BOOL PreCreateWindow(CREATESTRUCT& cs);


public:





protected:
	 void OnPaint();
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CScrollView : public CView
{
	public: static const  CRuntimeClass classCScrollView; virtual CRuntimeClass* GetRuntimeClass() const;


protected:
	CScrollView();

public:
	static  const SIZE sizeDefault;
		

	
	void SetScaleToFitSize(SIZE sizeTotal);
	void SetScrollSizes(int nMapMode, SIZE sizeTotal,
				const SIZE& sizePage = sizeDefault,
				const SIZE& sizeLine = sizeDefault);


public:
	CPoint GetScrollPosition() const;       
	CSize GetTotalSize() const;             

	
	CPoint GetDeviceScrollPosition() const;
	void GetDeviceScrollSizes(int& nMapMode, SIZE& sizeTotal,
			SIZE& sizePage, SIZE& sizeLine) const;


public:
	void ScrollToPosition(POINT pt);    
	void FillOutsideRect(CDC* pDC, CBrush* pBrush);
	void ResizeParentToFit(BOOL bShrinkOnly = 1);
	BOOL DoMouseWheel(UINT fFlags, short zDelta, CPoint point);


protected:
	int m_nMapMode;
	CSize m_totalLog;           
	CSize m_totalDev;           
	CSize m_pageDev;            
	CSize m_lineDev;            

	BOOL m_bCenter;             
	BOOL m_bInsideUpdate;       
	void CenterOnPoint(CPoint ptCenter);
	void ScrollToDevicePosition(POINT ptDev); 

protected:
	virtual void OnDraw(CDC* pDC) = 0;      

	void UpdateBars();          
	BOOL GetTrueClientSize(CSize& size, CSize& sizeSb);
		
	void GetScrollBarSizes(CSize& sizeSb);
	void GetScrollBarState(CSize sizeClient, CSize& needSb,
		CSize& sizeRange, CPoint& ptMove, BOOL bInsideClient);

public:
	virtual ~CScrollView();




	virtual void CalcWindowRect(LPRECT lpClientRect,
		UINT nAdjustType = adjustBorder);
	virtual void OnPrepareDC(CDC* pDC, CPrintInfo* pInfo = 0);

	
	virtual BOOL OnScroll(UINT nScrollCode, UINT nPos, BOOL bDoScroll = 1);
	virtual BOOL OnScrollBy(CSize sizeScroll, BOOL bDoScroll = 1);

	
	 void OnSize(UINT nType, int cx, int cy);
	 void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	 BOOL OnMouseWheel(UINT fFlags, short zDelta, CPoint point);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};




typedef UINT (__cdecl *AFX_THREADPROC)(LPVOID);

class COleMessageFilter;        

class CWinThread : public CCmdTarget
{
	public: static const  CRuntimeClass classCWinThread; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CWinThread();
	BOOL CreateThread(DWORD dwCreateFlags = 0, UINT nStackSize = 0,
		LPSECURITY_ATTRIBUTES lpSecurityAttrs = 0);


	CWnd* m_pMainWnd;       
	CWnd* m_pActiveWnd;     
	BOOL m_bAutoDelete;     

	
	HANDLE m_hThread;       
	operator HANDLE() const;
	DWORD m_nThreadID;      

	int GetThreadPriority();
	BOOL SetThreadPriority(int nPriority);


	DWORD SuspendThread();
	DWORD ResumeThread();
	BOOL PostThreadMessageA(UINT message, WPARAM wParam, LPARAM lParam);


	
	virtual BOOL InitInstance();

	
	virtual int Run();
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual BOOL PumpMessage();     
	virtual BOOL OnIdle(LONG lCount); 
	virtual BOOL IsIdleMessage(MSG* pMsg);  

	
	virtual int ExitInstance(); 

	
	virtual LRESULT ProcessWndProcException(CException* e, const MSG* pMsg);

	
	virtual BOOL ProcessMessageFilter(int code, LPMSG lpMsg);

	
	virtual CWnd* GetMainWnd();


public:
	virtual ~CWinThread();





	void CommonConstruct();
	virtual void Delete();
		

	
	MSG m_msgCur;                   

public:
	
	CWinThread(AFX_THREADPROC pfnThreadProc, LPVOID pParam);

	
	LPVOID m_pThreadParams; 
	AFX_THREADPROC m_pfnThreadProc;

	
	void (__stdcall* m_lpfnOleTermOrFreeLib)(BOOL, BOOL);
	COleMessageFilter* m_pMessageFilter;

protected:
	CPoint m_ptCursorLast;      
	UINT m_nMsgLast;            
	BOOL DispatchThreadMessageEx(MSG* msg);  
	void DispatchThreadMessage(MSG* msg);  
};



CWinThread* __stdcall AfxBeginThread(AFX_THREADPROC pfnThreadProc, LPVOID pParam,
	int nPriority = 0, UINT nStackSize = 0,
	DWORD dwCreateFlags = 0, LPSECURITY_ATTRIBUTES lpSecurityAttrs = 0);
CWinThread* __stdcall AfxBeginThread(CRuntimeClass* pThreadClass,
	int nPriority = 0, UINT nStackSize = 0,
	DWORD dwCreateFlags = 0, LPSECURITY_ATTRIBUTES lpSecurityAttrs = 0);

CWinThread* __stdcall AfxGetThread();
void __stdcall AfxEndThread(UINT nExitCode, BOOL bDelete = 1);

void __stdcall AfxInitThread();
void __stdcall AfxTermThread(HINSTANCE hInstTerm = 0);













#line 3904 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


BOOL __stdcall AfxWinInit(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	LPTSTR lpCmdLine, int nCmdShow);
void __stdcall AfxWinTerm();


CWinApp* __stdcall AfxGetApp();
CWnd* __stdcall AfxGetMainWnd();
HINSTANCE __stdcall AfxGetInstanceHandle();
HINSTANCE __stdcall AfxGetResourceHandle();
void __stdcall AfxSetResourceHandle(HINSTANCE hInstResource);
LPCTSTR __stdcall AfxGetAppName();


void __stdcall AfxPostQuitMessage(int nExitCode);






#line 3927 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

LONG __stdcall AfxDelRegTreeHelper(HKEY hParentKey, const CString& strKeyName);

class CRecentFileList;          


COleMessageFilter* __stdcall AfxOleGetMessageFilter();




class CCommandLineInfo : public CObject
{
public:
	
	CCommandLineInfo();

	
	virtual void ParseParam(const TCHAR* pszParam, BOOL bFlag, BOOL bLast);




	BOOL m_bShowSplash;
	BOOL m_bRunEmbedded;
	BOOL m_bRunAutomated;
	enum { FileNew, FileOpen, FilePrint, FilePrintTo, FileDDE,
		AppUnregister, FileNothing = -1 } m_nShellCommand;

	
	CString m_strFileName;

	
	CString m_strPrinterName;
	CString m_strDriverName;
	CString m_strPortName;

	~CCommandLineInfo();

protected:
	void ParseParamFlag(const char* pszParam);
	void ParseParamNotFlag(const TCHAR* pszParam);



	void ParseLast(BOOL bLast);
};




class CDocManager : public CObject
{
	public: static const  CRuntimeClass classCDocManager; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CDocManager();

	
	virtual void AddDocTemplate(CDocTemplate* pTemplate);
	virtual POSITION GetFirstDocTemplatePosition() const;
	virtual CDocTemplate* GetNextDocTemplate(POSITION& pos) const;
	virtual void RegisterShellFileTypes(BOOL bCompat);
	void UnregisterShellFileTypes();
	virtual CDocument* OpenDocumentFile(LPCTSTR lpszFileName); 
	virtual BOOL SaveAllModified(); 
	virtual void CloseAllDocuments(BOOL bEndSession); 
	virtual int GetOpenDocumentCount();

	
	virtual BOOL DoPromptFileName(CString& fileName, UINT nIDSTitle,
			DWORD lFlags, BOOL bOpenFileDialog, CDocTemplate* pTemplate);


	
	virtual BOOL OnDDECommand(LPTSTR lpszCommand);
	virtual void OnFileNew();
	virtual void OnFileOpen();


protected:
	CPtrList m_templateList;
	int GetDocumentCount(); 

public:
	static CPtrList* pStaticList;       
	static BOOL bStaticInit;            
	static CDocManager* pStaticDocManager;  

public:
	virtual ~CDocManager();




};







class CWinApp : public CWinThread
{
	public: static const  CRuntimeClass classCWinApp; virtual CRuntimeClass* GetRuntimeClass() const;
public:


	CWinApp(LPCTSTR lpszAppName = 0);     


	
	HINSTANCE m_hInstance;
	HINSTANCE m_hPrevInstance;
	LPTSTR m_lpCmdLine;
	int m_nCmdShow;

	
	LPCTSTR m_pszAppName;  
								
	LPCTSTR m_pszRegistryKey;   
	CDocManager* m_pDocManager;

	
	BOOL m_bHelpMode;           

public:  
	LPCTSTR m_pszExeName;       
	LPCTSTR m_pszHelpFilePath;  
	LPCTSTR m_pszProfileName;   


protected:
	void LoadStdProfileSettings(UINT nMaxMRU = 4); 
	void EnableShellOpen();


	void SetDialogBkColor(COLORREF clrCtlBk = ((COLORREF)(((BYTE)(192)|((WORD)((BYTE)(192))<<8))|(((DWORD)(BYTE)(192))<<16))),
				COLORREF clrCtlText = ((COLORREF)(((BYTE)(0)|((WORD)((BYTE)(0))<<8))|(((DWORD)(BYTE)(0))<<16))));
		
#line 4070 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	void SetRegistryKey(LPCTSTR lpszRegistryKey);
	void SetRegistryKey(UINT nIDRegistryKey);
		
		


	BOOL Enable3dControls(); 

	BOOL Enable3dControlsStatic();  
#line 4081 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
#line 4082 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	void RegisterShellFileTypes(BOOL bCompat=0);
		
	void RegisterShellFileTypesCompat();
		
	void UnregisterShellFileTypes();


public:
	
	HCURSOR LoadCursorA(LPCTSTR lpszResourceName) const;
	HCURSOR LoadCursorA(UINT nIDResource) const;
	HCURSOR LoadStandardCursor(LPCTSTR lpszCursorName) const; 
	HCURSOR LoadOEMCursor(UINT nIDCursor) const;             

	
	HICON LoadIconA(LPCTSTR lpszResourceName) const;
	HICON LoadIconA(UINT nIDResource) const;
	HICON LoadStandardIcon(LPCTSTR lpszIconName) const;       
	HICON LoadOEMIcon(UINT nIDIcon) const;                   

	
	UINT GetProfileIntA(LPCTSTR lpszSection, LPCTSTR lpszEntry, int nDefault);
	BOOL WriteProfileInt(LPCTSTR lpszSection, LPCTSTR lpszEntry, int nValue);
	CString GetProfileStringA(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPCTSTR lpszDefault = 0);
	BOOL WriteProfileStringA(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPCTSTR lpszValue);
	BOOL GetProfileBinary(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPBYTE* ppData, UINT* pBytes);
	BOOL WriteProfileBinary(LPCTSTR lpszSection, LPCTSTR lpszEntry,
				LPBYTE pData, UINT nBytes);

	BOOL Unregister();
	LONG DelRegTree(HKEY hParentKey, const CString& strKeyName);


	
	void AddDocTemplate(CDocTemplate* pTemplate);
	POSITION GetFirstDocTemplatePosition() const;
	CDocTemplate* GetNextDocTemplate(POSITION& pos) const;

	
	virtual CDocument* OpenDocumentFile(LPCTSTR lpszFileName); 
	virtual void AddToRecentFileList(LPCTSTR lpszPathName);  

	
	void SelectPrinter(HANDLE hDevNames, HANDLE hDevMode,
		BOOL bFreeOld = 1);
	BOOL CreatePrinterDC(CDC& dc);

	BOOL GetPrinterDeviceDefaults(struct tagPDA* pPrintDlg);


#line 4137 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

	
	BOOL RunEmbedded();
	BOOL RunAutomated();
	void ParseCommandLine(CCommandLineInfo& rCmdInfo);
	BOOL ProcessShellCommand(CCommandLineInfo& rCmdInfo);


	
	virtual BOOL InitApplication();

	
	virtual BOOL SaveAllModified(); 
	void HideApplication();
	void CloseAllDocuments(BOOL bEndSession); 

	
	virtual int DoMessageBox(LPCTSTR lpszPrompt, UINT nType, UINT nIDPrompt);
	virtual void DoWaitCursor(int nCode); 

	
	virtual BOOL OnDDECommand(LPTSTR lpszCommand);

	
	virtual void WinHelpA(DWORD dwData, UINT nCmd = 0x0001L);


protected:
	
	 void OnFileNew();
	 void OnFileOpen();

	
	 void OnFilePrintSetup();

	
	 void OnContextHelp();   
	 void OnHelp();          
	 void OnHelpIndex();     
	 void OnHelpFinder();    
	 void OnHelpUsing();     


protected:
	HGLOBAL m_hDevMode;             
	HGLOBAL m_hDevNames;            
	DWORD m_dwPromptContext;        

	int m_nWaitCursorCount;         
	HCURSOR m_hcurWaitCursorRestore; 

	CRecentFileList* m_pRecentFileList;

	void UpdatePrinterSelection(BOOL bForceDefaults);
	void SaveStdProfileSettings();  

public: 
	CCommandLineInfo* m_pCmdInfo;

	ATOM m_atomApp, m_atomSystemTopic;   
	UINT m_nNumPreviewPages;        

	size_t  m_nSafetyPoolSize;      

	void (__stdcall* m_lpfnDaoTerm)();

	void DevModeChange(LPTSTR lpDeviceName);
	void SetCurrentHandles();
	int GetOpenDocumentCount();

	
	BOOL DoPromptFileName(CString& fileName, UINT nIDSTitle,
			DWORD lFlags, BOOL bOpenFileDialog, CDocTemplate* pTemplate);
	int DoPrintDialog(CPrintDialog* pPD);

	void EnableModeless(BOOL bEnable); 

	
	virtual BOOL InitInstance();
	virtual int ExitInstance(); 
	virtual int Run();
	virtual BOOL OnIdle(LONG lCount); 
	virtual LRESULT ProcessWndProcException(CException* e, const MSG* pMsg);

public:
	virtual ~CWinApp();





	
	HKEY GetSectionKey(LPCTSTR lpszSection);
	HKEY GetAppRegistryKey();

protected:
	
	 void OnAppExit();
	 void OnUpdateRecentFileMenu(CCmdUI* pCmdUI);
	 BOOL OnOpenRecentFile(UINT nID);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CWaitCursor
{

public:
	CWaitCursor();
	~CWaitCursor();


public:
	void Restore();
};







class __declspec(novtable) CDocTemplate : public CCmdTarget
#line 4264 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
{
	public: static const  CRuntimeClass classCDocTemplate; virtual CRuntimeClass* GetRuntimeClass() const;


protected:
	CDocTemplate(UINT nIDResource, CRuntimeClass* pDocClass,
		CRuntimeClass* pFrameClass, CRuntimeClass* pViewClass);

public:
	virtual void LoadTemplate();


public:
	
	void SetContainerInfo(UINT nIDOleInPlaceContainer);

	
	void SetServerInfo(UINT nIDOleEmbedding, UINT nIDOleInPlaceServer = 0,
		CRuntimeClass* pOleFrameClass = 0, CRuntimeClass* pOleViewClass = 0);

	
	virtual POSITION GetFirstDocPosition() const = 0;
	virtual CDocument* GetNextDoc(POSITION& rPos) const = 0;


public:
	virtual void AddDocument(CDocument* pDoc);      
	virtual void RemoveDocument(CDocument* pDoc);   

	enum DocStringIndex
	{
		windowTitle,        
		docName,            
		fileNewName,        
		
		filterName,         
		filterExt,          
		
		regFileTypeId,      
		regFileTypeName,    
	};
	virtual BOOL GetDocString(CString& rString,
		enum DocStringIndex index) const; 
	CFrameWnd* CreateOleFrame(CWnd* pParentWnd, CDocument* pDoc,
		BOOL bCreateView);


public:
	enum Confidence
	{
		noAttempt,
		maybeAttemptForeign,
		maybeAttemptNative,
		yesAttemptForeign,
		yesAttemptNative,
		yesAlreadyOpen
	};
	virtual Confidence MatchDocType(LPCTSTR lpszPathName,
					CDocument*& rpDocMatch);
	virtual CDocument* CreateNewDocument();
	virtual CFrameWnd* CreateNewFrame(CDocument* pDoc, CFrameWnd* pOther);
	virtual void InitialUpdateFrame(CFrameWnd* pFrame, CDocument* pDoc,
		BOOL bMakeVisible = 1);
	virtual BOOL SaveAllModified();     
	virtual void CloseAllDocuments(BOOL bEndSession);
	virtual CDocument* OpenDocumentFile(
		LPCTSTR lpszPathName, BOOL bMakeVisible = 1) = 0;
					
					
	virtual void SetDefaultTitle(CDocument* pDocument) = 0;


public:
	BOOL m_bAutoDelete;
	virtual ~CDocTemplate();

	
	CObject* m_pAttachedFactory;

	
	HMENU m_hMenuInPlace;
	HACCEL m_hAccelInPlace;

	
	HMENU m_hMenuEmbedding;
	HACCEL m_hAccelEmbedding;

	
	HMENU m_hMenuInPlaceServer;
	HACCEL m_hAccelInPlaceServer;





	virtual void OnIdle();             
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);

protected:
	UINT m_nIDResource;                 
	UINT m_nIDServerResource;           
	UINT m_nIDEmbeddingResource;        
	UINT m_nIDContainerResource;        

	CRuntimeClass* m_pDocClass;         
	CRuntimeClass* m_pFrameClass;       
	CRuntimeClass* m_pViewClass;        
	CRuntimeClass* m_pOleFrameClass;    
	CRuntimeClass* m_pOleViewClass;     

	CString m_strDocStrings;    
		
		
};


class CSingleDocTemplate : public CDocTemplate
{
	public: static const  CRuntimeClass classCSingleDocTemplate; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CSingleDocTemplate(UINT nIDResource, CRuntimeClass* pDocClass,
		CRuntimeClass* pFrameClass, CRuntimeClass* pViewClass);


public:
	virtual ~CSingleDocTemplate();
	virtual void AddDocument(CDocument* pDoc);
	virtual void RemoveDocument(CDocument* pDoc);
	virtual POSITION GetFirstDocPosition() const;
	virtual CDocument* GetNextDoc(POSITION& rPos) const;
	virtual CDocument* OpenDocumentFile(
		LPCTSTR lpszPathName, BOOL bMakeVisible = 1);
	virtual void SetDefaultTitle(CDocument* pDocument);






protected:  
	CDocument* m_pOnlyDoc;
};


class CMultiDocTemplate : public CDocTemplate
{
	public: static const  CRuntimeClass classCMultiDocTemplate; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CMultiDocTemplate(UINT nIDResource, CRuntimeClass* pDocClass,
		CRuntimeClass* pFrameClass, CRuntimeClass* pViewClass);


public:
	
	HMENU m_hMenuShared;
	HACCEL m_hAccelTable;

	virtual ~CMultiDocTemplate();
	virtual void LoadTemplate();
	virtual void AddDocument(CDocument* pDoc);
	virtual void RemoveDocument(CDocument* pDoc);
	virtual POSITION GetFirstDocPosition() const;
	virtual CDocument* GetNextDoc(POSITION& rPos) const;
	virtual CDocument* OpenDocumentFile(
		LPCTSTR lpszPathName, BOOL bMakeVisible = 1);
	virtual void SetDefaultTitle(CDocument* pDocument);






protected:  
	CPtrList m_docList;          
	UINT m_nUntitledCount;   
};







class __declspec(novtable) CDocument : public CCmdTarget
#line 4454 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
{
	public: static const  CRuntimeClass classCDocument; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	CDocument();


public:
	const CString& GetTitle() const;
	virtual void SetTitle(LPCTSTR lpszTitle);
	const CString& GetPathName() const;
	virtual void SetPathName(LPCTSTR lpszPathName, BOOL bAddToMRU = 1);

	CDocTemplate* GetDocTemplate() const;
	virtual BOOL IsModified();
	virtual void SetModifiedFlag(BOOL bModified = 1);


	void AddView(CView* pView);
	void RemoveView(CView* pView);
	virtual POSITION GetFirstViewPosition() const;
	virtual CView* GetNextView(POSITION& rPosition) const;

	
	void UpdateAllViews(CView* pSender, LPARAM lHint = 0L,
		CObject* pHint = 0);


	
	virtual void OnChangedViewList(); 
	virtual void DeleteContents(); 

	
	virtual BOOL OnNewDocument();
	virtual BOOL OnOpenDocument(LPCTSTR lpszPathName);
	virtual BOOL OnSaveDocument(LPCTSTR lpszPathName);
	virtual void OnCloseDocument();
	virtual void ReportSaveLoadException(LPCTSTR lpszPathName,
				CException* e, BOOL bSaving, UINT nIDPDefault);
	virtual CFile* GetFile(LPCTSTR lpszFileName, UINT nOpenFlags,
		CFileException* pError);
	virtual void ReleaseFile(CFile* pFile, BOOL bAbort);

	
	virtual BOOL CanCloseFrame(CFrameWnd* pFrame);
	virtual BOOL SaveModified(); 
	virtual void PreCloseFrame(CFrameWnd* pFrame);


protected:
	
	CString m_strTitle;
	CString m_strPathName;
	CDocTemplate* m_pDocTemplate;
	CPtrList m_viewList;                
	BOOL m_bModified;                   

public:
	BOOL m_bAutoDelete;     
	BOOL m_bEmbedded;       





	virtual ~CDocument();

	
	virtual BOOL DoSave(LPCTSTR lpszPathName, BOOL bReplace = 1);
	virtual BOOL DoFileSave();
	virtual void UpdateFrameCounts();
	void DisconnectViews();
	void SendInitialUpdate();

	
	virtual HMENU GetDefaultMenu(); 
	virtual HACCEL GetDefaultAccelerator();
	virtual void OnIdle();
	virtual void OnFinalRelease();

	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	friend class CDocTemplate;

protected:
	
	
	 void OnFileClose();
	 void OnFileSave();
	 void OnFileSaveAs();
	
	
	 void OnFileSendMail();
	 void OnUpdateFileSendMail(CCmdUI* pCmdUI);
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};























void __stdcall AfxFormatString1(CString& rString, UINT nIDS, LPCTSTR lpsz1);
void __stdcall AfxFormatString2(CString& rString, UINT nIDS,
				LPCTSTR lpsz1, LPCTSTR lpsz2);
int __stdcall AfxMessageBox(LPCTSTR lpszText, UINT nType = 0x00000000L,
				UINT nIDHelp = 0);
int __stdcall AfxMessageBox(UINT nIDPrompt, UINT nType = 0x00000000L,
				UINT nIDHelp = (UINT)-1);


void __stdcall AfxFormatStrings(CString& rString, UINT nIDS,
				LPCTSTR const* rglpsz, int nString);
void __stdcall AfxFormatStrings(CString& rString, LPCTSTR lpszFormat,
				LPCTSTR const* rglpsz, int nString);
BOOL __stdcall AfxExtractSubString(CString& rString, LPCTSTR lpszFullString,
				int iSubString, TCHAR chSep = '\n');














void __stdcall AfxLockTempMaps();
BOOL __stdcall AfxUnlockTempMaps(BOOL bDeleteTemps = 1);




void __stdcall AfxOleOnReleaseAllObjects();
BOOL __stdcall AfxOleCanExitApp();
void __stdcall AfxOleLockApp();
void __stdcall AfxOleUnlockApp();

void __stdcall AfxOleSetUserCtrl(BOOL bUserCtrl);
BOOL __stdcall AfxOleGetUserCtrl();


BOOL __stdcall AfxOleLockControl(const IID & clsid);
BOOL __stdcall AfxOleUnlockControl(const IID & clsid);
BOOL __stdcall AfxOleLockControl(LPCTSTR lpszProgID);
BOOL __stdcall AfxOleUnlockControl(LPCTSTR lpszProgID);
void __stdcall AfxOleUnlockAllControls();
#line 4624 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"










#pragma pack(pop)
#line 4636 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"



#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin1.inl"















inline CWinApp* __stdcall AfxGetApp()
	{ return AfxGetModuleState()->m_pCurrentWinApp; }
inline HINSTANCE __stdcall AfxGetInstanceHandle()
	{ ((void)0);
		return AfxGetModuleState()->m_hCurrentInstanceHandle; }
inline HINSTANCE __stdcall AfxGetResourceHandle()
	{ ((void)0);
		return AfxGetModuleState()->m_hCurrentResourceHandle; }
inline void __stdcall AfxSetResourceHandle(HINSTANCE hInstResource)
	{ ((void)0); AfxGetModuleState()->m_hCurrentResourceHandle = hInstResource; }
inline LPCTSTR __stdcall AfxGetAppName()
	{ ((void)0); return AfxGetModuleState()->m_lpszCurrentAppName; }
inline COleMessageFilter* __stdcall AfxOleGetMessageFilter()
	{ ((void)0); return AfxGetThread()->m_pMessageFilter; }
inline CWnd* __stdcall AfxGetMainWnd()
	{ CWinThread* pThread = AfxGetThread();
		return pThread != 0 ? pThread->GetMainWnd() : 0; }












inline CSize::CSize()
	{  }
inline CSize::CSize(int initCX, int initCY)
	{ cx = initCX; cy = initCY; }
inline CSize::CSize(SIZE initSize)
	{ *(SIZE*)this = initSize; }
inline CSize::CSize(POINT initPt)
	{ *(POINT*)this = initPt; }
inline CSize::CSize(DWORD dwSize)
	{
		cx = (short)((WORD)((DWORD_PTR)(dwSize) & 0xffff));
		cy = (short)((WORD)((DWORD_PTR)(dwSize) >> 16));
	}
inline BOOL CSize::operator==(SIZE size) const
	{ return (cx == size.cx && cy == size.cy); }
inline BOOL CSize::operator!=(SIZE size) const
	{ return (cx != size.cx || cy != size.cy); }
inline void CSize::operator+=(SIZE size)
	{ cx += size.cx; cy += size.cy; }
inline void CSize::operator-=(SIZE size)
	{ cx -= size.cx; cy -= size.cy; }
inline CSize CSize::operator+(SIZE size) const
	{ return CSize(cx + size.cx, cy + size.cy); }
inline CSize CSize::operator-(SIZE size) const
	{ return CSize(cx - size.cx, cy - size.cy); }
inline CSize CSize::operator-() const
	{ return CSize(-cx, -cy); }
inline CPoint CSize::operator+(POINT point) const
	{ return CPoint(cx + point.x, cy + point.y); }
inline CPoint CSize::operator-(POINT point) const
	{ return CPoint(cx - point.x, cy - point.y); }
inline CRect CSize::operator+(const RECT* lpRect) const
	{ return CRect(lpRect) + *this; }
inline CRect CSize::operator-(const RECT* lpRect) const
	{ return CRect(lpRect) - *this; }


inline CPoint::CPoint()
	{  }
inline CPoint::CPoint(int initX, int initY)
	{ x = initX; y = initY; }

inline CPoint::CPoint(POINT initPt)
	{ *(POINT*)this = initPt; }
#line 90 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin1.inl"
inline CPoint::CPoint(SIZE initSize)
	{ *(SIZE*)this = initSize; }
inline CPoint::CPoint(DWORD dwPoint)
	{
		x = (short)((WORD)((DWORD_PTR)(dwPoint) & 0xffff));
		y = (short)((WORD)((DWORD_PTR)(dwPoint) >> 16));
	}
inline void CPoint::Offset(int xOffset, int yOffset)
	{ x += xOffset; y += yOffset; }
inline void CPoint::Offset(POINT point)
	{ x += point.x; y += point.y; }
inline void CPoint::Offset(SIZE size)
	{ x += size.cx; y += size.cy; }
inline BOOL CPoint::operator==(POINT point) const
	{ return (x == point.x && y == point.y); }
inline BOOL CPoint::operator!=(POINT point) const
	{ return (x != point.x || y != point.y); }
inline void CPoint::operator+=(SIZE size)
	{ x += size.cx; y += size.cy; }
inline void CPoint::operator-=(SIZE size)
	{ x -= size.cx; y -= size.cy; }
inline void CPoint::operator+=(POINT point)
	{ x += point.x; y += point.y; }
inline void CPoint::operator-=(POINT point)
	{ x -= point.x; y -= point.y; }
inline CPoint CPoint::operator+(SIZE size) const
	{ return CPoint(x + size.cx, y + size.cy); }
inline CPoint CPoint::operator-(SIZE size) const
	{ return CPoint(x - size.cx, y - size.cy); }
inline CPoint CPoint::operator-() const
	{ return CPoint(-x, -y); }
inline CPoint CPoint::operator+(POINT point) const
	{ return CPoint(x + point.x, y + point.y); }
inline CSize CPoint::operator-(POINT point) const
	{ return CSize(x - point.x, y - point.y); }
inline CRect CPoint::operator+(const RECT* lpRect) const
	{ return CRect(lpRect) + *this; }
inline CRect CPoint::operator-(const RECT* lpRect) const
	{ return CRect(lpRect) - *this; }


inline CRect::CRect()
	{  }
inline CRect::CRect(int l, int t, int r, int b)
	{ left = l; top = t; right = r; bottom = b; }
inline CRect::CRect(const RECT& srcRect)
	{ ::CopyRect(this, &srcRect); }
inline CRect::CRect(LPCRECT lpSrcRect)
	{ ::CopyRect(this, lpSrcRect); }
inline CRect::CRect(POINT point, SIZE size)
	{ right = (left = point.x) + size.cx; bottom = (top = point.y) + size.cy; }
inline CRect::CRect(POINT topLeft, POINT bottomRight)
	{ left = topLeft.x; top = topLeft.y;
		right = bottomRight.x; bottom = bottomRight.y; }
inline int CRect::Width() const
	{ return right - left; }
inline int CRect::Height() const
	{ return bottom - top; }
inline CSize CRect::Size() const
	{ return CSize(right - left, bottom - top); }
inline CPoint& CRect::TopLeft()
	{ return *((CPoint*)this); }
inline CPoint& CRect::BottomRight()
	{ return *((CPoint*)this+1); }
inline const CPoint& CRect::TopLeft() const
	{ return *((CPoint*)this); }
inline const CPoint& CRect::BottomRight() const
	{ return *((CPoint*)this+1); }
inline CPoint CRect::CenterPoint() const
	{ return CPoint((left+right)/2, (top+bottom)/2); }
inline void CRect::SwapLeftRight()
	{ SwapLeftRight(LPRECT(this)); }
inline void CRect::SwapLeftRight(LPRECT lpRect)
	{ LONG temp = lpRect->left; lpRect->left = lpRect->right; lpRect->right = temp; }
inline CRect::operator LPRECT()
	{ return this; }
inline CRect::operator LPCRECT() const
	{ return this; }
inline BOOL CRect::IsRectEmpty() const
	{ return ::IsRectEmpty(this); }
inline BOOL CRect::IsRectNull() const
	{ return (left == 0 && right == 0 && top == 0 && bottom == 0); }
inline BOOL CRect::PtInRect(POINT point) const
	{ return ::PtInRect(this, point); }
inline void CRect::SetRect(int x1, int y1, int x2, int y2)
	{ ::SetRect(this, x1, y1, x2, y2); }
inline void CRect::SetRect(POINT topLeft, POINT bottomRight)
	{ ::SetRect(this, topLeft.x, topLeft.y, bottomRight.x, bottomRight.y); }
inline void CRect::SetRectEmpty()
	{ ::SetRectEmpty(this); }
inline void CRect::CopyRect(LPCRECT lpSrcRect)
	{ ::CopyRect(this, lpSrcRect); }
inline BOOL CRect::EqualRect(LPCRECT lpRect) const
	{ return ::EqualRect(this, lpRect); }
inline void CRect::InflateRect(int x, int y)
	{ ::InflateRect(this, x, y); }
inline void CRect::InflateRect(SIZE size)
	{ ::InflateRect(this, size.cx, size.cy); }
inline void CRect::DeflateRect(int x, int y)
	{ ::InflateRect(this, -x, -y); }
inline void CRect::DeflateRect(SIZE size)
	{ ::InflateRect(this, -size.cx, -size.cy); }
inline void CRect::OffsetRect(int x, int y)
	{ ::OffsetRect(this, x, y); }
inline void CRect::OffsetRect(POINT point)
	{ ::OffsetRect(this, point.x, point.y); }
inline void CRect::OffsetRect(SIZE size)
	{ ::OffsetRect(this, size.cx, size.cy); }
inline BOOL CRect::IntersectRect(LPCRECT lpRect1, LPCRECT lpRect2)
	{ return ::IntersectRect(this, lpRect1, lpRect2);}
inline BOOL CRect::UnionRect(LPCRECT lpRect1, LPCRECT lpRect2)
	{ return ::UnionRect(this, lpRect1, lpRect2); }
inline void CRect::operator=(const RECT& srcRect)
	{ ::CopyRect(this, &srcRect); }
inline BOOL CRect::operator==(const RECT& rect) const
	{ return ::EqualRect(this, &rect); }
inline BOOL CRect::operator!=(const RECT& rect) const
	{ return !::EqualRect(this, &rect); }
inline void CRect::operator+=(POINT point)
	{ ::OffsetRect(this, point.x, point.y); }
inline void CRect::operator+=(SIZE size)
	{ ::OffsetRect(this, size.cx, size.cy); }
inline void CRect::operator+=(LPCRECT lpRect)
	{ InflateRect(lpRect); }
inline void CRect::operator-=(POINT point)
	{ ::OffsetRect(this, -point.x, -point.y); }
inline void CRect::operator-=(SIZE size)
	{ ::OffsetRect(this, -size.cx, -size.cy); }
inline void CRect::operator-=(LPCRECT lpRect)
	{ DeflateRect(lpRect); }
inline void CRect::operator&=(const RECT& rect)
	{ ::IntersectRect(this, this, &rect); }
inline void CRect::operator|=(const RECT& rect)
	{ ::UnionRect(this, this, &rect); }
inline CRect CRect::operator+(POINT pt) const
	{ CRect rect(*this); ::OffsetRect(&rect, pt.x, pt.y); return rect; }
inline CRect CRect::operator-(POINT pt) const
	{ CRect rect(*this); ::OffsetRect(&rect, -pt.x, -pt.y); return rect; }
inline CRect CRect::operator+(SIZE size) const
	{ CRect rect(*this); ::OffsetRect(&rect, size.cx, size.cy); return rect; }
inline CRect CRect::operator-(SIZE size) const
	{ CRect rect(*this); ::OffsetRect(&rect, -size.cx, -size.cy); return rect; }
inline CRect CRect::operator+(LPCRECT lpRect) const
	{ CRect rect(this); rect.InflateRect(lpRect); return rect; }
inline CRect CRect::operator-(LPCRECT lpRect) const
	{ CRect rect(this); rect.DeflateRect(lpRect); return rect; }
inline CRect CRect::operator&(const RECT& rect2) const
	{ CRect rect; ::IntersectRect(&rect, this, &rect2);
		return rect; }
inline CRect CRect::operator|(const RECT& rect2) const
	{ CRect rect; ::UnionRect(&rect, this, &rect2);
		return rect; }
inline BOOL CRect::SubtractRect(LPCRECT lpRectSrc1, LPCRECT lpRectSrc2)
	{ return ::SubtractRect(this, lpRectSrc1, lpRectSrc2); }


inline CArchive& __stdcall operator<<(CArchive& ar, SIZE size)
	{ ar.Write(&size, sizeof(SIZE)); return ar; }
inline CArchive& __stdcall operator<<(CArchive& ar, POINT point)
	{ ar.Write(&point, sizeof(POINT)); return ar; }
inline CArchive& __stdcall operator<<(CArchive& ar, const RECT& rect)
	{ ar.Write(&rect, sizeof(RECT)); return ar; }
inline CArchive& __stdcall operator>>(CArchive& ar, SIZE& size)
	{ ar.Read(&size, sizeof(SIZE)); return ar; }
inline CArchive& __stdcall operator>>(CArchive& ar, POINT& point)
	{ ar.Read(&point, sizeof(POINT)); return ar; }
inline CArchive& __stdcall operator>>(CArchive& ar, RECT& rect)
	{ ar.Read(&rect, sizeof(RECT)); return ar; }


inline CResourceException::CResourceException()
	: CSimpleException() { }
inline CResourceException::CResourceException(BOOL bAutoDelete, UINT nResourceID)
	: CSimpleException(bAutoDelete) { m_nResourceID = nResourceID; }
inline CResourceException::~CResourceException()
	{ }
inline CUserException::CUserException()
	: CSimpleException() { }
inline CUserException::CUserException(BOOL bAutoDelete, UINT nResourceID)
	: CSimpleException(bAutoDelete) { m_nResourceID = nResourceID; }
inline CUserException::~CUserException()
	{ }


inline CGdiObject::operator HGDIOBJ() const
	{ return this == 0 ? 0 : m_hObject; }
inline HGDIOBJ CGdiObject::GetSafeHandle() const
	{ return this == 0 ? 0 : m_hObject; }
inline CGdiObject::CGdiObject()
	{ m_hObject = 0; }
inline CGdiObject::~CGdiObject()
	{ DeleteObject(); }
inline int CGdiObject::GetObjectA(int nCount, LPVOID lpObject) const
	{ ((void)0); return ::GetObjectA(m_hObject, nCount, lpObject); }
inline BOOL CGdiObject::CreateStockObject(int nIndex)
	{ return (m_hObject = ::GetStockObject(nIndex)) != 0; }
inline BOOL CGdiObject::UnrealizeObject()
	{ ((void)0); return ::UnrealizeObject(m_hObject); }
inline UINT CGdiObject::GetObjectType() const
	{ return (UINT)::GetObjectType(m_hObject); }
inline BOOL CGdiObject::operator==(const CGdiObject& obj) const
	{ return ((HGDIOBJ) obj) == m_hObject; }
inline BOOL CGdiObject::operator!=(const CGdiObject& obj) const
	{ return ((HGDIOBJ) obj) != m_hObject; }


inline CPen::operator HPEN() const
	{ return (HPEN)(this == 0 ? 0 : m_hObject); }
inline CPen* __stdcall CPen::FromHandle(HPEN hPen)
	{ return (CPen*) CGdiObject::FromHandle(hPen); }
inline CPen::CPen()
	{ }
inline CPen::~CPen()
	{ }
inline BOOL CPen::CreatePen(int nPenStyle, int nWidth, COLORREF crColor)
	{ return Attach(::CreatePen(nPenStyle, nWidth, crColor)); }
inline BOOL CPen::CreatePenIndirect(LPLOGPEN lpLogPen)
	{ return Attach(::CreatePenIndirect(lpLogPen)); }
inline BOOL CPen::CreatePen(int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush,
		int nStyleCount, const DWORD* lpStyle)
	{ return Attach(::ExtCreatePen(nPenStyle, nWidth, pLogBrush, nStyleCount,
		lpStyle)); }
inline int CPen::GetExtLogPen(EXTLOGPEN* pLogPen)
	{ ((void)0);
		return ::GetObjectA(m_hObject, sizeof(EXTLOGPEN), pLogPen); }
inline int CPen::GetLogPen(LOGPEN* pLogPen)
	{ ((void)0);
		return ::GetObjectA(m_hObject, sizeof(LOGPEN), pLogPen); }


inline CBrush::operator HBRUSH() const
	{ return (HBRUSH)(this == 0 ? 0 : m_hObject); }
inline CBrush* __stdcall CBrush::FromHandle(HBRUSH hBrush)
	{ return (CBrush*) CGdiObject::FromHandle(hBrush); }
inline CBrush::CBrush()
	{ }
inline CBrush::~CBrush()
	{ }
inline BOOL CBrush::CreateSolidBrush(COLORREF crColor)
	{ return Attach(::CreateSolidBrush(crColor)); }
inline BOOL CBrush::CreateHatchBrush(int nIndex, COLORREF crColor)
	{ return Attach(::CreateHatchBrush(nIndex, crColor)); }
inline BOOL CBrush::CreateBrushIndirect(const LOGBRUSH* lpLogBrush)
	{ return Attach(::CreateBrushIndirect(lpLogBrush)); }
inline BOOL CBrush::CreatePatternBrush(CBitmap* pBitmap)
	{ return Attach(::CreatePatternBrush((HBITMAP)pBitmap->GetSafeHandle())); }
inline BOOL CBrush::CreateDIBPatternBrush(const void* lpPackedDIB, UINT nUsage)
	{ return Attach(::CreateDIBPatternBrushPt(lpPackedDIB, nUsage)); }
inline BOOL CBrush::CreateSysColorBrush(int nIndex)
	{ return Attach(::GetSysColorBrush(nIndex)); }
inline int CBrush::GetLogBrush(LOGBRUSH* pLogBrush)
	{ ((void)0);
		return ::GetObjectA(m_hObject, sizeof(LOGBRUSH), pLogBrush); }


inline CFont::operator HFONT() const
	{ return (HFONT)(this == 0 ? 0 : m_hObject); }
inline CFont* __stdcall CFont::FromHandle(HFONT hFont)
	{ return (CFont*) CGdiObject::FromHandle(hFont); }
inline CFont::CFont()
	{ }
inline CFont::~CFont()
	{ }
inline BOOL CFont::CreateFontIndirectA(const LOGFONT* lpLogFont)
	{ return Attach(::CreateFontIndirectA(lpLogFont)); }
inline BOOL CFont::CreateFontA(int nHeight, int nWidth, int nEscapement,
		int nOrientation, int nWeight, BYTE bItalic, BYTE bUnderline,
		BYTE cStrikeOut, BYTE nCharSet, BYTE nOutPrecision,
		BYTE nClipPrecision, BYTE nQuality, BYTE nPitchAndFamily,
		LPCTSTR lpszFacename)
	{ return Attach(::CreateFontA(nHeight, nWidth, nEscapement,
		nOrientation, nWeight, bItalic, bUnderline, cStrikeOut,
		nCharSet, nOutPrecision, nClipPrecision, nQuality,
		nPitchAndFamily, lpszFacename)); }
inline int CFont::GetLogFont(LOGFONT* pLogFont)
	{ ((void)0);
		return ::GetObjectA(m_hObject, sizeof(LOGFONT), pLogFont); }


inline CBitmap::operator HBITMAP() const
	{ return (HBITMAP)(this == 0 ? 0 : m_hObject); }
inline CBitmap* __stdcall CBitmap::FromHandle(HBITMAP hBitmap)
	{ return (CBitmap*) CGdiObject::FromHandle(hBitmap); }
inline CBitmap::CBitmap()
	{ }
inline CBitmap::~CBitmap()
	{ }
inline BOOL CBitmap::CreateBitmap(int nWidth, int nHeight, UINT nPlanes,
	 UINT nBitcount, const void* lpBits)
	{ return Attach(::CreateBitmap(nWidth, nHeight, nPlanes, nBitcount, lpBits)); }
inline BOOL CBitmap::CreateBitmapIndirect(LPBITMAP lpBitmap)
	{ return Attach(::CreateBitmapIndirect(lpBitmap)); }

inline DWORD CBitmap::SetBitmapBits(DWORD dwCount, const void* lpBits)
	{ return ::SetBitmapBits((HBITMAP)m_hObject, dwCount, lpBits); }
inline DWORD CBitmap::GetBitmapBits(DWORD dwCount, LPVOID lpBits) const
	{ return ::GetBitmapBits((HBITMAP)m_hObject, dwCount, lpBits); }
inline BOOL CBitmap::LoadBitmapA(LPCTSTR lpszResourceName)
	{ return Attach(::LoadBitmapA(
AfxGetResourceHandle(), lpszResourceName));}
inline BOOL CBitmap::LoadMappedBitmap(UINT nIDBitmap, UINT nFlags,
	LPCOLORMAP lpColorMap, int nMapSize)
	{ return Attach(::CreateMappedBitmap(
AfxGetResourceHandle(), nIDBitmap, (WORD)nFlags,
		lpColorMap, nMapSize)); }
inline CSize CBitmap::SetBitmapDimension(int nWidth, int nHeight)
	{
		SIZE size;
		((void)(::SetBitmapDimensionEx((HBITMAP)m_hObject, nWidth, nHeight, &size)));
		return size;
	}
inline CSize CBitmap::GetBitmapDimension() const
	{
		SIZE size;
		((void)(::GetBitmapDimensionEx((HBITMAP)m_hObject, &size)));
		return size;
	}

inline BOOL CBitmap::LoadBitmapA(UINT nIDResource)
	{ return Attach(::LoadBitmapA(
AfxGetResourceHandle(), (LPSTR)((ULONG_PTR)((WORD)(nIDResource))))); }
inline BOOL CBitmap::LoadOEMBitmap(UINT nIDBitmap)
	{ return Attach(::LoadBitmapA(0, (LPSTR)((ULONG_PTR)((WORD)(nIDBitmap))))); }
inline BOOL CBitmap::CreateCompatibleBitmap(CDC* pDC, int nWidth, int nHeight)
	{ return Attach(::CreateCompatibleBitmap(pDC->m_hDC, nWidth, nHeight)); }
inline BOOL CBitmap::CreateDiscardableBitmap(CDC* pDC, int nWidth, int nHeight)
	{ return Attach(::CreateDiscardableBitmap(pDC->m_hDC, nWidth, nHeight)); }
inline int CBitmap::GetBitmap(BITMAP* pBitMap)
	{ ((void)0);
		return ::GetObjectA(m_hObject, sizeof(BITMAP), pBitMap); }


inline CPalette::operator HPALETTE() const
	{ return (HPALETTE)(this == 0 ? 0 : m_hObject); }
inline CPalette* __stdcall CPalette::FromHandle(HPALETTE hPalette)
	{ return (CPalette*) CGdiObject::FromHandle(hPalette); }
inline CPalette::CPalette()
	{ }
inline CPalette::~CPalette()
	{ }
inline BOOL CPalette::CreatePalette(LPLOGPALETTE lpLogPalette)
	{ return Attach(::CreatePalette(lpLogPalette)); }
inline BOOL CPalette::CreateHalftonePalette(CDC* pDC)
	{ ((void)0); return Attach(
		::CreateHalftonePalette(pDC->m_hDC)); }
inline UINT CPalette::GetPaletteEntries(UINT nStartIndex, UINT nNumEntries,
		LPPALETTEENTRY lpPaletteColors) const
	{ ((void)0); return ::GetPaletteEntries((HPALETTE)m_hObject, nStartIndex,
		nNumEntries, lpPaletteColors); }
inline UINT CPalette::SetPaletteEntries(UINT nStartIndex, UINT nNumEntries,
		LPPALETTEENTRY lpPaletteColors)
	{ ((void)0); return ::SetPaletteEntries((HPALETTE)m_hObject, nStartIndex,
		nNumEntries, lpPaletteColors); }
inline void CPalette::AnimatePalette(UINT nStartIndex, UINT nNumEntries,
		LPPALETTEENTRY lpPaletteColors)
	{ ((void)0); ::AnimatePalette((HPALETTE)m_hObject, nStartIndex, nNumEntries,
			lpPaletteColors); }
inline UINT CPalette::GetNearestPaletteIndex(COLORREF crColor) const
	{ ((void)0); return ::GetNearestPaletteIndex((HPALETTE)m_hObject, crColor); }
inline BOOL CPalette::ResizePalette(UINT nNumEntries)
	{ ((void)0); return ::ResizePalette((HPALETTE)m_hObject, nNumEntries); }
inline int CPalette::GetEntryCount()
	{ ((void)0); WORD nEntries;
		 ::GetObjectA(m_hObject, sizeof(WORD), &nEntries); return (int)nEntries; }


inline CRgn::operator HRGN() const
	{ return (HRGN)(this == 0 ? 0 : m_hObject); }
inline CRgn* __stdcall CRgn::FromHandle(HRGN hRgn)
	{ return (CRgn*) CGdiObject::FromHandle(hRgn); }
inline CRgn::CRgn()
	{ }
inline CRgn::~CRgn()
	{ }
inline BOOL CRgn::CreateRectRgn(int x1, int y1, int x2, int y2)
	{ return Attach(::CreateRectRgn(x1, y1, x2, y2)); }
inline BOOL CRgn::CreateRectRgnIndirect(LPCRECT lpRect)
	{ return Attach(::CreateRectRgnIndirect(lpRect)); }
inline BOOL CRgn::CreateEllipticRgn(int x1, int y1, int x2, int y2)
	{ return Attach(::CreateEllipticRgn(x1, y1, x2, y2)); }
inline BOOL CRgn::CreateEllipticRgnIndirect(LPCRECT lpRect)
	{ return Attach(::CreateEllipticRgnIndirect(lpRect)); }
inline BOOL CRgn::CreatePolygonRgn(LPPOINT lpPoints, int nCount, int nMode)
	{ return Attach(::CreatePolygonRgn(lpPoints, nCount, nMode)); }
inline BOOL CRgn::CreatePolyPolygonRgn(LPPOINT lpPoints, LPINT lpPolyCounts, int nCount, int nPolyFillMode)
	{ return Attach(::CreatePolyPolygonRgn(lpPoints, lpPolyCounts, nCount, nPolyFillMode)); }
inline BOOL CRgn::CreateRoundRectRgn(int x1, int y1, int x2, int y2, int x3, int y3)
	{ return Attach(::CreateRoundRectRgn(x1, y1, x2, y2, x3, y3)); }
inline BOOL CRgn::CreateFromPath(CDC* pDC)
	{ ((void)0); return Attach(::PathToRegion(pDC->m_hDC)); }
inline BOOL CRgn::CreateFromData(const XFORM* lpXForm, int nCount, const RGNDATA* pRgnData)
	{ return Attach(::ExtCreateRegion(lpXForm, nCount, pRgnData)); }
inline int CRgn::GetRegionData(LPRGNDATA lpRgnData, int nDataSize) const
	{ ((void)0); return (int)::GetRegionData((HRGN)m_hObject, nDataSize, lpRgnData); }
inline void CRgn::SetRectRgn(int x1, int y1, int x2, int y2)
	{ ((void)0); ::SetRectRgn((HRGN)m_hObject, x1, y1, x2, y2); }
inline void CRgn::SetRectRgn(LPCRECT lpRect)
	{ ((void)0); ::SetRectRgn((HRGN)m_hObject, lpRect->left, lpRect->top,
		lpRect->right, lpRect->bottom); }
inline int CRgn::CombineRgn(CRgn* pRgn1, CRgn* pRgn2, int nCombineMode)
	{ ((void)0); return ::CombineRgn((HRGN)m_hObject, (HRGN)pRgn1->GetSafeHandle(),
		(HRGN)pRgn2->GetSafeHandle(), nCombineMode); }
inline int CRgn::CopyRgn(CRgn* pRgnSrc)
	{ ((void)0); return ::CombineRgn((HRGN)m_hObject, (HRGN)pRgnSrc->GetSafeHandle(), 0, 5); }
inline BOOL CRgn::EqualRgn(CRgn* pRgn) const
	{ ((void)0); return ::EqualRgn((HRGN)m_hObject, (HRGN)pRgn->GetSafeHandle()); }
inline int CRgn::OffsetRgn(int x, int y)
	{ ((void)0); return ::OffsetRgn((HRGN)m_hObject, x, y); }
inline int CRgn::OffsetRgn(POINT point)
	{ ((void)0); return ::OffsetRgn((HRGN)m_hObject, point.x, point.y); }
inline int CRgn::GetRgnBox(LPRECT lpRect) const
	{ ((void)0); return ::GetRgnBox((HRGN)m_hObject, lpRect); }
inline BOOL CRgn::PtInRegion(int x, int y) const
	{ ((void)0); return ::PtInRegion((HRGN)m_hObject, x, y); }
inline BOOL CRgn::PtInRegion(POINT point) const
	{ ((void)0); return ::PtInRegion((HRGN)m_hObject, point.x, point.y); }
inline BOOL CRgn::RectInRegion(LPCRECT lpRect) const
	{ ((void)0); return ::RectInRegion((HRGN)m_hObject, lpRect); }


inline CDC::operator HDC() const
	{ return this == 0 ? 0 : m_hDC; }
inline HDC CDC::GetSafeHdc() const
	{ return this == 0 ? 0 : m_hDC; }
inline CWnd* CDC::GetWindow() const
	{ ((void)0); return CWnd::FromHandle(::WindowFromDC(m_hDC)); }
inline BOOL CDC::IsPrinting() const
	{ return m_bPrinting; }
inline BOOL CDC::CreateDCA(LPCTSTR lpszDriverName,
	LPCTSTR lpszDeviceName, LPCTSTR lpszOutput, const void* lpInitData)
	{ return Attach(::CreateDCA(lpszDriverName,
		lpszDeviceName, lpszOutput, (const DEVMODE*)lpInitData)); }
inline BOOL CDC::CreateICA(LPCTSTR lpszDriverName,
	LPCTSTR lpszDeviceName, LPCTSTR lpszOutput, const void* lpInitData)
	{ return Attach(::CreateICA(lpszDriverName,
		lpszDeviceName, lpszOutput, (const DEVMODE*) lpInitData)); }
inline BOOL CDC::CreateCompatibleDC(CDC* pDC)
	{ return Attach(::CreateCompatibleDC(pDC->GetSafeHdc())); }
inline int CDC::ExcludeUpdateRgn(CWnd* pWnd)
	{ ((void)0); return ::ExcludeUpdateRgn(m_hDC, pWnd->m_hWnd); }
inline int CDC::GetDeviceCaps(int nIndex) const
	{ ((void)0); return ::GetDeviceCaps(m_hAttribDC, nIndex); }
inline CPoint CDC::GetBrushOrg() const
	{
		((void)0);
		POINT point;
		((void)(::GetBrushOrgEx(m_hDC, &point)));
		return point;
	}
inline CPoint CDC::SetBrushOrg(int x, int y)
	{
		((void)0);
		POINT point;
		((void)(::SetBrushOrgEx(m_hDC, x, y, &point)));
		return point;
	}
inline CPoint CDC::SetBrushOrg(POINT point)
	{
		((void)0);
		((void)(::SetBrushOrgEx(m_hDC, point.x, point.y, &point)));
		return point;
	}

inline int CDC::EnumObjects(int nObjectType,
		int (__stdcall* lpfn)(LPVOID, LPARAM), LPARAM lpData)
	{ ((void)0); return ::EnumObjects(m_hAttribDC, nObjectType, (GOBJENUMPROC)lpfn, lpData); }

inline CBitmap* CDC::SelectObject(CBitmap* pBitmap)
	{ ((void)0); return (CBitmap*) SelectGdiObject(m_hDC, pBitmap->GetSafeHandle()); }
inline CGdiObject* CDC::SelectObject(CGdiObject* pObject)
	{ ((void)0); return SelectGdiObject(m_hDC, pObject->GetSafeHandle()); }
inline HGDIOBJ CDC::SelectObject(HGDIOBJ hObject) 
	{ ((void)0); 
		return (hObject != 0) ? ::SelectObject(m_hDC, hObject) : 0; }
inline COLORREF CDC::GetNearestColor(COLORREF crColor) const
	{ ((void)0); return ::GetNearestColor(m_hAttribDC, crColor); }
inline UINT CDC::RealizePalette()
	{ ((void)0); return ::RealizePalette(m_hDC); }
inline void CDC::UpdateColors()
	{ ((void)0); ::UpdateColors(m_hDC); }
inline COLORREF CDC::GetBkColor() const
	{ ((void)0); return ::GetBkColor(m_hAttribDC); }
inline int CDC::GetBkMode() const
	{ ((void)0); return ::GetBkMode(m_hAttribDC); }
inline int CDC::GetPolyFillMode() const
	{ ((void)0); return ::GetPolyFillMode(m_hAttribDC); }
inline int CDC::GetROP2() const
	{ ((void)0); return ::GetROP2(m_hAttribDC); }
inline int CDC::GetStretchBltMode() const
	{ ((void)0); return ::GetStretchBltMode(m_hAttribDC); }
inline COLORREF CDC::GetTextColor() const
	{ ((void)0); return ::GetTextColor(m_hAttribDC); }
inline int CDC::GetMapMode() const
	{ ((void)0); return ::GetMapMode(m_hAttribDC); }

inline CPoint CDC::GetViewportOrg() const
	{
		((void)0);
		POINT point;
		((void)(::GetViewportOrgEx(m_hAttribDC, &point)));
		return point;
	}
inline CSize CDC::GetViewportExt() const
	{
		((void)0);
		SIZE size;
		((void)(::GetViewportExtEx(m_hAttribDC, &size)));
		return size;
	}
inline CPoint CDC::GetWindowOrg() const
	{
		((void)0);
		POINT point;
		((void)(::GetWindowOrgEx(m_hAttribDC, &point)));
		return point;
	}
inline CSize CDC::GetWindowExt() const
	{
		((void)0);
		SIZE size;
		((void)(::GetWindowExtEx(m_hAttribDC, &size)));
		return size;
	}


inline CPoint CDC::SetViewportOrg(POINT point)
	{ ((void)0); return SetViewportOrg(point.x, point.y); }
inline CSize CDC::SetViewportExt(SIZE size)
	{ ((void)0); return SetViewportExt(size.cx, size.cy); }
inline CPoint CDC::SetWindowOrg(POINT point)
	{ ((void)0); return SetWindowOrg(point.x, point.y); }
inline CSize CDC::SetWindowExt(SIZE size)
	{ ((void)0); return SetWindowExt(size.cx, size.cy); }

inline void CDC::DPtoLP(LPPOINT lpPoints, int nCount) const
	{ ((void)0); ((void)(::DPtoLP(m_hAttribDC, lpPoints, nCount))); }
inline void CDC::DPtoLP(LPRECT lpRect) const
	{ ((void)0); ((void)(::DPtoLP(m_hAttribDC, (LPPOINT)lpRect, 2))); }
inline void CDC::LPtoDP(LPPOINT lpPoints, int nCount) const
	{ ((void)0); ((void)(::LPtoDP(m_hAttribDC, lpPoints, nCount))); }
inline void CDC::LPtoDP(LPRECT lpRect) const
	{ ((void)0); ((void)(::LPtoDP(m_hAttribDC, (LPPOINT)lpRect, 2))); }

inline BOOL CDC::FillRgn(CRgn* pRgn, CBrush* pBrush)
	{ ((void)0); return ::FillRgn(m_hDC, (HRGN)pRgn->GetSafeHandle(), (HBRUSH)pBrush->GetSafeHandle()); }
inline BOOL CDC::FrameRgn(CRgn* pRgn, CBrush* pBrush, int nWidth, int nHeight)
	{ ((void)0); return ::FrameRgn(m_hDC, (HRGN)pRgn->GetSafeHandle(), (HBRUSH)pBrush->GetSafeHandle(),
		nWidth, nHeight); }
inline BOOL CDC::InvertRgn(CRgn* pRgn)
	{ ((void)0); return ::InvertRgn(m_hDC, (HRGN)pRgn->GetSafeHandle()); }
inline BOOL CDC::PaintRgn(CRgn* pRgn)
	{ ((void)0); return ::PaintRgn(m_hDC, (HRGN)pRgn->GetSafeHandle()); }
inline BOOL CDC::PtVisible(int x, int y) const
	{ ((void)0); return ::PtVisible(m_hDC, x, y); }
inline BOOL CDC::PtVisible(POINT point) const
	{ ((void)0); return PtVisible(point.x, point.y); } 
inline BOOL CDC::RectVisible(LPCRECT lpRect) const
	{ ((void)0); return ::RectVisible(m_hDC, lpRect); }
inline CPoint CDC::GetCurrentPosition() const
	{
		((void)0);
		POINT point;
		((void)(::GetCurrentPositionEx(m_hAttribDC, &point)));
		return point;
	}

inline CPoint CDC::MoveTo(POINT point)
	{ ((void)0); return MoveTo(point.x, point.y); }
inline BOOL CDC::LineTo(POINT point)
	{ ((void)0); return LineTo(point.x, point.y); }
inline BOOL CDC::Arc(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)
	{ ((void)0); return ::Arc(m_hDC, x1, y1, x2, y2, x3, y3, x4, y4); }
inline BOOL CDC::Arc(LPCRECT lpRect, POINT ptStart, POINT ptEnd)
	{ ((void)0); return ::Arc(m_hDC, lpRect->left, lpRect->top,
		lpRect->right, lpRect->bottom, ptStart.x, ptStart.y,
		ptEnd.x, ptEnd.y); }
inline BOOL CDC::Polyline(LPPOINT lpPoints, int nCount)
	{ ((void)0); return ::Polyline(m_hDC, lpPoints, nCount); }
inline void CDC::FillRect(LPCRECT lpRect, CBrush* pBrush)
	{ ((void)0); ::FillRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }
inline void CDC::FrameRect(LPCRECT lpRect, CBrush* pBrush)
	{ ((void)0); ::FrameRect(m_hDC, lpRect, (HBRUSH)pBrush->GetSafeHandle()); }
inline void CDC::InvertRect(LPCRECT lpRect)
	{ ((void)0); ::InvertRect(m_hDC, lpRect); }
inline BOOL CDC::DrawIcon(int x, int y, HICON hIcon)
	{ ((void)0); return ::DrawIcon(m_hDC, x, y, hIcon); }
inline BOOL CDC::DrawIcon(POINT point, HICON hIcon)
	{ ((void)0); return ::DrawIcon(m_hDC, point.x, point.y, hIcon); }

inline BOOL CDC::DrawState(CPoint pt, CSize size, HBITMAP hBitmap, UINT nFlags, HBRUSH hBrush)
	{ ((void)0); return ::DrawState(m_hDC, hBrush,
		0, (LPARAM)hBitmap, 0, pt.x, pt.y, size.cx, size.cy, nFlags|0x0004); }
inline BOOL CDC::DrawState(CPoint pt, CSize size, CBitmap* pBitmap, UINT nFlags, CBrush* pBrush)
	{ ((void)0); return ::DrawState(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),
		0, (LPARAM)pBitmap->GetSafeHandle(), 0, pt.x, pt.y, size.cx, size.cy, nFlags|0x0004); }
inline BOOL CDC::DrawState(CPoint pt, CSize size, HICON hIcon, UINT nFlags, HBRUSH hBrush)
	{ ((void)0); return ::DrawState(m_hDC, hBrush, 0,
		(LPARAM)hIcon, 0, pt.x, pt.y, size.cx, size.cy, nFlags|0x0003); }
inline BOOL CDC::DrawState(CPoint pt, CSize size, HICON hIcon, UINT nFlags, CBrush* pBrush)
	{ ((void)0); return ::DrawState(m_hDC, (HBRUSH)pBrush->GetSafeHandle(), 0,
		(LPARAM)hIcon, 0, pt.x, pt.y, size.cx, size.cy, nFlags|0x0003); }
inline BOOL CDC::DrawState(CPoint pt, CSize size, LPCTSTR lpszText, UINT nFlags, BOOL bPrefixText, int nTextLen, HBRUSH hBrush)
	{ ((void)0); return ::DrawState(m_hDC, hBrush,
		0, (LPARAM)lpszText, (WPARAM)nTextLen, pt.x, pt.y, size.cx, size.cy, nFlags|(bPrefixText ? 0x0002 : 0x0001)); }
inline BOOL CDC::DrawState(CPoint pt, CSize size, LPCTSTR lpszText, UINT nFlags, BOOL bPrefixText, int nTextLen, CBrush* pBrush)
	{ ((void)0); return ::DrawState(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),
		0, (LPARAM)lpszText, (WPARAM)nTextLen, pt.x, pt.y, size.cx, size.cy, nFlags|(bPrefixText ? 0x0002 : 0x0001)); }
inline BOOL CDC::DrawState(CPoint pt, CSize size, DRAWSTATEPROC lpDrawProc, LPARAM lData, UINT nFlags, HBRUSH hBrush)
	{ ((void)0); return ::DrawState(m_hDC, hBrush,
		lpDrawProc, lData, 0, pt.x, pt.y, size.cx, size.cy, nFlags|0x0000); }
inline BOOL CDC::DrawState(CPoint pt, CSize size, DRAWSTATEPROC lpDrawProc, LPARAM lData, UINT nFlags, CBrush* pBrush)
	{ ((void)0); return ::DrawState(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),
		lpDrawProc, lData, 0, pt.x, pt.y, size.cx, size.cy, nFlags|0x0000); }
inline BOOL CDC::DrawEdge(LPRECT lpRect, UINT nEdge, UINT nFlags)
	{ ((void)0); return ::DrawEdge(m_hDC, lpRect, nEdge, nFlags); }
inline BOOL CDC::DrawFrameControl(LPRECT lpRect, UINT nType, UINT nState)
	{ ((void)0); return ::DrawFrameControl(m_hDC, lpRect, nType, nState); }
#line 708 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin1.inl"

inline BOOL CDC::Chord(int x1, int y1, int x2, int y2, int x3, int y3,
	int x4, int y4)
	{ ((void)0); return ::Chord(m_hDC, x1, y1, x2, y2, x3, y3, x4, y4); }
inline BOOL CDC::Chord(LPCRECT lpRect, POINT ptStart, POINT ptEnd)
	{ ((void)0); return ::Chord(m_hDC, lpRect->left, lpRect->top,
		lpRect->right, lpRect->bottom, ptStart.x, ptStart.y,
		ptEnd.x, ptEnd.y); }
inline void CDC::DrawFocusRect(LPCRECT lpRect)
	{ ((void)0); ::DrawFocusRect(m_hDC, lpRect); }
inline BOOL CDC::Ellipse(int x1, int y1, int x2, int y2)
	{ ((void)0); return ::Ellipse(m_hDC, x1, y1, x2, y2); }
inline BOOL CDC::Ellipse(LPCRECT lpRect)
	{ ((void)0); return ::Ellipse(m_hDC, lpRect->left, lpRect->top,
		lpRect->right, lpRect->bottom); }
inline BOOL CDC::Pie(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)
	{ ((void)0); return ::Pie(m_hDC, x1, y1, x2, y2, x3, y3, x4, y4); }
inline BOOL CDC::Pie(LPCRECT lpRect, POINT ptStart, POINT ptEnd)
	{ ((void)0); return ::Pie(m_hDC, lpRect->left, lpRect->top,
		lpRect->right, lpRect->bottom, ptStart.x, ptStart.y,
		ptEnd.x, ptEnd.y); }
inline BOOL CDC::Polygon(LPPOINT lpPoints, int nCount)
	{ ((void)0); return ::Polygon(m_hDC, lpPoints, nCount); }
inline BOOL CDC::PolyPolygon(LPPOINT lpPoints, LPINT lpPolyCounts, int nCount)
	{ ((void)0); return ::PolyPolygon(m_hDC, lpPoints, lpPolyCounts, nCount); }
inline BOOL CDC::Rectangle(int x1, int y1, int x2, int y2)
	{ ((void)0); return ::Rectangle(m_hDC, x1, y1, x2, y2); }
inline BOOL CDC::Rectangle(LPCRECT lpRect)
	{ ((void)0); return ::Rectangle(m_hDC, lpRect->left, lpRect->top,
		lpRect->right, lpRect->bottom); }
inline BOOL CDC::RoundRect(int x1, int y1, int x2, int y2, int x3, int y3)
	{ ((void)0); return ::RoundRect(m_hDC, x1, y1, x2, y2, x3, y3); }
inline BOOL CDC::RoundRect(LPCRECT lpRect, POINT point)
	{ ((void)0); return ::RoundRect(m_hDC, lpRect->left, lpRect->top,
		lpRect->right, lpRect->bottom, point.x, point.y); }
inline BOOL CDC::PatBlt(int x, int y, int nWidth, int nHeight, DWORD dwRop)
	{ ((void)0); return ::PatBlt(m_hDC, x, y, nWidth, nHeight, dwRop); }
inline BOOL CDC::BitBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
	int xSrc, int ySrc, DWORD dwRop)
	{ ((void)0); return ::BitBlt(m_hDC, x, y, nWidth, nHeight,
		pSrcDC->GetSafeHdc(), xSrc, ySrc, dwRop); }
inline BOOL CDC::StretchBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
	int xSrc, int ySrc, int nSrcWidth, int nSrcHeight, DWORD dwRop)
	{ ((void)0); return ::StretchBlt(m_hDC, x, y, nWidth, nHeight,
		pSrcDC->GetSafeHdc(), xSrc, ySrc, nSrcWidth, nSrcHeight,
		dwRop); }
inline COLORREF CDC::GetPixel(int x, int y) const
	{ ((void)0); return ::GetPixel(m_hDC, x, y); }
inline COLORREF CDC::GetPixel(POINT point) const
	{ ((void)0); return ::GetPixel(m_hDC, point.x, point.y); }
inline COLORREF CDC::SetPixel(int x, int y, COLORREF crColor)
	{ ((void)0); return ::SetPixel(m_hDC, x, y, crColor); }
inline COLORREF CDC::SetPixel(POINT point, COLORREF crColor)
	{ ((void)0); return ::SetPixel(m_hDC, point.x, point.y, crColor); }
inline BOOL CDC::FloodFill(int x, int y, COLORREF crColor)
	{ ((void)0); return ::FloodFill(m_hDC, x, y, crColor); }
inline BOOL CDC::ExtFloodFill(int x, int y, COLORREF crColor, UINT nFillType)
	{ ((void)0); return ::ExtFloodFill(m_hDC, x, y, crColor, nFillType); }
inline BOOL CDC::TextOutA(int x, int y, LPCTSTR lpszString, int nCount)
	{ ((void)0); return ::TextOutA(m_hDC, x, y, lpszString, nCount); }
inline BOOL CDC::TextOutA(int x, int y, const CString& str)
	{ ((void)0); return TextOutA(x, y, (LPCTSTR)str, str.GetLength()); } 
inline BOOL CDC::ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
	LPCTSTR lpszString, UINT nCount, LPINT lpDxWidths)
	{ ((void)0); return ::ExtTextOutA(m_hDC, x, y, nOptions, lpRect,
		lpszString, nCount, lpDxWidths); }
inline BOOL CDC::ExtTextOutA(int x, int y, UINT nOptions, LPCRECT lpRect,
	const CString& str, LPINT lpDxWidths)
	{ ((void)0); return ::ExtTextOutA(m_hDC, x, y, nOptions, lpRect,
		str, str.GetLength(), lpDxWidths); }
inline CSize CDC::TabbedTextOutA(int x, int y, LPCTSTR lpszString, int nCount,
	int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin)
	{ ((void)0); return ::TabbedTextOutA(m_hDC, x, y, lpszString, nCount,
		nTabPositions, lpnTabStopPositions, nTabOrigin); }
inline CSize CDC::TabbedTextOutA(int x, int y, const CString& str,
	int nTabPositions, LPINT lpnTabStopPositions, int nTabOrigin)
	{ ((void)0); return ::TabbedTextOutA(m_hDC, x, y, str, str.GetLength(),
		nTabPositions, lpnTabStopPositions, nTabOrigin); }
inline int CDC::DrawTextA(LPCTSTR lpszString, int nCount, LPRECT lpRect,
		UINT nFormat)
	{ ((void)0);
		return ::DrawTextA(m_hDC, lpszString, nCount, lpRect, nFormat); }
inline int CDC::DrawTextA(const CString& str, LPRECT lpRect, UINT nFormat)
	{ ((void)0);
		
		((void)0);
		((void)0);
		return DrawTextA((LPCTSTR)str, str.GetLength(), lpRect, nFormat); }
inline CSize CDC::GetTextExtent(LPCTSTR lpszString, int nCount) const
	{
		((void)0);
		SIZE size;
		((void)(::GetTextExtentPoint32A(m_hAttribDC, lpszString, nCount, &size)));
		return size;
	}
inline CSize CDC::GetTextExtent(const CString& str) const
	{
		((void)0);
		SIZE size;
		((void)(::GetTextExtentPoint32A(m_hAttribDC, str, str.GetLength(), &size)));
		return size;
	}

inline CSize CDC::GetOutputTextExtent(LPCTSTR lpszString, int nCount) const
	{
		((void)0);
		SIZE size;
		((void)(::GetTextExtentPoint32A(m_hDC, lpszString, nCount, &size)));
		return size;
	}
inline CSize CDC::GetOutputTextExtent(const CString& str) const
	{
		((void)0);
		SIZE size;
		((void)(::GetTextExtentPoint32A(m_hDC, str, str.GetLength(), &size)));
		return size;
	}

inline CSize CDC::GetTabbedTextExtentA(LPCTSTR lpszString, int nCount,
	int nTabPositions, LPINT lpnTabStopPositions) const
	{ ((void)0); return ::GetTabbedTextExtentA(m_hAttribDC, lpszString, nCount,
		nTabPositions, lpnTabStopPositions); }
inline  CSize CDC::GetTabbedTextExtentA(const CString& str,
		int nTabPositions, LPINT lpnTabStopPositions) const
	{ ((void)0); return ::GetTabbedTextExtentA(m_hAttribDC,
		str, str.GetLength(), nTabPositions, lpnTabStopPositions); }
inline CSize CDC::GetOutputTabbedTextExtent(LPCTSTR lpszString, int nCount,
	int nTabPositions, LPINT lpnTabStopPositions) const
	{ ((void)0); return ::GetTabbedTextExtentA(m_hDC, lpszString, nCount,
		nTabPositions, lpnTabStopPositions); }
inline  CSize CDC::GetOutputTabbedTextExtent(const CString& str,
		int nTabPositions, LPINT lpnTabStopPositions) const
	{ ((void)0); return ::GetTabbedTextExtentA(m_hDC,
		str, str.GetLength(), nTabPositions, lpnTabStopPositions); }
inline BOOL CDC::GrayStringA(CBrush* pBrush,
	BOOL (__stdcall* lpfnOutput)(HDC, LPARAM, int),
		LPARAM lpData, int nCount,
		int x, int y, int nWidth, int nHeight)
	{ ((void)0); return ::GrayStringA(m_hDC, (HBRUSH)pBrush->GetSafeHandle(),
		(GRAYSTRINGPROC)lpfnOutput, lpData, nCount, x, y, nWidth, nHeight); }
inline UINT CDC::GetTextAlign() const
	{ ((void)0); return ::GetTextAlign(m_hAttribDC); }
inline int CDC::GetTextFaceA(int nCount, LPTSTR lpszFacename) const
	{ ((void)0); return ::GetTextFaceA(m_hAttribDC, nCount, lpszFacename); }
inline  int CDC::GetTextFaceA(CString& rString) const
	{ ((void)0); int nResult = ::GetTextFaceA(m_hAttribDC,
		256, rString.GetBuffer(256)); rString.ReleaseBuffer();
		return nResult; }
inline BOOL CDC::GetTextMetricsA(LPTEXTMETRIC lpMetrics) const
	{ ((void)0); return ::GetTextMetricsA(m_hAttribDC, lpMetrics); }
inline BOOL CDC::GetOutputTextMetrics(LPTEXTMETRIC lpMetrics) const
	{ ((void)0); return ::GetTextMetricsA(m_hDC, lpMetrics); }
inline int CDC::GetTextCharacterExtra() const
	{ ((void)0); return ::GetTextCharacterExtra(m_hAttribDC); }
inline BOOL CDC::GetCharWidthA(UINT nFirstChar, UINT nLastChar, LPINT lpBuffer) const
	{ ((void)0); return ::GetCharWidthA(m_hAttribDC, nFirstChar, nLastChar, lpBuffer); }
inline BOOL CDC::GetOutputCharWidth(UINT nFirstChar, UINT nLastChar, LPINT lpBuffer) const
	{ ((void)0); return ::GetCharWidthA(m_hDC, nFirstChar, nLastChar, lpBuffer); }
inline CSize CDC::GetAspectRatioFilter() const
	{
		((void)0);
		SIZE size;
		((void)(::GetAspectRatioFilterEx(m_hAttribDC, &size)));
		return size;
	}
inline BOOL CDC::ScrollDC(int dx, int dy,
		LPCRECT lpRectScroll, LPCRECT lpRectClip,
		CRgn* pRgnUpdate, LPRECT lpRectUpdate)
	{ ((void)0); return ::ScrollDC(m_hDC, dx, dy, lpRectScroll,
		lpRectClip, (HRGN)pRgnUpdate->GetSafeHandle(), lpRectUpdate); }


inline int CDC::Escape(int nEscape, int nCount, LPCSTR lpszInData, LPVOID lpOutData)
	{ ((void)0); return ::Escape(m_hDC, nEscape, nCount, lpszInData, lpOutData);}


inline UINT CDC::SetBoundsRect(LPCRECT lpRectBounds, UINT flags)
	{ ((void)0); return ::SetBoundsRect(m_hDC, lpRectBounds, flags); }
inline UINT CDC::GetBoundsRect(LPRECT lpRectBounds, UINT flags)
	{ ((void)0); return ::GetBoundsRect(m_hAttribDC, lpRectBounds, flags); }
inline BOOL CDC::ResetDCA(const DEVMODE* lpDevMode)
	{ ((void)0); return ::ResetDCA(m_hAttribDC, lpDevMode) != 0; }
inline UINT CDC::GetOutlineTextMetricsA(UINT cbData, LPOUTLINETEXTMETRIC lpotm) const
	{ ((void)0); return ::GetOutlineTextMetricsA(m_hAttribDC, cbData, lpotm); }
inline BOOL CDC::GetCharABCWidthsA(UINT nFirstChar, UINT nLastChar, LPABC lpabc) const
	{ ((void)0); return ::GetCharABCWidthsA(m_hAttribDC, nFirstChar, nLastChar, lpabc); }
inline DWORD CDC::GetFontData(DWORD dwTable, DWORD dwOffset, LPVOID lpData,
	DWORD cbData) const
	{ ((void)0); return ::GetFontData(m_hAttribDC, dwTable, dwOffset, lpData, cbData); }
inline int CDC::GetKerningPairsA(int nPairs, LPKERNINGPAIR lpkrnpair) const
	{ ((void)0); return ::GetKerningPairsA(m_hAttribDC, nPairs, lpkrnpair); }
inline DWORD CDC::GetGlyphOutlineA(UINT nChar, UINT nFormat, LPGLYPHMETRICS lpgm,
		DWORD cbBuffer, LPVOID lpBuffer, const MAT2* lpmat2) const
	{ ((void)0); return ::GetGlyphOutlineA(m_hAttribDC, nChar, nFormat,
			lpgm, cbBuffer, lpBuffer, lpmat2); }


inline int CDC::StartDocA(LPDOCINFO lpDocInfo)
	{ ((void)0); return ::StartDocA(m_hDC, lpDocInfo); }
inline int CDC::StartPage()
	{ ((void)0); return ::StartPage(m_hDC); }
inline int CDC::EndPage()
	{ ((void)0); return ::EndPage(m_hDC); }
inline int CDC::SetAbortProc(BOOL (__stdcall* lpfn)(HDC, int))
	{ ((void)0); return ::SetAbortProc(m_hDC, (ABORTPROC)lpfn); }
inline int CDC::AbortDoc()
	{ ((void)0); return ::AbortDoc(m_hDC); }
inline int CDC::EndDoc()
	{ ((void)0); return ::EndDoc(m_hDC); }

inline BOOL CDC::MaskBlt(int x, int y, int nWidth, int nHeight, CDC* pSrcDC,
		int xSrc, int ySrc, CBitmap& maskBitmap, int xMask, int yMask, DWORD dwRop)
	{ ((void)0); return ::MaskBlt(m_hDC, x, y, nWidth, nHeight, pSrcDC->GetSafeHdc(),
		xSrc, ySrc,  (HBITMAP)maskBitmap.m_hObject, xMask, yMask, dwRop); }
inline BOOL CDC::PlgBlt(LPPOINT lpPoint, CDC* pSrcDC, int xSrc, int ySrc,
		int nWidth, int nHeight, CBitmap& maskBitmap, int xMask, int yMask)
	{ ((void)0); return ::PlgBlt(m_hDC, lpPoint, pSrcDC->GetSafeHdc(), xSrc, ySrc, nWidth,
		nHeight, (HBITMAP)maskBitmap.m_hObject, xMask, yMask); }
inline BOOL CDC::SetPixelV(int x, int y, COLORREF crColor)
	{ ((void)0); return ::SetPixelV(m_hDC, x, y, crColor); }
inline BOOL CDC::SetPixelV(POINT point, COLORREF crColor)
	{ ((void)0); return ::SetPixelV(m_hDC, point.x, point.y, crColor); }
inline BOOL CDC::AngleArc(int x, int y, int nRadius,
		float fStartAngle, float fSweepAngle)
	{ ((void)0); return ::AngleArc(m_hDC, x, y, nRadius, fStartAngle, fSweepAngle); }
inline BOOL CDC::ArcTo(LPCRECT lpRect, POINT ptStart, POINT ptEnd)
	{ ((void)0); return ArcTo(lpRect->left, lpRect->top, lpRect->right,
		lpRect->bottom, ptStart.x, ptStart.y, ptEnd.x, ptEnd.y); }
inline int CDC::GetArcDirection() const
	{ ((void)0); return ::GetArcDirection(m_hAttribDC); }
inline BOOL CDC::PolyPolyline(const POINT* lpPoints, const DWORD* lpPolyPoints,
		int nCount)
	{ ((void)0); return ::PolyPolyline(m_hDC, lpPoints, lpPolyPoints, nCount); }
inline BOOL CDC::GetColorAdjustment(LPCOLORADJUSTMENT lpColorAdjust) const
	{ ((void)0); return ::GetColorAdjustment(m_hAttribDC, lpColorAdjust); }
inline CPen* CDC::GetCurrentPen() const
	{ ((void)0); return CPen::FromHandle((HPEN)::GetCurrentObject(m_hAttribDC, 1)); }
inline CBrush* CDC::GetCurrentBrush() const
	{ ((void)0); return CBrush::FromHandle((HBRUSH)::GetCurrentObject(m_hAttribDC, 2)); }
inline CPalette* CDC::GetCurrentPalette() const
	{ ((void)0); return CPalette::FromHandle((HPALETTE)::GetCurrentObject(m_hAttribDC, 5)); }
inline CFont* CDC::GetCurrentFont() const
	{ ((void)0); return CFont::FromHandle((HFONT)::GetCurrentObject(m_hAttribDC, 6)); }
inline CBitmap* CDC::GetCurrentBitmap() const
	{ ((void)0); return CBitmap::FromHandle((HBITMAP)::GetCurrentObject(m_hAttribDC, 7)); }
inline BOOL CDC::PolyBezier(const POINT* lpPoints, int nCount)
	{ ((void)0); return ::PolyBezier(m_hDC, lpPoints, nCount); }

inline int CDC::DrawEscape(int nEscape, int nInputSize, LPCSTR lpszInputData)
	{ ((void)0); return ::DrawEscape(m_hDC, nEscape, nInputSize, lpszInputData); }
inline int CDC::Escape(int nEscape, int nInputSize, LPCSTR lpszInputData,
		int nOutputSize, LPSTR lpszOutputData)
	{ ((void)0); return ::ExtEscape(m_hDC, nEscape, nInputSize, lpszInputData,
		nOutputSize, lpszOutputData); }

inline BOOL CDC::GetCharABCWidthsA(UINT nFirstChar, UINT nLastChar,
		LPABCFLOAT lpABCF) const
	{ ((void)0); return ::GetCharABCWidthsFloatA(m_hAttribDC, nFirstChar, nLastChar, lpABCF); }
inline BOOL CDC::GetCharWidthA(UINT nFirstChar, UINT nLastChar,
		float* lpFloatBuffer) const
	{ ((void)0); return ::GetCharWidthFloatA(m_hAttribDC, nFirstChar, nLastChar, lpFloatBuffer); }

inline BOOL CDC::AbortPath()
	{ ((void)0); return ::AbortPath(m_hDC); }
inline BOOL CDC::BeginPath()
	{ ((void)0); return ::BeginPath(m_hDC); }
inline BOOL CDC::CloseFigure()
	{ ((void)0); return ::CloseFigure(m_hDC); }
inline BOOL CDC::EndPath()
	{ ((void)0); return ::EndPath(m_hDC); }
inline BOOL CDC::FillPath()
	{ ((void)0); return ::FillPath(m_hDC); }
inline BOOL CDC::FlattenPath()
	{ ((void)0); return ::FlattenPath(m_hDC); }
inline float CDC::GetMiterLimit() const
	{ ((void)0); float fMiterLimit;
		((void)(::GetMiterLimit(m_hDC, &fMiterLimit))); return fMiterLimit; }
inline int CDC::GetPath(LPPOINT lpPoints, LPBYTE lpTypes, int nCount) const
	{ ((void)0); return ::GetPath(m_hDC, lpPoints, lpTypes, nCount); }
inline BOOL CDC::SetMiterLimit(float fMiterLimit)
	{ ((void)0); return ::SetMiterLimit(m_hDC, fMiterLimit, 0); }
inline BOOL CDC::StrokeAndFillPath()
	{ ((void)0); return ::StrokeAndFillPath(m_hDC); }
inline BOOL CDC::StrokePath()
	{ ((void)0); return ::StrokePath(m_hDC); }
inline BOOL CDC::WidenPath()
	{ ((void)0); return ::WidenPath(m_hDC); }

inline BOOL CDC::AddMetaFileComment(UINT nDataSize, const BYTE* pCommentData)
	{ ((void)0); return ::GdiComment(m_hDC, nDataSize, pCommentData); }
inline BOOL CDC::PlayMetaFile(HENHMETAFILE hEnhMF, LPCRECT lpBounds)
	{ ((void)0); return ::PlayEnhMetaFile(m_hDC, hEnhMF, lpBounds); }


inline CMenu::CMenu()
	{ m_hMenu = 0; }
inline CMenu::~CMenu()
	{ DestroyMenu(); }
inline BOOL CMenu::CreateMenu()
	{ return Attach(::CreateMenu()); }
inline BOOL CMenu::CreatePopupMenu()
	{ return Attach(::CreatePopupMenu()); }
inline CMenu::operator HMENU() const
	{ ((void)0);
		return this == 0 ? 0 : m_hMenu; }
inline CMenu::operator==(const CMenu& menu) const
	{ return ((HMENU) menu) == m_hMenu; }
inline CMenu::operator!=(const CMenu& menu) const
	{ return ((HMENU) menu) != m_hMenu; }
inline HMENU CMenu::GetSafeHmenu() const
	{ ((void)0);
		return this == 0 ? 0 : m_hMenu; }
inline BOOL CMenu::DeleteMenu(UINT nPosition, UINT nFlags)
	{ ((void)0); return ::DeleteMenu(m_hMenu, nPosition, nFlags); }
inline BOOL CMenu::AppendMenuA(UINT nFlags, UINT nIDNewItem, LPCTSTR lpszNewItem)
	{ ((void)0); return ::AppendMenuA(m_hMenu, nFlags, nIDNewItem, lpszNewItem); }
inline BOOL CMenu::AppendMenuA(UINT nFlags, UINT nIDNewItem, const CBitmap* pBmp)
	{ ((void)0); return ::AppendMenuA(m_hMenu, nFlags | 0x00000004L, nIDNewItem,
		(LPCTSTR)pBmp->GetSafeHandle()); }
inline UINT CMenu::CheckMenuItem(UINT nIDCheckItem, UINT nCheck)
	{ ((void)0); return (UINT)::CheckMenuItem(m_hMenu, nIDCheckItem, nCheck); }
inline UINT CMenu::EnableMenuItem(UINT nIDEnableItem, UINT nEnable)
	{ ((void)0); return ::EnableMenuItem(m_hMenu, nIDEnableItem, nEnable); }
inline BOOL CMenu::SetDefaultItem(UINT uItem, BOOL fByPos)
	{ ((void)0); return ::SetMenuDefaultItem(m_hMenu, uItem, fByPos); }
inline UINT CMenu::GetDefaultItem(UINT gmdiFlags, BOOL fByPos)
	{ ((void)0); return ::GetMenuDefaultItem(m_hMenu, fByPos, gmdiFlags); }
inline UINT CMenu::GetMenuItemCount() const
	{ ((void)0); return ::GetMenuItemCount(m_hMenu); }
inline UINT CMenu::GetMenuItemID(int nPos) const
	{ ((void)0); return ::GetMenuItemID(m_hMenu, nPos); }
inline UINT CMenu::GetMenuState(UINT nID, UINT nFlags) const
	{ ((void)0); return ::GetMenuState(m_hMenu, nID, nFlags); }
inline int CMenu::GetMenuStringA(UINT nIDItem, LPTSTR lpString, int nMaxCount, UINT nFlags) const
	{ ((void)0); return ::GetMenuStringA(m_hMenu, nIDItem, lpString, nMaxCount, nFlags); }




inline int CMenu::GetMenuStringA(UINT nIDItem, CString& rString, UINT nFlags) const
	{
		((void)0);
		int nStringLen = ::GetMenuStringA(m_hMenu, nIDItem, 0, 0, nFlags);
		if (nStringLen > 0)
		{



			int nLen((nStringLen + 1) << 1);
#line 1058 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin1.inl"
			LPTSTR pstrString = rString.GetBufferSetLength(nLen);
			::GetMenuStringA(m_hMenu, nIDItem, pstrString, nLen, nFlags);
			rString.ReleaseBuffer();
		}
		else
			rString.Empty();

		return nStringLen;
	}

inline BOOL CMenu::GetMenuItemInfoA(UINT nIDItem, LPMENUITEMINFO lpMenuItemInfo, BOOL fByPos)
	{ ((void)0); ((void)0);
		return ::GetMenuItemInfoA(m_hMenu, nIDItem, fByPos, lpMenuItemInfo); }
inline CMenu* CMenu::GetSubMenu(int nPos) const
	{ ((void)0); return CMenu::FromHandle(::GetSubMenu(m_hMenu, nPos)); }
inline BOOL CMenu::InsertMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem,
		LPCTSTR lpszNewItem)
	{ ((void)0); return ::InsertMenuA(m_hMenu, nPosition, nFlags, nIDNewItem, lpszNewItem); }
inline BOOL CMenu::InsertMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem, const CBitmap* pBmp)
	{ ((void)0); return ::InsertMenuA(m_hMenu, nPosition, nFlags | 0x00000004L, nIDNewItem,
		(LPCTSTR)pBmp->GetSafeHandle()); }
inline BOOL CMenu::ModifyMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem, LPCTSTR lpszNewItem)
	{ ((void)0); return ::ModifyMenuA(m_hMenu, nPosition, nFlags, nIDNewItem, lpszNewItem); }
inline BOOL CMenu::ModifyMenuA(UINT nPosition, UINT nFlags, UINT nIDNewItem, const CBitmap* pBmp)
	{ ((void)0); return ::ModifyMenuA(m_hMenu, nPosition, nFlags | 0x00000004L, nIDNewItem,
		(LPCTSTR)pBmp->GetSafeHandle()); }
inline BOOL CMenu::RemoveMenu(UINT nPosition, UINT nFlags)
	{ ((void)0); return ::RemoveMenu(m_hMenu, nPosition, nFlags); }
inline BOOL CMenu::SetMenuItemBitmaps(UINT nPosition, UINT nFlags,
		const CBitmap* pBmpUnchecked, const CBitmap* pBmpChecked)
	{ ((void)0); return ::SetMenuItemBitmaps(m_hMenu, nPosition, nFlags,
		(HBITMAP)pBmpUnchecked->GetSafeHandle(),
		(HBITMAP)pBmpChecked->GetSafeHandle()); }
inline BOOL CMenu::LoadMenuA(LPCTSTR lpszResourceName)
	{ return Attach(::LoadMenuA(
AfxGetResourceHandle(), lpszResourceName)); }
inline BOOL CMenu::LoadMenuA(UINT nIDResource)
	{ return Attach(::LoadMenuA(
AfxGetResourceHandle(), (LPSTR)((ULONG_PTR)((WORD)(nIDResource))))); }
inline BOOL CMenu::LoadMenuIndirectA(const void* lpMenuTemplate)
	{ return Attach(::LoadMenuIndirectA(lpMenuTemplate)); }

inline BOOL CMenu::SetMenuContextHelpId(DWORD dwContextHelpId)
	{ return ::SetMenuContextHelpId(m_hMenu, dwContextHelpId); }
inline DWORD CMenu::GetMenuContextHelpId() const
	{ return ::GetMenuContextHelpId(m_hMenu); }
inline BOOL CMenu::CheckMenuRadioItem(UINT nIDFirst, UINT nIDLast, UINT nIDItem, UINT nFlags)
	{ return ::CheckMenuRadioItem(m_hMenu, nIDFirst, nIDLast, nIDItem, nFlags); }


inline void CCmdUI::ContinueRouting()
	{ m_bContinueRouting = 1; }



#line 1114 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin1.inl"
#line 4640 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin2.inl"















inline CWnd::operator HWND() const
	{ return this == 0 ? 0 : m_hWnd; }
inline BOOL CWnd::operator==(const CWnd& wnd) const
	{ return ((HWND) wnd) == m_hWnd; }
inline BOOL CWnd::operator!=(const CWnd& wnd) const
	{ return ((HWND) wnd) != m_hWnd; }
inline HWND CWnd::GetSafeHwnd() const
	{ return this == 0 ? 0 : m_hWnd; }










inline CWnd* CWnd::GetOwner() const
	{ return m_hWndOwner != 0 ? CWnd::FromHandle(m_hWndOwner) : GetParent(); }
inline void CWnd::SetOwner(CWnd* pOwnerWnd)
	{ m_hWndOwner = pOwnerWnd != 0 ? pOwnerWnd->m_hWnd : 0; }
inline LRESULT CWnd::SendMessageA(UINT message, WPARAM wParam, LPARAM lParam)
	{ ((void)0); return ::SendMessageA(m_hWnd, message, wParam, lParam); }
inline BOOL CWnd::PostMessageA(UINT message, WPARAM wParam, LPARAM lParam)
	{ ((void)0); return ::PostMessageA(m_hWnd, message, wParam, lParam); }








inline void CWnd::SetFont(CFont* pFont, BOOL bRedraw)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0030, (WPARAM)pFont->GetSafeHandle(), bRedraw); }
inline CFont* CWnd::GetFont() const
	{ ((void)0); return CFont::FromHandle(
		(HFONT)::SendMessageA(m_hWnd, 0x0031, 0, 0)); }
inline CMenu* CWnd::GetMenu() const
	{ ((void)0); return CMenu::FromHandle(::GetMenu(m_hWnd)); }
inline BOOL CWnd::SetMenu(CMenu* pMenu)
	{ ((void)0); return ::SetMenu(m_hWnd, pMenu->GetSafeHmenu()); }
inline void CWnd::DrawMenuBar()
	{ ((void)0); ::DrawMenuBar(m_hWnd); }
inline CMenu* CWnd::GetSystemMenu(BOOL bRevert) const
	{ ((void)0); return CMenu::FromHandle(::GetSystemMenu(m_hWnd, bRevert)); }
inline BOOL CWnd::HiliteMenuItem(CMenu* pMenu, UINT nIDHiliteItem, UINT nHilite)
	{ ((void)0); return ::HiliteMenuItem(m_hWnd, pMenu->m_hMenu, nIDHiliteItem, nHilite); }






inline BOOL CWnd::IsIconic() const
	{ ((void)0); return ::IsIconic(m_hWnd); }
inline BOOL CWnd::IsZoomed() const
	{ ((void)0); return ::IsZoomed(m_hWnd); }




inline void CWnd::MoveWindow(LPCRECT lpRect, BOOL bRepaint)
	{ MoveWindow(lpRect->left, lpRect->top, lpRect->right - lpRect->left,
		lpRect->bottom - lpRect->top, bRepaint); }





inline UINT CWnd::ArrangeIconicWindows()
	{ ((void)0); return ::ArrangeIconicWindows(m_hWnd); }
inline int CWnd::SetWindowRgn(HRGN hRgn, BOOL bRedraw)
	{ ((void)0); return ::SetWindowRgn(m_hWnd, hRgn, bRedraw); }
inline int CWnd::GetWindowRgn(HRGN hRgn) const
	{ ((void)0); return ::GetWindowRgn(m_hWnd, hRgn); }
inline void CWnd::BringWindowToTop()
	{ ((void)0); ::BringWindowToTop(m_hWnd); }
inline void CWnd::GetWindowRect(LPRECT lpRect) const
	{ ((void)0); ::GetWindowRect(m_hWnd, lpRect); }
inline void CWnd::GetClientRect(LPRECT lpRect) const
	{ ((void)0); ::GetClientRect(m_hWnd, lpRect); }
inline void CWnd::MapWindowPoints(CWnd* pwndTo, LPPOINT lpPoint, UINT nCount) const
	{ ((void)0); ::MapWindowPoints(m_hWnd, pwndTo->GetSafeHwnd(), lpPoint, nCount); }
inline void CWnd::MapWindowPoints(CWnd* pwndTo, LPRECT lpRect) const
	{ ((void)0); ::MapWindowPoints(m_hWnd, pwndTo->GetSafeHwnd(), (LPPOINT)lpRect, 2); }
inline void CWnd::ClientToScreen(LPPOINT lpPoint) const
	{ ((void)0); ::ClientToScreen(m_hWnd, lpPoint); }
inline void CWnd::ScreenToClient(LPPOINT lpPoint) const
	{ ((void)0); ::ScreenToClient(m_hWnd, lpPoint); }
inline CDC* CWnd::BeginPaint(LPPAINTSTRUCT lpPaint)
	{ ((void)0); return CDC::FromHandle(::BeginPaint(m_hWnd, lpPaint)); }
inline void CWnd::EndPaint(LPPAINTSTRUCT lpPaint)
	{ ((void)0); ::EndPaint(m_hWnd, lpPaint); }
inline CDC* CWnd::GetDC()
	{ ((void)0); return CDC::FromHandle(::GetDC(m_hWnd)); }
inline CDC* CWnd::GetWindowDC()
	{ ((void)0); return CDC::FromHandle(::GetWindowDC(m_hWnd)); }
inline int CWnd::ReleaseDC(CDC* pDC)
	{ ((void)0); return ::ReleaseDC(m_hWnd, pDC->m_hDC); }
inline void CWnd::UpdateWindow()
	{ ((void)0); ::UpdateWindow(m_hWnd); }
inline void CWnd::SetRedraw(BOOL bRedraw)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x000B, bRedraw, 0); }
inline BOOL CWnd::GetUpdateRect(LPRECT lpRect, BOOL bErase)
	{ ((void)0); return ::GetUpdateRect(m_hWnd, lpRect, bErase); }
inline int CWnd::GetUpdateRgn(CRgn* pRgn, BOOL bErase)
	{ ((void)0); return ::GetUpdateRgn(m_hWnd, (HRGN)pRgn->GetSafeHandle(), bErase); }
inline void CWnd::Invalidate(BOOL bErase)
	{ ((void)0); ::InvalidateRect(m_hWnd, 0, bErase); }
inline void CWnd::InvalidateRect(LPCRECT lpRect, BOOL bErase)
	{ ((void)0); ::InvalidateRect(m_hWnd, lpRect, bErase); }
inline void CWnd::InvalidateRgn(CRgn* pRgn, BOOL bErase)
	{ ((void)0); ::InvalidateRgn(m_hWnd, (HRGN)pRgn->GetSafeHandle(), bErase); }
inline void CWnd::ValidateRect(LPCRECT lpRect)
	{ ((void)0); ::ValidateRect(m_hWnd, lpRect); }
inline void CWnd::ValidateRgn(CRgn* pRgn)
	{ ((void)0); ::ValidateRgn(m_hWnd, (HRGN)pRgn->GetSafeHandle()); }




inline BOOL CWnd::IsWindowVisible() const
	{ ((void)0); return ::IsWindowVisible(m_hWnd); }
inline void CWnd::ShowOwnedPopups(BOOL bShow)
	{ ((void)0); ::ShowOwnedPopups(m_hWnd, bShow); }
inline void CWnd::SendMessageToDescendants(
	UINT message, WPARAM wParam, LPARAM lParam, BOOL bDeep, BOOL bOnlyPerm)
	{ ((void)0); CWnd::SendMessageToDescendants(m_hWnd, message, wParam, lParam, bDeep,
		bOnlyPerm); }
inline CWnd* CWnd::GetDescendantWindow(int nID, BOOL bOnlyPerm) const
	{ ((void)0); return CWnd::GetDescendantWindow(m_hWnd, nID, bOnlyPerm); }





inline CDC* CWnd::GetDCEx(CRgn* prgnClip, DWORD flags)
	{ ((void)0); return CDC::FromHandle(::GetDCEx(m_hWnd, (HRGN)prgnClip->GetSafeHandle(), flags)); }
inline BOOL CWnd::LockWindowUpdate()
	{ ((void)0); return ::LockWindowUpdate(m_hWnd); }
inline void CWnd::UnlockWindowUpdate()
	{ ((void)0); ::LockWindowUpdate(0); }
inline BOOL CWnd::RedrawWindow(LPCRECT lpRectUpdate, CRgn* prgnUpdate,
	UINT flags)
	{ ((void)0); return ::RedrawWindow(m_hWnd, lpRectUpdate, (HRGN)prgnUpdate->GetSafeHandle(), flags); }
inline BOOL CWnd::EnableScrollBar(int nSBFlags, UINT nArrowFlags)
	{ ((void)0); return (BOOL)::EnableScrollBar(m_hWnd, nSBFlags, nArrowFlags); }

inline UINT CWnd::SetTimer(UINT nIDEvent, UINT nElapse,
		void (__stdcall* lpfnTimer)(HWND, UINT, UINT, DWORD))
	{ ((void)0); return ::SetTimer(m_hWnd, nIDEvent, nElapse,
		(TIMERPROC)lpfnTimer); }
inline BOOL CWnd::KillTimer(int nIDEvent)
	{ ((void)0); return ::KillTimer(m_hWnd, nIDEvent); }






inline CWnd* __stdcall CWnd::GetActiveWindow()
	{ return CWnd::FromHandle(::GetActiveWindow()); }
inline CWnd* CWnd::SetActiveWindow()
	{ ((void)0); return CWnd::FromHandle(::SetActiveWindow(m_hWnd)); }
inline CWnd* __stdcall CWnd::GetCapture()
	{ return CWnd::FromHandle(::GetCapture()); }
inline CWnd* CWnd::SetCapture()
	{ ((void)0); return CWnd::FromHandle(::SetCapture(m_hWnd)); }
inline CWnd* __stdcall CWnd::GetFocus()
	{ return CWnd::FromHandle(::GetFocus()); }




inline CWnd* __stdcall CWnd::GetDesktopWindow()
	{ return CWnd::FromHandle(::GetDesktopWindow()); }







inline int CWnd::DlgDirListA(LPTSTR lpPathSpec, int nIDListBox,
		int nIDStaticPath, UINT nFileType)
	{ ((void)0); return ::DlgDirListA(m_hWnd, lpPathSpec, nIDListBox,
			nIDStaticPath, nFileType); }
inline int CWnd::DlgDirListComboBoxA(LPTSTR lpPathSpec, int nIDComboBox,
		int nIDStaticPath, UINT nFileType)
	{ ((void)0); return ::DlgDirListComboBoxA(m_hWnd, lpPathSpec,
			nIDComboBox, nIDStaticPath, nFileType); }
inline BOOL CWnd::DlgDirSelect(LPTSTR lpString, int nIDListBox)
	{ ((void)0); return ::DlgDirSelectExA(m_hWnd, lpString, 260, nIDListBox); }
inline BOOL CWnd::DlgDirSelectComboBox(LPTSTR lpString, int nIDComboBox)
	{ ((void)0); return ::DlgDirSelectComboBoxExA(m_hWnd, lpString, 260, nIDComboBox);}











inline CWnd* CWnd::GetNextDlgGroupItem(CWnd* pWndCtl, BOOL bPrevious) const
	{ ((void)0); return CWnd::FromHandle(::GetNextDlgGroupItem(m_hWnd,
			pWndCtl->GetSafeHwnd(), bPrevious)); }
inline CWnd* CWnd::GetNextDlgTabItem(CWnd* pWndCtl, BOOL bPrevious) const
	{ ((void)0); return CWnd::FromHandle(::GetNextDlgTabItem(m_hWnd,
			pWndCtl->GetSafeHwnd(), bPrevious)); }
















inline void CWnd::ShowScrollBar(UINT nBar, BOOL bShow)
	{ ((void)0); ::ShowScrollBar(m_hWnd, nBar, bShow); }
inline CWnd* CWnd::ChildWindowFromPoint(POINT point) const
	{ ((void)0); return CWnd::FromHandle(::ChildWindowFromPoint(m_hWnd, point)); }
inline CWnd* CWnd::ChildWindowFromPoint(POINT point, UINT nFlags) const
	{ ((void)0); return CWnd::FromHandle(::ChildWindowFromPointEx(m_hWnd, point, nFlags)); }
inline CWnd* __stdcall CWnd::FindWindowA(LPCTSTR lpszClassName, LPCTSTR lpszWindowName)
	{ return CWnd::FromHandle(::FindWindowA(lpszClassName, lpszWindowName)); }
inline CWnd* CWnd::GetNextWindow(UINT nFlag) const
	{ ((void)0); return CWnd::FromHandle(::GetNextWindow(m_hWnd, nFlag)); }
inline CWnd* CWnd::GetTopWindow() const
	{ ((void)0); return CWnd::FromHandle(::GetTopWindow(m_hWnd)); }
inline CWnd* CWnd::GetWindow(UINT nCmd) const
	{ ((void)0); return CWnd::FromHandle(::GetWindow(m_hWnd, nCmd)); }
inline CWnd* CWnd::GetLastActivePopup() const
	{ ((void)0); return CWnd::FromHandle(::GetLastActivePopup(m_hWnd)); }
inline BOOL CWnd::IsChild(const CWnd* pWnd) const
	{ ((void)0); return ::IsChild(m_hWnd, pWnd->GetSafeHwnd()); }
inline CWnd* CWnd::GetParent() const
	{ ((void)0); return CWnd::FromHandle(::GetParent(m_hWnd)); }
inline CWnd* CWnd::SetParent(CWnd* pWndNewParent)
	{ ((void)0); return CWnd::FromHandle(::SetParent(m_hWnd,
			pWndNewParent->GetSafeHwnd())); }
inline CWnd* __stdcall CWnd::WindowFromPoint(POINT point)
	{ return CWnd::FromHandle(::WindowFromPoint(point)); }
inline BOOL CWnd::FlashWindow(BOOL bInvert)
	{ ((void)0); return ::FlashWindow(m_hWnd, bInvert); }
inline BOOL CWnd::ChangeClipboardChain(HWND hWndNext)
	{ ((void)0); return ::ChangeClipboardChain(m_hWnd, hWndNext); }
inline HWND CWnd::SetClipboardViewer()
	{ ((void)0); return ::SetClipboardViewer(m_hWnd); }
inline BOOL CWnd::OpenClipboard()
	{ ((void)0); return ::OpenClipboard(m_hWnd); }
inline CWnd* __stdcall CWnd::GetOpenClipboardWindow()
	{ return CWnd::FromHandle(::GetOpenClipboardWindow()); }
inline CWnd* __stdcall CWnd::GetClipboardOwner()
	{ return CWnd::FromHandle(::GetClipboardOwner()); }
inline CWnd* __stdcall CWnd::GetClipboardViewer()
	{ return CWnd::FromHandle(::GetClipboardViewer()); }
inline void CWnd::CreateCaret(CBitmap* pBitmap)
	{ ((void)0); ::CreateCaret(m_hWnd, (HBITMAP)pBitmap->GetSafeHandle(), 0, 0); }
inline void CWnd::CreateSolidCaret(int nWidth, int nHeight)
	{ ((void)0); ::CreateCaret(m_hWnd, (HBITMAP)0, nWidth, nHeight); }
inline void CWnd::CreateGrayCaret(int nWidth, int nHeight)
	{ ((void)0); ::CreateCaret(m_hWnd, (HBITMAP)1, nWidth, nHeight); }
inline CPoint __stdcall CWnd::GetCaretPos()
	{ CPoint point; ::GetCaretPos((LPPOINT)&point); return point; }
inline void __stdcall CWnd::SetCaretPos(POINT point)
	{ ::SetCaretPos(point.x, point.y); }
inline void CWnd::HideCaret()
	{ ((void)0); ::HideCaret(m_hWnd); }
inline void CWnd::ShowCaret()
	{ ((void)0); ::ShowCaret(m_hWnd); }
inline BOOL CWnd::SetForegroundWindow()
	{ ((void)0); return ::SetForegroundWindow(m_hWnd); }
inline CWnd* __stdcall CWnd::GetForegroundWindow()
	{ return CWnd::FromHandle(::GetForegroundWindow()); }

inline BOOL CWnd::SendNotifyMessageA(UINT message, WPARAM wParam, LPARAM lParam)
	{ ((void)0); return ::SendNotifyMessageA(m_hWnd, message, wParam, lParam); }


inline HICON CWnd::SetIcon(HICON hIcon, BOOL bBigIcon)
	{ ((void)0); return (HICON)::SendMessageA(m_hWnd, 0x0080, bBigIcon, (LPARAM)hIcon); }
inline HICON CWnd::GetIcon(BOOL bBigIcon) const
	{ ((void)0); return (HICON)::SendMessageA(m_hWnd, 0x007F, bBigIcon, 0); }
inline void CWnd::Print(CDC* pDC, DWORD dwFlags) const
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0317, (WPARAM)pDC->GetSafeHdc(), dwFlags); }
inline void CWnd::PrintClient(CDC* pDC, DWORD dwFlags) const
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0318, (WPARAM)pDC->GetSafeHdc(), dwFlags); }
inline BOOL CWnd::SetWindowContextHelpId(DWORD dwContextHelpId)
	{ ((void)0); return ::SetWindowContextHelpId(m_hWnd, dwContextHelpId); }
inline DWORD CWnd::GetWindowContextHelpId() const
	{ ((void)0); return ::GetWindowContextHelpId(m_hWnd); }



inline void CWnd::OnActivateApp(BOOL, HTASK)
	{ Default(); }
inline void CWnd::OnActivate(UINT, CWnd*, BOOL)
	{ Default(); }
inline void CWnd::OnCancelMode()
	{ Default(); }
inline void CWnd::OnChildActivate()
	{ Default(); }
inline void CWnd::OnClose()
	{ Default(); }
inline void CWnd::OnContextMenu(CWnd*, CPoint)
	{ Default(); }
inline int CWnd::OnCopyData(CWnd*, COPYDATASTRUCT*)
	{ return (int)Default(); }
inline int CWnd::OnCreate(LPCREATESTRUCT)
	{ return (int)Default(); }
inline void CWnd::OnEnable(BOOL)
	{ Default(); }
inline void CWnd::OnEndSession(BOOL)
	{ Default(); }
inline BOOL CWnd::OnEraseBkgnd(CDC*)
	{ return (BOOL)Default(); }
inline void CWnd::OnGetMinMaxInfo(MINMAXINFO*)
	{ Default(); }
inline void CWnd::OnIconEraseBkgnd(CDC*)
	{ Default(); }
inline void CWnd::OnKillFocus(CWnd*)
	{ Default(); }
inline LRESULT CWnd::OnMenuChar(UINT, UINT, CMenu*)
	{ return Default(); }
inline void CWnd::OnMenuSelect(UINT, UINT, HMENU)
	{ Default(); }
inline void CWnd::OnMove(int, int)
	{ Default(); }
inline void CWnd::OnPaint()
	{ Default(); }
inline HCURSOR CWnd::OnQueryDragIcon()
	{ return (HCURSOR)Default(); }
inline BOOL CWnd::OnQueryEndSession()
	{ return (BOOL)Default(); }
inline BOOL CWnd::OnQueryNewPalette()
	{ return (BOOL)Default(); }
inline BOOL CWnd::OnQueryOpen()
	{ return (BOOL)Default(); }
inline BOOL CWnd::OnSetCursor(CWnd*, UINT, UINT)
	{ return (BOOL)Default(); }
inline void CWnd::OnSetFocus(CWnd*)
	{ Default(); }
inline void CWnd::OnShowWindow(BOOL, UINT)
	{ Default(); }
inline void CWnd::OnSize(UINT, int, int)
	{ Default(); }
inline void CWnd::OnTCard(UINT, DWORD)
	{ Default(); }
inline void CWnd::OnWindowPosChanging(WINDOWPOS*)
	{ Default(); }
inline void CWnd::OnWindowPosChanged(WINDOWPOS*)
	{ Default(); }
inline void CWnd::OnDropFiles(HDROP)
	{ Default(); }
inline void CWnd::OnPaletteIsChanging(CWnd*)
	{ Default(); }
inline BOOL CWnd::OnNcActivate(BOOL)
	{ return (BOOL)Default(); }
inline void CWnd::OnNcCalcSize(BOOL, NCCALCSIZE_PARAMS*)
	{ Default(); }
inline BOOL CWnd::OnNcCreate(LPCREATESTRUCT)
	{ return (BOOL)Default(); }
inline UINT CWnd::OnNcHitTest(CPoint)
	{ return (UINT)Default(); }
inline void CWnd::OnNcLButtonDblClk(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcLButtonDown(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcLButtonUp(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcMButtonDblClk(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcMButtonDown(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcMButtonUp(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcMouseMove(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcPaint()
	{ Default(); }
inline void CWnd::OnNcRButtonDblClk(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcRButtonDown(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnNcRButtonUp(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnSysChar(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnSysCommand(UINT, LPARAM)
	{ Default(); }
inline void CWnd::OnSysDeadChar(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnSysKeyDown(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnSysKeyUp(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnCompacting(UINT)
	{ Default(); }
inline void CWnd::OnFontChange()
	{ Default(); }
inline void CWnd::OnPaletteChanged(CWnd*)
	{ Default(); }
inline void CWnd::OnSpoolerStatus(UINT, UINT)
	{ Default(); }
inline void CWnd::OnTimeChange()
	{ Default(); }
inline void CWnd::OnChar(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnDeadChar(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnKeyDown(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnKeyUp(UINT, UINT, UINT)
	{ Default(); }
inline void CWnd::OnLButtonDblClk(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnLButtonDown(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnLButtonUp(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnMButtonDblClk(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnMButtonDown(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnMButtonUp(UINT, CPoint)
	{ Default(); }
inline int CWnd::OnMouseActivate(CWnd*, UINT, UINT)
	{ return (int)Default(); }
inline void CWnd::OnMouseMove(UINT, CPoint)
	{ Default(); }
inline BOOL CWnd::OnMouseWheel(UINT, short, CPoint)
	{ return (BOOL)Default(); }
inline LRESULT CWnd::OnRegisteredMouseWheel(WPARAM, LPARAM)
	{ return Default(); }
inline void CWnd::OnRButtonDblClk(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnRButtonDown(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnRButtonUp(UINT, CPoint)
	{ Default(); }
inline void CWnd::OnTimer(UINT)
	{ Default(); }
inline void CWnd::OnInitMenu(CMenu*)
	{ Default(); }
inline void CWnd::OnInitMenuPopup(CMenu*, UINT, BOOL)
	{ Default(); }
inline void CWnd::OnAskCbFormatName(UINT, LPTSTR)
	{ Default(); }
inline void CWnd::OnChangeCbChain(HWND, HWND)
	{ Default(); }
inline void CWnd::OnDestroyClipboard()
	{ Default(); }
inline void CWnd::OnDrawClipboard()
	{ Default(); }
inline void CWnd::OnHScrollClipboard(CWnd*, UINT, UINT)
	{ Default(); }
inline void CWnd::OnPaintClipboard(CWnd*, HGLOBAL)
	{ Default(); }
inline void CWnd::OnRenderAllFormats()
	{ Default(); }
inline void CWnd::OnRenderFormat(UINT)
	{ Default(); }
inline void CWnd::OnSizeClipboard(CWnd*, HGLOBAL)
	{ Default(); }
inline void CWnd::OnVScrollClipboard(CWnd*, UINT, UINT)
	{ Default(); }
inline UINT CWnd::OnGetDlgCode()
	{ return (UINT)Default(); }
inline void CWnd::OnMDIActivate(BOOL, CWnd*, CWnd*)
	{ Default(); }
inline void CWnd::OnEnterMenuLoop(BOOL)
	{ Default(); }
inline void CWnd::OnExitMenuLoop(BOOL)
	{ Default(); }

inline void CWnd::OnStyleChanged(int, LPSTYLESTRUCT)
	{ Default(); }
inline void CWnd::OnStyleChanging(int, LPSTYLESTRUCT)
	{ Default(); }
inline void CWnd::OnSizing(UINT, LPRECT)
	{ Default(); }
inline void CWnd::OnMoving(UINT, LPRECT)
	{ Default(); }
inline void CWnd::OnCaptureChanged(CWnd*)
	{ Default(); }
inline BOOL CWnd::OnDeviceChange(UINT, DWORD)
	{ return (BOOL)Default(); }


inline void CWnd::DoDataExchange(CDataExchange*)
	{ } 


inline void CWnd::BeginModalState()
	{ ::EnableWindow(m_hWnd, 0); }
inline void CWnd::EndModalState()
	{ ::EnableWindow(m_hWnd, 1); }


inline void CFrameWnd::DelayUpdateFrameTitle()
	{ m_nIdleFlags |= idleTitle; }
inline void CFrameWnd::DelayRecalcLayout(BOOL bNotify)
	{ m_nIdleFlags |= (idleLayout | (bNotify ? idleNotify : 0)); };
inline BOOL CFrameWnd::InModalState() const
	{ return m_cModalStack != 0; }
inline void CFrameWnd::AddControlBar(CControlBar *pBar)
	{ m_listControlBars.AddTail(pBar); }
inline void CFrameWnd::SetTitle(LPCTSTR lpszTitle)
	{ m_strTitle = lpszTitle; }
inline CString CFrameWnd::GetTitle() const
	{ return m_strTitle; }


inline BOOL CDialog::Create(UINT nIDTemplate, CWnd* pParentWnd)
	{ return Create((LPSTR)((ULONG_PTR)((WORD)(nIDTemplate))), pParentWnd); }
inline void CDialog::MapDialogRect(LPRECT lpRect) const
	{ ((void)0); ::MapDialogRect(m_hWnd, lpRect); }
inline void CDialog::SetHelpID(UINT nIDR)
	{ m_nIDHelp = nIDR; }
inline void CDialog::NextDlgCtrl() const
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0028, 0, 0); }
inline void CDialog::PrevDlgCtrl() const
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0028, 1, 0); }
inline void CDialog::GotoDlgCtrl(CWnd* pWndCtrl)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0028, (WPARAM)pWndCtrl->m_hWnd, 1L); }
inline void CDialog::SetDefID(UINT nID)
	{ ((void)0); ::SendMessageA(m_hWnd, (0x0400+1), nID, 0); }
inline DWORD CDialog::GetDefID() const
	{ ((void)0); return ::SendMessageA(m_hWnd, (0x0400+0), 0, 0); }


inline CStatic::CStatic()
	{ }
inline HICON CStatic::SetIcon(HICON hIcon)
	{ ((void)0); return (HICON)::SendMessageA(m_hWnd, 0x0170, (WPARAM)hIcon, 0L); }
inline HICON CStatic::GetIcon() const
	{ ((void)0); return (HICON)::SendMessageA(m_hWnd, 0x0171, 0, 0L); }

inline HENHMETAFILE CStatic::SetEnhMetaFile(HENHMETAFILE hMetaFile)
	{ ((void)0); return (HENHMETAFILE)::SendMessageA(m_hWnd, 0x0172, 3, (LPARAM)hMetaFile); }
inline HENHMETAFILE CStatic::GetEnhMetaFileA() const
	{ ((void)0); return (HENHMETAFILE)::SendMessageA(m_hWnd, 0x0173, 3, 0L); }
inline HBITMAP CStatic::SetBitmap(HBITMAP hBitmap)
	{ ((void)0); return (HBITMAP)::SendMessageA(m_hWnd, 0x0172, 0, (LPARAM)hBitmap); }
inline HBITMAP CStatic::GetBitmap() const
	{ ((void)0); return (HBITMAP)::SendMessageA(m_hWnd, 0x0173, 0, 0L); }
inline HCURSOR CStatic::SetCursor(HCURSOR hCursor)
	{ ((void)0); return (HCURSOR)::SendMessageA(m_hWnd, 0x0172, 2, (LPARAM)hCursor); }
inline HCURSOR CStatic::GetCursor()
	{ ((void)0); return (HCURSOR)::SendMessageA(m_hWnd, 0x0173, 2, 0L); }
#line 580 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin2.inl"

inline CButton::CButton()
	{ }
inline UINT CButton::GetState() const
	{ ((void)0); return (UINT)::SendMessageA(m_hWnd, 0x00F2, 0, 0); }
inline void CButton::SetState(BOOL bHighlight)
	{ ::SendMessageA(m_hWnd, 0x00F3, bHighlight, 0); }
inline int CButton::GetCheck() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00F0, 0, 0); }
inline void CButton::SetCheck(int nCheck)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00F1, nCheck, 0); }
inline UINT CButton::GetButtonStyle() const
	{ ((void)0); return (UINT)GetWindowLongA(m_hWnd, (-16)) & 0xff; }
inline void CButton::SetButtonStyle(UINT nStyle, BOOL bRedraw)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00F4, nStyle, (LPARAM)bRedraw); }


inline HICON CButton::SetIcon(HICON hIcon)
	{ ((void)0); return (HICON)::SendMessageA(m_hWnd, 0x00F7, 1, (LPARAM)hIcon); }
inline HICON CButton::GetIcon() const
	{ ((void)0); return (HICON)::SendMessageA(m_hWnd, 0x00F6, 1, 0L); }
inline HBITMAP CButton::SetBitmap(HBITMAP hBitmap)
	{ ((void)0); return (HBITMAP)::SendMessageA(m_hWnd, 0x00F7, 0, (LPARAM)hBitmap); }
inline HBITMAP CButton::GetBitmap() const
	{ ((void)0); return (HBITMAP)::SendMessageA(m_hWnd, 0x00F6, 0, 0L); }
inline HCURSOR CButton::SetCursor(HCURSOR hCursor)
	{ ((void)0); return (HCURSOR)::SendMessageA(m_hWnd, 0x00F7, 2, (LPARAM)hCursor); }
inline HCURSOR CButton::GetCursor()
	{ ((void)0); return (HCURSOR)::SendMessageA(m_hWnd, 0x00F6, 2, 0L); }
#line 610 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin2.inl"

inline CListBox::CListBox()
	{ }
inline int CListBox::GetCount() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x018B, 0, 0); }
inline int CListBox::GetCurSel() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0188, 0, 0); }
inline int CListBox::SetCurSel(int nSelect)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0186, nSelect, 0); }
inline int CListBox::GetHorizontalExtent() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0193,
		0, 0); }
inline void CListBox::SetHorizontalExtent(int cxExtent)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0194, cxExtent, 0); }
inline int CListBox::GetSelCount() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0190, 0, 0); }
inline int CListBox::GetSelItems(int nMaxItems, LPINT rgIndex) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0191, nMaxItems, (LPARAM)rgIndex); }
inline int CListBox::GetTopIndex() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x018E, 0, 0); }
inline int CListBox::SetTopIndex(int nIndex)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0197, nIndex, 0);}
inline DWORD CListBox::GetItemData(int nIndex) const
	{ ((void)0); return ::SendMessageA(m_hWnd, 0x0199, nIndex, 0); }
inline int CListBox::SetItemData(int nIndex, DWORD dwItemData)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x019A, nIndex, (LPARAM)dwItemData); }
inline void* CListBox::GetItemDataPtr(int nIndex) const
	{ ((void)0); return (LPVOID)::SendMessageA(m_hWnd, 0x0199, nIndex, 0); }
inline int CListBox::SetItemDataPtr(int nIndex, void* pData)
	{ ((void)0); return SetItemData(nIndex, (DWORD)(LPVOID)pData); }
inline int CListBox::GetItemRect(int nIndex, LPRECT lpRect) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0198, nIndex, (LPARAM)lpRect); }
inline int CListBox::GetSel(int nIndex) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0187, nIndex, 0); }
inline int CListBox::SetSel(int nIndex, BOOL bSelect)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0185, bSelect, nIndex); }
inline int CListBox::GetText(int nIndex, LPTSTR lpszBuffer) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0189, nIndex, (LPARAM)lpszBuffer); }
inline int CListBox::GetTextLen(int nIndex) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x018A, nIndex, 0); }
inline void CListBox::SetColumnWidth(int cxWidth)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0195, cxWidth, 0); }
inline BOOL CListBox::SetTabStops(int nTabStops, LPINT rgTabStops)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x0192, nTabStops, (LPARAM)rgTabStops); }
inline void CListBox::SetTabStops()
	{ ((void)0); ((void)(::SendMessageA(m_hWnd, 0x0192, 0, 0))); }
inline BOOL CListBox::SetTabStops(const int& cxEachStop)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x0192, 1, (LPARAM)(LPINT)&cxEachStop); }
inline int CListBox::SetItemHeight(int nIndex, UINT cyItemHeight)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x01A0, nIndex, ((LONG)(((WORD)((DWORD_PTR)(cyItemHeight) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(0) & 0xffff))) << 16))); }
inline int CListBox::GetItemHeight(int nIndex) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x01A1, nIndex, 0L); }
inline int CListBox::FindStringExact(int nIndexStart, LPCTSTR lpszFind) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x01A2, nIndexStart, (LPARAM)lpszFind); }
inline int CListBox::GetCaretIndex() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x019F, 0, 0L); }
inline int CListBox::SetCaretIndex(int nIndex, BOOL bScroll)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x019E, nIndex, ((LONG)(((WORD)((DWORD_PTR)(bScroll) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(0) & 0xffff))) << 16))); }
inline int CListBox::AddString(LPCTSTR lpszItem)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0180, 0, (LPARAM)lpszItem); }
inline int CListBox::DeleteString(UINT nIndex)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0182, nIndex, 0); }
inline int CListBox::InsertString(int nIndex, LPCTSTR lpszItem)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0181, nIndex, (LPARAM)lpszItem); }
inline void CListBox::ResetContent()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0184, 0, 0); }
inline int CListBox::Dir(UINT attr, LPCTSTR lpszWildCard)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x018D, attr, (LPARAM)lpszWildCard); }
inline int CListBox::FindString(int nStartAfter, LPCTSTR lpszItem) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x018F,
		nStartAfter, (LPARAM)lpszItem); }
inline int CListBox::SelectString(int nStartAfter, LPCTSTR lpszItem)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x018C,
		nStartAfter, (LPARAM)lpszItem); }
inline int CListBox::SelItemRange(BOOL bSelect, int nFirstItem, int nLastItem)
	{ ((void)0); return bSelect ?
		(int)::SendMessageA(m_hWnd, 0x0183, nFirstItem, nLastItem) :
		(int)::SendMessageA(m_hWnd, 0x0183, nLastItem, nFirstItem); }
inline void CListBox::SetAnchorIndex(int nIndex)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x019C, nIndex, 0); }
inline int CListBox::GetAnchorIndex() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x019D, 0, 0); }
inline LCID CListBox::GetLocale() const
	{ ((void)0); return (LCID)::SendMessageA(m_hWnd, 0x01A6, 0, 0); }
inline LCID CListBox::SetLocale(LCID nNewLocale)
	{ ((void)0); return (LCID)::SendMessageA(m_hWnd, 0x01A5, (WPARAM)nNewLocale, 0); }

inline int CListBox::InitStorage(int nItems, UINT nBytes)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x01A8, (WPARAM)nItems, nBytes); }
#line 700 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin2.inl"

inline CCheckListBox::CCheckListBox()
	{ m_cyText = 0; m_nStyle = 0; }
inline UINT CCheckListBox::GetCheckStyle()
	{ return m_nStyle; }

inline CComboBox::CComboBox()
	{ }
inline int CComboBox::GetCount() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0146, 0, 0); }
inline int CComboBox::GetCurSel() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0147, 0, 0); }
inline int CComboBox::SetCurSel(int nSelect)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x014E, nSelect, 0); }
inline DWORD CComboBox::GetEditSel() const
	{ ((void)0); return ::SendMessageA(m_hWnd, 0x0140, 0, 0); }
inline BOOL CComboBox::LimitText(int nMaxChars)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x0141, nMaxChars, 0); }
inline BOOL CComboBox::SetEditSel(int nStartChar, int nEndChar)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x0142, 0, ((LONG)(((WORD)((DWORD_PTR)(nStartChar) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(nEndChar) & 0xffff))) << 16))); }
inline DWORD CComboBox::GetItemData(int nIndex) const
	{ ((void)0); return ::SendMessageA(m_hWnd, 0x0150, nIndex, 0); }
inline int CComboBox::SetItemData(int nIndex, DWORD dwItemData)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0151, nIndex, (LPARAM)dwItemData); }
inline void* CComboBox::GetItemDataPtr(int nIndex) const
	{ ((void)0); return (LPVOID)GetItemData(nIndex); }
inline int CComboBox::SetItemDataPtr(int nIndex, void* pData)
	{ ((void)0); return SetItemData(nIndex, (DWORD)(LPVOID)pData); }
inline int CComboBox::GetLBText(int nIndex, LPTSTR lpszText) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0148, nIndex, (LPARAM)lpszText); }
inline int CComboBox::GetLBTextLen(int nIndex) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0149, nIndex, 0); }
inline void CComboBox::ShowDropDown(BOOL bShowIt)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x014F, bShowIt, 0); }
inline int CComboBox::AddString(LPCTSTR lpszString)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0143, 0, (LPARAM)lpszString); }
inline int CComboBox::DeleteString(UINT nIndex)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0144, nIndex, 0);}
inline int CComboBox::InsertString(int nIndex, LPCTSTR lpszString)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x014A, nIndex, (LPARAM)lpszString); }
inline void CComboBox::ResetContent()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x014B, 0, 0); }
inline int CComboBox::Dir(UINT attr, LPCTSTR lpszWildCard)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0145, attr, (LPARAM)lpszWildCard); }
inline int CComboBox::FindString(int nStartAfter, LPCTSTR lpszString) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x014C, nStartAfter,
		(LPARAM)lpszString); }
inline int CComboBox::SelectString(int nStartAfter, LPCTSTR lpszString)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x014D,
		nStartAfter, (LPARAM)lpszString); }
inline void CComboBox::Clear()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0303, 0, 0); }
inline void CComboBox::Copy()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0301, 0, 0); }
inline void CComboBox::Cut()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0300, 0, 0); }
inline void CComboBox::Paste()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0302, 0, 0); }
inline int CComboBox::SetItemHeight(int nIndex, UINT cyItemHeight)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0153, nIndex, ((LONG)(((WORD)((DWORD_PTR)(cyItemHeight) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(0) & 0xffff))) << 16))); }
inline int CComboBox::GetItemHeight(int nIndex) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0154, nIndex, 0L); }
inline int CComboBox::FindStringExact(int nIndexStart, LPCTSTR lpszFind) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0158, nIndexStart, (LPARAM)lpszFind); }
inline int CComboBox::SetExtendedUI(BOOL bExtended )
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0155, bExtended, 0L); }
inline BOOL CComboBox::GetExtendedUI() const
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x0156, 0, 0L); }
inline void CComboBox::GetDroppedControlRect(LPRECT lprect) const
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0152, 0, (DWORD)lprect); }
inline BOOL CComboBox::GetDroppedState() const
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x0157, 0, 0L); }
inline LCID CComboBox::GetLocale() const
	{ ((void)0); return (LCID)::SendMessageA(m_hWnd, 0x015A, 0, 0); }
inline LCID CComboBox::SetLocale(LCID nNewLocale)
	{ ((void)0); return (LCID)::SendMessageA(m_hWnd, 0x0159, (WPARAM)nNewLocale, 0); }

inline int CComboBox::GetTopIndex() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x015b, 0, 0); }
inline int CComboBox::SetTopIndex(int nIndex)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x015c, nIndex, 0); }
inline int CComboBox::InitStorage(int nItems, UINT nBytes)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0161, (WPARAM)nItems, nBytes); }
inline void CComboBox::SetHorizontalExtent(UINT nExtent)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x015e, nExtent, 0); }
inline UINT CComboBox::GetHorizontalExtent() const
	{ ((void)0); return (UINT)::SendMessageA(m_hWnd, 0x015d, 0, 0); }
inline int CComboBox::SetDroppedWidth(UINT nWidth)
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x0160, nWidth, 0); }
inline int CComboBox::GetDroppedWidth() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x015f, 0, 0); }
#line 792 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin2.inl"
inline CEdit::CEdit()
	{ }
inline BOOL CEdit::CanUndo() const
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x00C6, 0, 0); }
inline int CEdit::GetLineCount() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00BA, 0, 0); }
inline BOOL CEdit::GetModify() const
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x00B8, 0, 0); }
inline void CEdit::SetModify(BOOL bModified)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B9, bModified, 0); }
inline void CEdit::GetRect(LPRECT lpRect) const
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B2, 0, (LPARAM)lpRect); }
inline void CEdit::GetSel(int& nStartChar, int& nEndChar) const
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B0, (WPARAM)&nStartChar,(LPARAM)&nEndChar); }
inline DWORD CEdit::GetSel() const
	{ ((void)0); return ::SendMessageA(m_hWnd, 0x00B0, 0, 0); }
inline HLOCAL CEdit::GetHandle() const
	{ ((void)0); return (HLOCAL)::SendMessageA(m_hWnd, 0x00BD, 0, 0); }
inline void CEdit::SetHandle(HLOCAL hBuffer)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00BC, (WPARAM)hBuffer, 0); }
inline int CEdit::GetLine(int nIndex, LPTSTR lpszBuffer) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00C4, nIndex, (LPARAM)lpszBuffer); }
inline int CEdit::GetLine(int nIndex, LPTSTR lpszBuffer, int nMaxLength) const
	{
		((void)0);
		*(LPWORD)lpszBuffer = (WORD)nMaxLength;
		return (int)::SendMessageA(m_hWnd, 0x00C4, nIndex, (LPARAM)lpszBuffer);
	}
inline void CEdit::EmptyUndoBuffer()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00CD, 0, 0); }
inline BOOL CEdit::FmtLines(BOOL bAddEOL)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x00C8, bAddEOL, 0); }
inline void CEdit::LimitText(int nChars)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00C5, nChars, 0); }
inline int CEdit::LineFromChar(int nIndex) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00C9, nIndex, 0); }
inline int CEdit::LineIndex(int nLine) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00BB, nLine, 0); }
inline int CEdit::LineLength(int nLine) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00C1, nLine, 0); }
inline void CEdit::LineScroll(int nLines, int nChars)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B6, nChars, nLines); }
inline void CEdit::ReplaceSel(LPCTSTR lpszNewText, BOOL bCanUndo)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00C2, (WPARAM) bCanUndo, (LPARAM)lpszNewText); }
inline void CEdit::SetPasswordChar(TCHAR ch)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00CC, ch, 0); }
inline void CEdit::SetRect(LPCRECT lpRect)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B3, 0, (LPARAM)lpRect); }
inline void CEdit::SetRectNP(LPCRECT lpRect)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B4, 0, (LPARAM)lpRect); }
inline void CEdit::SetSel(DWORD dwSelection, BOOL bNoScroll)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B1,
		((WORD)((DWORD_PTR)(dwSelection) & 0xffff)), ((WORD)((DWORD_PTR)(dwSelection) >> 16)));
	  if (!bNoScroll)
		::SendMessageA(m_hWnd, 0x00B7, 0, 0); }
inline void CEdit::SetSel(int nStartChar, int nEndChar, BOOL bNoScroll)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00B1, nStartChar, nEndChar);
	  if (!bNoScroll)
		::SendMessageA(m_hWnd, 0x00B7, 0, 0); }
inline BOOL CEdit::SetTabStops(int nTabStops, LPINT rgTabStops)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x00CB, nTabStops,
		(LPARAM)rgTabStops); }
inline void CEdit::SetTabStops()
	{ ((void)0); ((void)(::SendMessageA(m_hWnd, 0x00CB, 0, 0))); }
inline BOOL CEdit::SetTabStops(const int& cxEachStop)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x00CB,
		1, (LPARAM)(LPINT)&cxEachStop); }
inline BOOL CEdit::Undo()
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x00C7, 0, 0); }
inline void CEdit::Clear()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0303, 0, 0); }
inline void CEdit::Copy()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0301, 0, 0); }
inline void CEdit::Cut()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0300, 0, 0); }
inline void CEdit::Paste()
	{ ((void)0); ::SendMessageA(m_hWnd, 0x0302, 0, 0); }
inline BOOL CEdit::SetReadOnly(BOOL bReadOnly )
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, 0x00CF, bReadOnly, 0L); }
inline int CEdit::GetFirstVisibleLine() const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00CE, 0, 0L); }
inline TCHAR CEdit::GetPasswordChar() const
	{ ((void)0); return (TCHAR)::SendMessageA(m_hWnd, 0x00D2, 0, 0L); }

inline void CEdit::SetMargins(UINT nLeft, UINT nRight)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00D3, 0x0001|0x0002, ((LONG)(((WORD)((DWORD_PTR)(nLeft) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(nRight) & 0xffff))) << 16))); }
inline DWORD CEdit::GetMargins() const
	{ ((void)0); return (DWORD)::SendMessageA(m_hWnd, 0x00D4, 0, 0); }
inline void CEdit::SetLimitText(UINT nMax)
	{ ((void)0); ::SendMessageA(m_hWnd, 0x00C5, nMax, 0); }
inline UINT CEdit::GetLimitText() const
	{ ((void)0); return (UINT)::SendMessageA(m_hWnd, 0x00D5, 0, 0); }
inline CPoint CEdit::PosFromChar(UINT nChar) const
	{ ((void)0); return CPoint( (DWORD)::SendMessageA(m_hWnd, 0x00D6, nChar, 0)); }
inline int CEdit::CharFromPos(CPoint pt) const
	{ ((void)0); return (int)::SendMessageA(m_hWnd, 0x00D7, 0, ((LPARAM)(DWORD)((LONG)(((WORD)((DWORD_PTR)(pt.x) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(pt.y) & 0xffff))) << 16)))); }
#line 889 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin2.inl"

inline CScrollBar::CScrollBar()
	{ }
inline int CScrollBar::GetScrollPos() const
	{ ((void)0); return ::GetScrollPos(m_hWnd, 2); }
inline int CScrollBar::SetScrollPos(int nPos, BOOL bRedraw)
	{ ((void)0); return ::SetScrollPos(m_hWnd, 2, nPos, bRedraw); }
inline void CScrollBar::GetScrollRange(LPINT lpMinPos, LPINT lpMaxPos) const
	{ ((void)0); ::GetScrollRange(m_hWnd, 2, lpMinPos, lpMaxPos); }
inline void CScrollBar::SetScrollRange(int nMinPos, int nMaxPos, BOOL bRedraw)
	{ ((void)0); ::SetScrollRange(m_hWnd, 2, nMinPos, nMaxPos, bRedraw); }
inline void CScrollBar::ShowScrollBar(BOOL bShow)
	{ ((void)0); ::ShowScrollBar(m_hWnd, 2, bShow); }
inline BOOL CScrollBar::EnableScrollBar(UINT nArrowFlags)
	{ ((void)0); return ::EnableScrollBar(m_hWnd, 2, nArrowFlags); }
inline BOOL CScrollBar::SetScrollInfo(LPSCROLLINFO lpScrollInfo, BOOL bRedraw)
	{ return CWnd::SetScrollInfo(2, lpScrollInfo, bRedraw); }
inline BOOL CScrollBar::GetScrollInfo(LPSCROLLINFO lpScrollInfo, UINT nMask)
	{ return CWnd::GetScrollInfo(2, lpScrollInfo, nMask); }
inline int CScrollBar::GetScrollLimit()
	{ return CWnd::GetScrollLimit(2); }



inline void CMDIFrameWnd::MDIActivate(CWnd* pWndActivate)
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0222,
		(WPARAM)pWndActivate->m_hWnd, 0); }
inline void CMDIFrameWnd::MDIIconArrange()
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0228, 0, 0); }
inline void CMDIFrameWnd::MDIMaximize(CWnd* pWnd)
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0225, (WPARAM)pWnd->m_hWnd, 0); }
inline void CMDIFrameWnd::MDINext()
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0224, 0, 0); }
inline void CMDIFrameWnd::MDIRestore(CWnd* pWnd)
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0223, (WPARAM)pWnd->m_hWnd, 0); }
inline CMenu* CMDIFrameWnd::MDISetMenu(CMenu* pFrameMenu, CMenu* pWindowMenu)
	{ ((void)0); return CMenu::FromHandle((HMENU)::SendMessageA(
		m_hWndMDIClient, 0x0230, (WPARAM)pFrameMenu->GetSafeHmenu(),
		(LPARAM)pWindowMenu->GetSafeHmenu())); }
inline void CMDIFrameWnd::MDITile()
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0226, 0, 0); }
inline void CMDIFrameWnd::MDICascade()
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0227, 0, 0); }

inline void CMDIFrameWnd::MDICascade(int nType)
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0227, nType, 0); }
inline void CMDIFrameWnd::MDITile(int nType)
	{ ((void)0); ::SendMessageA(m_hWndMDIClient, 0x0226, nType, 0); }
inline void CMDIChildWnd::MDIDestroy()
	{ ((void)0); ::SendMessageA(GetParent()->m_hWnd, 0x0221, (WPARAM)m_hWnd, 0L); }
inline void CMDIChildWnd::MDIActivate()
	{ ((void)0); ::SendMessageA(GetParent()->m_hWnd, 0x0222, (WPARAM)m_hWnd, 0L); }
inline void CMDIChildWnd::MDIMaximize()
	{ ((void)0); ::SendMessageA(GetParent()->m_hWnd, 0x0225, (WPARAM)m_hWnd, 0L); }
inline void CMDIChildWnd::MDIRestore()
	{ ((void)0); ::SendMessageA(GetParent()->m_hWnd, 0x0223, (WPARAM)m_hWnd, 0L); }


inline CDocument* CView::GetDocument() const
	{ ((void)0); return m_pDocument; }
inline CSize CScrollView::GetTotalSize() const
	{ ((void)0); return m_totalLog; }


inline const CString& CDocument::GetTitle() const
	{ ((void)0); return m_strTitle; }
inline const CString& CDocument::GetPathName() const
	{ ((void)0); return m_strPathName; }
inline CDocTemplate* CDocument::GetDocTemplate() const
	{ ((void)0); return m_pDocTemplate; }
inline BOOL CDocument::IsModified()
	{ ((void)0); return m_bModified; }
inline void CDocument::SetModifiedFlag(BOOL bModified)
	{ ((void)0); m_bModified = bModified; }


inline CWinThread::operator HANDLE() const
	{ return this == 0 ? 0 : m_hThread; }
inline BOOL CWinThread::SetThreadPriority(int nPriority)
	{ ((void)0); return ::SetThreadPriority(m_hThread, nPriority); }
inline int CWinThread::GetThreadPriority()
	{ ((void)0); return ::GetThreadPriority(m_hThread); }
inline DWORD CWinThread::ResumeThread()
	{ ((void)0); return ::ResumeThread(m_hThread); }
inline DWORD CWinThread::SuspendThread()
	{ ((void)0); return ::SuspendThread(m_hThread); }
inline BOOL CWinThread::PostThreadMessageA(UINT message, WPARAM wParam, LPARAM lParam)
	{ ((void)0); return ::PostThreadMessageA(m_nThreadID, message, wParam, lParam); }


inline HCURSOR CWinApp::LoadCursorA(LPCTSTR lpszResourceName) const
	{ return ::LoadCursorA(
AfxGetResourceHandle(), lpszResourceName); }
inline HCURSOR CWinApp::LoadCursorA(UINT nIDResource) const
	{ return ::LoadCursorA(
AfxGetResourceHandle(), (LPSTR)((ULONG_PTR)((WORD)(nIDResource)))); }
inline HCURSOR CWinApp::LoadStandardCursor(LPCTSTR lpszCursorName) const
	{ return ::LoadCursorA(0, lpszCursorName); }
inline HCURSOR CWinApp::LoadOEMCursor(UINT nIDCursor) const
	{ return ::LoadCursorA(0, (LPSTR)((ULONG_PTR)((WORD)(nIDCursor)))); }
inline HICON CWinApp::LoadIconA(LPCTSTR lpszResourceName) const
	{ return ::LoadIconA(
AfxGetResourceHandle(), lpszResourceName); }
inline HICON CWinApp::LoadIconA(UINT nIDResource) const
	{ return ::LoadIconA(
AfxGetResourceHandle(), (LPSTR)((ULONG_PTR)((WORD)(nIDResource)))); }
inline HICON CWinApp::LoadStandardIcon(LPCTSTR lpszIconName) const
	{ return ::LoadIconA(0, lpszIconName); }
inline HICON CWinApp::LoadOEMIcon(UINT nIDIcon) const
	{ return ::LoadIconA(0, (LPSTR)((ULONG_PTR)((WORD)(nIDIcon)))); }

inline CWaitCursor::CWaitCursor()
	{ AfxGetApp()->BeginWaitCursor(); }
inline CWaitCursor::~CWaitCursor()
	{ AfxGetApp()->EndWaitCursor(); }
inline void CWaitCursor::Restore()
	{ AfxGetApp()->RestoreWaitCursor(); }




inline void CWnd::CloseWindow()
	{ ((void)0); ::CloseWindow(m_hWnd); }
inline BOOL CWnd::OpenIcon()
	{ ((void)0); return ::OpenIcon(m_hWnd); }



#line 1018 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin2.inl"
#line 4641 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"
#line 4642 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"





#pragma component(minrebuild, on)
#line 4649 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

#pragma component(mintypeinfo, off)
#line 4652 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"





#line 4658 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"

#line 4660 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxwin.h"


#line 19 "stdafx.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"























	#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"











#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"
















#line 18 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"





#pragma once
#line 25 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"


extern "C" {
#line 29 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"














#line 44 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"





#line 50 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"

#line 52 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"

#line 54 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"



#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"





#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"

typedef void * I_RPC_HANDLE;
typedef long RPC_STATUS;



#line 71 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"











#line 83 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"










#line 94 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"





#line 100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"





#line 106 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"


































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


















#pragma once
#line 21 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


extern "C" {
#line 25 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

























typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;








typedef GUID UUID;


#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"
#line 65 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;


#line 74 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

typedef struct _UUID_VECTOR
{
  unsigned long Count;
  UUID *Uuid[1];
} UUID_VECTOR;


#line 83 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

typedef void  * RPC_IF_HANDLE;



typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 95 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"
























































typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char  * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short  * Protseq[1];
} RPC_PROTSEQ_VECTORW;





#line 168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"









#line 178 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY,   *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
     UUID  * ObjectUuid,
     UUID  * TypeUuid,
     RPC_STATUS  * Status
    );

typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
     RPC_IF_HANDLE  InterfaceUuid,
     void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
     void *Context
    ) ;



typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID  * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
      RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetOption(  RPC_BINDING_HANDLE hBinding,
                      unsigned long      option,
                      ULONG_PTR          optionValue );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqOption(   RPC_BINDING_HANDLE hBinding,
                       unsigned long      option,
                      ULONG_PTR         *pOptionValue );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
     unsigned char  * StringBinding,
     RPC_BINDING_HANDLE  * Binding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
     unsigned short  * StringBinding,
     RPC_BINDING_HANDLE  * Binding
    );





#line 279 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"











#line 291 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
     void *ContextHandle,
     RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingReset (
     RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel(
      unsigned long AuthnSvc,
     unsigned long  *AuthnLevel
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * StringBinding
    );





#line 364 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"











#line 376 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
      RPC_BINDING_VECTOR  *  * BindingVector
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeA (
     unsigned char  * ObjUuid ,
     unsigned char  * Protseq ,
     unsigned char  * NetworkAddr ,
     unsigned char  * Endpoint ,
     unsigned char  * Options ,
     unsigned char  *  * StringBinding 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeW (
     unsigned short  * ObjUuid ,
     unsigned short  * Protseq ,
     unsigned short  * NetworkAddr ,
     unsigned short  * Endpoint ,
     unsigned short  * Options ,
     unsigned short  *  * StringBinding 
    );





#line 418 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"















#line 434 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseA (
     unsigned char  * StringBinding,
     unsigned char  *  * ObjUuid ,
     unsigned char  *  * Protseq ,
     unsigned char  *  * NetworkAddr ,
     unsigned char  *  * Endpoint ,
     unsigned char  *  * NetworkOptions 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseW (
     unsigned short  * StringBinding,
     unsigned short  *  * ObjUuid ,
     unsigned short  *  * Protseq ,
     unsigned short  *  * NetworkAddr ,
     unsigned short  *  * Endpoint ,
     unsigned short  *  * NetworkOptions 
    );





#line 468 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"















#line 484 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
      unsigned char  *  * String
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
      unsigned short  *  * String
    );





#line 508 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"










#line 519 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfInqId (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_IF_ID  * RpcIfId
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
     unsigned char  * Protseq
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
     unsigned short  * Protseq
    );





#line 552 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"










#line 563 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
    long Timeout
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
     RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
     RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 614 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"










#line 625 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectInqType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetInqFn (
     RPC_OBJECT_INQ_FN  * InquiryFn
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
      RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
      RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 675 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"










#line 686 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindings (
     RPC_BINDING_VECTOR  *  * BindingVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     void  *  * MgrEpv
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerListen (
     unsigned int MinimumCallThreads,
     unsigned int MaxCalls,
     unsigned int DontWait
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid ,
     void  * MgrEpv 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid,
     void  * MgrEpv,
     unsigned int Flags,
     unsigned int MaxCalls,
     RPC_IF_CALLBACK_FN  *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
     RPC_IF_HANDLE IfSpec,
     UUID * MgrTypeUuid,
     void * MgrEpv,
     unsigned int Flags,
     unsigned int MaxCalls,
     unsigned int MaxRpcSize,
     RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     unsigned int WaitForCallsToComplete
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     int RundownContextHandles
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 863 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"






















#line 886 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     unsigned char  * Endpoint,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     unsigned char  * Endpoint,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     unsigned short  * Endpoint,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     unsigned short  * Endpoint,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 940 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"
























#line 965 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );







#line 1019 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"
























#line 1044 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

__declspec(dllimport)
void
__stdcall
RpcServerYield (
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
     RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqStats (
     RPC_BINDING_HANDLE Binding,
     RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
     RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
     RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
     unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_ID_VECTOR  *  * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
      RPC_IF_ID_VECTOR  *  * IfIdVector
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long AuthnSvc,
     unsigned char  *  * ServerPrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long AuthnSvc,
     unsigned short  *  * ServerPrincName
    );





#line 1156 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"












#line 1169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
     unsigned long AuthnSvc,
     unsigned char  *  * PrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
     unsigned long AuthnSvc,
     unsigned short  *  * PrincName
    );





#line 1193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"











#line 1205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpResolveBinding (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned char  *  * EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned short  *  * EntryName
    );





#line 1242 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"












#line 1255 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

typedef void  * RPC_AUTH_IDENTITY_HANDLE;
typedef void  * RPC_AUTHZ_HANDLE;

















































typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
  unsigned short  *User;
  unsigned long UserLength;
  unsigned short  *Domain;
  unsigned long DomainLength;
  unsigned short  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
  unsigned char  *User;
  unsigned long UserLength;
  unsigned char  *Domain;
  unsigned long DomainLength;
  unsigned char  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;










#line 1350 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

#line 1352 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelfEx (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelf (
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc, 
      unsigned long             Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
     RPC_BINDING_HANDLE ClientBinding, 
     RPC_AUTHZ_HANDLE  * Privs,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     unsigned long  * AuthzSvc, 
      unsigned long             Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc,
     RPC_SECURITY_QOS *SecurityQos 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  * ServerPrincName,
     unsigned long AuthnLevel,
     unsigned long AuthnSvc,
     RPC_AUTH_IDENTITY_HANDLE AuthIdentity, 
     unsigned long AuthzSvc, 
     RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc, 
      unsigned long RpcQosVersion,
     RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * ServerPrincName, 
     unsigned long  * AuthnLevel, 
     unsigned long  * AuthnSvc, 
     RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity, 
     unsigned long  * AuthzSvc ,
      unsigned long RpcQosVersion,
     RPC_SECURITY_QOS *SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
     void  * Arg,
     unsigned short  * ServerPrincName,
     unsigned long KeyVer,
     void  *  * Key,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
     unsigned char  * ServerPrincName,
     unsigned long AuthnSvc,
     RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
     void  * Arg 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
     unsigned short  * ServerPrincName,
     unsigned long AuthnSvc,
     RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
     void  * Arg 
    );

















#line 1578 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"







































































#line 1650 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


typedef struct {
    unsigned char  * UserName;
    unsigned char  * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,  * PRPC_CLIENT_INFORMATION1;
#line 1659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingServerFromClient (
     RPC_BINDING_HANDLE ClientBinding,
     RPC_BINDING_HANDLE  * ServerBinding
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
     RPC_STATUS exception
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcTestCancel(
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerTestCancel (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThread(
     void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
     void * Thread,
     long Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreate (
     UUID  * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
     UUID  * Uuid
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringA (
     UUID  * Uuid,
     unsigned char  *  * StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringA (
     unsigned char  * StringUuid,
     UUID  * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringW (
     UUID  * Uuid,
     unsigned short  *  * StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringW (
     unsigned short  * StringUuid,
     UUID  * Uuid
    );







#line 1765 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"





















#line 1787 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

__declspec(dllimport)
signed int
__stdcall
UuidCompare (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateNil (
     UUID  * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned char * Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned short  * Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterA (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned char * Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterW (
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector ,
     unsigned short * Annotation
    );







#line 1878 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"























#line 1902 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpUnregister(
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR * BindingVector,
     UUID_VECTOR * UuidVector
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextA (
     RPC_STATUS RpcStatus,
     unsigned char  * ErrorText
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextW (
     RPC_STATUS RpcStatus,
     unsigned short  * ErrorText
    );





#line 1936 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"











#line 1948 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"



typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;












__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
     RPC_BINDING_HANDLE EpBinding ,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption ,
     UUID  * ObjectUuid ,
     RPC_EP_INQ_HANDLE  * InquiryContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
      RPC_EP_INQ_HANDLE  * InquiryContext
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
     RPC_EP_INQ_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE  * Binding ,
     UUID  * ObjectUuid ,
     unsigned char  *  * Annotation 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
     RPC_EP_INQ_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE  * Binding ,
     UUID  * ObjectUuid ,
     unsigned short  *  * Annotation 
    );





#line 2012 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"













#line 2026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
     RPC_BINDING_HANDLE EpBinding ,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid 
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
     RPC_BINDING_HANDLE ClientBinding,
     unsigned long RequestedMgmtOperation,
     RPC_STATUS  * Status
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
     RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );










#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"




















#pragma once
#line 23 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"


extern "C" {
#line 27 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"

typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER,  * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void  * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void  * RpcInterfaceInformation;
    void  * ReservedForRuntime;
    void  * ManagerEpv;
    void  * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE,  * PRPC_MESSAGE;


typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                        UUID              * InterfaceId,
                        RPC_VERSION       * InterfaceVersion,
                        UUID              * ObjectId,
                        unsigned char          * Rpcpro,
                        void  *  * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                         void * arg
                        );







































typedef
void
(__stdcall  * RPC_DISPATCH_FUNCTION) (
      PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION  * DispatchTable;
    LONG_PTR                          Reserved;
} RPC_DISPATCH_TABLE,  * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char  * RpcProtocolSequence;
    unsigned char  * Endpoint;
} RPC_PROTSEQ_ENDPOINT,  * PRPC_PROTSEQ_ENDPOINT;








typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void  *DefaultManagerEpv;
    void const  *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE,  * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER   InterfaceId;
    RPC_SYNTAX_IDENTIFIER   TransferSyntax;
    PRPC_DISPATCH_TABLE     DispatchTable;
    unsigned int            RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT   RpcProtseqEndpoint;
    ULONG_PTR               Reserved;
    void const  *  InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE,  * PRPC_CLIENT_INTERFACE;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
      RPC_MESSAGE  * Message,
     UUID * ObjectUuid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSendReceive (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreeBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSend (
      PRPC_MESSAGE Message
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReceive (
      PRPC_MESSAGE Message,
     unsigned int Size
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
      RPC_MESSAGE  * Message
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
     PRPC_MESSAGE Message,
     unsigned int NewSize
    ) ;

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
      I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void  *
__stdcall
I_RpcAllocate (
     unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
     void  * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
     unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    );

typedef
void
(__stdcall  * PRPC_RUNDOWN) (
    void  * AssociationContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
     RPC_BINDING_HANDLE Handle,
     PRPC_RUNDOWN RundownRoutine,
     void * Context
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
     RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
     RPC_BINDING_HANDLE BindingHandle,
     void  *  * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
     RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
     RPC_BINDING_HANDLE BindingHandle,
     void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
     RPC_BINDING_HANDLE Binding,
     unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
     RPC_BINDING_HANDLE Binding,
     void **SecurityContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
     RPC_BINDING_HANDLE Binding,
     unsigned char *WireId
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
     RPC_BINDING_HANDLE Binding,
     unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
     RPC_BINDING_HANDLE Binding,
     void **AsyncHandle
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned short  * EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
     RPC_BINDING_HANDLE Binding,
     unsigned long EntryNameSyntax,
     unsigned char  * EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
     unsigned char  * NetworkAddress,
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     unsigned char  * Endpoint,
     void  * SecurityDescriptor,
     void *Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
     unsigned short  * NetworkAddress,
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     unsigned short  * Endpoint,
     void  * SecurityDescriptor,
     void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
     unsigned short  * NetworkAddress,
     unsigned short  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
     unsigned char  * NetworkAddress,
     unsigned char  * Protseq,
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     void * Policy
    );










#line 465 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"


































#line 500 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
     RPC_BINDING_HANDLE Binding,
     unsigned short  *  * DynamicEndpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
     RPC_BINDING_HANDLE Binding,
     unsigned char  *  * DynamicEndpoint
    );





#line 524 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"











#line 536 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"






__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_TRANSFER_SYNTAX  * TransferSyntaxes,
     unsigned int TransferSyntaxSize,
     unsigned int  * TransferSyntaxCount
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_UuidCreate (
     UUID  * Uuid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
     RPC_BINDING_HANDLE BindingHandle ,
     unsigned int  * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
     RPC_BINDING_HANDLE Binding,
     void **ConnId,
     int *pfFirstCall
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void  * pAddress
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
     RPC_FORWARD_FUNCTION  * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn();

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
     RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
     RPC_BINDING_HANDLE Binding,
      void *Buffer,
      unsigned long *BufferSize,
     unsigned long *AddressFormat
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
   unsigned long  * RecvBuffSize,
   unsigned long  * SendBuffSize
  );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
    unsigned long RecvBuffSize,
    unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
     void *Buffer,
     unsigned int BufferLength,
     int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
     RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStopListening(
    ) ;

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
     void * hWnd,
     void * Context,
      void * hSyncEvent
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
     RPC_BINDING_HANDLE Binding,
     RPC_BLOCKING_FN BlockingFn,
     unsigned long ServerTid
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSetThreadParams(
     int fClientFree,
      void *Context,
      void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
     void * hWnd,
     unsigned int Message,
     unsigned int wParam,
     unsigned long lParam
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
     unsigned char * Protseq,
     unsigned char * Endpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
     unsigned short * Protseq,
     unsigned short * Endpoint
    );





#line 750 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"
#line 751 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
     unsigned int  * Type
    ) ;

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
     RPC_STATUS Status
    );



}
#line 770 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"

#line 772 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdcep.h"
#line 2067 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"


}
#line 2071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"

#line 2073 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcdce.h"
#line 141 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"



















#pragma once
#line 22 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"

typedef void  * RPC_NS_HANDLE;















__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     RPC_BINDING_VECTOR  * BindingVec ,
     UUID_VECTOR  * ObjectUuidVec 
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR  * ObjectUuidVec 
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     RPC_BINDING_VECTOR  * BindingVec ,
     UUID_VECTOR  * ObjectUuidVec 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR  * ObjectUuidVec 
    );

#line 77 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"



RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
     unsigned long EntryNameSyntax,
     unsigned char * EntryName,
     RPC_IF_HANDLE IfSpec ,
      UUID_VECTOR * ObjectVector 
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
     unsigned long EntryNameSyntax ,
     unsigned char * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR * ObjectVector 
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
     unsigned long EntryNameSyntax,
     unsigned short * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR * ObjectVector 
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
     unsigned long EntryNameSyntax ,
     unsigned short * EntryName,
     RPC_IF_HANDLE IfSpec ,
     UUID_VECTOR * ObjectVector 
    );

#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     unsigned long BindingMaxCount ,
     RPC_NS_HANDLE  * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     unsigned long BindingMaxCount ,
     RPC_NS_HANDLE  * LookupContext
    );
#line 140 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
      RPC_NS_HANDLE LookupContext,
     RPC_BINDING_VECTOR  *  * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
      RPC_NS_HANDLE  * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
     unsigned long GroupNameSyntax ,
     unsigned char  * GroupName,
     unsigned long MemberNameSyntax ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
      RPC_NS_HANDLE InquiryContext,
     unsigned char  *  * MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
     unsigned long GroupNameSyntax ,
     unsigned short  * GroupName,
     unsigned long MemberNameSyntax ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
      RPC_NS_HANDLE InquiryContext,
     unsigned short  *  * MemberName
    );

#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName,
     unsigned long Priority,
     unsigned char  * Annotation 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
     unsigned long ProfileNameSyntax ,
     unsigned char  * ProfileName,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     unsigned long MemberNameSyntax ,
     unsigned char  * MemberName ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
     RPC_NS_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     unsigned char  *  * MemberName,
     unsigned long  * Priority,
     unsigned char  *  * Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName,
     unsigned long Priority,
     unsigned short  * Annotation 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     RPC_IF_ID  * IfId ,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
     unsigned long ProfileNameSyntax ,
     unsigned short  * ProfileName,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     unsigned long MemberNameSyntax ,
     unsigned short  * MemberName ,
     RPC_NS_HANDLE  * InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
     RPC_NS_HANDLE InquiryContext,
     RPC_IF_ID  * IfId,
     unsigned short  *  * MemberName,
     unsigned long  * Priority,
     unsigned short  *  * Annotation
    );

#line 334 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_NS_HANDLE  * InquiryContext
    );

#line 359 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
      RPC_NS_HANDLE InquiryContext,
     UUID  * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     unsigned char  *  * ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     UUID_VECTOR  * ObjectUuidVec 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName,
     RPC_IF_ID_VECTOR  *  * IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
     RPC_NS_HANDLE NsHandle,
     unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
     unsigned long  * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
     unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     unsigned short  *  * ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption,
     UUID_VECTOR  * ObjectUuidVec 
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName,
     RPC_IF_ID_VECTOR  *  * IfIdVec
    );

#line 462 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
     unsigned long EntryNameSyntax ,
     unsigned char  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     RPC_NS_HANDLE  * ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
     unsigned long EntryNameSyntax ,
     unsigned short  * EntryName ,
     RPC_IF_HANDLE IfSpec ,
     UUID  * ObjUuid ,
     RPC_NS_HANDLE  * ImportContext
    );

#line 486 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
     RPC_NS_HANDLE ImportContext,
     RPC_BINDING_HANDLE   * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
      RPC_NS_HANDLE  * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
      RPC_BINDING_VECTOR  * BindingVec,
     RPC_BINDING_HANDLE   * Binding
    );


















































#line 554 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"

#line 556 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsi.h"
#line 142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnterr.h"
















#pragma once
#line 19 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnterr.h"























#line 43 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnterr.h"
#line 143 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"






































#line 182 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"




#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"



















#pragma once
#line 22 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"



#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"


extern "C" {
#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"



typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,
    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;

typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete
    } RPC_ASYNC_EVENT;

struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef struct _RPC_ASYNC_STATE {
    unsigned int    Size; 
    unsigned long   Signature;
    long   Lock;
    unsigned long   Flags;
    void           *StubInfo;
    void           *UserInfo;
    void           *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    union {
        
        
        
        struct {
            PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
            HANDLE hThread;
            } APC;

        
        
        
        struct {
            HANDLE hIOPort;
            DWORD dwNumberOfBytesTransferred;
            DWORD_PTR dwCompletionKey;
            LPOVERLAPPED lpOverlapped;
            } IOC;

        
        
        
        struct {
            HWND hWnd;
            UINT Msg;
            } HWND;


        
        
        
        HANDLE hEvent;

        
        
        
        
        
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        } u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
    PRPC_ASYNC_STATE pAsync,
    unsigned int     Size
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
    PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
    PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
    PRPC_ASYNC_STATE pAsync,
    void *Reply
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncAbortCall (
    PRPC_ASYNC_STATE pAsync,
    unsigned long ExceptionCode
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCancelCall (
     PRPC_ASYNC_STATE pAsync,
     BOOL fAbort
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
     DWORD dwTimeout
    );

typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;







typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {
        SYSTEMTIME SystemTime;
        FILETIME FileTime;
        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorStartEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNextRecord (
     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     BOOL CopyStrings, 
     RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorEndEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorResetEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNumberOfRecords (
     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     int *Records
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorSaveErrorInfo (
     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     PVOID *ErrorBlob, 
     size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorLoadErrorInfo (
     PVOID ErrorBlob, 
     size_t BlobSize, 
     RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorAddRecord (
     RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void 
__stdcall
RpcErrorClearInformation (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
     RPC_BINDING_HANDLE ClientBinding ,
     BOOL ImpersonateOnReturn,
     PVOID Reserved1,
     PLARGE_INTEGER pExpirationTime ,
     LUID Reserved2,
     DWORD Reserved3,
     PVOID Reserved4,
     PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcFreeAuthorizationContext (
      PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
     RPC_BINDING_HANDLE ServerBindingHandle,
     PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
     RPC_BINDING_HANDLE ServerBindingHandle,
     PVOID UserContext
    );





typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
     RPC_BINDING_HANDLE ClientBinding, 
      void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
     RPC_BINDING_HANDLE ClientBinding, 
      void *RpcCallAttributes
    );







#line 399 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"

typedef RPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES;




RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
      PRPC_MESSAGE Message,
      PRPC_ASYNC_STATE pAsync
    );

RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
     PRPC_ASYNC_STATE pAsync,
     unsigned long ExceptionCode
    ) ;

int 
__stdcall
I_RpcExceptionFilter (
    unsigned long ExceptionCode
    );


}
#line 426 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"



#line 430 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"

#line 432 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcasync.h"

#line 187 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"

#line 189 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"



#line 193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"


}
#line 197 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"

#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpc.h"

#line 13 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"




















#line 22 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"






#pragma once
#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"








#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 39 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsip.h"



















#pragma once
#line 22 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsip.h"


extern "C" {
#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsip.h"

typedef struct
{
   RPC_NS_HANDLE        LookupContext;
   RPC_BINDING_HANDLE   ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
     PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsSendReceive(
     PRPC_MESSAGE Message,
     RPC_BINDING_HANDLE  * Handle
    );

__declspec(dllimport)
void
__stdcall
I_RpcNsRaiseException(
     PRPC_MESSAGE Message,
     RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReBindBuffer(
     PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsServerBindSearch(
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsClientBindSearch(
    );

__declspec(dllimport)
void
__stdcall
I_NsClientBindDone(
    );


}
#line 89 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsip.h"

#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcnsip.h"
#line 41 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"



extern "C" {
#line 46 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"




























































#line 107 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"


#line 110 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"








#line 119 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"



#line 125 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"





#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"





#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"






typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;










#line 159 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

#line 161 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"




















#line 182 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"
#line 183 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"







void  * __stdcall MIDL_user_allocate(size_t);
void             __stdcall MIDL_user_free( void  * );











#line 204 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"











typedef void  * NDR_CCONTEXT;

typedef struct
    {
    void  * pad[2];
    void  * userContext;
    }  * NDR_SCONTEXT;





typedef void (__stdcall  * NDR_RUNDOWN)(void  * context);

typedef void (__stdcall  * NDR_NOTIFY_ROUTINE)(void);
typedef void (__stdcall  * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long   NumberOfObjects;
    NDR_SCONTEXT  * ArrayOfObjects;
    } SCONTEXT_QUEUE,  * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
     NDR_CCONTEXT     CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
      NDR_CCONTEXT    CContext,
     void  *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
     NDR_CCONTEXT        *   pCContext,
      RPC_BINDING_HANDLE      hBinding,
      void                *   pBuff,
      unsigned long           DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
      NDR_SCONTEXT    CContext,
     void          * pBuff,
      NDR_RUNDOWN     userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
      void          * pBuff,
      unsigned long   DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshallEx (
      RPC_BINDING_HANDLE  BindingHandle,
      NDR_SCONTEXT        CContext,
     void              * pBuff,
      NDR_RUNDOWN         userRunDownIn
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall2 (
      RPC_BINDING_HANDLE  BindingHandle,
      NDR_SCONTEXT        CContext,
     void              * pBuff,
      NDR_RUNDOWN         userRunDownIn,
      void              * CtxGuard,
     unsigned long        Flags
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
      RPC_BINDING_HANDLE  BindingHandle,
      void              * pBuff,
      unsigned long       DataRepresentation
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
      RPC_BINDING_HANDLE  BindingHandle,
      void              * pBuff,
      unsigned long       DataRepresentation,
      void              * CtxGuard,
     unsigned long        Flags
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
     void  *  * ContextHandle
    );
































































#line 392 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"





typedef unsigned long error_status_t;

















































































struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char  *    RPC_BUFPTR;
typedef unsigned long       RPC_LENGTH;


typedef void (__stdcall  * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE  * );

typedef const unsigned char  * PFORMAT_STRING;




typedef struct
    {
    long              Dimension;

    
    unsigned long  *  BufferConformanceMark;
    unsigned long  *  BufferVarianceMark;

    
    unsigned long  *  MaxCountArray;
    unsigned long  *  OffsetArray;
    unsigned long  *  ActualCountArray;
    } ARRAY_INFO,  *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE *   PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef struct
    {
    unsigned long   WireCodeset;
    unsigned long   DesiredReceivingCodeset;
    void           *CSArrayInfo;
    } CS_STUB_INFO;





typedef const unsigned char  * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {
    
    PRPC_MESSAGE            RpcMsg;

    
    unsigned char       *   Buffer;

    



    unsigned char       *   BufferStart;
    unsigned char       *   BufferEnd;

    






    unsigned char       *   BufferMark;

    
    unsigned long           BufferLength;

    
    unsigned long           MemorySize;

    
    unsigned char       *   Memory;

    
    int                     IsClient;

    
    int                     ReuseBuffer;

    
    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE     *pPointerQueueState;

    



    
    int                     IgnoreEmbeddedPointers;

    



    unsigned char       *   PointerBufferMark;

    


    unsigned char           fBufferValid;

    unsigned char           uFlags;
    unsigned short          Unused2;

    



    ULONG_PTR               MaxCount;

    



    unsigned long           Offset;

    



    unsigned long           ActualCount;

    
    void  *                 ( __stdcall * pfnAllocate)(size_t);
    void                    ( __stdcall * pfnFree)(void  *);

    





    unsigned char       *   StackTop;

    



    unsigned char       *   pPresentedType;
    unsigned char       *   pTransmitType;

    







    handle_t                SavedHandle;

    


    const struct _MIDL_STUB_DESC  * StubDesc;

    


    struct _FULL_PTR_XLAT_TABLES  * FullPtrXlatTables;
    unsigned long                   FullPtrRefId;

    unsigned long                   PointerLength;

    int                             fInDontFree       :1;
    int                             fDontCallFreeInst :1;
    int                             fInOnlyParam      :1;
    int                             fHasReturn        :1;
    int                             fHasExtensions    :1;
    int                             fHasNewCorrDesc   :1;
    int                             fUnused           :10;
    int                             fUnused2          :16;


    unsigned long                   dwDestContext;
    void  *                         pvDestContext;

    NDR_SCONTEXT *                  SavedContextHandles;

    long                            ParamNumber;

    struct IRpcChannelBuffer    *   pRpcChannelBuffer;

    PARRAY_INFO                     pArrayInfo;
    unsigned long           *       SizePtrCountArray;
    unsigned long           *       SizePtrOffsetArray;
    unsigned long           *       SizePtrLengthArray;

    


    void                    *       pArgQueue;

    unsigned long                   dwStubPhase;

    void                    *       LowStackMark;

    


    PNDR_ASYNC_MESSAGE              pAsyncMsg;
    PNDR_CORRELATION_INFO           pCorrInfo;
    unsigned char *                 pCorrMemory;

    void *                          pMemoryList;

    





    



    CS_STUB_INFO *                  pCSInfo;

    unsigned char *                 ConformanceMark;
    unsigned char *                 VarianceMark;



#line 718 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"
    INT_PTR                         Unused;
#line 720 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

    struct _NDR_PROC_CONTEXT *      pContext;

    




    INT_PTR                         Reserved51_1;
    INT_PTR                         Reserved51_2;
    INT_PTR                         Reserved51_3;
    INT_PTR                         Reserved51_4;
    INT_PTR                         Reserved51_5;


    


    } MIDL_STUB_MESSAGE,  *PMIDL_STUB_MESSAGE;


typedef  struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE,   *PMIDL_STUB_MESSAGE;




typedef void  *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void  *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void  *, unsigned char  *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR,  *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void  *            pObj;
    unsigned int                Size;
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_INFO,  *PGENERIC_BINDING_INFO;









#line 776 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"


typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE     pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE     pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE     pfnFreeXmit;
    XMIT_HELPER_ROUTINE     pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE,  *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long  *,
     unsigned long,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  * ,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  *,
     void  * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long  *,
     void  * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE          pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE     pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE   pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE         pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long           Flags;
    PMIDL_STUB_MESSAGE      pStubMsg;
    PFORMAT_STRING          pReserve;
    unsigned long           Signature;
    USER_MARSHAL_CB_TYPE    CBType;
    PFORMAT_STRING          pFormat;
    PFORMAT_STRING          pTypeFormat;
} USER_MARSHAL_CB;









typedef struct _MALLOC_FREE_STRUCT
    {
    void  *     ( __stdcall * pfnAllocate)(size_t);
    void        ( __stdcall * pfnFree)(void  *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short       CommOffset;
    short       FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulLocalBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulNetworkBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulNetworkBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulLocalBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     void               *   pLocalData,
     unsigned long          ulLocalDataLength,
     byte               *   pNetworkData,
     unsigned long      *   pulNetworkDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     byte               *   pNetworkData,
     unsigned long          ulNetworkDataLength,
     unsigned long          ulLocalBufferSize,
     void               *   pLocalData,
     unsigned long      *   pulLocalDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     int                    fServerSide,
     unsigned long      *   pulSendingTag,
     unsigned long      *   pulDesiredReceivingTag,
     unsigned long      *   pulReceivingTag,
     error_status_t     *   pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE     hBinding,
     int                    fServerSide,
     unsigned long      *   pulSendingTag,
     unsigned long      *   pulDesiredReceivingTag,
     unsigned long      *   pulReceivingTag,
     error_status_t     *   pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE    pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE    pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE  pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE  pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES   *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE         *pTagGettingRoutines;
    } NDR_CS_ROUTINES;





typedef struct _MIDL_STUB_DESC
    {
    void  *    RpcInterfaceInformation;

    void  *    ( __stdcall * pfnAllocate)(size_t);
    void       ( __stdcall * pfnFree)(void  *);

    union
        {
        handle_t  *             pAutoHandle;
        handle_t  *             pPrimitiveHandle;
        PGENERIC_BINDING_INFO   pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN  *                    apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR  *   aGenericBindingRoutinePairs;
    const EXPR_EVAL  *                      apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE  *         aXmitQuintuple;

    const unsigned char  *                  pFormatTypes;

    int                                     fCheckBounds;

    
    unsigned long                           Version;

    MALLOC_FREE_STRUCT  *                   pMallocFreeStruct;

    long                                    MIDLVersion;

    const COMM_FAULT_OFFSETS  *    CommFaultOffsets;

    
    const USER_MARSHAL_ROUTINE_QUADRUPLE  * aUserMarshalQuadruple;

    
    const NDR_NOTIFY_ROUTINE  *             NotifyRoutineTable;

    



    ULONG_PTR                               mFlags;

    
    const NDR_CS_ROUTINES *                 CsRoutineTables;

    void *                                  Reserved4;
    ULONG_PTR                               Reserved5;

    

    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC  * PMIDL_STUB_DESC;

typedef void  * PMIDL_XMIT_TYPE;






#pragma warning(push)
#line 1012 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"
#pragma warning( disable:4200 )
#line 1014 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"
typedef struct _MIDL_FORMAT_STRING
    {
    short               Pad;
    unsigned char       Format[];
    } MIDL_FORMAT_STRING;


#pragma warning(pop)


#line 1025 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"
#line 1026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"




typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );

typedef long ( __stdcall * SERVER_ROUTINE)();




typedef struct  _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC                     pStubDesc;
    const SERVER_ROUTINE     *          DispatchTable;
    PFORMAT_STRING                      ProcString;
    const unsigned short *              FmtStringOffset;
    const STUB_THUNK *                  ThunkTable;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC                     pStubDesc;
    PFORMAT_STRING                      ProcFormatString;
    const unsigned short            *   FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO  * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER               TransferSyntax;
RPC_DISPATCH_TABLE *                DispatchTable;
PFORMAT_STRING                      ProcString;
const unsigned short *              FmtStringOffset;
PFORMAT_STRING                      TypeString;
const void           *              aUserMarshalQuadruple;
ULONG_PTR                           pReserved1;
ULONG_PTR                           pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;




typedef union _CLIENT_CALL_RETURN
    {
    void  *         Pointer;
    LONG_PTR        Simple;
    } CLIENT_CALL_RETURN;





typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;





typedef struct _FULL_PTR_TO_REFID_ELEMENT
    {
    struct _FULL_PTR_TO_REFID_ELEMENT  *  Next;

    void  *             Pointer;
    unsigned long       RefId;
    unsigned char       State;
    } FULL_PTR_TO_REFID_ELEMENT,  *PFULL_PTR_TO_REFID_ELEMENT;




typedef struct _FULL_PTR_XLAT_TABLES
    {
    


    struct
        {
        void  * *           XlatTable;
        unsigned char  *    StateTable;
        unsigned long       NumberOfEntries;
        } RefIdToPointer;

    


    struct
        {
        PFULL_PTR_TO_REFID_ELEMENT  *   XlatTable;
        unsigned long                   NumberOfBuckets;
        unsigned long                   HashMask;
        } PointerToRefId;

    


    unsigned long           NextRefId;

    






    XLAT_SIDE               XlatSide;
    } FULL_PTR_XLAT_TABLES,  *PFULL_PTR_XLAT_TABLES;





RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
     RPC_CLIENT_INTERFACE * pInf,
     unsigned long       * pCount,
     MIDL_SYNTAX_INFO   ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
     RPC_SERVER_INTERFACE * pInf,
     unsigned long       * pCount,
     MIDL_SYNTAX_INFO   ** pArr,
     unsigned long       * pPreferSyntaxIndex);





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    unsigned char           FormatChar
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_CCONTEXT            ContextHandle,
    int                     fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_SCONTEXT            ContextHandle,
    NDR_RUNDOWN             RundownRoutine
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_SCONTEXT            ContextHandle,
    NDR_RUNDOWN             RundownRoutine,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    unsigned char           FormatChar
    );

__declspec(dllimport)
unsigned char * __stdcall
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char * __stdcall
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char * __stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    void  *                 pMemory,
    unsigned long           CacheSize,
    unsigned long           flags
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_CCONTEXT        *   pContextHandle,
    RPC_BINDING_HANDLE      BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg
    );



__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
      PMIDL_STUB_MESSAGE  pStubMsg,
      PFORMAT_STRING      pFormat
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
      PMIDL_STUB_MESSAGE  pStubMsg,
      PFORMAT_STRING      pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    long                    NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );














__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long *         pFlags,
    unsigned char *         pBuffer,
    unsigned char           FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned int            ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned long           RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned int            ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    PRPC_MESSAGE            pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned long           BufferLength,
    RPC_BINDING_HANDLE      Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned long           BufferLength,
    RPC_BINDING_HANDLE      Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char *         pBufferEnd
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pBufferEnd,
    RPC_BINDING_HANDLE  *   pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE      pStubMsg,
    RPC_VERSION *           pVersion );








CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );


typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;      


__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE                pRpcMsg
    );


__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer *     pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long *             pdwStubPhase
    );


__declspec(dllimport)
long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer    *  pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long            *  pdwStubPhase
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    PMIDL_STUB_MESSAGE          pStubMsg,
    PMIDL_STUB_DESC             pStubDescriptor,
    PFORMAT_STRING              pFormat,
    void  *                     pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PMIDL_STUB_MESSAGE          pStubMsg,
    PFORMAT_STRING              pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned long  *            pCommStatus,
    unsigned long  *            pFaultStatus,
    RPC_STATUS                  Status
    );



__declspec(dllimport)
int
__stdcall
NdrSH_UPDecision(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    RPC_BUFPTR                  pBuffer
    );

__declspec(dllimport)
int
__stdcall
NdrSH_TLUPDecision(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem
    );

__declspec(dllimport)
int
__stdcall
NdrSH_TLUPDecisionBuffer(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAlloc(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAllocRef(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAllocSet(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_IfCopy(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_IfAllocCopy(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrSH_Copy(
    unsigned char            *  pStubMsg,
    unsigned char            *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
void
__stdcall
NdrSH_IfFree(
    PMIDL_STUB_MESSAGE          pMessage,
    unsigned char            *  pPtr );


__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_StringMarshall(
    PMIDL_STUB_MESSAGE          pMessage,
    unsigned char            *  pMemory,
    unsigned long               Count,
    int                         Size );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_StringUnMarshall(
    PMIDL_STUB_MESSAGE          pMessage,
    unsigned char          * *  pMemory,
    int                         Size );





typedef void  * RPC_SS_THREAD_HANDLE;

typedef void  * __stdcall
RPC_CLIENT_ALLOC (
     size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
     void  * Ptr
    );





__declspec(dllimport)
void  *
__stdcall
RpcSsAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
     void  * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE   * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
     RPC_CLIENT_ALLOC     * ClientAlloc,
     RPC_CLIENT_FREE      * ClientFree,
     RPC_CLIENT_ALLOC *  * OldClientAlloc,
     RPC_CLIENT_FREE  *  * OldClientFree
    );





__declspec(dllimport)
void  *
__stdcall
RpcSmAllocate (
      size_t          Size,
     RPC_STATUS  *   pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
      void        *   pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
     void         * * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
     void         *   NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
     RPC_STATUS  *   pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
     RPC_CLIENT_ALLOC * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
     RPC_CLIENT_ALLOC     *   ClientAlloc,
     RPC_CLIENT_FREE      *   ClientFree,
     RPC_CLIENT_ALLOC    * * OldClientAlloc,
     RPC_CLIENT_FREE     * * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSmClientAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
     void  * NodeToFree
    );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSsDefaultAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
     void  * NodeToFree
    );









__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long           NumberOfPointers,
    XLAT_SIDE               XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerQueryPointer(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                 pPointer,
    unsigned char           QueryType,
    unsigned long  *        pRefId
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerQueryRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    unsigned char           QueryType,
    void  * *               ppPointer
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerInsertRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    void  *                 pPointer
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                 Pointer
    );

__declspec(dllimport)
void  *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE      pStubMsg,
    size_t                  Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    void  *                 ArgAddr
    );






__declspec(dllimport)
void  *
__stdcall
NdrOleAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
     void  * NodeToFree
    );





#line 2992 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"




































#line 3029 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"





typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void *                      Buffer;
    unsigned long               BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer *  pRpcChannelBuffer;
    ULONG_PTR                   Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;



#pragma warning(push)
#line 3048 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"
#pragma warning(disable:4201)
#line 3050 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    };
} NDR_USER_MARSHAL_INFO;



#pragma warning(pop)


#line 3065 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"
#line 3066 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
     unsigned long        *   pFlags,
     unsigned long            InformationLevel,
     NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
             struct IRpcStubBuffer* pStub,
              RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

struct IRpcStubBuffer;      

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer *     pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long *             pdwStubPhase
    );


__declspec(dllimport)
long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer    *  pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long            *  pdwStubPhase
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall3 (
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE                pRpcMsg
    );


__declspec(dllimport)
void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE                pRpcMsg
    );



__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void *                      pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void **                     ppMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void *                      pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void **                     ppMemory,
    PFORMAT_STRING              pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );


}
#line 3228 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 3230 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

#line 3232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\rpcndr.h"

#line 14 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"





#pragma once
#line 21 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 23 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"






















































#line 78 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"

#line 80 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"












































































































#line 191 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
   
   
#line 194 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 195 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"











































#line 239 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"












#line 252 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"








#line 262 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 263 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"



































#line 299 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"



typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,       
    REGCLS_MULTIPLEUSE = 1,     
                                
    REGCLS_MULTI_SEPARATE = 2,  
                                
    REGCLS_SUSPENDED      = 4,  
                                
    REGCLS_SURROGATE      = 8   
                                
                                
} REGCLS;
































#line 348 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"








#line 357 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"





















typedef struct    IRpcStubBuffer     IRpcStubBuffer;
typedef struct    IRpcChannelBuffer  IRpcChannelBuffer;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"

#pragma warning( disable: 4049 )  




 














#line 23 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"













#pragma once
#line 38 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"

 



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
























































#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"








#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"











































































































































#line 44 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"


extern "C"{
#line 48 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 








#pragma once
#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"


extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_s_ifspec;





 

typedef struct tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHPALETTE;

typedef struct tagRemBRUSH
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHBRUSH;


































































































































































































#line 309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"






























typedef WCHAR OLECHAR;

typedef  OLECHAR *LPOLESTR;

typedef  const OLECHAR *LPCOLESTR;









#line 354 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
























typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;






























#line 418 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
















































































typedef struct _COAUTHIDENTITY
    {
     USHORT *User;
    ULONG UserLength;
     USHORT *Domain;
    ULONG DomainLength;
     USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
    } 	COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } 	COAUTHINFO;

typedef LONG SCODE;






typedef SCODE *PSCODE;




















#line 549 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef 
enum tagMEMCTX
    {	MEMCTX_TASK	= 1,
	MEMCTX_SHARED	= 2,
	MEMCTX_MACSYSTEM	= 3,
	MEMCTX_UNKNOWN	= -1,
	MEMCTX_SAME	= -2
    } 	MEMCTX;





#line 563 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"



#line 567 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef 
enum tagCLSCTX
    {	CLSCTX_INPROC_SERVER	= 0x1,
	CLSCTX_INPROC_HANDLER	= 0x2,
	CLSCTX_LOCAL_SERVER	= 0x4,
	CLSCTX_INPROC_SERVER16	= 0x8,
	CLSCTX_REMOTE_SERVER	= 0x10,
	CLSCTX_INPROC_HANDLER16	= 0x20,
	CLSCTX_INPROC_SERVERX86	= 0x40,
	CLSCTX_INPROC_HANDLERX86	= 0x80,
	CLSCTX_ESERVER_HANDLER	= 0x100,
	CLSCTX_RESERVED	= 0x200,
	CLSCTX_NO_CODE_DOWNLOAD	= 0x400,
	CLSCTX_NO_WX86_TRANSLATION	= 0x800,
	CLSCTX_NO_CUSTOM_MARSHAL	= 0x1000,
	CLSCTX_ENABLE_CODE_DOWNLOAD	= 0x2000,
	CLSCTX_NO_FAILURE_LOG	= 0x4000,
	CLSCTX_DISABLE_AAA	= 0x8000,
	CLSCTX_ENABLE_AAA	= 0x10000,
	CLSCTX_FROM_DEFAULT_CONTEXT	= 0x20000
    } 	CLSCTX;

typedef 
enum tagMSHLFLAGS
    {	MSHLFLAGS_NORMAL	= 0,
	MSHLFLAGS_TABLESTRONG	= 1,
	MSHLFLAGS_TABLEWEAK	= 2,
	MSHLFLAGS_NOPING	= 4,
	MSHLFLAGS_RESERVED1	= 8,
	MSHLFLAGS_RESERVED2	= 16,
	MSHLFLAGS_RESERVED3	= 32,
	MSHLFLAGS_RESERVED4	= 64
    } 	MSHLFLAGS;

typedef 
enum tagMSHCTX
    {	MSHCTX_LOCAL	= 0,
	MSHCTX_NOSHAREDMEM	= 1,
	MSHCTX_DIFFERENTMACHINE	= 2,
	MSHCTX_INPROC	= 3,
	MSHCTX_CROSSCTX	= 4
    } 	MSHCTX;

typedef 
enum tagDVASPECT
    {	DVASPECT_CONTENT	= 1,
	DVASPECT_THUMBNAIL	= 2,
	DVASPECT_ICON	= 4,
	DVASPECT_DOCPRINT	= 8
    } 	DVASPECT;

typedef 
enum tagSTGC
    {	STGC_DEFAULT	= 0,
	STGC_OVERWRITE	= 1,
	STGC_ONLYIFCURRENT	= 2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	= 4,
	STGC_CONSOLIDATE	= 8
    } 	STGC;

typedef 
enum tagSTGMOVE
    {	STGMOVE_MOVE	= 0,
	STGMOVE_COPY	= 1,
	STGMOVE_SHALLOWCOPY	= 2
    } 	STGMOVE;

typedef 
enum tagSTATFLAG
    {	STATFLAG_DEFAULT	= 0,
	STATFLAG_NONAME	= 1,
	STATFLAG_NOOPEN	= 2
    } 	STATFLAG;

typedef  void *HCONTEXT;



typedef DWORD LCID;

#line 648 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"


typedef USHORT LANGID;

#line 653 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef struct _BYTE_BLOB
    {
    unsigned long clSize;
     byte abData[ 1 ];
    } 	BYTE_BLOB;

typedef  BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    unsigned long clSize;
     unsigned short asData[ 1 ];
    } 	WORD_BLOB;

typedef  WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    unsigned long clSize;
     unsigned long alData[ 1 ];
    } 	DWORD_BLOB;

typedef  DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     byte abData[ 1 ];
    } 	FLAGGED_BYTE_BLOB;

typedef  FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     unsigned short asData[ 1 ];
    } 	FLAGGED_WORD_BLOB;

typedef  FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    unsigned long clSize;
     byte *pData;
    } 	BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    unsigned long clSize;
     unsigned short *pData;
    } 	WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    unsigned long clSize;
     unsigned long *pData;
    } 	DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    unsigned long clSize;
     __int64 *pData;
    } 	HYPER_SIZEDARR;







typedef struct _userCLIPFORMAT
    {
    long fContext;
      union __MIDL_IWinTypes_0001
        {
         DWORD dwValue;
         wchar_t *pwszName;
        } 	u;
    } 	userCLIPFORMAT;

typedef  userCLIPFORMAT *wireCLIPFORMAT;

typedef  WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    long fContext;
      union __MIDL_IWinTypes_0002
        {
         long hInproc;
         DWORD_BLOB *hRemote;
        } 	u;
    } 	GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    long fContext;
      union __MIDL_IWinTypes_0003
        {
         long hInproc;
         FLAGGED_BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHGLOBAL;

typedef  userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0004
        {
         long hInproc;
         BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    userHMETAFILE *hMF;
    } 	remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    long fContext;
      union __MIDL_IWinTypes_0005
        {
         long hInproc;
         remoteMETAFILEPICT *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0006
        {
         long hInproc;
         BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
     byte pBuffer[ 1 ];
    } 	userBITMAP;

typedef struct _userHBITMAP
    {
    long fContext;
      union __MIDL_IWinTypes_0007
        {
         long hInproc;
         userBITMAP *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHBITMAP;

typedef struct _userHPALETTE
    {
    long fContext;
      union __MIDL_IWinTypes_0008
        {
         long hInproc;
         LOGPALETTE *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHPALETTE;

typedef struct _RemotableHandle
    {
    long fContext;
      union __MIDL_IWinTypes_0009
        {
         long hInproc;
         long hRemote;
        } 	u;
    } 	RemotableHandle;

typedef  RemotableHandle *wireHWND;

typedef  RemotableHandle *wireHMENU;

typedef  RemotableHandle *wireHACCEL;

typedef  RemotableHandle *wireHBRUSH;

typedef  RemotableHandle *wireHFONT;

typedef  RemotableHandle *wireHDC;

typedef  RemotableHandle *wireHICON;





















#line 882 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"



















































typedef  userHBITMAP *wireHBITMAP;

typedef  userHPALETTE *wireHPALETTE;

typedef  userHENHMETAFILE *wireHENHMETAFILE;

typedef  userHMETAFILE *wireHMETAFILE;

typedef  userHMETAFILEPICT *wireHMETAFILEPICT;














#line 957 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef  void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
#line 964 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"


 



#pragma warning(push)
#line 972 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
#pragma warning(disable:4201)
#line 974 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef double DATE;












#line 988 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"

typedef union tagCY {
    struct {




        unsigned long Lo;
        long      Hi;
#line 998 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
    };
    LONGLONG int64;
} CY;
#line 1002 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
#line 1003 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef CY *LPCY;













#line 1018 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"

typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        };
        USHORT signscale;
    };
    ULONG Hi32;
    union {
        struct {




            ULONG Lo32;
            ULONG Mid32;
#line 1038 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
        };
        ULONGLONG Lo64;
    };
} DECIMAL;



#line 1046 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef DECIMAL *LPDECIMAL;



#pragma warning(pop)


#line 1054 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
#line 1055 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef  FLAGGED_WORD_BLOB *wireBSTR;

typedef  OLECHAR *BSTR;

typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;





#line 1069 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"


#line 1072 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef boolean BOOLEAN;






typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
     BYTE *pData;
    } 	BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;

#line 1088 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"






typedef struct tagBLOB
    {
    ULONG cbSize;
     BYTE *pBlobData;
    } 	BLOB;

typedef struct tagBLOB *LPBLOB;

#line 1103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"
typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    long ulClipFmt;
     BYTE *pClipData;
    } 	CLIPDATA;



typedef unsigned short VARTYPE;




























































enum VARENUM
    {	VT_EMPTY	= 0,
	VT_NULL	= 1,
	VT_I2	= 2,
	VT_I4	= 3,
	VT_R4	= 4,
	VT_R8	= 5,
	VT_CY	= 6,
	VT_DATE	= 7,
	VT_BSTR	= 8,
	VT_DISPATCH	= 9,
	VT_ERROR	= 10,
	VT_BOOL	= 11,
	VT_VARIANT	= 12,
	VT_UNKNOWN	= 13,
	VT_DECIMAL	= 14,
	VT_I1	= 16,
	VT_UI1	= 17,
	VT_UI2	= 18,
	VT_UI4	= 19,
	VT_I8	= 20,
	VT_UI8	= 21,
	VT_INT	= 22,
	VT_UINT	= 23,
	VT_VOID	= 24,
	VT_HRESULT	= 25,
	VT_PTR	= 26,
	VT_SAFEARRAY	= 27,
	VT_CARRAY	= 28,
	VT_USERDEFINED	= 29,
	VT_LPSTR	= 30,
	VT_LPWSTR	= 31,
	VT_RECORD	= 36,
	VT_INT_PTR	= 37,
	VT_UINT_PTR	= 38,
	VT_FILETIME	= 64,
	VT_BLOB	= 65,
	VT_STREAM	= 66,
	VT_STORAGE	= 67,
	VT_STREAMED_OBJECT	= 68,
	VT_STORED_OBJECT	= 69,
	VT_BLOB_OBJECT	= 70,
	VT_CF	= 71,
	VT_CLSID	= 72,
	VT_VERSIONED_STREAM	= 73,
	VT_BSTR_BLOB	= 0xfff,
	VT_VECTOR	= 0x1000,
	VT_ARRAY	= 0x2000,
	VT_BYREF	= 0x4000,
	VT_RESERVED	= 0x8000,
	VT_ILLEGAL	= 0xffff,
	VT_ILLEGALMASKED	= 0xfff,
	VT_TYPEMASK	= 0xfff
    } ;
typedef ULONG PROPID;
































typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } 	CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } 	QUERYCONTEXT;

typedef  
enum tagTYSPEC
    {	TYSPEC_CLSID	= 0,
	TYSPEC_FILEEXT	= TYSPEC_CLSID + 1,
	TYSPEC_MIMETYPE	= TYSPEC_FILEEXT + 1,
	TYSPEC_FILENAME	= TYSPEC_MIMETYPE + 1,
	TYSPEC_PROGID	= TYSPEC_FILENAME + 1,
	TYSPEC_PACKAGENAME	= TYSPEC_PROGID + 1,
	TYSPEC_OBJECTID	= TYSPEC_PACKAGENAME + 1
    } 	TYSPEC;

typedef  struct __MIDL___MIDL_itf_wtypes_0003_0001
    {
    DWORD tyspec;
      union __MIDL___MIDL_itf_wtypes_0003_0005
        {
         CLSID clsid;
         LPOLESTR pFileExt;
         LPOLESTR pMimeType;
         LPOLESTR pProgId;
         LPOLESTR pFileName;
         struct 
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } 	ByName;
         struct 
            {
            GUID ObjectId;
            GUID PolicyId;
            } 	ByObjectId;
        } 	tagged_union;
    } 	uCLSSPEC;



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0003_v0_0_s_ifspec;






}
#line 1323 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"

#line 1325 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wtypes.h"


#line 382 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"

#pragma warning( disable: 4049 )  




 

























#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"














#pragma once
#line 17 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 21 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"









#line 31 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"















#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 22 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"
#line 23 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"









#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"

extern "C" const IID IID_StdOle;






















#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

 



typedef struct ICreateTypeInfo ICreateTypeInfo;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ICreateTypeInfo2 ICreateTypeInfo2;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ICreateTypeLib ICreateTypeLib;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ICreateTypeLib2 ICreateTypeLib2;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct IDispatch IDispatch;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct IEnumVARIANT IEnumVARIANT;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeComp ITypeComp;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeInfo ITypeInfo;
#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeInfo2 ITypeInfo2;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeLib ITypeLib;
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeLib2 ITypeLib2;
#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeChangeEvents ITypeChangeEvents;
#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct IErrorInfo IErrorInfo;
#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ICreateErrorInfo ICreateErrorInfo;
#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ISupportErrorInfo ISupportErrorInfo;
#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeFactory ITypeFactory;
#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct ITypeMarshal ITypeMarshal;
#line 145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct IRecordInfo IRecordInfo;
#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct IErrorLog IErrorLog;
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




typedef struct IPropertyBag IPropertyBag;
#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"

 



typedef struct IMarshal IMarshal;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IMarshal2 IMarshal2;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IMalloc IMalloc;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IMallocSpy IMallocSpy;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IStdMarshalInfo IStdMarshalInfo;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IExternalConnection IExternalConnection;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IMultiQI IMultiQI;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct AsyncIMultiQI AsyncIMultiQI;
#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IInternalUnknown IInternalUnknown;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IEnumUnknown IEnumUnknown;
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IBindCtx IBindCtx;
#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IEnumMoniker IEnumMoniker;
#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRunnableObject IRunnableObject;
#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRunningObjectTable IRunningObjectTable;
#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPersist IPersist;
#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPersistStream IPersistStream;
#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IMoniker IMoniker;
#line 145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IROTData IROTData;
#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IEnumString IEnumString;
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ISequentialStream ISequentialStream;
#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IStream IStream;
#line 169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IEnumSTATSTG IEnumSTATSTG;
#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IStorage IStorage;
#line 181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPersistFile IPersistFile;
#line 187 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPersistStorage IPersistStorage;
#line 193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ILockBytes ILockBytes;
#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IEnumFORMATETC IEnumFORMATETC;
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IEnumSTATDATA IEnumSTATDATA;
#line 211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRootStorage IRootStorage;
#line 217 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IAdviseSink IAdviseSink;
#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct AsyncIAdviseSink AsyncIAdviseSink;
#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IAdviseSink2 IAdviseSink2;
#line 235 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;
#line 241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IDataObject IDataObject;
#line 247 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IDataAdviseHolder IDataAdviseHolder;
#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IMessageFilter IMessageFilter;
#line 259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcChannelBuffer IRpcChannelBuffer;
#line 265 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;
#line 271 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;
#line 277 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;
#line 283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;
#line 289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcProxyBuffer IRpcProxyBuffer;
#line 295 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcStubBuffer IRpcStubBuffer;
#line 301 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPSFactoryBuffer IPSFactoryBuffer;
#line 307 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IChannelHook IChannelHook;
#line 313 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IClientSecurity IClientSecurity;
#line 319 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IServerSecurity IServerSecurity;
#line 325 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IClassActivator IClassActivator;
#line 331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcOptions IRpcOptions;
#line 337 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IFillLockBytes IFillLockBytes;
#line 343 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IProgressNotify IProgressNotify;
#line 349 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ILayoutStorage ILayoutStorage;
#line 355 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IBlockingLock IBlockingLock;
#line 361 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;
#line 367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IOplockStorage IOplockStorage;
#line 373 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ISurrogate ISurrogate;
#line 379 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;
#line 385 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IDirectWriterLock IDirectWriterLock;
#line 391 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ISynchronize ISynchronize;
#line 397 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ISynchronizeHandle ISynchronizeHandle;
#line 403 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ISynchronizeEvent ISynchronizeEvent;
#line 409 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ISynchronizeContainer ISynchronizeContainer;
#line 415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ISynchronizeMutex ISynchronizeMutex;
#line 421 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ICancelMethodCalls ICancelMethodCalls;
#line 427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IAsyncManager IAsyncManager;
#line 433 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct ICallFactory ICallFactory;
#line 439 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IRpcHelper IRpcHelper;
#line 445 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;
#line 451 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IWaitMultiple IWaitMultiple;
#line 457 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IUrlMon IUrlMon;
#line 463 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IForegroundTransfer IForegroundTransfer;
#line 469 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IAddrTrackingControl IAddrTrackingControl;
#line 475 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IAddrExclusionControl IAddrExclusionControl;
#line 481 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPipeByte IPipeByte;
#line 487 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct AsyncIPipeByte AsyncIPipeByte;
#line 493 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPipeLong IPipeLong;
#line 499 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct AsyncIPipeLong AsyncIPipeLong;
#line 505 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IPipeDouble IPipeDouble;
#line 511 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct AsyncIPipeDouble AsyncIPipeDouble;
#line 517 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IThumbnailExtractor IThumbnailExtractor;
#line 523 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IDummyHICONIncluder IDummyHICONIncluder;
#line 529 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IComThreadingInfo IComThreadingInfo;
#line 535 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




typedef struct IProcessInitControl IProcessInitControl;
#line 541 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"

 



typedef struct IUnknown IUnknown;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"




typedef struct AsyncIUnknown AsyncIUnknown;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"




typedef struct IClassFactory IClassFactory;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"






extern "C"{
#line 69 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 








#pragma once
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"


extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_s_ifspec;





 

typedef  IUnknown *LPUNKNOWN;







    extern "C" const IID IID_IUnknown;
    extern "C++"
    {
        struct __declspec(uuid("00000000-0000-0000-C000-000000000046")) __declspec(novtable)
        IUnknown
        {
        public:
            
            virtual HRESULT __stdcall QueryInterface( 
                 const IID & riid,
                 void  * *ppvObject) = 0;
            
            virtual ULONG __stdcall AddRef( void) = 0;
            
            virtual ULONG __stdcall Release( void) = 0;
    	
            template<class Q>
    	HRESULT __stdcall QueryInterface(Q** pp)
    	{
    	    return QueryInterface(__uuidof(Q), (void **)pp);
    	}
            
            
        };
    } 
    HRESULT __stdcall IUnknown_QueryInterface_Proxy(
        IUnknown  * This,
         const IID & riid,
         void  * *ppvObject);
    
    void __stdcall IUnknown_QueryInterface_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
    
    ULONG __stdcall IUnknown_AddRef_Proxy(
        IUnknown  * This);
    
    void __stdcall IUnknown_AddRef_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
    
    ULONG __stdcall IUnknown_Release_Proxy(
        IUnknown  * This);
    
    void __stdcall IUnknown_Release_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);








































































































#line 262 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"



 

#line 268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"


extern RPC_IF_HANDLE __MIDL_itf_unknwn_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0005_v0_0_s_ifspec;





 


extern "C" const IID IID_AsyncIUnknown;


    
    struct __declspec(uuid("000e0000-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryInterface( 
             const IID & riid) = 0;
        
        virtual HRESULT __stdcall Finish_QueryInterface( 
             void **ppvObject) = 0;
        
        virtual HRESULT __stdcall Begin_AddRef( void) = 0;
        
        virtual ULONG __stdcall Finish_AddRef( void) = 0;
        
        virtual HRESULT __stdcall Begin_Release( void) = 0;
        
        virtual ULONG __stdcall Finish_Release( void) = 0;
        
    };
    

















































































#line 386 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"



HRESULT __stdcall AsyncIUnknown_Begin_QueryInterface_Proxy( 
    AsyncIUnknown * This,
     const IID & riid);


void __stdcall AsyncIUnknown_Begin_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIUnknown_Finish_QueryInterface_Proxy( 
    AsyncIUnknown * This,
     void **ppvObject);


void __stdcall AsyncIUnknown_Finish_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIUnknown_Begin_AddRef_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Begin_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall AsyncIUnknown_Finish_AddRef_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Finish_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIUnknown_Begin_Release_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Begin_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall AsyncIUnknown_Finish_Release_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Finish_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 459 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"






 

typedef  IClassFactory *LPCLASSFACTORY;


extern "C" const IID IID_IClassFactory;


    
    struct __declspec(uuid("00000001-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassFactory : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall CreateInstance( 
             IUnknown *pUnkOuter,
             const IID & riid,
             void **ppvObject) = 0;
        
        virtual  HRESULT __stdcall LockServer( 
             BOOL fLock) = 0;
        
    };
    



























































#line 548 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"



 HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy( 
    IClassFactory * This,
     const IID & riid,
     IUnknown **ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy( 
    IClassFactory * This,
     BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 578 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"




 HRESULT __stdcall IClassFactory_CreateInstance_Proxy( 
    IClassFactory * This,
     IUnknown *pUnkOuter,
     const IID & riid,
     void **ppvObject);


 HRESULT __stdcall IClassFactory_CreateInstance_Stub( 
    IClassFactory * This,
     const IID & riid,
     IUnknown **ppvObject);

 HRESULT __stdcall IClassFactory_LockServer_Proxy( 
    IClassFactory * This,
     BOOL fLock);


 HRESULT __stdcall IClassFactory_LockServer_Stub( 
    IClassFactory * This,
     BOOL fLock);






}
#line 610 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"

#line 612 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"


#line 545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"


extern "C"{
#line 549 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 













#pragma warning(push)
#line 570 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
#pragma warning(disable:4201)
#line 572 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"

#pragma once
#line 575 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"













typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } 	COSERVERINFO;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_s_ifspec;





 

typedef  IMarshal *LPMARSHAL;


extern "C" const IID IID_IMarshal;


    
    struct __declspec(uuid("00000003-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUnmarshalClass( 
             const IID & riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             CLSID *pCid) = 0;
        
        virtual HRESULT __stdcall GetMarshalSizeMax( 
             const IID & riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             DWORD *pSize) = 0;
        
        virtual HRESULT __stdcall MarshalInterface( 
             IStream *pStm,
             const IID & riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags) = 0;
        
        virtual HRESULT __stdcall UnmarshalInterface( 
             IStream *pStm,
             const IID & riid,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall ReleaseMarshalData( 
             IStream *pStm) = 0;
        
        virtual HRESULT __stdcall DisconnectObject( 
             DWORD dwReserved) = 0;
        
    };
    






































































































#line 758 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IMarshal_GetUnmarshalClass_Proxy( 
    IMarshal * This,
     const IID & riid,
     void *pv,
     DWORD dwDestContext,
     void *pvDestContext,
     DWORD mshlflags,
     CLSID *pCid);


void __stdcall IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_GetMarshalSizeMax_Proxy( 
    IMarshal * This,
     const IID & riid,
     void *pv,
     DWORD dwDestContext,
     void *pvDestContext,
     DWORD mshlflags,
     DWORD *pSize);


void __stdcall IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_MarshalInterface_Proxy( 
    IMarshal * This,
     IStream *pStm,
     const IID & riid,
     void *pv,
     DWORD dwDestContext,
     void *pvDestContext,
     DWORD mshlflags);


void __stdcall IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_UnmarshalInterface_Proxy( 
    IMarshal * This,
     IStream *pStm,
     const IID & riid,
     void **ppv);


void __stdcall IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_ReleaseMarshalData_Proxy( 
    IMarshal * This,
     IStream *pStm);


void __stdcall IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_DisconnectObject_Proxy( 
    IMarshal * This,
     DWORD dwReserved);


void __stdcall IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IMarshal2 *LPMARSHAL2;


extern "C" const IID IID_IMarshal2;


    
    struct __declspec(uuid("000001cf-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal2 : public IMarshal
    {
    public:
    };
    







































































































#line 977 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"




#line 982 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IMalloc *LPMALLOC;


extern "C" const IID IID_IMalloc;


    
    struct __declspec(uuid("00000002-0000-0000-C000-000000000046")) __declspec(novtable)
    IMalloc : public IUnknown
    {
    public:
        virtual void *__stdcall Alloc( 
             SIZE_T cb) = 0;
        
        virtual void *__stdcall Realloc( 
             void *pv,
             SIZE_T cb) = 0;
        
        virtual void __stdcall Free( 
             void *pv) = 0;
        
        virtual SIZE_T __stdcall GetSize( 
             void *pv) = 0;
        
        virtual int __stdcall DidAlloc( 
            void *pv) = 0;
        
        virtual void __stdcall HeapMinimize( void) = 0;
        
    };
    





















































































#line 1107 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



void *__stdcall IMalloc_Alloc_Proxy( 
    IMalloc * This,
     SIZE_T cb);


void __stdcall IMalloc_Alloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMalloc_Realloc_Proxy( 
    IMalloc * This,
     void *pv,
     SIZE_T cb);


void __stdcall IMalloc_Realloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_Free_Proxy( 
    IMalloc * This,
     void *pv);


void __stdcall IMalloc_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


SIZE_T __stdcall IMalloc_GetSize_Proxy( 
    IMalloc * This,
     void *pv);


void __stdcall IMalloc_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMalloc_DidAlloc_Proxy( 
    IMalloc * This,
    void *pv);


void __stdcall IMalloc_DidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_HeapMinimize_Proxy( 
    IMalloc * This);


void __stdcall IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IMallocSpy *LPMALLOCSPY;


extern "C" const IID IID_IMallocSpy;


    
    struct __declspec(uuid("0000001d-0000-0000-C000-000000000046")) __declspec(novtable)
    IMallocSpy : public IUnknown
    {
    public:
        virtual SIZE_T __stdcall PreAlloc( 
             SIZE_T cbRequest) = 0;
        
        virtual void *__stdcall PostAlloc( 
             void *pActual) = 0;
        
        virtual void *__stdcall PreFree( 
             void *pRequest,
             BOOL fSpyed) = 0;
        
        virtual void __stdcall PostFree( 
             BOOL fSpyed) = 0;
        
        virtual SIZE_T __stdcall PreRealloc( 
             void *pRequest,
             SIZE_T cbRequest,
             void **ppNewRequest,
             BOOL fSpyed) = 0;
        
        virtual void *__stdcall PostRealloc( 
             void *pActual,
             BOOL fSpyed) = 0;
        
        virtual void *__stdcall PreGetSize( 
             void *pRequest,
             BOOL fSpyed) = 0;
        
        virtual SIZE_T __stdcall PostGetSize( 
             SIZE_T cbActual,
             BOOL fSpyed) = 0;
        
        virtual void *__stdcall PreDidAlloc( 
             void *pRequest,
             BOOL fSpyed) = 0;
        
        virtual int __stdcall PostDidAlloc( 
             void *pRequest,
             BOOL fSpyed,
             int fActual) = 0;
        
        virtual void __stdcall PreHeapMinimize( void) = 0;
        
        virtual void __stdcall PostHeapMinimize( void) = 0;
        
    };
    







































































































































#line 1385 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



SIZE_T __stdcall IMallocSpy_PreAlloc_Proxy( 
    IMallocSpy * This,
     SIZE_T cbRequest);


void __stdcall IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PostAlloc_Proxy( 
    IMallocSpy * This,
     void *pActual);


void __stdcall IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PreFree_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostFree_Proxy( 
    IMallocSpy * This,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


SIZE_T __stdcall IMallocSpy_PreRealloc_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     SIZE_T cbRequest,
     void **ppNewRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PostRealloc_Proxy( 
    IMallocSpy * This,
     void *pActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PreGetSize_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


SIZE_T __stdcall IMallocSpy_PostGetSize_Proxy( 
    IMallocSpy * This,
     SIZE_T cbActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PreDidAlloc_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMallocSpy_PostDidAlloc_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed,
     int fActual);


void __stdcall IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PreHeapMinimize_Proxy( 
    IMallocSpy * This);


void __stdcall IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostHeapMinimize_Proxy( 
    IMallocSpy * This);


void __stdcall IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1542 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IStdMarshalInfo *LPSTDMARSHALINFO;


extern "C" const IID IID_IStdMarshalInfo;


    
    struct __declspec(uuid("00000018-0000-0000-C000-000000000046")) __declspec(novtable)
    IStdMarshalInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassForHandler( 
             DWORD dwDestContext,
             void *pvDestContext,
             CLSID *pClsid) = 0;
        
    };
    




















































#line 1621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IStdMarshalInfo_GetClassForHandler_Proxy( 
    IStdMarshalInfo * This,
     DWORD dwDestContext,
     void *pvDestContext,
     CLSID *pClsid);


void __stdcall IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1640 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IExternalConnection *LPEXTERNALCONNECTION;

typedef 
enum tagEXTCONN
    {	EXTCONN_STRONG	= 0x1,
	EXTCONN_WEAK	= 0x2,
	EXTCONN_CALLABLE	= 0x4
    } 	EXTCONN;


extern "C" const IID IID_IExternalConnection;


    
    struct __declspec(uuid("00000019-0000-0000-C000-000000000046")) __declspec(novtable)
    IExternalConnection : public IUnknown
    {
    public:
        virtual DWORD __stdcall AddConnection( 
             DWORD extconn,
             DWORD reserved) = 0;
        
        virtual DWORD __stdcall ReleaseConnection( 
             DWORD extconn,
             DWORD reserved,
             BOOL fLastReleaseCloses) = 0;
        
    };
    




























































#line 1738 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



DWORD __stdcall IExternalConnection_AddConnection_Proxy( 
    IExternalConnection * This,
     DWORD extconn,
     DWORD reserved);


void __stdcall IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IExternalConnection_ReleaseConnection_Proxy( 
    IExternalConnection * This,
     DWORD extconn,
     DWORD reserved,
     BOOL fLastReleaseCloses);


void __stdcall IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1770 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 

typedef  IMultiQI *LPMULTIQI;

typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } 	MULTI_QI;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_s_ifspec;





 


extern "C" const IID IID_IMultiQI;


    
    struct __declspec(uuid("00000020-0000-0000-C000-000000000046")) __declspec(novtable)
    IMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryMultipleInterfaces( 
             ULONG cMQIs,
             MULTI_QI *pMQIs) = 0;
        
    };
    



















































#line 1862 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IMultiQI_QueryMultipleInterfaces_Proxy( 
    IMultiQI * This,
     ULONG cMQIs,
     MULTI_QI *pMQIs);


void __stdcall IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_AsyncIMultiQI;


    
    struct __declspec(uuid("000e0020-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryMultipleInterfaces( 
             ULONG cMQIs,
             MULTI_QI *pMQIs) = 0;
        
        virtual HRESULT __stdcall Finish_QueryMultipleInterfaces( 
             MULTI_QI *pMQIs) = 0;
        
    };
    


























































#line 1965 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy( 
    AsyncIMultiQI * This,
     ULONG cMQIs,
     MULTI_QI *pMQIs);


void __stdcall AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy( 
    AsyncIMultiQI * This,
     MULTI_QI *pMQIs);


void __stdcall AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1995 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IInternalUnknown;


    
    struct __declspec(uuid("00000021-0000-0000-C000-000000000046")) __declspec(novtable)
    IInternalUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryInternalInterface( 
             const IID & riid,
             void **ppv) = 0;
        
    };
    



















































#line 2070 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IInternalUnknown_QueryInternalInterface_Proxy( 
    IInternalUnknown * This,
     const IID & riid,
     void **ppv);


void __stdcall IInternalUnknown_QueryInternalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2088 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IEnumUnknown *LPENUMUNKNOWN;


extern "C" const IID IID_IEnumUnknown;


    
    struct __declspec(uuid("00000100-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumUnknown : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             IUnknown **rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumUnknown **ppenum) = 0;
        
    };
    








































































#line 2195 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy( 
    IEnumUnknown * This,
     ULONG celt,
     IUnknown **rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Skip_Proxy( 
    IEnumUnknown * This,
     ULONG celt);


void __stdcall IEnumUnknown_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Reset_Proxy( 
    IEnumUnknown * This);


void __stdcall IEnumUnknown_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Clone_Proxy( 
    IEnumUnknown * This,
     IEnumUnknown **ppenum);


void __stdcall IEnumUnknown_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2249 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IBindCtx *LPBC;

typedef  IBindCtx *LPBINDCTX;

typedef struct tagBIND_OPTS
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    } 	BIND_OPTS;

typedef struct tagBIND_OPTS *LPBIND_OPTS;


    typedef struct tagBIND_OPTS2 : tagBIND_OPTS{
    DWORD           dwTrackFlags;
    DWORD           dwClassContext;
    LCID            locale;
    COSERVERINFO *  pServerInfo;
    } BIND_OPTS2, * LPBIND_OPTS2;















#line 2294 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
typedef 
enum tagBIND_FLAGS
    {	BIND_MAYBOTHERUSER	= 1,
	BIND_JUSTTESTEXISTENCE	= 2
    } 	BIND_FLAGS;


extern "C" const IID IID_IBindCtx;


    
    struct __declspec(uuid("0000000e-0000-0000-C000-000000000046")) __declspec(novtable)
    IBindCtx : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterObjectBound( 
             IUnknown *punk) = 0;
        
        virtual HRESULT __stdcall RevokeObjectBound( 
             IUnknown *punk) = 0;
        
        virtual HRESULT __stdcall ReleaseBoundObjects( void) = 0;
        
        virtual  HRESULT __stdcall SetBindOptions( 
             BIND_OPTS *pbindopts) = 0;
        
        virtual  HRESULT __stdcall GetBindOptions( 
             BIND_OPTS *pbindopts) = 0;
        
        virtual HRESULT __stdcall GetRunningObjectTable( 
             IRunningObjectTable **pprot) = 0;
        
        virtual HRESULT __stdcall RegisterObjectParam( 
             LPOLESTR pszKey,
             IUnknown *punk) = 0;
        
        virtual HRESULT __stdcall GetObjectParam( 
             LPOLESTR pszKey,
             IUnknown **ppunk) = 0;
        
        virtual HRESULT __stdcall EnumObjectParam( 
             IEnumString **ppenum) = 0;
        
        virtual HRESULT __stdcall RevokeObjectParam( 
             LPOLESTR pszKey) = 0;
        
    };
    


















































































































#line 2457 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IBindCtx_RegisterObjectBound_Proxy( 
    IBindCtx * This,
     IUnknown *punk);


void __stdcall IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectBound_Proxy( 
    IBindCtx * This,
     IUnknown *punk);


void __stdcall IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_ReleaseBoundObjects_Proxy( 
    IBindCtx * This);


void __stdcall IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetRunningObjectTable_Proxy( 
    IBindCtx * This,
     IRunningObjectTable **pprot);


void __stdcall IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RegisterObjectParam_Proxy( 
    IBindCtx * This,
     LPOLESTR pszKey,
     IUnknown *punk);


void __stdcall IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetObjectParam_Proxy( 
    IBindCtx * This,
     LPOLESTR pszKey,
     IUnknown **ppunk);


void __stdcall IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_EnumObjectParam_Proxy( 
    IBindCtx * This,
     IEnumString **ppenum);


void __stdcall IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectParam_Proxy( 
    IBindCtx * This,
     LPOLESTR pszKey);


void __stdcall IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2583 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IEnumMoniker *LPENUMMONIKER;


extern "C" const IID IID_IEnumMoniker;


    
    struct __declspec(uuid("00000102-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumMoniker : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             IMoniker **rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumMoniker **ppenum) = 0;
        
    };
    








































































#line 2690 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy( 
    IEnumMoniker * This,
     ULONG celt,
     IMoniker **rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Skip_Proxy( 
    IEnumMoniker * This,
     ULONG celt);


void __stdcall IEnumMoniker_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Reset_Proxy( 
    IEnumMoniker * This);


void __stdcall IEnumMoniker_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Clone_Proxy( 
    IEnumMoniker * This,
     IEnumMoniker **ppenum);


void __stdcall IEnumMoniker_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2744 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IRunnableObject *LPRUNNABLEOBJECT;


extern "C" const IID IID_IRunnableObject;


    
    struct __declspec(uuid("00000126-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunnableObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRunningClass( 
             LPCLSID lpClsid) = 0;
        
        virtual HRESULT __stdcall Run( 
             LPBINDCTX pbc) = 0;
        
        virtual  BOOL __stdcall IsRunning( void) = 0;
        
        virtual HRESULT __stdcall LockRunning( 
             BOOL fLock,
             BOOL fLastUnlockCloses) = 0;
        
        virtual HRESULT __stdcall SetContainedObject( 
             BOOL fContained) = 0;
        
    };
    














































































#line 2859 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRunnableObject_GetRunningClass_Proxy( 
    IRunnableObject * This,
     LPCLSID lpClsid);


void __stdcall IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_Run_Proxy( 
    IRunnableObject * This,
     LPBINDCTX pbc);


void __stdcall IRunnableObject_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy( 
    IRunnableObject * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_LockRunning_Proxy( 
    IRunnableObject * This,
     BOOL fLock,
     BOOL fLastUnlockCloses);


void __stdcall IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_SetContainedObject_Proxy( 
    IRunnableObject * This,
     BOOL fContained);


void __stdcall IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2924 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern "C" const IID IID_IRunningObjectTable;


    
    struct __declspec(uuid("00000010-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Register( 
             DWORD grfFlags,
             IUnknown *punkObject,
             IMoniker *pmkObjectName,
             DWORD *pdwRegister) = 0;
        
        virtual HRESULT __stdcall Revoke( 
             DWORD dwRegister) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             IMoniker *pmkObjectName) = 0;
        
        virtual HRESULT __stdcall GetObjectA( 
             IMoniker *pmkObjectName,
             IUnknown **ppunkObject) = 0;
        
        virtual HRESULT __stdcall NoteChangeTime( 
             DWORD dwRegister,
             FILETIME *pfiletime) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
             IMoniker *pmkObjectName,
             FILETIME *pfiletime) = 0;
        
        virtual HRESULT __stdcall EnumRunning( 
             IEnumMoniker **ppenumMoniker) = 0;
        
    };
    


































































































#line 3071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRunningObjectTable_Register_Proxy( 
    IRunningObjectTable * This,
     DWORD grfFlags,
     IUnknown *punkObject,
     IMoniker *pmkObjectName,
     DWORD *pdwRegister);


void __stdcall IRunningObjectTable_Register_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_Revoke_Proxy( 
    IRunningObjectTable * This,
     DWORD dwRegister);


void __stdcall IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_IsRunning_Proxy( 
    IRunningObjectTable * This,
     IMoniker *pmkObjectName);


void __stdcall IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetObject_Proxy( 
    IRunningObjectTable * This,
     IMoniker *pmkObjectName,
     IUnknown **ppunkObject);


void __stdcall IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_NoteChangeTime_Proxy( 
    IRunningObjectTable * This,
     DWORD dwRegister,
     FILETIME *pfiletime);


void __stdcall IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetTimeOfLastChange_Proxy( 
    IRunningObjectTable * This,
     IMoniker *pmkObjectName,
     FILETIME *pfiletime);


void __stdcall IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_EnumRunning_Proxy( 
    IRunningObjectTable * This,
     IEnumMoniker **ppenumMoniker);


void __stdcall IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IPersist *LPPERSIST;


extern "C" const IID IID_IPersist;


    
    struct __declspec(uuid("0000010c-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersist : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID( 
             CLSID *pClassID) = 0;
        
    };
    


















































#line 3241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPersist_GetClassID_Proxy( 
    IPersist * This,
     CLSID *pClassID);


void __stdcall IPersist_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IPersistStream *LPPERSISTSTREAM;


extern "C" const IID IID_IPersistStream;


    
    struct __declspec(uuid("00000109-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStream : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             IStream *pStm) = 0;
        
        virtual HRESULT __stdcall Save( 
             IStream *pStm,
             BOOL fClearDirty) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
             ULARGE_INTEGER *pcbSize) = 0;
        
    };
    















































































#line 3371 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPersistStream_IsDirty_Proxy( 
    IPersistStream * This);


void __stdcall IPersistStream_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Load_Proxy( 
    IPersistStream * This,
     IStream *pStm);


void __stdcall IPersistStream_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Save_Proxy( 
    IPersistStream * This,
     IStream *pStm,
     BOOL fClearDirty);


void __stdcall IPersistStream_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_GetSizeMax_Proxy( 
    IPersistStream * This,
     ULARGE_INTEGER *pcbSize);


void __stdcall IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3424 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IMoniker *LPMONIKER;

typedef 
enum tagMKSYS
    {	MKSYS_NONE	= 0,
	MKSYS_GENERICCOMPOSITE	= 1,
	MKSYS_FILEMONIKER	= 2,
	MKSYS_ANTIMONIKER	= 3,
	MKSYS_ITEMMONIKER	= 4,
	MKSYS_POINTERMONIKER	= 5,
	MKSYS_CLASSMONIKER	= 7,
	MKSYS_OBJREFMONIKER	= 8,
	MKSYS_SESSIONMONIKER	= 9
    } 	MKSYS;

typedef  
enum tagMKREDUCE
    {	MKRREDUCE_ONE	= 3 << 16,
	MKRREDUCE_TOUSER	= 2 << 16,
	MKRREDUCE_THROUGHUSER	= 1 << 16,
	MKRREDUCE_ALL	= 0
    } 	MKRREDUCE;


extern "C" const IID IID_IMoniker;


    
    struct __declspec(uuid("0000000f-0000-0000-C000-000000000046")) __declspec(novtable)
    IMoniker : public IPersistStream
    {
    public:
        virtual  HRESULT __stdcall BindToObject( 
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             const IID & riidResult,
             void **ppvResult) = 0;
        
        virtual  HRESULT __stdcall BindToStorage( 
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             const IID & riid,
             void **ppvObj) = 0;
        
        virtual HRESULT __stdcall Reduce( 
             IBindCtx *pbc,
             DWORD dwReduceHowFar,
             IMoniker **ppmkToLeft,
             IMoniker **ppmkReduced) = 0;
        
        virtual HRESULT __stdcall ComposeWith( 
             IMoniker *pmkRight,
             BOOL fOnlyIfNotGeneric,
             IMoniker **ppmkComposite) = 0;
        
        virtual HRESULT __stdcall Enum( 
             BOOL fForward,
             IEnumMoniker **ppenumMoniker) = 0;
        
        virtual HRESULT __stdcall IsEqual( 
             IMoniker *pmkOtherMoniker) = 0;
        
        virtual HRESULT __stdcall Hash( 
             DWORD *pdwHash) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             IMoniker *pmkNewlyRunning) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             FILETIME *pFileTime) = 0;
        
        virtual HRESULT __stdcall Inverse( 
             IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall CommonPrefixWith( 
             IMoniker *pmkOther,
             IMoniker **ppmkPrefix) = 0;
        
        virtual HRESULT __stdcall RelativePathTo( 
             IMoniker *pmkOther,
             IMoniker **ppmkRelPath) = 0;
        
        virtual HRESULT __stdcall GetDisplayName( 
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             LPOLESTR *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall ParseDisplayName( 
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             LPOLESTR pszDisplayName,
             ULONG *pchEaten,
             IMoniker **ppmkOut) = 0;
        
        virtual HRESULT __stdcall IsSystemMoniker( 
             DWORD *pdwMksys) = 0;
        
    };
    

















































































































































































































#line 3745 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID & riidResult,
     IUnknown **ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID & riid,
     IUnknown **ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Reduce_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     DWORD dwReduceHowFar,
     IMoniker **ppmkToLeft,
     IMoniker **ppmkReduced);


void __stdcall IMoniker_Reduce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ComposeWith_Proxy( 
    IMoniker * This,
     IMoniker *pmkRight,
     BOOL fOnlyIfNotGeneric,
     IMoniker **ppmkComposite);


void __stdcall IMoniker_ComposeWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Enum_Proxy( 
    IMoniker * This,
     BOOL fForward,
     IEnumMoniker **ppenumMoniker);


void __stdcall IMoniker_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsEqual_Proxy( 
    IMoniker * This,
     IMoniker *pmkOtherMoniker);


void __stdcall IMoniker_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Hash_Proxy( 
    IMoniker * This,
     DWORD *pdwHash);


void __stdcall IMoniker_Hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsRunning_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     IMoniker *pmkNewlyRunning);


void __stdcall IMoniker_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetTimeOfLastChange_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     FILETIME *pFileTime);


void __stdcall IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Inverse_Proxy( 
    IMoniker * This,
     IMoniker **ppmk);


void __stdcall IMoniker_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_CommonPrefixWith_Proxy( 
    IMoniker * This,
     IMoniker *pmkOther,
     IMoniker **ppmkPrefix);


void __stdcall IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_RelativePathTo_Proxy( 
    IMoniker * This,
     IMoniker *pmkOther,
     IMoniker **ppmkRelPath);


void __stdcall IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetDisplayName_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     LPOLESTR *ppszDisplayName);


void __stdcall IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ParseDisplayName_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     LPOLESTR pszDisplayName,
     ULONG *pchEaten,
     IMoniker **ppmkOut);


void __stdcall IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsSystemMoniker_Proxy( 
    IMoniker * This,
     DWORD *pdwMksys);


void __stdcall IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3954 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IROTData;


    
    struct __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) __declspec(novtable)
    IROTData : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetComparisonData( 
             byte *pbData,
             ULONG cbMax,
             ULONG *pcbData) = 0;
        
    };
    




















































#line 4031 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IROTData_GetComparisonData_Proxy( 
    IROTData * This,
     byte *pbData,
     ULONG cbMax,
     ULONG *pcbData);


void __stdcall IROTData_GetComparisonData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4050 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IEnumString *LPENUMSTRING;


extern "C" const IID IID_IEnumString;


    
    struct __declspec(uuid("00000101-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumString : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             LPOLESTR *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumString **ppenum) = 0;
        
    };
    








































































#line 4157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IEnumString_RemoteNext_Proxy( 
    IEnumString * This,
     ULONG celt,
     LPOLESTR *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Skip_Proxy( 
    IEnumString * This,
     ULONG celt);


void __stdcall IEnumString_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Reset_Proxy( 
    IEnumString * This);


void __stdcall IEnumString_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Clone_Proxy( 
    IEnumString * This,
     IEnumString **ppenum);


void __stdcall IEnumString_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ISequentialStream;


    
    struct __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ISequentialStream : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Read( 
             void *pv,
             ULONG cb,
             ULONG *pcbRead) = 0;
        
        virtual  HRESULT __stdcall Write( 
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten) = 0;
        
    };
    





























































#line 4302 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall ISequentialStream_RemoteRead_Proxy( 
    ISequentialStream * This,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy( 
    ISequentialStream * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4335 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IStream *LPSTREAM;



















typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } 	STATSTG;

#line 4379 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
typedef 
enum tagSTGTY
    {	STGTY_STORAGE	= 1,
	STGTY_STREAM	= 2,
	STGTY_LOCKBYTES	= 3,
	STGTY_PROPERTY	= 4
    } 	STGTY;

typedef 
enum tagSTREAM_SEEK
    {	STREAM_SEEK_SET	= 0,
	STREAM_SEEK_CUR	= 1,
	STREAM_SEEK_END	= 2
    } 	STREAM_SEEK;

typedef 
enum tagLOCKTYPE
    {	LOCK_WRITE	= 1,
	LOCK_EXCLUSIVE	= 2,
	LOCK_ONLYONCE	= 4
    } 	LOCKTYPE;


extern "C" const IID IID_IStream;


    
    struct __declspec(uuid("0000000c-0000-0000-C000-000000000046")) __declspec(novtable)
    IStream : public ISequentialStream
    {
    public:
        virtual  HRESULT __stdcall Seek( 
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER libNewSize) = 0;
        
        virtual  HRESULT __stdcall CopyTo( 
             IStream *pstm,
             ULARGE_INTEGER cb,
             ULARGE_INTEGER *pcbRead,
             ULARGE_INTEGER *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG *pstatstg,
             DWORD grfStatFlag) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IStream **ppstm) = 0;
        
    };
    






































































































































#line 4583 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IStream_RemoteSeek_Proxy( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_SetSize_Proxy( 
    IStream * This,
     ULARGE_INTEGER libNewSize);


void __stdcall IStream_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStream_RemoteCopyTo_Proxy( 
    IStream * This,
     IStream *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER *pcbRead,
     ULARGE_INTEGER *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Commit_Proxy( 
    IStream * This,
     DWORD grfCommitFlags);


void __stdcall IStream_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Revert_Proxy( 
    IStream * This);


void __stdcall IStream_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_LockRegion_Proxy( 
    IStream * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_UnlockRegion_Proxy( 
    IStream * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Stat_Proxy( 
    IStream * This,
     STATSTG *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStream_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Clone_Proxy( 
    IStream * This,
     IStream **ppstm);


void __stdcall IStream_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4705 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IEnumSTATSTG *LPENUMSTATSTG;


extern "C" const IID IID_IEnumSTATSTG;


    
    struct __declspec(uuid("0000000d-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATSTG *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATSTG **ppenum) = 0;
        
    };
    








































































#line 4812 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy( 
    IEnumSTATSTG * This,
     ULONG celt,
     STATSTG *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Skip_Proxy( 
    IEnumSTATSTG * This,
     ULONG celt);


void __stdcall IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Reset_Proxy( 
    IEnumSTATSTG * This);


void __stdcall IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Clone_Proxy( 
    IEnumSTATSTG * This,
     IEnumSTATSTG **ppenum);


void __stdcall IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4866 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
     OLECHAR rgString[ 1 ];
    } 	RemSNB;

typedef  RemSNB *wireSNB;

typedef  OLECHAR **SNB;


extern "C" const IID IID_IStorage;


    
    struct __declspec(uuid("0000000b-0000-0000-C000-000000000046")) __declspec(novtable)
    IStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStream( 
             const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
             IStream **ppstm) = 0;
        
        virtual  HRESULT __stdcall OpenStream( 
             const OLECHAR *pwcsName,
             void *reserved1,
             DWORD grfMode,
             DWORD reserved2,
             IStream **ppstm) = 0;
        
        virtual HRESULT __stdcall CreateStorage( 
             const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
             IStorage **ppstg) = 0;
        
        virtual HRESULT __stdcall OpenStorage( 
             const OLECHAR *pwcsName,
             IStorage *pstgPriority,
             DWORD grfMode,
             SNB snbExclude,
             DWORD reserved,
             IStorage **ppstg) = 0;
        
        virtual HRESULT __stdcall CopyTo( 
             DWORD ciidExclude,
             const IID *rgiidExclude,
             SNB snbExclude,
             IStorage *pstgDest) = 0;
        
        virtual HRESULT __stdcall MoveElementTo( 
             const OLECHAR *pwcsName,
             IStorage *pstgDest,
             const OLECHAR *pwcsNewName,
             DWORD grfFlags) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual  HRESULT __stdcall EnumElements( 
             DWORD reserved1,
             void *reserved2,
             DWORD reserved3,
             IEnumSTATSTG **ppenum) = 0;
        
        virtual HRESULT __stdcall DestroyElement( 
             const OLECHAR *pwcsName) = 0;
        
        virtual HRESULT __stdcall RenameElement( 
             const OLECHAR *pwcsOldName,
             const OLECHAR *pwcsNewName) = 0;
        
        virtual HRESULT __stdcall SetElementTimes( 
             const OLECHAR *pwcsName,
             const FILETIME *pctime,
             const FILETIME *patime,
             const FILETIME *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
             const IID & clsid) = 0;
        
        virtual HRESULT __stdcall SetStateBits( 
             DWORD grfStateBits,
             DWORD grfMask) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    



















































































































































































#line 5154 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IStorage_CreateStream_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     DWORD grfMode,
     DWORD reserved1,
     DWORD reserved2,
     IStream **ppstm);


void __stdcall IStorage_CreateStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteOpenStream_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     unsigned long cbReserved1,
     byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream **ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CreateStorage_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     DWORD grfMode,
     DWORD reserved1,
     DWORD reserved2,
     IStorage **ppstg);


void __stdcall IStorage_CreateStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_OpenStorage_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     IStorage *pstgPriority,
     DWORD grfMode,
     SNB snbExclude,
     DWORD reserved,
     IStorage **ppstg);


void __stdcall IStorage_OpenStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CopyTo_Proxy( 
    IStorage * This,
     DWORD ciidExclude,
     const IID *rgiidExclude,
     SNB snbExclude,
     IStorage *pstgDest);


void __stdcall IStorage_CopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_MoveElementTo_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     IStorage *pstgDest,
     const OLECHAR *pwcsNewName,
     DWORD grfFlags);


void __stdcall IStorage_MoveElementTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Commit_Proxy( 
    IStorage * This,
     DWORD grfCommitFlags);


void __stdcall IStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Revert_Proxy( 
    IStorage * This);


void __stdcall IStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteEnumElements_Proxy( 
    IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte *reserved2,
     DWORD reserved3,
     IEnumSTATSTG **ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_DestroyElement_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName);


void __stdcall IStorage_DestroyElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_RenameElement_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsOldName,
     const OLECHAR *pwcsNewName);


void __stdcall IStorage_RenameElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetElementTimes_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     const FILETIME *pctime,
     const FILETIME *patime,
     const FILETIME *pmtime);


void __stdcall IStorage_SetElementTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetClass_Proxy( 
    IStorage * This,
     const IID & clsid);


void __stdcall IStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetStateBits_Proxy( 
    IStorage * This,
     DWORD grfStateBits,
     DWORD grfMask);


void __stdcall IStorage_SetStateBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Stat_Proxy( 
    IStorage * This,
     STATSTG *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5372 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IPersistFile *LPPERSISTFILE;


extern "C" const IID IID_IPersistFile;


    
    struct __declspec(uuid("0000010b-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistFile : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             LPCOLESTR pszFileName,
             DWORD dwMode) = 0;
        
        virtual HRESULT __stdcall Save( 
             LPCOLESTR pszFileName,
             BOOL fRemember) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             LPCOLESTR pszFileName) = 0;
        
        virtual HRESULT __stdcall GetCurFile( 
             LPOLESTR *ppszFileName) = 0;
        
    };
    























































































#line 5497 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPersistFile_IsDirty_Proxy( 
    IPersistFile * This);


void __stdcall IPersistFile_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Load_Proxy( 
    IPersistFile * This,
     LPCOLESTR pszFileName,
     DWORD dwMode);


void __stdcall IPersistFile_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Save_Proxy( 
    IPersistFile * This,
     LPCOLESTR pszFileName,
     BOOL fRemember);


void __stdcall IPersistFile_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_SaveCompleted_Proxy( 
    IPersistFile * This,
     LPCOLESTR pszFileName);


void __stdcall IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_GetCurFile_Proxy( 
    IPersistFile * This,
     LPOLESTR *ppszFileName);


void __stdcall IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5563 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IPersistStorage *LPPERSISTSTORAGE;


extern "C" const IID IID_IPersistStorage;


    
    struct __declspec(uuid("0000010a-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall InitNew( 
             IStorage *pStg) = 0;
        
        virtual HRESULT __stdcall Load( 
             IStorage *pStg) = 0;
        
        virtual HRESULT __stdcall Save( 
             IStorage *pStgSave,
             BOOL fSameAsLoad) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             IStorage *pStgNew) = 0;
        
        virtual HRESULT __stdcall HandsOffStorage( void) = 0;
        
    };
    




























































































#line 5694 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPersistStorage_IsDirty_Proxy( 
    IPersistStorage * This);


void __stdcall IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_InitNew_Proxy( 
    IPersistStorage * This,
     IStorage *pStg);


void __stdcall IPersistStorage_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Load_Proxy( 
    IPersistStorage * This,
     IStorage *pStg);


void __stdcall IPersistStorage_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Save_Proxy( 
    IPersistStorage * This,
     IStorage *pStgSave,
     BOOL fSameAsLoad);


void __stdcall IPersistStorage_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_SaveCompleted_Proxy( 
    IPersistStorage * This,
     IStorage *pStgNew);


void __stdcall IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_HandsOffStorage_Proxy( 
    IPersistStorage * This);


void __stdcall IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5770 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  ILockBytes *LPLOCKBYTES;


extern "C" const IID IID_ILockBytes;


    
    struct __declspec(uuid("0000000a-0000-0000-C000-000000000046")) __declspec(novtable)
    ILockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall ReadAt( 
             ULARGE_INTEGER ulOffset,
             void *pv,
             ULONG cb,
             ULONG *pcbRead) = 0;
        
        virtual  HRESULT __stdcall WriteAt( 
             ULARGE_INTEGER ulOffset,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Flush( void) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER cb) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATSTG *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    






































































































#line 5925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Flush_Proxy( 
    ILockBytes * This);


void __stdcall ILockBytes_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_SetSize_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER cb);


void __stdcall ILockBytes_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_LockRegion_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_UnlockRegion_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Stat_Proxy( 
    ILockBytes * This,
     STATSTG *pstatstg,
     DWORD grfStatFlag);


void __stdcall ILockBytes_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6024 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IEnumFORMATETC *LPENUMFORMATETC;

typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
     BYTE tdData[ 1 ];
    } 	DVTARGETDEVICE;

typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
     DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } 	FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern "C" const IID IID_IEnumFORMATETC;


    
    struct __declspec(uuid("00000103-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumFORMATETC : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             FORMATETC *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumFORMATETC **ppenum) = 0;
        
    };
    








































































#line 6154 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy( 
    IEnumFORMATETC * This,
     ULONG celt,
     FORMATETC *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Skip_Proxy( 
    IEnumFORMATETC * This,
     ULONG celt);


void __stdcall IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Reset_Proxy( 
    IEnumFORMATETC * This);


void __stdcall IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Clone_Proxy( 
    IEnumFORMATETC * This,
     IEnumFORMATETC **ppenum);


void __stdcall IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6208 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IEnumSTATDATA *LPENUMSTATDATA;

typedef 
enum tagADVF
    {	ADVF_NODATA	= 1,
	ADVF_PRIMEFIRST	= 2,
	ADVF_ONLYONCE	= 4,
	ADVF_DATAONSTOP	= 64,
	ADVFCACHE_NOHANDLER	= 8,
	ADVFCACHE_FORCEBUILTIN	= 16,
	ADVFCACHE_ONSAVE	= 32
    } 	ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
     IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } 	STATDATA;

typedef STATDATA *LPSTATDATA;


extern "C" const IID IID_IEnumSTATDATA;


    
    struct __declspec(uuid("00000105-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATDATA : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATDATA *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATDATA **ppenum) = 0;
        
    };
    








































































#line 6336 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy( 
    IEnumSTATDATA * This,
     ULONG celt,
     STATDATA *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Skip_Proxy( 
    IEnumSTATDATA * This,
     ULONG celt);


void __stdcall IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Reset_Proxy( 
    IEnumSTATDATA * This);


void __stdcall IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Clone_Proxy( 
    IEnumSTATDATA * This,
     IEnumSTATDATA **ppenum);


void __stdcall IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6390 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IRootStorage *LPROOTSTORAGE;


extern "C" const IID IID_IRootStorage;


    
    struct __declspec(uuid("00000012-0000-0000-C000-000000000046")) __declspec(novtable)
    IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchToFile( 
             LPOLESTR pszFile) = 0;
        
    };
    


















































#line 6465 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRootStorage_SwitchToFile_Proxy( 
    IRootStorage * This,
     LPOLESTR pszFile);


void __stdcall IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6482 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef IAdviseSink *LPADVISESINK;

typedef  
enum tagTYMED
    {	TYMED_HGLOBAL	= 1,
	TYMED_FILE	= 2,
	TYMED_ISTREAM	= 4,
	TYMED_ISTORAGE	= 8,
	TYMED_GDI	= 16,
	TYMED_MFPICT	= 32,
	TYMED_ENHMF	= 64,
	TYMED_NULL	= 0
    } 	TYMED;



#pragma warning(push)
#line 6508 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
#pragma warning(disable:4200)
#line 6510 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemSTGMEDIUM;



#pragma warning(pop)


#line 6526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
#line 6527 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"















typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
     union 
        {
         HBITMAP hBitmap;
         HMETAFILEPICT hMetaFilePict;
         HENHMETAFILE hEnhMetaFile;
         HGLOBAL hGlobal;
         LPOLESTR lpszFileName;
         IStream *pstm;
         IStorage *pstg;
           
        } 	;
     IUnknown *pUnkForRelease;
    } 	uSTGMEDIUM;

#line 6560 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
      union __MIDL_IAdviseSink_0002
        {
         wireHBITMAP hBitmap;
         wireHPALETTE hPalette;
         wireHGLOBAL hGeneric;
        } 	u;
    } 	GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
          union __MIDL_IAdviseSink_0003
            {
               
             wireHMETAFILEPICT hMetaFilePict;
             wireHENHMETAFILE hHEnhMetaFile;
             GDI_OBJECT *hGdiHandle;
             wireHGLOBAL hGlobal;
             LPOLESTR lpszFileName;
             BYTE_BLOB *pstm;
             BYTE_BLOB *pstg;
            } 	u;
        } 	;
    IUnknown *pUnkForRelease;
    } 	userSTGMEDIUM;

typedef  userSTGMEDIUM *wireSTGMEDIUM;

typedef  uSTGMEDIUM STGMEDIUM;

typedef  userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef  STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
    } 	userFLAG_STGMEDIUM;

typedef  userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef  struct _FLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
    } 	FLAG_STGMEDIUM;


extern "C" const IID IID_IAdviseSink;


    
    struct __declspec(uuid("0000010f-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink : public IUnknown
    {
    public:
        virtual  void __stdcall OnDataChange( 
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed) = 0;
        
        virtual  void __stdcall OnViewChange( 
             DWORD dwAspect,
             LONG lindex) = 0;
        
        virtual  void __stdcall OnRename( 
             IMoniker *pmk) = 0;
        
        virtual  void __stdcall OnSave( void) = 0;
        
        virtual  void __stdcall OnClose( void) = 0;
        
    };
    














































































#line 6722 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy( 
    IAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy( 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy( 
    IAdviseSink * This,
     IMoniker *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy( 
    IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy( 
    IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6787 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_AsyncIAdviseSink;


    
    struct __declspec(uuid("00000150-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink : public IUnknown
    {
    public:
        virtual  void __stdcall Begin_OnDataChange( 
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed) = 0;
        
        virtual  void __stdcall Finish_OnDataChange( void) = 0;
        
        virtual  void __stdcall Begin_OnViewChange( 
             DWORD dwAspect,
             LONG lindex) = 0;
        
        virtual  void __stdcall Finish_OnViewChange( void) = 0;
        
        virtual  void __stdcall Begin_OnRename( 
             IMoniker *pmk) = 0;
        
        virtual  void __stdcall Finish_OnRename( void) = 0;
        
        virtual  void __stdcall Begin_OnSave( void) = 0;
        
        virtual  void __stdcall Finish_OnSave( void) = 0;
        
        virtual  void __stdcall Begin_OnClose( void) = 0;
        
        virtual  void __stdcall Finish_OnClose( void) = 0;
        
    };
    












































































































#line 6940 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy( 
    AsyncIAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy( 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy( 
    AsyncIAdviseSink * This,
     IMoniker *pmk);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7060 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IAdviseSink2 *LPADVISESINK2;


extern "C" const IID IID_IAdviseSink2;


    
    struct __declspec(uuid("00000125-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual  void __stdcall OnLinkSrcChange( 
             IMoniker *pmk) = 0;
        
    };
    






















































































#line 7171 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy( 
    IAdviseSink2 * This,
     IMoniker *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7188 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_AsyncIAdviseSink2;


    
    struct __declspec(uuid("00000151-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink2 : public AsyncIAdviseSink
    {
    public:
        virtual  void __stdcall Begin_OnLinkSrcChange( 
             IMoniker *pmk) = 0;
        
        virtual  void __stdcall Finish_OnLinkSrcChange( void) = 0;
        
    };
    


























































































































#line 7335 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This,
     IMoniker *pmk);


void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This);


void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7363 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IDataObject *LPDATAOBJECT;

typedef 
enum tagDATADIR
    {	DATADIR_GET	= 1,
	DATADIR_SET	= 2
    } 	DATADIR;


extern "C" const IID IID_IDataObject;


    
    struct __declspec(uuid("0000010e-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetData( 
             FORMATETC *pformatetcIn,
             STGMEDIUM *pmedium) = 0;
        
        virtual  HRESULT __stdcall GetDataHere( 
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium) = 0;
        
        virtual HRESULT __stdcall QueryGetData( 
             FORMATETC *pformatetc) = 0;
        
        virtual HRESULT __stdcall GetCanonicalFormatEtc( 
             FORMATETC *pformatectIn,
             FORMATETC *pformatetcOut) = 0;
        
        virtual  HRESULT __stdcall SetData( 
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium,
             BOOL fRelease) = 0;
        
        virtual HRESULT __stdcall EnumFormatEtc( 
             DWORD dwDirection,
             IEnumFORMATETC **ppenumFormatEtc) = 0;
        
        virtual HRESULT __stdcall DAdvise( 
             FORMATETC *pformatetc,
             DWORD advf,
             IAdviseSink *pAdvSink,
             DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall DUnadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumDAdvise( 
             IEnumSTATDATA **ppenumAdvise) = 0;
        
    };
    



















































































































#line 7542 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IDataObject_RemoteGetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetcIn,
     STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_QueryGetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc);


void __stdcall IDataObject_QueryGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_GetCanonicalFormatEtc_Proxy( 
    IDataObject * This,
     FORMATETC *pformatectIn,
     FORMATETC *pformatetcOut);


void __stdcall IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteSetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumFormatEtc_Proxy( 
    IDataObject * This,
     DWORD dwDirection,
     IEnumFORMATETC **ppenumFormatEtc);


void __stdcall IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DAdvise_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     DWORD advf,
     IAdviseSink *pAdvSink,
     DWORD *pdwConnection);


void __stdcall IDataObject_DAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DUnadvise_Proxy( 
    IDataObject * This,
     DWORD dwConnection);


void __stdcall IDataObject_DUnadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumDAdvise_Proxy( 
    IDataObject * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7664 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IDataAdviseHolder *LPDATAADVISEHOLDER;


extern "C" const IID IID_IDataAdviseHolder;


    
    struct __declspec(uuid("00000110-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             IDataObject *pDataObject,
             FORMATETC *pFetc,
             DWORD advf,
             IAdviseSink *pAdvise,
             DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA **ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnDataChange( 
             IDataObject *pDataObject,
             DWORD dwReserved,
             DWORD advf) = 0;
        
    };
    













































































#line 7781 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IDataAdviseHolder_Advise_Proxy( 
    IDataAdviseHolder * This,
     IDataObject *pDataObject,
     FORMATETC *pFetc,
     DWORD advf,
     IAdviseSink *pAdvise,
     DWORD *pdwConnection);


void __stdcall IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_Unadvise_Proxy( 
    IDataAdviseHolder * This,
     DWORD dwConnection);


void __stdcall IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_EnumAdvise_Proxy( 
    IDataAdviseHolder * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_SendOnDataChange_Proxy( 
    IDataAdviseHolder * This,
     IDataObject *pDataObject,
     DWORD dwReserved,
     DWORD advf);


void __stdcall IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7840 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IMessageFilter *LPMESSAGEFILTER;

typedef 
enum tagCALLTYPE
    {	CALLTYPE_TOPLEVEL	= 1,
	CALLTYPE_NESTED	= 2,
	CALLTYPE_ASYNC	= 3,
	CALLTYPE_TOPLEVEL_CALLPENDING	= 4,
	CALLTYPE_ASYNC_CALLPENDING	= 5
    } 	CALLTYPE;

typedef 
enum tagSERVERCALL
    {	SERVERCALL_ISHANDLED	= 0,
	SERVERCALL_REJECTED	= 1,
	SERVERCALL_RETRYLATER	= 2
    } 	SERVERCALL;

typedef 
enum tagPENDINGTYPE
    {	PENDINGTYPE_TOPLEVEL	= 1,
	PENDINGTYPE_NESTED	= 2
    } 	PENDINGTYPE;

typedef 
enum tagPENDINGMSG
    {	PENDINGMSG_CANCELCALL	= 0,
	PENDINGMSG_WAITNOPROCESS	= 1,
	PENDINGMSG_WAITDEFPROCESS	= 2
    } 	PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } 	INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern "C" const IID IID_IMessageFilter;


    
    struct __declspec(uuid("00000016-0000-0000-C000-000000000046")) __declspec(novtable)
    IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD __stdcall HandleInComingCall( 
             DWORD dwCallType,
             HTASK htaskCaller,
             DWORD dwTickCount,
             LPINTERFACEINFO lpInterfaceInfo) = 0;
        
        virtual DWORD __stdcall RetryRejectedCall( 
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwRejectType) = 0;
        
        virtual DWORD __stdcall MessagePending( 
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwPendingType) = 0;
        
    };
    







































































#line 7987 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



DWORD __stdcall IMessageFilter_HandleInComingCall_Proxy( 
    IMessageFilter * This,
     DWORD dwCallType,
     HTASK htaskCaller,
     DWORD dwTickCount,
     LPINTERFACEINFO lpInterfaceInfo);


void __stdcall IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_RetryRejectedCall_Proxy( 
    IMessageFilter * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwRejectType);


void __stdcall IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_MessagePending_Proxy( 
    IMessageFilter * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwPendingType);


void __stdcall IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8035 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef unsigned long RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } 	RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern "C" const IID IID_IRpcChannelBuffer;


    
    struct __declspec(uuid("D5F56B60-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBuffer( 
             RPCOLEMESSAGE *pMessage,
             const IID & riid) = 0;
        
        virtual HRESULT __stdcall SendReceive( 
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus) = 0;
        
        virtual HRESULT __stdcall FreeBuffer( 
             RPCOLEMESSAGE *pMessage) = 0;
        
        virtual HRESULT __stdcall GetDestCtx( 
             DWORD *pdwDestContext,
             void **ppvDestContext) = 0;
        
        virtual HRESULT __stdcall IsConnected( void) = 0;
        
    };
    
















































































#line 8167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer_GetBuffer_Proxy( 
    IRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMessage,
     const IID & riid);


void __stdcall IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_SendReceive_Proxy( 
    IRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMessage,
     ULONG *pStatus);


void __stdcall IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_FreeBuffer_Proxy( 
    IRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMessage);


void __stdcall IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_GetDestCtx_Proxy( 
    IRpcChannelBuffer * This,
     DWORD *pdwDestContext,
     void **ppvDestContext);


void __stdcall IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_IsConnected_Proxy( 
    IRpcChannelBuffer * This);


void __stdcall IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8234 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IRpcChannelBuffer2;


    
    struct __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) __declspec(novtable)
    IRpcChannelBuffer2 : public IRpcChannelBuffer
    {
    public:
        virtual HRESULT __stdcall GetProtocolVersion( 
             DWORD *pdwVersion) = 0;
        
    };
    
























































































#line 8345 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer2_GetProtocolVersion_Proxy( 
    IRpcChannelBuffer2 * This,
     DWORD *pdwVersion);


void __stdcall IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8362 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IAsyncRpcChannelBuffer;


    
    struct __declspec(uuid("a5029fb6-3c34-11d1-9c99-00c04fb998aa")) __declspec(novtable)
    IAsyncRpcChannelBuffer : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send( 
             RPCOLEMESSAGE *pMsg,
             ISynchronize *pSync,
             ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall Receive( 
             RPCOLEMESSAGE *pMsg,
             ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall GetDestCtxEx( 
             RPCOLEMESSAGE *pMsg,
             DWORD *pdwDestContext,
             void **ppvDestContext) = 0;
        
    };
    



















































































































#line 8511 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IAsyncRpcChannelBuffer_Send_Proxy( 
    IAsyncRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMsg,
     ISynchronize *pSync,
     ULONG *pulStatus);


void __stdcall IAsyncRpcChannelBuffer_Send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncRpcChannelBuffer_Receive_Proxy( 
    IAsyncRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMsg,
     ULONG *pulStatus);


void __stdcall IAsyncRpcChannelBuffer_Receive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy( 
    IAsyncRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMsg,
     DWORD *pdwDestContext,
     void **ppvDestContext);


void __stdcall IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8557 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IRpcChannelBuffer3;


    
    struct __declspec(uuid("25B15600-0115-11d0-BF0D-00AA00B8DFD2")) __declspec(novtable)
    IRpcChannelBuffer3 : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send( 
             RPCOLEMESSAGE *pMsg,
             ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall Receive( 
             RPCOLEMESSAGE *pMsg,
             ULONG ulSize,
             ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall Cancel( 
             RPCOLEMESSAGE *pMsg) = 0;
        
        virtual HRESULT __stdcall GetCallContext( 
             RPCOLEMESSAGE *pMsg,
             const IID & riid,
             void **pInterface) = 0;
        
        virtual HRESULT __stdcall GetDestCtxEx( 
             RPCOLEMESSAGE *pMsg,
             DWORD *pdwDestContext,
             void **ppvDestContext) = 0;
        
        virtual HRESULT __stdcall GetState( 
             RPCOLEMESSAGE *pMsg,
             DWORD *pState) = 0;
        
        virtual HRESULT __stdcall RegisterAsync( 
             RPCOLEMESSAGE *pMsg,
             IAsyncManager *pAsyncMgr) = 0;
        
    };
    



















































































































































#line 8754 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer3_Send_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     ULONG *pulStatus);


void __stdcall IRpcChannelBuffer3_Send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_Receive_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     ULONG ulSize,
     ULONG *pulStatus);


void __stdcall IRpcChannelBuffer3_Receive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_Cancel_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg);


void __stdcall IRpcChannelBuffer3_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetCallContext_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     const IID & riid,
     void **pInterface);


void __stdcall IRpcChannelBuffer3_GetCallContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetDestCtxEx_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     DWORD *pdwDestContext,
     void **ppvDestContext);


void __stdcall IRpcChannelBuffer3_GetDestCtxEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetState_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     DWORD *pState);


void __stdcall IRpcChannelBuffer3_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_RegisterAsync_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     IAsyncManager *pAsyncMgr);


void __stdcall IRpcChannelBuffer3_RegisterAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IRpcSyntaxNegotiate;


    
    struct __declspec(uuid("58a08519-24c8-4935-b482-3fd823333a4f")) __declspec(novtable)
    IRpcSyntaxNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall NegotiateSyntax( 
             RPCOLEMESSAGE *pMsg) = 0;
        
    };
    


















































#line 8925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcSyntaxNegotiate_NegotiateSyntax_Proxy( 
    IRpcSyntaxNegotiate * This,
     RPCOLEMESSAGE *pMsg);


void __stdcall IRpcSyntaxNegotiate_NegotiateSyntax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8942 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IRpcProxyBuffer;


    
    struct __declspec(uuid("D5F56A34-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             IRpcChannelBuffer *pRpcChannelBuffer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
    };
    
























































#line 9023 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcProxyBuffer_Connect_Proxy( 
    IRpcProxyBuffer * This,
     IRpcChannelBuffer *pRpcChannelBuffer);


void __stdcall IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcProxyBuffer_Disconnect_Proxy( 
    IRpcProxyBuffer * This);


void __stdcall IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9051 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IRpcStubBuffer;


    
    struct __declspec(uuid("D5F56AFC-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             IUnknown *pUnkServer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
        virtual HRESULT __stdcall Invoke( 
             RPCOLEMESSAGE *_prpcmsg,
             IRpcChannelBuffer *_pRpcChannelBuffer) = 0;
        
        virtual IRpcStubBuffer *__stdcall IsIIDSupported( 
             const IID & riid) = 0;
        
        virtual ULONG __stdcall CountRefs( void) = 0;
        
        virtual HRESULT __stdcall DebugServerQueryInterface( 
            void **ppv) = 0;
        
        virtual void __stdcall DebugServerRelease( 
            void *pv) = 0;
        
    };
    



























































































#line 9182 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcStubBuffer_Connect_Proxy( 
    IRpcStubBuffer * This,
     IUnknown *pUnkServer);


void __stdcall IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_Disconnect_Proxy( 
    IRpcStubBuffer * This);


void __stdcall IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_Invoke_Proxy( 
    IRpcStubBuffer * This,
     RPCOLEMESSAGE *_prpcmsg,
     IRpcChannelBuffer *_pRpcChannelBuffer);


void __stdcall IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


IRpcStubBuffer *__stdcall IRpcStubBuffer_IsIIDSupported_Proxy( 
    IRpcStubBuffer * This,
     const IID & riid);


void __stdcall IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IRpcStubBuffer_CountRefs_Proxy( 
    IRpcStubBuffer * This);


void __stdcall IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_DebugServerQueryInterface_Proxy( 
    IRpcStubBuffer * This,
    void **ppv);


void __stdcall IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_DebugServerRelease_Proxy( 
    IRpcStubBuffer * This,
    void *pv);


void __stdcall IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9270 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IPSFactoryBuffer;


    
    struct __declspec(uuid("D5F569D0-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateProxy( 
             IUnknown *pUnkOuter,
             const IID & riid,
             IRpcProxyBuffer **ppProxy,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall CreateStub( 
             const IID & riid,
             IUnknown *pUnkServer,
             IRpcStubBuffer **ppStub) = 0;
        
    };
    






























































#line 9363 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPSFactoryBuffer_CreateProxy_Proxy( 
    IPSFactoryBuffer * This,
     IUnknown *pUnkOuter,
     const IID & riid,
     IRpcProxyBuffer **ppProxy,
     void **ppv);


void __stdcall IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPSFactoryBuffer_CreateStub_Proxy( 
    IPSFactoryBuffer * This,
     const IID & riid,
     IUnknown *pUnkServer,
     IRpcStubBuffer **ppStub);


void __stdcall IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9397 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 



typedef struct SChannelHookCallInfo
    {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
    } 	SChannelHookCallInfo;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0050_v0_0_s_ifspec;





 


extern "C" const IID IID_IChannelHook;


    
    struct __declspec(uuid("1008c4a0-7613-11cf-9af1-0020af6e72f4")) __declspec(novtable)
    IChannelHook : public IUnknown
    {
    public:
        virtual void __stdcall ClientGetSize( 
             const GUID & uExtent,
             const IID & riid,
             ULONG *pDataSize) = 0;
        
        virtual void __stdcall ClientFillBuffer( 
             const GUID & uExtent,
             const IID & riid,
             ULONG *pDataSize,
             void *pDataBuffer) = 0;
        
        virtual void __stdcall ClientNotify( 
             const GUID & uExtent,
             const IID & riid,
             ULONG cbDataSize,
             void *pDataBuffer,
             DWORD lDataRep,
             HRESULT hrFault) = 0;
        
        virtual void __stdcall ServerNotify( 
             const GUID & uExtent,
             const IID & riid,
             ULONG cbDataSize,
             void *pDataBuffer,
             DWORD lDataRep) = 0;
        
        virtual void __stdcall ServerGetSize( 
             const GUID & uExtent,
             const IID & riid,
             HRESULT hrFault,
             ULONG *pDataSize) = 0;
        
        virtual void __stdcall ServerFillBuffer( 
             const GUID & uExtent,
             const IID & riid,
             ULONG *pDataSize,
             void *pDataBuffer,
             HRESULT hrFault) = 0;
        
    };
    










































































































#line 9582 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



void __stdcall IChannelHook_ClientGetSize_Proxy( 
    IChannelHook * This,
     const GUID & uExtent,
     const IID & riid,
     ULONG *pDataSize);


void __stdcall IChannelHook_ClientGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IChannelHook_ClientFillBuffer_Proxy( 
    IChannelHook * This,
     const GUID & uExtent,
     const IID & riid,
     ULONG *pDataSize,
     void *pDataBuffer);


void __stdcall IChannelHook_ClientFillBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IChannelHook_ClientNotify_Proxy( 
    IChannelHook * This,
     const GUID & uExtent,
     const IID & riid,
     ULONG cbDataSize,
     void *pDataBuffer,
     DWORD lDataRep,
     HRESULT hrFault);


void __stdcall IChannelHook_ClientNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IChannelHook_ServerNotify_Proxy( 
    IChannelHook * This,
     const GUID & uExtent,
     const IID & riid,
     ULONG cbDataSize,
     void *pDataBuffer,
     DWORD lDataRep);


void __stdcall IChannelHook_ServerNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IChannelHook_ServerGetSize_Proxy( 
    IChannelHook * This,
     const GUID & uExtent,
     const IID & riid,
     HRESULT hrFault,
     ULONG *pDataSize);


void __stdcall IChannelHook_ServerGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IChannelHook_ServerFillBuffer_Proxy( 
    IChannelHook * This,
     const GUID & uExtent,
     const IID & riid,
     ULONG *pDataSize,
     void *pDataBuffer,
     HRESULT hrFault);


void __stdcall IChannelHook_ServerFillBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9680 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 

#line 9686 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"


extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;





extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_s_ifspec;





 

typedef struct tagSOLE_AUTHENTICATION_SERVICE
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
    } 	SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef 
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {	EOAC_NONE	= 0,
	EOAC_MUTUAL_AUTH	= 0x1,
	EOAC_STATIC_CLOAKING	= 0x20,
	EOAC_DYNAMIC_CLOAKING	= 0x40,
	EOAC_ANY_AUTHORITY	= 0x80,
	EOAC_MAKE_FULLSIC	= 0x100,
	EOAC_DEFAULT	= 0x800,
	EOAC_SECURE_REFS	= 0x2,
	EOAC_ACCESS_CONTROL	= 0x4,
	EOAC_APPID	= 0x8,
	EOAC_DYNAMIC	= 0x10,
	EOAC_REQUIRE_FULLSIC	= 0x200,
	EOAC_AUTO_IMPERSONATE	= 0x400,
	EOAC_NO_CUSTOM_MARSHAL	= 0x2000,
	EOAC_DISABLE_AAA	= 0x1000
    } 	EOLE_AUTHENTICATION_CAPABILITIES;





typedef struct tagSOLE_AUTHENTICATION_INFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
    } 	SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST
    {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
    } 	SOLE_AUTHENTICATION_LIST;

typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;


extern "C" const IID IID_IClientSecurity;


    
    struct __declspec(uuid("0000013D-0000-0000-C000-000000000046")) __declspec(novtable)
    IClientSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket( 
             IUnknown *pProxy,
             DWORD *pAuthnSvc,
             DWORD *pAuthzSvc,
             OLECHAR **pServerPrincName,
             DWORD *pAuthnLevel,
             DWORD *pImpLevel,
             void **pAuthInfo,
             DWORD *pCapabilites) = 0;
        
        virtual HRESULT __stdcall SetBlanket( 
             IUnknown *pProxy,
             DWORD dwAuthnSvc,
             DWORD dwAuthzSvc,
             OLECHAR *pServerPrincName,
             DWORD dwAuthnLevel,
             DWORD dwImpLevel,
             void *pAuthInfo,
             DWORD dwCapabilities) = 0;
        
        virtual HRESULT __stdcall CopyProxy( 
             IUnknown *pProxy,
             IUnknown **ppCopy) = 0;
        
    };
    















































































#line 9882 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IClientSecurity_QueryBlanket_Proxy( 
    IClientSecurity * This,
     IUnknown *pProxy,
     DWORD *pAuthnSvc,
     DWORD *pAuthzSvc,
     OLECHAR **pServerPrincName,
     DWORD *pAuthnLevel,
     DWORD *pImpLevel,
     void **pAuthInfo,
     DWORD *pCapabilites);


void __stdcall IClientSecurity_QueryBlanket_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClientSecurity_SetBlanket_Proxy( 
    IClientSecurity * This,
     IUnknown *pProxy,
     DWORD dwAuthnSvc,
     DWORD dwAuthzSvc,
     OLECHAR *pServerPrincName,
     DWORD dwAuthnLevel,
     DWORD dwImpLevel,
     void *pAuthInfo,
     DWORD dwCapabilities);


void __stdcall IClientSecurity_SetBlanket_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClientSecurity_CopyProxy_Proxy( 
    IClientSecurity * This,
     IUnknown *pProxy,
     IUnknown **ppCopy);


void __stdcall IClientSecurity_CopyProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9938 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IServerSecurity;


    
    struct __declspec(uuid("0000013E-0000-0000-C000-000000000046")) __declspec(novtable)
    IServerSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket( 
             DWORD *pAuthnSvc,
             DWORD *pAuthzSvc,
             OLECHAR **pServerPrincName,
             DWORD *pAuthnLevel,
             DWORD *pImpLevel,
             void **pPrivs,
             DWORD *pCapabilities) = 0;
        
        virtual HRESULT __stdcall ImpersonateClient( void) = 0;
        
        virtual HRESULT __stdcall RevertToSelf( void) = 0;
        
        virtual BOOL __stdcall IsImpersonating( void) = 0;
        
    };
    










































































#line 10047 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IServerSecurity_QueryBlanket_Proxy( 
    IServerSecurity * This,
     DWORD *pAuthnSvc,
     DWORD *pAuthzSvc,
     OLECHAR **pServerPrincName,
     DWORD *pAuthnLevel,
     DWORD *pImpLevel,
     void **pPrivs,
     DWORD *pCapabilities);


void __stdcall IServerSecurity_QueryBlanket_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IServerSecurity_ImpersonateClient_Proxy( 
    IServerSecurity * This);


void __stdcall IServerSecurity_ImpersonateClient_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IServerSecurity_RevertToSelf_Proxy( 
    IServerSecurity * This);


void __stdcall IServerSecurity_RevertToSelf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


BOOL __stdcall IServerSecurity_IsImpersonating_Proxy( 
    IServerSecurity * This);


void __stdcall IServerSecurity_IsImpersonating_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IClassActivator;


    
    struct __declspec(uuid("00000140-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassActivator : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassObject( 
             const IID & rclsid,
             DWORD dwClassContext,
             LCID locale,
             const IID & riid,
             void **ppv) = 0;
        
    };
    






















































#line 10184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IClassActivator_GetClassObject_Proxy( 
    IClassActivator * This,
     const IID & rclsid,
     DWORD dwClassContext,
     LCID locale,
     const IID & riid,
     void **ppv);


void __stdcall IClassActivator_GetClassObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IRpcOptions;


    
    struct __declspec(uuid("00000144-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set( 
             IUnknown *pPrx,
             DWORD dwProperty,
             ULONG_PTR dwValue) = 0;
        
        virtual HRESULT __stdcall Query( 
             IUnknown *pPrx,
             DWORD dwProperty,
             ULONG_PTR *pdwValue) = 0;
        
    };
    





























































#line 10296 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcOptions_Set_Proxy( 
    IRpcOptions * This,
     IUnknown *pPrx,
     DWORD dwProperty,
     ULONG_PTR dwValue);


void __stdcall IRpcOptions_Set_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcOptions_Query_Proxy( 
    IRpcOptions * This,
     IUnknown *pPrx,
     DWORD dwProperty,
     ULONG_PTR *pdwValue);


void __stdcall IRpcOptions_Query_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 


enum __MIDL___MIDL_itf_objidl_0055_0001
    {	COMBND_RPCTIMEOUT	= 0x1
    } ;
#line 10339 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_s_ifspec;





 


extern "C" const IID IID_IFillLockBytes;


    
    struct __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) __declspec(novtable)
    IFillLockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall FillAppend( 
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten) = 0;
        
        virtual  HRESULT __stdcall FillAt( 
             ULARGE_INTEGER ulOffset,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten) = 0;
        
        virtual HRESULT __stdcall SetFillSize( 
             ULARGE_INTEGER ulSize) = 0;
        
        virtual HRESULT __stdcall Terminate( 
             BOOL bCanceled) = 0;
        
    };
    












































































#line 10455 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy( 
    IFillLockBytes * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_SetFillSize_Proxy( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulSize);


void __stdcall IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_Terminate_Proxy( 
    IFillLockBytes * This,
     BOOL bCanceled);


void __stdcall IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10513 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IProgressNotify;


    
    struct __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) __declspec(novtable)
    IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnProgress( 
             DWORD dwProgressCurrent,
             DWORD dwProgressMaximum,
             BOOL fAccurate,
             BOOL fOwner) = 0;
        
    };
    





















































#line 10592 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IProgressNotify_OnProgress_Proxy( 
    IProgressNotify * This,
     DWORD dwProgressCurrent,
     DWORD dwProgressMaximum,
     BOOL fAccurate,
     BOOL fOwner);


void __stdcall IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10612 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } 	StorageLayout;


extern "C" const IID IID_ILayoutStorage;


    
    struct __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LayoutScript( 
             StorageLayout *pStorageLayout,
             DWORD nEntries,
             DWORD glfInterleavedFlag) = 0;
        
        virtual HRESULT __stdcall BeginMonitor( void) = 0;
        
        virtual HRESULT __stdcall EndMonitor( void) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfile( 
             OLECHAR *pwcsNewDfName) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes( 
             ILockBytes *pILockBytes) = 0;
        
    };
    














































































#line 10733 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ILayoutStorage_LayoutScript_Proxy( 
    ILayoutStorage * This,
     StorageLayout *pStorageLayout,
     DWORD nEntries,
     DWORD glfInterleavedFlag);


void __stdcall ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_BeginMonitor_Proxy( 
    ILayoutStorage * This);


void __stdcall ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_EndMonitor_Proxy( 
    ILayoutStorage * This);


void __stdcall ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfile_Proxy( 
    ILayoutStorage * This,
     OLECHAR *pwcsNewDfName);


void __stdcall ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy( 
    ILayoutStorage * This,
     ILockBytes *pILockBytes);


void __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10798 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IBlockingLock;


    
    struct __declspec(uuid("30f3d47a-6447-11d1-8e3c-00c04fb9386d")) __declspec(novtable)
    IBlockingLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Lock( 
             DWORD dwTimeout) = 0;
        
        virtual HRESULT __stdcall Unlock( void) = 0;
        
    };
    
























































#line 10879 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IBlockingLock_Lock_Proxy( 
    IBlockingLock * This,
     DWORD dwTimeout);


void __stdcall IBlockingLock_Lock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBlockingLock_Unlock_Proxy( 
    IBlockingLock * This);


void __stdcall IBlockingLock_Unlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10907 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ITimeAndNoticeControl;


    
    struct __declspec(uuid("bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    ITimeAndNoticeControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SuppressChanges( 
             DWORD res1,
             DWORD res2) = 0;
        
    };
    



















































#line 10982 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ITimeAndNoticeControl_SuppressChanges_Proxy( 
    ITimeAndNoticeControl * This,
     DWORD res1,
     DWORD res2);


void __stdcall ITimeAndNoticeControl_SuppressChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11000 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IOplockStorage;


    
    struct __declspec(uuid("8d19c834-8879-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    IOplockStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStorageEx( 
             LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
             const IID & riid,
             void **ppstgOpen) = 0;
        
        virtual HRESULT __stdcall OpenStorageEx( 
             LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
             const IID & riid,
             void **ppstgOpen) = 0;
        
    };
    



































































#line 11103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IOplockStorage_CreateStorageEx_Proxy( 
    IOplockStorage * This,
     LPCWSTR pwcsName,
     DWORD grfMode,
     DWORD stgfmt,
     DWORD grfAttrs,
     const IID & riid,
     void **ppstgOpen);


void __stdcall IOplockStorage_CreateStorageEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOplockStorage_OpenStorageEx_Proxy( 
    IOplockStorage * This,
     LPCWSTR pwcsName,
     DWORD grfMode,
     DWORD stgfmt,
     DWORD grfAttrs,
     const IID & riid,
     void **ppstgOpen);


void __stdcall IOplockStorage_OpenStorageEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  ISurrogate *LPSURROGATE;


extern "C" const IID IID_ISurrogate;


    
    struct __declspec(uuid("00000022-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LoadDllServer( 
             const IID & Clsid) = 0;
        
        virtual HRESULT __stdcall FreeSurrogate( void) = 0;
        
    };
    
























































#line 11225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ISurrogate_LoadDllServer_Proxy( 
    ISurrogate * This,
     const IID & Clsid);


void __stdcall ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISurrogate_FreeSurrogate_Proxy( 
    ISurrogate * This);


void __stdcall ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


extern "C" const IID IID_IGlobalInterfaceTable;


    
    struct __declspec(uuid("00000146-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalInterfaceTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterInterfaceInGlobal( 
             IUnknown *pUnk,
             const IID & riid,
             DWORD *pdwCookie) = 0;
        
        virtual HRESULT __stdcall RevokeInterfaceFromGlobal( 
             DWORD dwCookie) = 0;
        
        virtual HRESULT __stdcall GetInterfaceFromGlobal( 
             DWORD dwCookie,
             const IID & riid,
             void **ppv) = 0;
        
    };
    




































































#line 11356 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy( 
    IGlobalInterfaceTable * This,
     IUnknown *pUnk,
     const IID & riid,
     DWORD *pdwCookie);


void __stdcall IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable * This,
     DWORD dwCookie);


void __stdcall IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable * This,
     DWORD dwCookie,
     const IID & riid,
     void **ppv);


void __stdcall IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11401 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IDirectWriterLock;


    
    struct __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    IDirectWriterLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitForWriteAccess( 
             DWORD dwTimeout) = 0;
        
        virtual HRESULT __stdcall ReleaseWriteAccess( void) = 0;
        
        virtual HRESULT __stdcall HaveWriteAccess( void) = 0;
        
    };
    






























































#line 11490 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IDirectWriterLock_WaitForWriteAccess_Proxy( 
    IDirectWriterLock * This,
     DWORD dwTimeout);


void __stdcall IDirectWriterLock_WaitForWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDirectWriterLock_ReleaseWriteAccess_Proxy( 
    IDirectWriterLock * This);


void __stdcall IDirectWriterLock_ReleaseWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDirectWriterLock_HaveWriteAccess_Proxy( 
    IDirectWriterLock * This);


void __stdcall IDirectWriterLock_HaveWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11529 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ISynchronize;


    
    struct __declspec(uuid("00000030-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronize : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Wait( 
             DWORD dwFlags,
             DWORD dwMilliseconds) = 0;
        
        virtual HRESULT __stdcall Signal( void) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
    };
    































































#line 11620 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ISynchronize_Wait_Proxy( 
    ISynchronize * This,
     DWORD dwFlags,
     DWORD dwMilliseconds);


void __stdcall ISynchronize_Wait_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronize_Signal_Proxy( 
    ISynchronize * This);


void __stdcall ISynchronize_Signal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronize_Reset_Proxy( 
    ISynchronize * This);


void __stdcall ISynchronize_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11660 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ISynchronizeHandle;


    
    struct __declspec(uuid("00000031-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetHandle( 
             HANDLE *ph) = 0;
        
    };
    


















































#line 11733 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ISynchronizeHandle_GetHandle_Proxy( 
    ISynchronizeHandle * This,
     HANDLE *ph);


void __stdcall ISynchronizeHandle_GetHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11750 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ISynchronizeEvent;


    
    struct __declspec(uuid("00000032-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeEvent : public ISynchronizeHandle
    {
    public:
        virtual HRESULT __stdcall SetEventHandle( 
             HANDLE *ph) = 0;
        
    };
    


























































#line 11831 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ISynchronizeEvent_SetEventHandle_Proxy( 
    ISynchronizeEvent * This,
     HANDLE *ph);


void __stdcall ISynchronizeEvent_SetEventHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11848 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ISynchronizeContainer;


    
    struct __declspec(uuid("00000033-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddSynchronize( 
             ISynchronize *pSync) = 0;
        
        virtual HRESULT __stdcall WaitMultiple( 
             DWORD dwFlags,
             DWORD dwTimeOut,
             ISynchronize **ppSync) = 0;
        
    };
    



























































#line 11935 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ISynchronizeContainer_AddSynchronize_Proxy( 
    ISynchronizeContainer * This,
     ISynchronize *pSync);


void __stdcall ISynchronizeContainer_AddSynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronizeContainer_WaitMultiple_Proxy( 
    ISynchronizeContainer * This,
     DWORD dwFlags,
     DWORD dwTimeOut,
     ISynchronize **ppSync);


void __stdcall ISynchronizeContainer_WaitMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11966 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ISynchronizeMutex;


    
    struct __declspec(uuid("00000025-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeMutex : public ISynchronize
    {
    public:
        virtual HRESULT __stdcall ReleaseMutex( void) = 0;
        
    };
    






































































#line 12058 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ISynchronizeMutex_ReleaseMutex_Proxy( 
    ISynchronizeMutex * This);


void __stdcall ISynchronizeMutex_ReleaseMutex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12074 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  ICancelMethodCalls *LPCANCELMETHODCALLS;


extern "C" const IID IID_ICancelMethodCalls;


    
    struct __declspec(uuid("00000029-0000-0000-C000-000000000046")) __declspec(novtable)
    ICancelMethodCalls : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cancel( 
             ULONG ulSeconds) = 0;
        
        virtual HRESULT __stdcall TestCancel( void) = 0;
        
    };
    
























































#line 12157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ICancelMethodCalls_Cancel_Proxy( 
    ICancelMethodCalls * This,
     ULONG ulSeconds);


void __stdcall ICancelMethodCalls_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICancelMethodCalls_TestCancel_Proxy( 
    ICancelMethodCalls * This);


void __stdcall ICancelMethodCalls_TestCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12185 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef 
enum tagDCOM_CALL_STATE
    {	DCOM_NONE	= 0,
	DCOM_CALL_COMPLETE	= 0x1,
	DCOM_CALL_CANCELED	= 0x2
    } 	DCOM_CALL_STATE;


extern "C" const IID IID_IAsyncManager;


    
    struct __declspec(uuid("0000002A-0000-0000-C000-000000000046")) __declspec(novtable)
    IAsyncManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CompleteCall( 
             HRESULT Result) = 0;
        
        virtual HRESULT __stdcall GetCallContext( 
             const IID & riid,
             void **pInterface) = 0;
        
        virtual HRESULT __stdcall GetState( 
             ULONG *pulStateFlags) = 0;
        
    };
    

































































#line 12287 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IAsyncManager_CompleteCall_Proxy( 
    IAsyncManager * This,
     HRESULT Result);


void __stdcall IAsyncManager_CompleteCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncManager_GetCallContext_Proxy( 
    IAsyncManager * This,
     const IID & riid,
     void **pInterface);


void __stdcall IAsyncManager_GetCallContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncManager_GetState_Proxy( 
    IAsyncManager * This,
     ULONG *pulStateFlags);


void __stdcall IAsyncManager_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_ICallFactory;


    
    struct __declspec(uuid("1c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ICallFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateCall( 
             const IID & riid,
             IUnknown *pCtrlUnk,
             const IID & riid2,
             IUnknown **ppv) = 0;
        
    };
    





















































#line 12408 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall ICallFactory_CreateCall_Proxy( 
    ICallFactory * This,
     const IID & riid,
     IUnknown *pCtrlUnk,
     const IID & riid2,
     IUnknown **ppv);


void __stdcall ICallFactory_CreateCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12428 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IRpcHelper;


    
    struct __declspec(uuid("00000149-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcHelper : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDCOMProtocolVersion( 
             DWORD *pComVersion) = 0;
        
        virtual HRESULT __stdcall GetIIDFromOBJREF( 
             void *pObjRef,
             IID **piid) = 0;
        
    };
    


























































#line 12513 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IRpcHelper_GetDCOMProtocolVersion_Proxy( 
    IRpcHelper * This,
     DWORD *pComVersion);


void __stdcall IRpcHelper_GetDCOMProtocolVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcHelper_GetIIDFromOBJREF_Proxy( 
    IRpcHelper * This,
     void *pObjRef,
     IID **piid);


void __stdcall IRpcHelper_GetIIDFromOBJREF_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12543 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IReleaseMarshalBuffers;


    
    struct __declspec(uuid("eb0cb9e8-7996-11d2-872e-0000f8080859")) __declspec(novtable)
    IReleaseMarshalBuffers : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReleaseMarshalBuffer( 
             RPCOLEMESSAGE *pMsg,
             DWORD dwFlags,
             IUnknown *pChnl) = 0;
        
    };
    




















































#line 12620 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy( 
    IReleaseMarshalBuffers * This,
     RPCOLEMESSAGE *pMsg,
     DWORD dwFlags,
     IUnknown *pChnl);


void __stdcall IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12639 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IWaitMultiple;


    
    struct __declspec(uuid("0000002B-0000-0000-C000-000000000046")) __declspec(novtable)
    IWaitMultiple : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitMultiple( 
             DWORD timeout,
             ISynchronize **pSync) = 0;
        
        virtual HRESULT __stdcall AddSynchronize( 
             ISynchronize *pSync) = 0;
        
    };
    


























































#line 12724 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IWaitMultiple_WaitMultiple_Proxy( 
    IWaitMultiple * This,
     DWORD timeout,
     ISynchronize **pSync);


void __stdcall IWaitMultiple_WaitMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWaitMultiple_AddSynchronize_Proxy( 
    IWaitMultiple * This,
     ISynchronize *pSync);


void __stdcall IWaitMultiple_AddSynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12754 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IUrlMon;


    
    struct __declspec(uuid("00000026-0000-0000-C000-000000000046")) __declspec(novtable)
    IUrlMon : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AsyncGetClassBits( 
             const IID & rclsid,
             LPCWSTR pszTYPE,
             LPCWSTR pszExt,
             DWORD dwFileVersionMS,
             DWORD dwFileVersionLS,
             LPCWSTR pszCodeBase,
             IBindCtx *pbc,
             DWORD dwClassContext,
             const IID & riid,
             DWORD flags) = 0;
        
    };
    



























































#line 12845 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IUrlMon_AsyncGetClassBits_Proxy( 
    IUrlMon * This,
     const IID & rclsid,
     LPCWSTR pszTYPE,
     LPCWSTR pszExt,
     DWORD dwFileVersionMS,
     DWORD dwFileVersionLS,
     LPCWSTR pszCodeBase,
     IBindCtx *pbc,
     DWORD dwClassContext,
     const IID & riid,
     DWORD flags);


void __stdcall IUrlMon_AsyncGetClassBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12871 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IForegroundTransfer;


    
    struct __declspec(uuid("00000145-0000-0000-C000-000000000046")) __declspec(novtable)
    IForegroundTransfer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AllowForegroundTransfer( 
             void *lpvReserved) = 0;
        
    };
    


















































#line 12944 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IForegroundTransfer_AllowForegroundTransfer_Proxy( 
    IForegroundTransfer * This,
     void *lpvReserved);


void __stdcall IForegroundTransfer_AllowForegroundTransfer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12961 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IAddrTrackingControl *LPADDRTRACKINGCONTROL;


extern "C" const IID IID_IAddrTrackingControl;


    
    struct __declspec(uuid("00000147-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrTrackingControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnableCOMDynamicAddrTracking( void) = 0;
        
        virtual HRESULT __stdcall DisableCOMDynamicAddrTracking( void) = 0;
        
    };
    























































#line 13042 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy( 
    IAddrTrackingControl * This);


void __stdcall IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy( 
    IAddrTrackingControl * This);


void __stdcall IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13069 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 

typedef  IAddrExclusionControl *LPADDREXCLUSIONCONTROL;


extern "C" const IID IID_IAddrExclusionControl;


    
    struct __declspec(uuid("00000148-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrExclusionControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentAddrExclusionList( 
             const IID & riid,
             void **ppEnumerator) = 0;
        
        virtual HRESULT __stdcall UpdateAddrExclusionList( 
             IUnknown *pEnumerator) = 0;
        
    };
    


























































#line 13156 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy( 
    IAddrExclusionControl * This,
     const IID & riid,
     void **ppEnumerator);


void __stdcall IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddrExclusionControl_UpdateAddrExclusionList_Proxy( 
    IAddrExclusionControl * This,
     IUnknown *pEnumerator);


void __stdcall IAddrExclusionControl_UpdateAddrExclusionList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13186 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IPipeByte;


    
    struct __declspec(uuid("DB2F3ACA-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull( 
             BYTE *buf,
             ULONG cRequest,
             ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Push( 
             BYTE *buf,
             ULONG cSent) = 0;
        
    };
    




























































#line 13275 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPipeByte_Pull_Proxy( 
    IPipeByte * This,
     BYTE *buf,
     ULONG cRequest,
     ULONG *pcReturned);


void __stdcall IPipeByte_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPipeByte_Push_Proxy( 
    IPipeByte * This,
     BYTE *buf,
     ULONG cSent);


void __stdcall IPipeByte_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13307 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_AsyncIPipeByte;


    
    struct __declspec(uuid("DB2F3ACB-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull( 
             ULONG cRequest) = 0;
        
        virtual HRESULT __stdcall Finish_Pull( 
             BYTE *buf,
             ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Begin_Push( 
             BYTE *buf,
             ULONG cSent) = 0;
        
        virtual HRESULT __stdcall Finish_Push( void) = 0;
        
    };
    








































































#line 13412 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall AsyncIPipeByte_Begin_Pull_Proxy( 
    AsyncIPipeByte * This,
     ULONG cRequest);


void __stdcall AsyncIPipeByte_Begin_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeByte_Finish_Pull_Proxy( 
    AsyncIPipeByte * This,
     BYTE *buf,
     ULONG *pcReturned);


void __stdcall AsyncIPipeByte_Finish_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeByte_Begin_Push_Proxy( 
    AsyncIPipeByte * This,
     BYTE *buf,
     ULONG cSent);


void __stdcall AsyncIPipeByte_Begin_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeByte_Finish_Push_Proxy( 
    AsyncIPipeByte * This);


void __stdcall AsyncIPipeByte_Finish_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13466 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IPipeLong;


    
    struct __declspec(uuid("DB2F3ACC-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull( 
             LONG *buf,
             ULONG cRequest,
             ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Push( 
             LONG *buf,
             ULONG cSent) = 0;
        
    };
    




























































#line 13555 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPipeLong_Pull_Proxy( 
    IPipeLong * This,
     LONG *buf,
     ULONG cRequest,
     ULONG *pcReturned);


void __stdcall IPipeLong_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPipeLong_Push_Proxy( 
    IPipeLong * This,
     LONG *buf,
     ULONG cSent);


void __stdcall IPipeLong_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13587 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_AsyncIPipeLong;


    
    struct __declspec(uuid("DB2F3ACD-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull( 
             ULONG cRequest) = 0;
        
        virtual HRESULT __stdcall Finish_Pull( 
             LONG *buf,
             ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Begin_Push( 
             LONG *buf,
             ULONG cSent) = 0;
        
        virtual HRESULT __stdcall Finish_Push( void) = 0;
        
    };
    








































































#line 13692 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall AsyncIPipeLong_Begin_Pull_Proxy( 
    AsyncIPipeLong * This,
     ULONG cRequest);


void __stdcall AsyncIPipeLong_Begin_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeLong_Finish_Pull_Proxy( 
    AsyncIPipeLong * This,
     LONG *buf,
     ULONG *pcReturned);


void __stdcall AsyncIPipeLong_Finish_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeLong_Begin_Push_Proxy( 
    AsyncIPipeLong * This,
     LONG *buf,
     ULONG cSent);


void __stdcall AsyncIPipeLong_Begin_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeLong_Finish_Push_Proxy( 
    AsyncIPipeLong * This);


void __stdcall AsyncIPipeLong_Finish_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13746 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IPipeDouble;


    
    struct __declspec(uuid("DB2F3ACE-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull( 
             DOUBLE *buf,
             ULONG cRequest,
             ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Push( 
             DOUBLE *buf,
             ULONG cSent) = 0;
        
    };
    




























































#line 13835 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IPipeDouble_Pull_Proxy( 
    IPipeDouble * This,
     DOUBLE *buf,
     ULONG cRequest,
     ULONG *pcReturned);


void __stdcall IPipeDouble_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPipeDouble_Push_Proxy( 
    IPipeDouble * This,
     DOUBLE *buf,
     ULONG cSent);


void __stdcall IPipeDouble_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13867 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_AsyncIPipeDouble;


    
    struct __declspec(uuid("DB2F3ACF-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull( 
             ULONG cRequest) = 0;
        
        virtual HRESULT __stdcall Finish_Pull( 
             DOUBLE *buf,
             ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Begin_Push( 
             DOUBLE *buf,
             ULONG cSent) = 0;
        
        virtual HRESULT __stdcall Finish_Push( void) = 0;
        
    };
    








































































#line 13972 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall AsyncIPipeDouble_Begin_Pull_Proxy( 
    AsyncIPipeDouble * This,
     ULONG cRequest);


void __stdcall AsyncIPipeDouble_Begin_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeDouble_Finish_Pull_Proxy( 
    AsyncIPipeDouble * This,
     DOUBLE *buf,
     ULONG *pcReturned);


void __stdcall AsyncIPipeDouble_Finish_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeDouble_Begin_Push_Proxy( 
    AsyncIPipeDouble * This,
     DOUBLE *buf,
     ULONG cSent);


void __stdcall AsyncIPipeDouble_Begin_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeDouble_Finish_Push_Proxy( 
    AsyncIPipeDouble * This);


void __stdcall AsyncIPipeDouble_Finish_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IThumbnailExtractor;


    
    struct __declspec(uuid("969dc708-5c76-11d1-8d86-0000f804b057")) __declspec(novtable)
    IThumbnailExtractor : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ExtractThumbnail( 
             IStorage *pStg,
             ULONG ulLength,
             ULONG ulHeight,
             ULONG *pulOutputLength,
             ULONG *pulOutputHeight,
             HBITMAP *phOutputBitmap) = 0;
        
        virtual HRESULT __stdcall OnFileUpdated( 
             IStorage *pStg) = 0;
        
    };
    






























































#line 14119 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IThumbnailExtractor_ExtractThumbnail_Proxy( 
    IThumbnailExtractor * This,
     IStorage *pStg,
     ULONG ulLength,
     ULONG ulHeight,
     ULONG *pulOutputLength,
     ULONG *pulOutputHeight,
     HBITMAP *phOutputBitmap);


void __stdcall IThumbnailExtractor_ExtractThumbnail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IThumbnailExtractor_OnFileUpdated_Proxy( 
    IThumbnailExtractor * This,
     IStorage *pStg);


void __stdcall IThumbnailExtractor_OnFileUpdated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14153 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IDummyHICONIncluder;


    
    struct __declspec(uuid("947990de-cc28-11d2-a0f7-00805f858fb1")) __declspec(novtable)
    IDummyHICONIncluder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Dummy( 
             HICON h1,
             HDC h2) = 0;
        
    };
    



















































#line 14228 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IDummyHICONIncluder_Dummy_Proxy( 
    IDummyHICONIncluder * This,
     HICON h1,
     HDC h2);


void __stdcall IDummyHICONIncluder_Dummy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 

typedef 
enum _APTTYPE
    {	APTTYPE_CURRENT	= -1,
	APTTYPE_STA	= 0,
	APTTYPE_MTA	= 1,
	APTTYPE_NA	= 2,
	APTTYPE_MAINSTA	= 3
    } 	APTTYPE;

typedef 
enum _THDTYPE
    {	THDTYPE_BLOCKMESSAGES	= 0,
	THDTYPE_PROCESSMESSAGES	= 1
    } 	THDTYPE;

typedef DWORD APARTMENTID;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0084_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0084_v0_0_s_ifspec;





 


extern "C" const IID IID_IComThreadingInfo;


    
    struct __declspec(uuid("000001ce-0000-0000-C000-000000000046")) __declspec(novtable)
    IComThreadingInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentApartmentType( 
             APTTYPE *pAptType) = 0;
        
        virtual HRESULT __stdcall GetCurrentThreadType( 
             THDTYPE *pThreadType) = 0;
        
        virtual HRESULT __stdcall GetCurrentLogicalThreadId( 
             GUID *pguidLogicalThreadId) = 0;
        
        virtual HRESULT __stdcall SetCurrentLogicalThreadId( 
             const GUID & rguid) = 0;
        
    };
    







































































#line 14374 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IComThreadingInfo_GetCurrentApartmentType_Proxy( 
    IComThreadingInfo * This,
     APTTYPE *pAptType);


void __stdcall IComThreadingInfo_GetCurrentApartmentType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IComThreadingInfo_GetCurrentThreadType_Proxy( 
    IComThreadingInfo * This,
     THDTYPE *pThreadType);


void __stdcall IComThreadingInfo_GetCurrentThreadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IComThreadingInfo_GetCurrentLogicalThreadId_Proxy( 
    IComThreadingInfo * This,
     GUID *pguidLogicalThreadId);


void __stdcall IComThreadingInfo_GetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IComThreadingInfo_SetCurrentLogicalThreadId_Proxy( 
    IComThreadingInfo * This,
     const GUID & rguid);


void __stdcall IComThreadingInfo_SetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"






 


extern "C" const IID IID_IProcessInitControl;


    
    struct __declspec(uuid("72380d55-8d2b-43a3-8513-2b6ef31434e9")) __declspec(novtable)
    IProcessInitControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ResetInitializerTimeout( 
             DWORD dwSecondsRemaining) = 0;
        
    };
    


















































#line 14500 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



HRESULT __stdcall IProcessInitControl_ResetInitializerTimeout_Proxy( 
    IProcessInitControl * This,
     DWORD dwSecondsRemaining);


void __stdcall IProcessInitControl_ResetInitializerTimeout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14517 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"



 



#pragma warning(pop)


#line 14528 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"
#line 14529 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0086_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0086_v0_0_s_ifspec;



unsigned long             __stdcall  ASYNC_STGMEDIUM_UserSize(     unsigned long *, unsigned long            , ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
void                      __stdcall  ASYNC_STGMEDIUM_UserFree(     unsigned long *, ASYNC_STGMEDIUM * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long *, unsigned long            , CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long *, unsigned char *, CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long *, CLIPFORMAT * ); 

unsigned long             __stdcall  FLAG_STGMEDIUM_UserSize(     unsigned long *, unsigned long            , FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
void                      __stdcall  FLAG_STGMEDIUM_UserFree(     unsigned long *, FLAG_STGMEDIUM * ); 

unsigned long             __stdcall  HBITMAP_UserSize(     unsigned long *, unsigned long            , HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserMarshal(  unsigned long *, unsigned char *, HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP * ); 
void                      __stdcall  HBITMAP_UserFree(     unsigned long *, HBITMAP * ); 

unsigned long             __stdcall  HDC_UserSize(     unsigned long *, unsigned long            , HDC * ); 
unsigned char * __stdcall  HDC_UserMarshal(  unsigned long *, unsigned char *, HDC * ); 
unsigned char * __stdcall  HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC * ); 
void                      __stdcall  HDC_UserFree(     unsigned long *, HDC * ); 

unsigned long             __stdcall  HICON_UserSize(     unsigned long *, unsigned long            , HICON * ); 
unsigned char * __stdcall  HICON_UserMarshal(  unsigned long *, unsigned char *, HICON * ); 
unsigned char * __stdcall  HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON * ); 
void                      __stdcall  HICON_UserFree(     unsigned long *, HICON * ); 

unsigned long             __stdcall  SNB_UserSize(     unsigned long *, unsigned long            , SNB * ); 
unsigned char * __stdcall  SNB_UserMarshal(  unsigned long *, unsigned char *, SNB * ); 
unsigned char * __stdcall  SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB * ); 
void                      __stdcall  SNB_UserFree(     unsigned long *, SNB * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long *, unsigned long            , STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long *, STGMEDIUM * ); 

 HRESULT __stdcall IEnumUnknown_Next_Proxy( 
    IEnumUnknown * This,
     ULONG celt,
     IUnknown **rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumUnknown_Next_Stub( 
    IEnumUnknown * This,
     ULONG celt,
     IUnknown **rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IBindCtx_SetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS *pbindopts);


 HRESULT __stdcall IBindCtx_SetBindOptions_Stub( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);

 HRESULT __stdcall IBindCtx_GetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS *pbindopts);


 HRESULT __stdcall IBindCtx_GetBindOptions_Stub( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);

 HRESULT __stdcall IEnumMoniker_Next_Proxy( 
    IEnumMoniker * This,
     ULONG celt,
     IMoniker **rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumMoniker_Next_Stub( 
    IEnumMoniker * This,
     ULONG celt,
     IMoniker **rgelt,
     ULONG *pceltFetched);

 BOOL __stdcall IRunnableObject_IsRunning_Proxy( 
    IRunnableObject * This);


 HRESULT __stdcall IRunnableObject_IsRunning_Stub( 
    IRunnableObject * This);

 HRESULT __stdcall IMoniker_BindToObject_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID & riidResult,
     void **ppvResult);


 HRESULT __stdcall IMoniker_BindToObject_Stub( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID & riidResult,
     IUnknown **ppvResult);

 HRESULT __stdcall IMoniker_BindToStorage_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID & riid,
     void **ppvObj);


 HRESULT __stdcall IMoniker_BindToStorage_Stub( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID & riid,
     IUnknown **ppvObj);

 HRESULT __stdcall IEnumString_Next_Proxy( 
    IEnumString * This,
     ULONG celt,
     LPOLESTR *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumString_Next_Stub( 
    IEnumString * This,
     ULONG celt,
     LPOLESTR *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall ISequentialStream_Read_Proxy( 
    ISequentialStream * This,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);


 HRESULT __stdcall ISequentialStream_Read_Stub( 
    ISequentialStream * This,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);

 HRESULT __stdcall ISequentialStream_Write_Proxy( 
    ISequentialStream * This,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall ISequentialStream_Write_Stub( 
    ISequentialStream * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 HRESULT __stdcall IStream_Seek_Proxy( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);


 HRESULT __stdcall IStream_Seek_Stub( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);

 HRESULT __stdcall IStream_CopyTo_Proxy( 
    IStream * This,
     IStream *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER *pcbRead,
     ULARGE_INTEGER *pcbWritten);


 HRESULT __stdcall IStream_CopyTo_Stub( 
    IStream * This,
     IStream *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER *pcbRead,
     ULARGE_INTEGER *pcbWritten);

 HRESULT __stdcall IEnumSTATSTG_Next_Proxy( 
    IEnumSTATSTG * This,
     ULONG celt,
     STATSTG *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATSTG_Next_Stub( 
    IEnumSTATSTG * This,
     ULONG celt,
     STATSTG *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IStorage_OpenStream_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     void *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream **ppstm);


 HRESULT __stdcall IStorage_OpenStream_Stub( 
    IStorage * This,
     const OLECHAR *pwcsName,
     unsigned long cbReserved1,
     byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream **ppstm);

 HRESULT __stdcall IStorage_EnumElements_Proxy( 
    IStorage * This,
     DWORD reserved1,
     void *reserved2,
     DWORD reserved3,
     IEnumSTATSTG **ppenum);


 HRESULT __stdcall IStorage_EnumElements_Stub( 
    IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte *reserved2,
     DWORD reserved3,
     IEnumSTATSTG **ppenum);

 HRESULT __stdcall ILockBytes_ReadAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);


 HRESULT __stdcall ILockBytes_ReadAt_Stub( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);

 HRESULT __stdcall ILockBytes_WriteAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall ILockBytes_WriteAt_Stub( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 HRESULT __stdcall IEnumFORMATETC_Next_Proxy( 
    IEnumFORMATETC * This,
     ULONG celt,
     FORMATETC *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumFORMATETC_Next_Stub( 
    IEnumFORMATETC * This,
     ULONG celt,
     FORMATETC *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IEnumSTATDATA_Next_Proxy( 
    IEnumSTATDATA * This,
     ULONG celt,
     STATDATA *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATDATA_Next_Stub( 
    IEnumSTATDATA * This,
     ULONG celt,
     STATDATA *rgelt,
     ULONG *pceltFetched);

 void __stdcall IAdviseSink_OnDataChange_Proxy( 
    IAdviseSink * This,
     FORMATETC *pFormatetc,
     STGMEDIUM *pStgmed);


 HRESULT __stdcall IAdviseSink_OnDataChange_Stub( 
    IAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);

 void __stdcall IAdviseSink_OnViewChange_Proxy( 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


 HRESULT __stdcall IAdviseSink_OnViewChange_Stub( 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall IAdviseSink_OnRename_Proxy( 
    IAdviseSink * This,
     IMoniker *pmk);


 HRESULT __stdcall IAdviseSink_OnRename_Stub( 
    IAdviseSink * This,
     IMoniker *pmk);

 void __stdcall IAdviseSink_OnSave_Proxy( 
    IAdviseSink * This);


 HRESULT __stdcall IAdviseSink_OnSave_Stub( 
    IAdviseSink * This);

 void __stdcall IAdviseSink_OnClose_Proxy( 
    IAdviseSink * This);


 HRESULT __stdcall IAdviseSink_OnClose_Stub( 
    IAdviseSink * This);

 void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy( 
    IAdviseSink2 * This,
     IMoniker *pmk);


 HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub( 
    IAdviseSink2 * This,
     IMoniker *pmk);

 HRESULT __stdcall IDataObject_GetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetcIn,
     STGMEDIUM *pmedium);


 HRESULT __stdcall IDataObject_GetData_Stub( 
    IDataObject * This,
     FORMATETC *pformatetcIn,
     STGMEDIUM *pRemoteMedium);

 HRESULT __stdcall IDataObject_GetDataHere_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium);


 HRESULT __stdcall IDataObject_GetDataHere_Stub( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pRemoteMedium);

 HRESULT __stdcall IDataObject_SetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium,
     BOOL fRelease);


 HRESULT __stdcall IDataObject_SetData_Stub( 
    IDataObject * This,
     FORMATETC *pformatetc,
     FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);

 HRESULT __stdcall IFillLockBytes_FillAppend_Proxy( 
    IFillLockBytes * This,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAppend_Stub( 
    IFillLockBytes * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 HRESULT __stdcall IFillLockBytes_FillAt_Proxy( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAt_Stub( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy( 
    AsyncIAdviseSink * This,
     FORMATETC *pFormatetc,
     STGMEDIUM *pStgmed);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub( 
    AsyncIAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);

 void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy( 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub( 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy( 
    AsyncIAdviseSink * This,
     IMoniker *pmk);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub( 
    AsyncIAdviseSink * This,
     IMoniker *pmk);

 void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This,
     IMoniker *pmk);


 HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub( 
    AsyncIAdviseSink2 * This,
     IMoniker *pmk);

 void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This);


 HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub( 
    AsyncIAdviseSink2 * This);






}
#line 15047 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"

#line 15049 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objidl.h"


#line 167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"


extern "C"{
#line 171 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 









#pragma warning(push)
#line 188 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"
#pragma warning(disable:4201)    
#line 190 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

#pragma once
#line 193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"




















extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_s_ifspec;





 

typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } 	SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef  struct _wireVARIANT *wireVARIANT;

typedef  struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
     wireBSTR *aBstr;
    } 	SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
     IUnknown **apUnknown;
    } 	SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
     IDispatch **apDispatch;
    } 	SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
     wireVARIANT *aVariant;
    } 	SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
     wireBRECORD *aRecord;
    } 	SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
     IUnknown **apUnknown;
    IID iid;
    } 	SAFEARR_HAVEIID;

typedef  
enum tagSF_TYPE
    {	SF_ERROR	= VT_ERROR,
	SF_I1	= VT_I1,
	SF_I2	= VT_I2,
	SF_I4	= VT_I4,
	SF_I8	= VT_I8,
	SF_BSTR	= VT_BSTR,
	SF_UNKNOWN	= VT_UNKNOWN,
	SF_DISPATCH	= VT_DISPATCH,
	SF_VARIANT	= VT_VARIANT,
	SF_RECORD	= VT_RECORD,
	SF_HAVEIID	= VT_UNKNOWN | VT_RESERVED
    } 	SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
      union __MIDL_IOleAutomationTypes_0001
        {
         SAFEARR_BSTR BstrStr;
         SAFEARR_UNKNOWN UnknownStr;
         SAFEARR_DISPATCH DispatchStr;
         SAFEARR_VARIANT VariantStr;
         SAFEARR_BRECORD RecordStr;
         SAFEARR_HAVEIID HaveIidStr;
         BYTE_SIZEDARR ByteStr;
         WORD_SIZEDARR WordStr;
         DWORD_SIZEDARR LongStr;
         HYPER_SIZEDARR HyperStr;
        } 	u;
    } 	SAFEARRAYUNION;

typedef  struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
     SAFEARRAYBOUND rgsabound[ 1 ];
    } 	*wireSAFEARRAY;

typedef  wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } 	SAFEARRAY;

typedef  SAFEARRAY *LPSAFEARRAY;


















































































#line 413 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






#line 420 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"
typedef  struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union 
        {
        struct 
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union 
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct 
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } 	;
                } 	;
            } 	;
        DECIMAL decVal;
        } 	;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;


struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
     byte *pRecord;
    } ;
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
     union 
        {
         LONGLONG llVal;
         LONG lVal;
         BYTE bVal;
         SHORT iVal;
         FLOAT fltVal;
         DOUBLE dblVal;
         VARIANT_BOOL boolVal;
         SCODE scode;
         CY cyVal;
         DATE date;
         wireBSTR bstrVal;
         IUnknown *punkVal;
         IDispatch *pdispVal;
         wirePSAFEARRAY parray;
         wireBRECORD brecVal;
         BYTE *pbVal;
         SHORT *piVal;
         LONG *plVal;
         LONGLONG *pllVal;
         FLOAT *pfltVal;
         DOUBLE *pdblVal;
         VARIANT_BOOL *pboolVal;
         SCODE *pscode;
         CY *pcyVal;
         DATE *pdate;
         wireBSTR *pbstrVal;
         IUnknown **ppunkVal;
         IDispatch **ppdispVal;
         wirePSAFEARRAY *pparray;
         wireVARIANT *pvarVal;
         CHAR cVal;
         USHORT uiVal;
         ULONG ulVal;
         ULONGLONG ullVal;
         INT intVal;
         UINT uintVal;
         DECIMAL decVal;
         DECIMAL *pdecVal;
         CHAR *pcVal;
         USHORT *puiVal;
         ULONG *pulVal;
         ULONGLONG *pullVal;
         INT *pintVal;
         UINT *puintVal;
           
           
        } 	;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef  
enum tagTYPEKIND
    {	TKIND_ENUM	= 0,
	TKIND_RECORD	= TKIND_ENUM + 1,
	TKIND_MODULE	= TKIND_RECORD + 1,
	TKIND_INTERFACE	= TKIND_MODULE + 1,
	TKIND_DISPATCH	= TKIND_INTERFACE + 1,
	TKIND_COCLASS	= TKIND_DISPATCH + 1,
	TKIND_ALIAS	= TKIND_COCLASS + 1,
	TKIND_UNION	= TKIND_ALIAS + 1,
	TKIND_MAX	= TKIND_UNION + 1
    } 	TYPEKIND;

typedef struct tagTYPEDESC
    {
     union 
        {
         struct tagTYPEDESC *lptdesc;
         struct tagARRAYDESC *lpadesc;
         HREFTYPE hreftype;
           
        } 	;
    VARTYPE vt;
    } 	TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
     SAFEARRAYBOUND rgbounds[ 1 ];
    } 	ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } 	PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } 	PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;

















typedef struct tagIDLDESC
    {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
    } 	IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;




















#line 659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

typedef struct tagELEMDESC {
    TYPEDESC tdesc;             
    union {
        IDLDESC idldesc;        
        PARAMDESC paramdesc;    
    };
} ELEMDESC, * LPELEMDESC;

#line 669 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } 	TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
     VARIANTARG *rgvarg;
     DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } 	DISPPARAMS;


















#line 720 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

typedef struct tagEXCEPINFO {
    WORD  wCode;
    WORD  wReserved;
    BSTR  bstrSource;
    BSTR  bstrDescription;
    BSTR  bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;

#line 734 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

typedef  
enum tagCALLCONV
    {	CC_FASTCALL	= 0,
	CC_CDECL	= 1,
	CC_MSCPASCAL	= CC_CDECL + 1,
	CC_PASCAL	= CC_MSCPASCAL,
	CC_MACPASCAL	= CC_PASCAL + 1,
	CC_STDCALL	= CC_MACPASCAL + 1,
	CC_FPFASTCALL	= CC_STDCALL + 1,
	CC_SYSCALL	= CC_FPFASTCALL + 1,
	CC_MPWCDECL	= CC_SYSCALL + 1,
	CC_MPWPASCAL	= CC_MPWCDECL + 1,
	CC_MAX	= CC_MPWPASCAL + 1
    } 	CALLCONV;

typedef  
enum tagFUNCKIND
    {	FUNC_VIRTUAL	= 0,
	FUNC_PUREVIRTUAL	= FUNC_VIRTUAL + 1,
	FUNC_NONVIRTUAL	= FUNC_PUREVIRTUAL + 1,
	FUNC_STATIC	= FUNC_NONVIRTUAL + 1,
	FUNC_DISPATCH	= FUNC_STATIC + 1
    } 	FUNCKIND;

typedef  
enum tagINVOKEKIND
    {	INVOKE_FUNC	= 1,
	INVOKE_PROPERTYGET	= 2,
	INVOKE_PROPERTYPUT	= 4,
	INVOKE_PROPERTYPUTREF	= 8
    } 	INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
     SCODE *lprgscode;
     ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } 	FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef  
enum tagVARKIND
    {	VAR_PERINSTANCE	= 0,
	VAR_STATIC	= VAR_PERINSTANCE + 1,
	VAR_CONST	= VAR_STATIC + 1,
	VAR_DISPATCH	= VAR_CONST + 1
    } 	VARKIND;









typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
     union 
        {
         ULONG oInst;
         VARIANT *lpvarValue;
        } 	;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } 	VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef 
enum tagTYPEFLAGS
    {	TYPEFLAG_FAPPOBJECT	= 0x1,
	TYPEFLAG_FCANCREATE	= 0x2,
	TYPEFLAG_FLICENSED	= 0x4,
	TYPEFLAG_FPREDECLID	= 0x8,
	TYPEFLAG_FHIDDEN	= 0x10,
	TYPEFLAG_FCONTROL	= 0x20,
	TYPEFLAG_FDUAL	= 0x40,
	TYPEFLAG_FNONEXTENSIBLE	= 0x80,
	TYPEFLAG_FOLEAUTOMATION	= 0x100,
	TYPEFLAG_FRESTRICTED	= 0x200,
	TYPEFLAG_FAGGREGATABLE	= 0x400,
	TYPEFLAG_FREPLACEABLE	= 0x800,
	TYPEFLAG_FDISPATCHABLE	= 0x1000,
	TYPEFLAG_FREVERSEBIND	= 0x2000,
	TYPEFLAG_FPROXY	= 0x4000
    } 	TYPEFLAGS;

typedef 
enum tagFUNCFLAGS
    {	FUNCFLAG_FRESTRICTED	= 0x1,
	FUNCFLAG_FSOURCE	= 0x2,
	FUNCFLAG_FBINDABLE	= 0x4,
	FUNCFLAG_FREQUESTEDIT	= 0x8,
	FUNCFLAG_FDISPLAYBIND	= 0x10,
	FUNCFLAG_FDEFAULTBIND	= 0x20,
	FUNCFLAG_FHIDDEN	= 0x40,
	FUNCFLAG_FUSESGETLASTERROR	= 0x80,
	FUNCFLAG_FDEFAULTCOLLELEM	= 0x100,
	FUNCFLAG_FUIDEFAULT	= 0x200,
	FUNCFLAG_FNONBROWSABLE	= 0x400,
	FUNCFLAG_FREPLACEABLE	= 0x800,
	FUNCFLAG_FIMMEDIATEBIND	= 0x1000
    } 	FUNCFLAGS;

typedef 
enum tagVARFLAGS
    {	VARFLAG_FREADONLY	= 0x1,
	VARFLAG_FSOURCE	= 0x2,
	VARFLAG_FBINDABLE	= 0x4,
	VARFLAG_FREQUESTEDIT	= 0x8,
	VARFLAG_FDISPLAYBIND	= 0x10,
	VARFLAG_FDEFAULTBIND	= 0x20,
	VARFLAG_FHIDDEN	= 0x40,
	VARFLAG_FRESTRICTED	= 0x80,
	VARFLAG_FDEFAULTCOLLELEM	= 0x100,
	VARFLAG_FUIDEFAULT	= 0x200,
	VARFLAG_FNONBROWSABLE	= 0x400,
	VARFLAG_FREPLACEABLE	= 0x800,
	VARFLAG_FIMMEDIATEBIND	= 0x1000
    } 	VARFLAGS;

typedef  struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } 	CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } 	CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
     LPCUSTDATAITEM prgCustData;
    } 	CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
#line 898 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"





 

typedef  ICreateTypeInfo *LPCREATETYPEINFO;


extern "C" const IID IID_ICreateTypeInfo;


    
    struct __declspec(uuid("00020405-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetTypeFlags( 
             UINT uTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             LPOLESTR pStrDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall AddRefTypeInfo( 
             ITypeInfo *pTInfo,
             HREFTYPE *phRefType) = 0;
        
        virtual HRESULT __stdcall AddFuncDesc( 
             UINT index,
             FUNCDESC *pFuncDesc) = 0;
        
        virtual HRESULT __stdcall AddImplType( 
             UINT index,
             HREFTYPE hRefType) = 0;
        
        virtual HRESULT __stdcall SetImplTypeFlags( 
             UINT index,
             INT implTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetAlignment( 
             WORD cbAlignment) = 0;
        
        virtual HRESULT __stdcall SetSchema( 
             LPOLESTR pStrSchema) = 0;
        
        virtual HRESULT __stdcall AddVarDesc( 
             UINT index,
             VARDESC *pVarDesc) = 0;
        
        virtual HRESULT __stdcall SetFuncAndParamNames( 
             UINT index,
             LPOLESTR *rgszNames,
             UINT cNames) = 0;
        
        virtual HRESULT __stdcall SetVarName( 
             UINT index,
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetTypeDescAlias( 
             TYPEDESC *pTDescAlias) = 0;
        
        virtual HRESULT __stdcall DefineFuncAsDllEntry( 
             UINT index,
             LPOLESTR szDllName,
             LPOLESTR szProcName) = 0;
        
        virtual HRESULT __stdcall SetFuncDocString( 
             UINT index,
             LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetVarDocString( 
             UINT index,
             LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetMops( 
             UINT index,
             BSTR bstrMops) = 0;
        
        virtual HRESULT __stdcall SetTypeIdldesc( 
             IDLDESC *pIdlDesc) = 0;
        
        virtual HRESULT __stdcall LayOut( void) = 0;
        
    };
    



























































































































































































































#line 1222 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo_SetGuid_Proxy( 
    ICreateTypeInfo * This,
     const GUID & guid);


void __stdcall ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeFlags_Proxy( 
    ICreateTypeInfo * This,
     UINT uTypeFlags);


void __stdcall ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetDocString_Proxy( 
    ICreateTypeInfo * This,
     LPOLESTR pStrDoc);


void __stdcall ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetHelpContext_Proxy( 
    ICreateTypeInfo * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVersion_Proxy( 
    ICreateTypeInfo * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddRefTypeInfo_Proxy( 
    ICreateTypeInfo * This,
     ITypeInfo *pTInfo,
     HREFTYPE *phRefType);


void __stdcall ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddFuncDesc_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     FUNCDESC *pFuncDesc);


void __stdcall ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddImplType_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     HREFTYPE hRefType);


void __stdcall ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetImplTypeFlags_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     INT implTypeFlags);


void __stdcall ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetAlignment_Proxy( 
    ICreateTypeInfo * This,
     WORD cbAlignment);


void __stdcall ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetSchema_Proxy( 
    ICreateTypeInfo * This,
     LPOLESTR pStrSchema);


void __stdcall ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddVarDesc_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     VARDESC *pVarDesc);


void __stdcall ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncAndParamNames_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR *rgszNames,
     UINT cNames);


void __stdcall ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarName_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeDescAlias_Proxy( 
    ICreateTypeInfo * This,
     TYPEDESC *pTDescAlias);


void __stdcall ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szDllName,
     LPOLESTR szProcName);


void __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncDocString_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarDocString_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncHelpContext_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarHelpContext_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetMops_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     BSTR bstrMops);


void __stdcall ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeIdldesc_Proxy( 
    ICreateTypeInfo * This,
     IDLDESC *pIdlDesc);


void __stdcall ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_LayOut_Proxy( 
    ICreateTypeInfo * This);


void __stdcall ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1518 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern "C" const IID IID_ICreateTypeInfo2;


    
    struct __declspec(uuid("0002040E-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo2 : public ICreateTypeInfo
    {
    public:
        virtual HRESULT __stdcall DeleteFuncDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteFuncDescByMemId( 
             MEMBERID memid,
             INVOKEKIND invKind) = 0;
        
        virtual HRESULT __stdcall DeleteVarDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteVarDescByMemId( 
             MEMBERID memid) = 0;
        
        virtual HRESULT __stdcall DeleteImplType( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetFuncCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetVarCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetImplTypeCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall Invalidate( void) = 0;
        
        virtual HRESULT __stdcall SetName( 
             LPOLESTR szName) = 0;
        
    };
    

















































































































































































































































































































































#line 1934 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDesc_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy( 
    ICreateTypeInfo2 * This,
     MEMBERID memid,
     INVOKEKIND invKind);


void __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDesc_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Proxy( 
    ICreateTypeInfo2 * This,
     MEMBERID memid);


void __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteImplType_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetCustData_Proxy( 
    ICreateTypeInfo2 * This,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetParamCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetImplTypeCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetHelpStringContext_Proxy( 
    ICreateTypeInfo2 * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_Invalidate_Proxy( 
    ICreateTypeInfo2 * This);


void __stdcall ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetName_Proxy( 
    ICreateTypeInfo2 * This,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2131 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ICreateTypeLib *LPCREATETYPELIB;


extern "C" const IID IID_ICreateTypeLib;


    
    struct __declspec(uuid("00020406-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateTypeInfo( 
             LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo **ppCTInfo) = 0;
        
        virtual HRESULT __stdcall SetName( 
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             LPOLESTR szDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpFileName( 
             LPOLESTR szHelpFileName) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetLcid( 
             LCID lcid) = 0;
        
        virtual HRESULT __stdcall SetLibFlags( 
             UINT uLibFlags) = 0;
        
        virtual HRESULT __stdcall SaveAllChanges( void) = 0;
        
    };
    



















































































































#line 2300 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ICreateTypeLib_CreateTypeInfo_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szName,
     TYPEKIND tkind,
     ICreateTypeInfo **ppCTInfo);


void __stdcall ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetName_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetVersion_Proxy( 
    ICreateTypeLib * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetGuid_Proxy( 
    ICreateTypeLib * This,
     const GUID & guid);


void __stdcall ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetDocString_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szDoc);


void __stdcall ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpFileName_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szHelpFileName);


void __stdcall ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpContext_Proxy( 
    ICreateTypeLib * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLcid_Proxy( 
    ICreateTypeLib * This,
     LCID lcid);


void __stdcall ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLibFlags_Proxy( 
    ICreateTypeLib * This,
     UINT uLibFlags);


void __stdcall ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SaveAllChanges_Proxy( 
    ICreateTypeLib * This);


void __stdcall ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ICreateTypeLib2 *LPCREATETYPELIB2;


extern "C" const IID IID_ICreateTypeLib2;


    
    struct __declspec(uuid("0002040F-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib2 : public ICreateTypeLib
    {
    public:
        virtual HRESULT __stdcall DeleteTypeInfo( 
             LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetHelpStringDll( 
             LPOLESTR szFileName) = 0;
        
    };
    

















































































































































#line 2607 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ICreateTypeLib2_DeleteTypeInfo_Proxy( 
    ICreateTypeLib2 * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetCustData_Proxy( 
    ICreateTypeLib2 * This,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringContext_Proxy( 
    ICreateTypeLib2 * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringDll_Proxy( 
    ICreateTypeLib2 * This,
     LPOLESTR szFileName);


void __stdcall ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2661 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  IDispatch *LPDISPATCH;

































extern "C" const IID IID_IDispatch;


    
    struct __declspec(uuid("00020400-0000-0000-C000-000000000046")) __declspec(novtable)
    IDispatch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeInfoCount( 
             UINT *pctinfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetIDsOfNames( 
             const IID & riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             DISPID dispIdMember,
             const IID & riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr) = 0;
        
    };
    




















































































#line 2823 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall IDispatch_GetTypeInfoCount_Proxy( 
    IDispatch * This,
     UINT *pctinfo);


void __stdcall IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetTypeInfo_Proxy( 
    IDispatch * This,
     UINT iTInfo,
     LCID lcid,
     ITypeInfo **ppTInfo);


void __stdcall IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetIDsOfNames_Proxy( 
    IDispatch * This,
     const IID & riid,
     LPOLESTR *rgszNames,
     UINT cNames,
     LCID lcid,
     DISPID *rgDispId);


void __stdcall IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDispatch_RemoteInvoke_Proxy( 
    IDispatch * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *pArgErr,
     UINT cVarRef,
     UINT *rgVarRefIdx,
     VARIANTARG *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2892 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  IEnumVARIANT *LPENUMVARIANT;


extern "C" const IID IID_IEnumVARIANT;


    
    struct __declspec(uuid("00020404-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumVARIANT : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             VARIANT *rgVar,
             ULONG *pCeltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumVARIANT **ppEnum) = 0;
        
    };
    








































































#line 2999 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



 HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy( 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Skip_Proxy( 
    IEnumVARIANT * This,
     ULONG celt);


void __stdcall IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Reset_Proxy( 
    IEnumVARIANT * This);


void __stdcall IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Clone_Proxy( 
    IEnumVARIANT * This,
     IEnumVARIANT **ppEnum);


void __stdcall IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3053 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ITypeComp *LPTYPECOMP;

typedef  
enum tagDESCKIND
    {	DESCKIND_NONE	= 0,
	DESCKIND_FUNCDESC	= DESCKIND_NONE + 1,
	DESCKIND_VARDESC	= DESCKIND_FUNCDESC + 1,
	DESCKIND_TYPECOMP	= DESCKIND_VARDESC + 1,
	DESCKIND_IMPLICITAPPOBJ	= DESCKIND_TYPECOMP + 1,
	DESCKIND_MAX	= DESCKIND_IMPLICITAPPOBJ + 1
    } 	DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } 	BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern "C" const IID IID_ITypeComp;


    
    struct __declspec(uuid("00020403-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeComp : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Bind( 
             LPOLESTR szName,
             ULONG lHashVal,
             WORD wFlags,
             ITypeInfo **ppTInfo,
             DESCKIND *pDescKind,
             BINDPTR *pBindPtr) = 0;
        
        virtual  HRESULT __stdcall BindType( 
             LPOLESTR szName,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             ITypeComp **ppTComp) = 0;
        
    };
    

































































#line 3173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



 HRESULT __stdcall ITypeComp_RemoteBind_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     LPFUNCDESC *ppFuncDesc,
     LPVARDESC *ppVarDesc,
     ITypeComp **ppTypeComp,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeComp_RemoteBindType_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3212 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ITypeInfo *LPTYPEINFO;


extern "C" const IID IID_ITypeInfo;


    
    struct __declspec(uuid("00020401-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetTypeAttr( 
             TYPEATTR **ppTypeAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
             ITypeComp **ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetFuncDesc( 
             UINT index,
             FUNCDESC **ppFuncDesc) = 0;
        
        virtual  HRESULT __stdcall GetVarDesc( 
             UINT index,
             VARDESC **ppVarDesc) = 0;
        
        virtual  HRESULT __stdcall GetNames( 
             MEMBERID memid,
             BSTR *rgBstrNames,
             UINT cMaxNames,
             UINT *pcNames) = 0;
        
        virtual HRESULT __stdcall GetRefTypeOfImplType( 
             UINT index,
             HREFTYPE *pRefType) = 0;
        
        virtual HRESULT __stdcall GetImplTypeFlags( 
             UINT index,
             INT *pImplTypeFlags) = 0;
        
        virtual  HRESULT __stdcall GetIDsOfNames( 
             LPOLESTR *rgszNames,
             UINT cNames,
             MEMBERID *pMemId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             MEMBERID memid,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall GetDllEntry( 
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR *pBstrDllName,
             BSTR *pBstrName,
             WORD *pwOrdinal) = 0;
        
        virtual HRESULT __stdcall GetRefTypeInfo( 
             HREFTYPE hRefType,
             ITypeInfo **ppTInfo) = 0;
        
        virtual  HRESULT __stdcall AddressOfMember( 
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID *ppv) = 0;
        
        virtual  HRESULT __stdcall CreateInstance( 
             IUnknown *pUnkOuter,
             const IID & riid,
             PVOID *ppvObj) = 0;
        
        virtual HRESULT __stdcall GetMops( 
             MEMBERID memid,
             BSTR *pBstrMops) = 0;
        
        virtual  HRESULT __stdcall GetContainingTypeLib( 
             ITypeLib **ppTLib,
             UINT *pIndex) = 0;
        
        virtual  void __stdcall ReleaseTypeAttr( 
             TYPEATTR *pTypeAttr) = 0;
        
        virtual  void __stdcall ReleaseFuncDesc( 
             FUNCDESC *pFuncDesc) = 0;
        
        virtual  void __stdcall ReleaseVarDesc( 
             VARDESC *pVarDesc) = 0;
        
    };
    














































































































































































































#line 3527 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



 HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy( 
    ITypeInfo * This,
     LPTYPEATTR *ppTypeAttr,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetTypeComp_Proxy( 
    ITypeInfo * This,
     ITypeComp **ppTComp);


void __stdcall ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     LPFUNCDESC *ppFuncDesc,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     LPVARDESC *ppVarDesc,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeOfImplType_Proxy( 
    ITypeInfo * This,
     UINT index,
     HREFTYPE *pRefType);


void __stdcall ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetImplTypeFlags_Proxy( 
    ITypeInfo * This,
     UINT index,
     INT *pImplTypeFlags);


void __stdcall ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeInfo_Proxy( 
    ITypeInfo * This,
     HREFTYPE hRefType,
     ITypeInfo **ppTInfo);


void __stdcall ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy( 
    ITypeInfo * This,
     const IID & riid,
     IUnknown **ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetMops_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *pBstrMops);


void __stdcall ITypeInfo_GetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy( 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3778 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ITypeInfo2 *LPTYPEINFO2;


extern "C" const IID IID_ITypeInfo2;


    
    struct __declspec(uuid("00020412-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo2 : public ITypeInfo
    {
    public:
        virtual HRESULT __stdcall GetTypeKind( 
             TYPEKIND *pTypeKind) = 0;
        
        virtual HRESULT __stdcall GetTypeFlags( 
             ULONG *pTypeFlags) = 0;
        
        virtual HRESULT __stdcall GetFuncIndexOfMemId( 
             MEMBERID memid,
             INVOKEKIND invKind,
             UINT *pFuncIndex) = 0;
        
        virtual HRESULT __stdcall GetVarIndexOfMemId( 
             MEMBERID memid,
             UINT *pVarIndex) = 0;
        
        virtual HRESULT __stdcall GetCustData( 
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetFuncCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetVarCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetImplTypeCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             MEMBERID memid,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
             CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllFuncCustData( 
             UINT index,
             CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllVarCustData( 
             UINT index,
             CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllImplTypeCustData( 
             UINT index,
             CUSTDATA *pCustData) = 0;
        
    };
    














































































































































































































































































































































#line 4201 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ITypeInfo2_GetTypeKind_Proxy( 
    ITypeInfo2 * This,
     TYPEKIND *pTypeKind);


void __stdcall ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetTypeFlags_Proxy( 
    ITypeInfo2 * This,
     ULONG *pTypeFlags);


void __stdcall ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncIndexOfMemId_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     UINT *pFuncIndex);


void __stdcall ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarIndexOfMemId_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     UINT *pVarIndex);


void __stdcall ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetCustData_Proxy( 
    ITypeInfo2 * This,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetParamCustData_Proxy( 
    ITypeInfo2 * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetImplTypeCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllCustData_Proxy( 
    ITypeInfo2 * This,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllFuncCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllParamCustData_Proxy( 
    ITypeInfo2 * This,
     UINT indexFunc,
     UINT indexParam,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllVarCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllImplTypeCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4409 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  
enum tagSYSKIND
    {	SYS_WIN16	= 0,
	SYS_WIN32	= SYS_WIN16 + 1,
	SYS_MAC	= SYS_WIN32 + 1,
	SYS_WIN64	= SYS_MAC + 1
    } 	SYSKIND;

typedef  
enum tagLIBFLAGS
    {	LIBFLAG_FRESTRICTED	= 0x1,
	LIBFLAG_FCONTROL	= 0x2,
	LIBFLAG_FHIDDEN	= 0x4,
	LIBFLAG_FHASDISKIMAGE	= 0x8
    } 	LIBFLAGS;

typedef  ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } 	TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern "C" const IID IID_ITypeLib;


    
    struct __declspec(uuid("00020402-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib : public IUnknown
    {
    public:
        virtual  UINT __stdcall GetTypeInfoCount( void) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT index,
             ITypeInfo **ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoType( 
             UINT index,
             TYPEKIND *pTKind) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoOfGuid( 
             const GUID & guid,
             ITypeInfo **ppTinfo) = 0;
        
        virtual  HRESULT __stdcall GetLibAttr( 
             TLIBATTR **ppTLibAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
             ITypeComp **ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             INT index,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall IsName( 
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL *pfName) = 0;
        
        virtual  HRESULT __stdcall FindName( 
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             MEMBERID *rgMemId,
             USHORT *pcFound) = 0;
        
        virtual  void __stdcall ReleaseTLibAttr( 
             TLIBATTR *pTLibAttr) = 0;
        
    };
    





























































































































#line 4626 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



 HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy( 
    ITypeLib * This,
     UINT *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfo_Proxy( 
    ITypeLib * This,
     UINT index,
     ITypeInfo **ppTInfo);


void __stdcall ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoType_Proxy( 
    ITypeLib * This,
     UINT index,
     TYPEKIND *pTKind);


void __stdcall ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoOfGuid_Proxy( 
    ITypeLib * This,
     const GUID & guid,
     ITypeInfo **ppTinfo);


void __stdcall ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy( 
    ITypeLib * This,
     LPTLIBATTR *ppTLibAttr,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeComp_Proxy( 
    ITypeLib * This,
     ITypeComp **ppTComp);


void __stdcall ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy( 
    ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteIsName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName,
     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteFindName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound,
     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy( 
    ITypeLib * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4767 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ITypeLib2 *LPTYPELIB2;


extern "C" const IID IID_ITypeLib2;


    
    struct __declspec(uuid("00020411-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib2 : public ITypeLib
    {
    public:
        virtual HRESULT __stdcall GetCustData( 
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetLibStatistics( 
             ULONG *pcUniqueNames,
             ULONG *pcchUniqueNames) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             INT index,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
             CUSTDATA *pCustData) = 0;
        
    };
    
































































































































































#line 4967 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ITypeLib2_GetCustData_Proxy( 
    ITypeLib2 * This,
     const GUID & guid,
     VARIANT *pVarVal);


void __stdcall ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy( 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy( 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib2_GetAllCustData_Proxy( 
    ITypeLib2 * This,
     CUSTDATA *pCustData);


void __stdcall ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5027 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef 
enum tagCHANGEKIND
    {	CHANGEKIND_ADDMEMBER	= 0,
	CHANGEKIND_DELETEMEMBER	= CHANGEKIND_ADDMEMBER + 1,
	CHANGEKIND_SETNAMES	= CHANGEKIND_DELETEMEMBER + 1,
	CHANGEKIND_SETDOCUMENTATION	= CHANGEKIND_SETNAMES + 1,
	CHANGEKIND_GENERAL	= CHANGEKIND_SETDOCUMENTATION + 1,
	CHANGEKIND_INVALIDATE	= CHANGEKIND_GENERAL + 1,
	CHANGEKIND_CHANGEFAILED	= CHANGEKIND_INVALIDATE + 1,
	CHANGEKIND_MAX	= CHANGEKIND_CHANGEFAILED + 1
    } 	CHANGEKIND;


extern "C" const IID IID_ITypeChangeEvents;


    
    struct __declspec(uuid("00020410-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeChangeEvents : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RequestTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoBefore,
             LPOLESTR pStrName,
             INT *pfCancel) = 0;
        
        virtual HRESULT __stdcall AfterTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoAfter,
             LPOLESTR pStrName) = 0;
        
    };
    






























































#line 5134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ITypeChangeEvents_RequestTypeChange_Proxy( 
    ITypeChangeEvents * This,
     CHANGEKIND changeKind,
     ITypeInfo *pTInfoBefore,
     LPOLESTR pStrName,
     INT *pfCancel);


void __stdcall ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeChangeEvents_AfterTypeChange_Proxy( 
    ITypeChangeEvents * This,
     CHANGEKIND changeKind,
     ITypeInfo *pTInfoAfter,
     LPOLESTR pStrName);


void __stdcall ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  IErrorInfo *LPERRORINFO;


extern "C" const IID IID_IErrorInfo;


    
    struct __declspec(uuid("1CF2B120-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    IErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGUID( 
             GUID *pGUID) = 0;
        
        virtual HRESULT __stdcall GetSource( 
             BSTR *pBstrSource) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
             BSTR *pBstrDescription) = 0;
        
        virtual HRESULT __stdcall GetHelpFile( 
             BSTR *pBstrHelpFile) = 0;
        
        virtual HRESULT __stdcall GetHelpContext( 
             DWORD *pdwHelpContext) = 0;
        
    };
    














































































#line 5283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall IErrorInfo_GetGUID_Proxy( 
    IErrorInfo * This,
     GUID *pGUID);


void __stdcall IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetSource_Proxy( 
    IErrorInfo * This,
     BSTR *pBstrSource);


void __stdcall IErrorInfo_GetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetDescription_Proxy( 
    IErrorInfo * This,
     BSTR *pBstrDescription);


void __stdcall IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpFile_Proxy( 
    IErrorInfo * This,
     BSTR *pBstrHelpFile);


void __stdcall IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpContext_Proxy( 
    IErrorInfo * This,
     DWORD *pdwHelpContext);


void __stdcall IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5348 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ICreateErrorInfo *LPCREATEERRORINFO;


extern "C" const IID IID_ICreateErrorInfo;


    
    struct __declspec(uuid("22F03340-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    ICreateErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGUID( 
             const GUID & rguid) = 0;
        
        virtual HRESULT __stdcall SetSource( 
             LPOLESTR szSource) = 0;
        
        virtual HRESULT __stdcall SetDescription( 
             LPOLESTR szDescription) = 0;
        
        virtual HRESULT __stdcall SetHelpFile( 
             LPOLESTR szHelpFile) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
    };
    














































































#line 5463 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ICreateErrorInfo_SetGUID_Proxy( 
    ICreateErrorInfo * This,
     const GUID & rguid);


void __stdcall ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetSource_Proxy( 
    ICreateErrorInfo * This,
     LPOLESTR szSource);


void __stdcall ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetDescription_Proxy( 
    ICreateErrorInfo * This,
     LPOLESTR szDescription);


void __stdcall ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpFile_Proxy( 
    ICreateErrorInfo * This,
     LPOLESTR szHelpFile);


void __stdcall ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpContext_Proxy( 
    ICreateErrorInfo * This,
     DWORD dwHelpContext);


void __stdcall ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5528 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  ISupportErrorInfo *LPSUPPORTERRORINFO;


extern "C" const IID IID_ISupportErrorInfo;


    
    struct __declspec(uuid("DF0B3D60-548F-101B-8E65-08002B2BD119")) __declspec(novtable)
    ISupportErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall InterfaceSupportsErrorInfo( 
             const IID & riid) = 0;
        
    };
    


















































#line 5603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy( 
    ISupportErrorInfo * This,
     const IID & riid);


void __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5620 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 


extern "C" const IID IID_ITypeFactory;


    
    struct __declspec(uuid("0000002E-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateFromTypeInfo( 
             ITypeInfo *pTypeInfo,
             const IID & riid,
             IUnknown **ppv) = 0;
        
    };
    




















































#line 5697 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ITypeFactory_CreateFromTypeInfo_Proxy( 
    ITypeFactory * This,
     ITypeInfo *pTypeInfo,
     const IID & riid,
     IUnknown **ppv);


void __stdcall ITypeFactory_CreateFromTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 


extern "C" const IID IID_ITypeMarshal;


    
    struct __declspec(uuid("0000002D-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Size( 
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG *pSize) = 0;
        
        virtual HRESULT __stdcall Marshal( 
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG cbBufferLength,
             BYTE *pBuffer,
             ULONG *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Unmarshal( 
             PVOID pvType,
             DWORD dwFlags,
             ULONG cbBufferLength,
             BYTE *pBuffer,
             ULONG *pcbRead) = 0;
        
        virtual HRESULT __stdcall Free( 
             PVOID pvType) = 0;
        
    };
    



















































































#line 5843 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall ITypeMarshal_Size_Proxy( 
    ITypeMarshal * This,
     PVOID pvType,
     DWORD dwDestContext,
     PVOID pvDestContext,
     ULONG *pSize);


void __stdcall ITypeMarshal_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Marshal_Proxy( 
    ITypeMarshal * This,
     PVOID pvType,
     DWORD dwDestContext,
     PVOID pvDestContext,
     ULONG cbBufferLength,
     BYTE *pBuffer,
     ULONG *pcbWritten);


void __stdcall ITypeMarshal_Marshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Unmarshal_Proxy( 
    ITypeMarshal * This,
     PVOID pvType,
     DWORD dwFlags,
     ULONG cbBufferLength,
     BYTE *pBuffer,
     ULONG *pcbRead);


void __stdcall ITypeMarshal_Unmarshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Free_Proxy( 
    ITypeMarshal * This,
     PVOID pvType);


void __stdcall ITypeMarshal_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5908 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef  IRecordInfo *LPRECORDINFO;


extern "C" const IID IID_IRecordInfo;


    
    struct __declspec(uuid("0000002F-0000-0000-C000-000000000046")) __declspec(novtable)
    IRecordInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RecordInit( 
             PVOID pvNew) = 0;
        
        virtual HRESULT __stdcall RecordClear( 
             PVOID pvExisting) = 0;
        
        virtual HRESULT __stdcall RecordCopy( 
             PVOID pvExisting,
             PVOID pvNew) = 0;
        
        virtual HRESULT __stdcall GetGuid( 
             GUID *pguid) = 0;
        
        virtual HRESULT __stdcall GetName( 
             BSTR *pbstrName) = 0;
        
        virtual HRESULT __stdcall GetSize( 
             ULONG *pcbSize) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             ITypeInfo **ppTypeInfo) = 0;
        
        virtual HRESULT __stdcall GetField( 
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField) = 0;
        
        virtual HRESULT __stdcall GetFieldNoCopy( 
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField,
             PVOID *ppvDataCArray) = 0;
        
        virtual HRESULT __stdcall PutField( 
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField) = 0;
        
        virtual HRESULT __stdcall PutFieldNoCopy( 
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField) = 0;
        
        virtual HRESULT __stdcall GetFieldNames( 
             ULONG *pcNames,
             BSTR *rgBstrNames) = 0;
        
        virtual BOOL __stdcall IsMatchingType( 
             IRecordInfo *pRecordInfo) = 0;
        
        virtual PVOID __stdcall RecordCreate( void) = 0;
        
        virtual HRESULT __stdcall RecordCreateCopy( 
             PVOID pvSource,
             PVOID *ppvDest) = 0;
        
        virtual HRESULT __stdcall RecordDestroy( 
             PVOID pvRecord) = 0;
        
    };
    








































































































































































#line 6159 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall IRecordInfo_RecordInit_Proxy( 
    IRecordInfo * This,
     PVOID pvNew);


void __stdcall IRecordInfo_RecordInit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordClear_Proxy( 
    IRecordInfo * This,
     PVOID pvExisting);


void __stdcall IRecordInfo_RecordClear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordCopy_Proxy( 
    IRecordInfo * This,
     PVOID pvExisting,
     PVOID pvNew);


void __stdcall IRecordInfo_RecordCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetGuid_Proxy( 
    IRecordInfo * This,
     GUID *pguid);


void __stdcall IRecordInfo_GetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetName_Proxy( 
    IRecordInfo * This,
     BSTR *pbstrName);


void __stdcall IRecordInfo_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetSize_Proxy( 
    IRecordInfo * This,
     ULONG *pcbSize);


void __stdcall IRecordInfo_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetTypeInfo_Proxy( 
    IRecordInfo * This,
     ITypeInfo **ppTypeInfo);


void __stdcall IRecordInfo_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetField_Proxy( 
    IRecordInfo * This,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField);


void __stdcall IRecordInfo_GetField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetFieldNoCopy_Proxy( 
    IRecordInfo * This,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField,
     PVOID *ppvDataCArray);


void __stdcall IRecordInfo_GetFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_PutField_Proxy( 
    IRecordInfo * This,
     ULONG wFlags,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField);


void __stdcall IRecordInfo_PutField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_PutFieldNoCopy_Proxy( 
    IRecordInfo * This,
     ULONG wFlags,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField);


void __stdcall IRecordInfo_PutFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetFieldNames_Proxy( 
    IRecordInfo * This,
     ULONG *pcNames,
     BSTR *rgBstrNames);


void __stdcall IRecordInfo_GetFieldNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


BOOL __stdcall IRecordInfo_IsMatchingType_Proxy( 
    IRecordInfo * This,
     IRecordInfo *pRecordInfo);


void __stdcall IRecordInfo_IsMatchingType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


PVOID __stdcall IRecordInfo_RecordCreate_Proxy( 
    IRecordInfo * This);


void __stdcall IRecordInfo_RecordCreate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordCreateCopy_Proxy( 
    IRecordInfo * This,
     PVOID pvSource,
     PVOID *ppvDest);


void __stdcall IRecordInfo_RecordCreateCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordDestroy_Proxy( 
    IRecordInfo * This,
     PVOID pvRecord);


void __stdcall IRecordInfo_RecordDestroy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6369 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef IErrorLog *LPERRORLOG;


extern "C" const IID IID_IErrorLog;


    
    struct __declspec(uuid("3127CA40-446E-11CE-8135-00AA004BB851")) __declspec(novtable)
    IErrorLog : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddError( 
             LPCOLESTR pszPropName,
             EXCEPINFO *pExcepInfo) = 0;
        
    };
    



















































#line 6446 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



HRESULT __stdcall IErrorLog_AddError_Proxy( 
    IErrorLog * This,
     LPCOLESTR pszPropName,
     EXCEPINFO *pExcepInfo);


void __stdcall IErrorLog_AddError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6464 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"






 

typedef IPropertyBag *LPPROPERTYBAG;


extern "C" const IID IID_IPropertyBag;


    
    struct __declspec(uuid("55272A00-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPropertyBag : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Read( 
             LPCOLESTR pszPropName,
             VARIANT *pVar,
             IErrorLog *pErrorLog) = 0;
        
        virtual HRESULT __stdcall Write( 
             LPCOLESTR pszPropName,
             VARIANT *pVar) = 0;
        
    };
    




























































#line 6555 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



 HRESULT __stdcall IPropertyBag_RemoteRead_Proxy( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog,
     DWORD varType,
     IUnknown *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyBag_Write_Proxy( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar);


void __stdcall IPropertyBag_Write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6589 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"



 



#pragma warning(pop)


#line 6600 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"
#line 6601 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"


extern RPC_IF_HANDLE __MIDL_itf_oaidl_0108_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0108_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __stdcall  CLEANLOCALSTORAGE_UserSize(     unsigned long *, unsigned long            , CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserMarshal(  unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
void                      __stdcall  CLEANLOCALSTORAGE_UserFree(     unsigned long *, CLEANLOCALSTORAGE * ); 

unsigned long             __stdcall  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

 HRESULT __stdcall IDispatch_Invoke_Proxy( 
    IDispatch * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     WORD wFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr);


 HRESULT __stdcall IDispatch_Invoke_Stub( 
    IDispatch * This,
     DISPID dispIdMember,
     const IID & riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *pArgErr,
     UINT cVarRef,
     UINT *rgVarRefIdx,
     VARIANTARG *rgVarRef);

 HRESULT __stdcall IEnumVARIANT_Next_Proxy( 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);


 HRESULT __stdcall IEnumVARIANT_Next_Stub( 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);

 HRESULT __stdcall ITypeComp_Bind_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     BINDPTR *pBindPtr);


 HRESULT __stdcall ITypeComp_Bind_Stub( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     LPFUNCDESC *ppFuncDesc,
     LPVARDESC *ppVarDesc,
     ITypeComp **ppTypeComp,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeComp_BindType_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     ITypeComp **ppTComp);


 HRESULT __stdcall ITypeComp_BindType_Stub( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo);

 HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy( 
    ITypeInfo * This,
     TYPEATTR **ppTypeAttr);


 HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub( 
    ITypeInfo * This,
     LPTYPEATTR *ppTypeAttr,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     FUNCDESC **ppFuncDesc);


 HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub( 
    ITypeInfo * This,
     UINT index,
     LPFUNCDESC *ppFuncDesc,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     VARDESC **ppVarDesc);


 HRESULT __stdcall ITypeInfo_GetVarDesc_Stub( 
    ITypeInfo * This,
     UINT index,
     LPVARDESC *ppVarDesc,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetNames_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);


 HRESULT __stdcall ITypeInfo_GetNames_Stub( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);

 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy( 
    ITypeInfo * This,
     LPOLESTR *rgszNames,
     UINT cNames,
     MEMBERID *pMemId);


 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_Invoke_Proxy( 
    ITypeInfo * This,
     PVOID pvInstance,
     MEMBERID memid,
     WORD wFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr);


 HRESULT __stdcall ITypeInfo_Invoke_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


 HRESULT __stdcall ITypeInfo_GetDocumentation_Stub( 
    ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);

 HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);


 HRESULT __stdcall ITypeInfo_GetDllEntry_Stub( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);

 HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     PVOID *ppv);


 HRESULT __stdcall ITypeInfo_AddressOfMember_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_CreateInstance_Proxy( 
    ITypeInfo * This,
     IUnknown *pUnkOuter,
     const IID & riid,
     PVOID *ppvObj);


 HRESULT __stdcall ITypeInfo_CreateInstance_Stub( 
    ITypeInfo * This,
     const IID & riid,
     IUnknown **ppvObj);

 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy( 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);


 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub( 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);

 void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy( 
    ITypeInfo * This,
     TYPEATTR *pTypeAttr);


 HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub( 
    ITypeInfo * This);

 void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy( 
    ITypeInfo * This,
     FUNCDESC *pFuncDesc);


 HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub( 
    ITypeInfo * This);

 void __stdcall ITypeInfo_ReleaseVarDesc_Proxy( 
    ITypeInfo * This,
     VARDESC *pVarDesc);


 HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub( 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);

 UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy( 
    ITypeLib * This);


 HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub( 
    ITypeLib * This,
     UINT *pcTInfo);

 HRESULT __stdcall ITypeLib_GetLibAttr_Proxy( 
    ITypeLib * This,
     TLIBATTR **ppTLibAttr);


 HRESULT __stdcall ITypeLib_GetLibAttr_Stub( 
    ITypeLib * This,
     LPTLIBATTR *ppTLibAttr,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeLib_GetDocumentation_Proxy( 
    ITypeLib * This,
     INT index,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


 HRESULT __stdcall ITypeLib_GetDocumentation_Stub( 
    ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);

 HRESULT __stdcall ITypeLib_IsName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName);


 HRESULT __stdcall ITypeLib_IsName_Stub( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName,
     BSTR *pBstrLibName);

 HRESULT __stdcall ITypeLib_FindName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound);


 HRESULT __stdcall ITypeLib_FindName_Stub( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound,
     BSTR *pBstrLibName);

 void __stdcall ITypeLib_ReleaseTLibAttr_Proxy( 
    ITypeLib * This,
     TLIBATTR *pTLibAttr);


 HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub( 
    ITypeLib * This);

 HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy( 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);


 HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub( 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);

 HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy( 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


 HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub( 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);

 HRESULT __stdcall IPropertyBag_Read_Proxy( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog);


 HRESULT __stdcall IPropertyBag_Read_Stub( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog,
     DWORD varType,
     IUnknown *pUnkObj);






}
#line 7009 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"

#line 7011 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oaidl.h"


#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"






extern "C" __declspec(dllimport) BSTR __stdcall SysAllocString(const OLECHAR *);
extern "C" __declspec(dllimport) INT __stdcall  SysReAllocString(BSTR *, const OLECHAR *);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringLen(const OLECHAR *, UINT);
extern "C" __declspec(dllimport) INT __stdcall  SysReAllocStringLen(BSTR *, const OLECHAR *, UINT);
extern "C" __declspec(dllimport) void __stdcall SysFreeString(BSTR);
extern "C" __declspec(dllimport) UINT __stdcall SysStringLen(BSTR);


extern "C" __declspec(dllimport) UINT __stdcall SysStringByteLen(BSTR bstr);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen(LPCSTR psz, UINT len);
#line 75 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"





extern "C" __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern "C" __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime(DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);


extern "C" __declspec(dllimport) INT __stdcall SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern "C" __declspec(dllimport) INT __stdcall VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
#line 88 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"






extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound, PVOID pvExtra);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayRedim(SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetDim(SAFEARRAY * psa);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound(SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound(SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayLock(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData(SAFEARRAY * psa, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopy(SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex(SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetRecordInfo(SAFEARRAY * psa, IRecordInfo * prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetRecordInfo(SAFEARRAY * psa, IRecordInfo ** prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetIID(SAFEARRAY * psa, const GUID & guid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetIID(SAFEARRAY * psa, GUID * pguid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetVartype(SAFEARRAY * psa, VARTYPE * pvt);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);





extern "C" __declspec(dllimport) void __stdcall VariantInit(VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantClear(VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopy(VARIANTARG * pvargDest, VARIANTARG * pvargSrc);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopyInd(VARIANT * pvarDest, VARIANTARG * pvargSrc);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeType(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);




                                      
                                      

				      
				      


                                      
                                      







extern "C" __declspec(dllimport) HRESULT __stdcall VectorFromBstr (BSTR bstr, SAFEARRAY ** ppsa);
extern "C" __declspec(dllimport) HRESULT __stdcall BstrFromVector (SAFEARRAY *psa, BSTR *pbstr);














































#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"






















extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI8(LONG64 i64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDec(DECIMAL *pdecIn, BYTE *pbOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI8(LONG64 i64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDec(DECIMAL *pdecIn, SHORT *psOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDec(DECIMAL *pdecIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromInt(INT intIn, LONG *plOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI1(BYTE bIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI2(SHORT sIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI4(LONG lIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR4(FLOAT fltIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR8(DOUBLE dblIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromCy(CY cyIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDate(DATE dateIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromStr(OLECHAR * strIn, LCID lcid, unsigned long dwFlags, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDisp(IDispatch * pdispIn, LCID lcid, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI1(CHAR cIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI2(USHORT uiIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI4(ULONG ulIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDec(DECIMAL *pdecIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromInt(INT intIn, LONG64 * pi64Out);





extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI8(LONG64 i64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDec(DECIMAL *pdecIn, FLOAT *pfltOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI8(LONG64 i64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDec(DECIMAL *pdecIn, DOUBLE *pdblOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI8(LONG64 i64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDec(DECIMAL *pdecIn, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI8(LONG64 i64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDisp(IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDec(DECIMAL *pdecIn, CY *pcyOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI8(LONG64 i64In, LCID lcid, unsigned long dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In, LCID lcid, unsigned long dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDec(DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI2(SHORT sIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI8(LONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDec(DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI1(BYTE bIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromI2(SHORT uiIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromI4(LONG lIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromI8(LONG64 i64In, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromR4(FLOAT fltIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromR8(DOUBLE dblIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDate(DATE dateIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromCy(CY cyIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI2(USHORT uiIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI4(ULONG ulIn, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromUI8(ULONG64 i64In, CHAR *pcOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI1FromDec(DECIMAL *pdecIn, CHAR *pcOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI8(LONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDec(DECIMAL *pdecIn, USHORT *puiOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI2(SHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI8(LONG64 i64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDec(DECIMAL *pdecIn, ULONG *pulOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI1(BYTE bIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI2(SHORT sIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI4(LONG lIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI8(LONG64 ui64In, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR4(FLOAT fltIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromCy(CY cyIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDate(DATE dateIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromStr(OLECHAR * strIn, LCID lcid, unsigned long dwFlags, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDisp(IDispatch * pdispIn, LCID lcid, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI1(CHAR cIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI2(USHORT uiIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI4(ULONG ulIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDec(DECIMAL *pdecIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromInt(INT intIn, ULONG64 * pi64Out);





extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI4(LONG lIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDate(DATE dateIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromCy(CY cyIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI1(CHAR cIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut);




extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG *plOut);















































































typedef struct {
    INT   cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT   cchUsed;
    INT   nBaseShift;
    INT   nPwr10;
} NUMPARSE;







































extern "C" __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags,
            NUMPARSE * pnumprs, BYTE * rgbDig);

extern "C" __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum(NUMPARSE * pnumprs, BYTE * rgbDig,
            ULONG dwVtBits, VARIANT * pvar);





extern "C" HRESULT __stdcall VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);


extern "C" HRESULT __stdcall VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);


extern "C++" {

__inline
HRESULT
__stdcall
VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid) {
    return VarCmp(pvarLeft, pvarRight, lcid, 0);
}
} 
#line 659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"




extern "C" HRESULT __stdcall VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
extern "C" HRESULT __stdcall VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight);




extern "C" HRESULT __stdcall VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI4(CY cyLeft, long lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyAbs(CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyFix(CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyInt(CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyNeg(CY cyIn, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyCmp(CY cyLeft, CY cyRight);
extern "C" HRESULT __stdcall VarCyCmpR8(CY cyLeft, double dblRight);




extern "C" HRESULT __stdcall VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
extern "C" HRESULT __stdcall VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags); 
extern "C" HRESULT __stdcall VarR8Pow(double dblLeft, double dblRight, double *pdblResult);
extern "C" HRESULT __stdcall VarR4CmpR8(float fltLeft, double dblRight);
extern "C" HRESULT __stdcall VarR8Round(double dblIn, int cDecimals, double *pdblResult);


























typedef struct {
    SYSTEMTIME st;
    USHORT  wDayOfYear;
} UDATE;





extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut);



   
extern "C" __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);





extern "C" __declspec(dllimport) HRESULT __stdcall VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid);
extern "C" __declspec(dllimport) HRESULT __stdcall VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual);





typedef ITypeLib * LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;











typedef ITypeInfo * LPTYPEINFO;






typedef ITypeComp * LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;








extern "C" __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);
#line 818 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"

extern "C" __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);












extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLib(const OLECHAR  *szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;








extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID & rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID & guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);



extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, OLECHAR  *szFullPath,
            OLECHAR  *szHelpDir);




extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID & libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, const OLECHAR  *szFile,
            ICreateTypeLib ** ppctlib);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch * LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;   
    VARTYPE vt;         
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;   
    PARAMDATA * ppdata; 
    DISPID dispid;      
    UINT iMeth;         
    CALLCONV cc;        
    UINT cArgs;         
    WORD wFlags;        
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;  
    UINT cMembers;      
} INTERFACEDATA, * LPINTERFACEDATA;






extern "C" __declspec(dllimport) HRESULT __stdcall DispGetParam(DISPPARAMS * pdispparams, UINT position,
            VARTYPE vtTarg, VARIANT * pvarResult, UINT * puArgErr);



extern "C" __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);



extern "C" __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);



extern "C" __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern "C" __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG_PTR oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT  cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);










extern "C" __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const IID & rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern "C" __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall GetActiveObject(const IID & rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern "C" __declspec(dllimport) HRESULT __stdcall SetErrorInfo(ULONG dwReserved, IErrorInfo * perrinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall GetErrorInfo(ULONG dwReserved, IErrorInfo ** pperrinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateErrorInfo(ICreateErrorInfo ** pperrinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,
            IRecordInfo ** ppRecInfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromGuids(const GUID & rGuidTypeLib,
            ULONG uVerMajor, ULONG uVerMinor, LCID lcid,
            const GUID & rGuidTypeInfo, IRecordInfo ** ppRecInfo);





extern "C" __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern "C" __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);








#line 998 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"




#line 1003 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"











































#line 1047 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"
























#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 1072 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"
#line 1073 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"

#line 1075 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleauto.h"
#line 47 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"































































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"

 



typedef struct IOleAdviseHolder IOleAdviseHolder;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleCache IOleCache;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleCache2 IOleCache2;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleCacheControl IOleCacheControl;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IParseDisplayName IParseDisplayName;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleContainer IOleContainer;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleClientSite IOleClientSite;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleObject IOleObject;
#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleWindow IOleWindow;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleLink IOleLink;
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleItemContainer IOleItemContainer;
#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;
#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;
#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleInPlaceFrame IOleInPlaceFrame;
#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleInPlaceObject IOleInPlaceObject;
#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IOleInPlaceSite IOleInPlaceSite;
#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IContinue IContinue;
#line 145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IViewObject IViewObject;
#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IViewObject2 IViewObject2;
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IDropSource IDropSource;
#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IDropTarget IDropTarget;
#line 169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




typedef struct IEnumOLEVERB IEnumOLEVERB;
#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






extern "C"{
#line 183 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 








#pragma once
#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_s_ifspec;





 

typedef  IOleAdviseHolder *LPOLEADVISEHOLDER;


extern "C" const IID IID_IOleAdviseHolder;


    
    struct __declspec(uuid("00000111-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             IAdviseSink *pAdvise,
             DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA **ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnRename( 
             IMoniker *pmk) = 0;
        
        virtual HRESULT __stdcall SendOnSave( void) = 0;
        
        virtual HRESULT __stdcall SendOnClose( void) = 0;
        
    };
    




















































































#line 327 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleAdviseHolder_Advise_Proxy( 
    IOleAdviseHolder * This,
     IAdviseSink *pAdvise,
     DWORD *pdwConnection);


void __stdcall IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_Unadvise_Proxy( 
    IOleAdviseHolder * This,
     DWORD dwConnection);


void __stdcall IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_EnumAdvise_Proxy( 
    IOleAdviseHolder * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnRename_Proxy( 
    IOleAdviseHolder * This,
     IMoniker *pmk);


void __stdcall IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnSave_Proxy( 
    IOleAdviseHolder * This);


void __stdcall IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnClose_Proxy( 
    IOleAdviseHolder * This);


void __stdcall IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 403 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleCache *LPOLECACHE;


extern "C" const IID IID_IOleCache;


    
    struct __declspec(uuid("0000011e-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cache( 
             FORMATETC *pformatetc,
             DWORD advf,
             DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Uncache( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumCache( 
             IEnumSTATDATA **ppenumSTATDATA) = 0;
        
        virtual HRESULT __stdcall InitCache( 
             IDataObject *pDataObject) = 0;
        
        virtual HRESULT __stdcall SetData( 
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium,
             BOOL fRelease) = 0;
        
    };
    


















































































#line 526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleCache_Cache_Proxy( 
    IOleCache * This,
     FORMATETC *pformatetc,
     DWORD advf,
     DWORD *pdwConnection);


void __stdcall IOleCache_Cache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_Uncache_Proxy( 
    IOleCache * This,
     DWORD dwConnection);


void __stdcall IOleCache_Uncache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_EnumCache_Proxy( 
    IOleCache * This,
     IEnumSTATDATA **ppenumSTATDATA);


void __stdcall IOleCache_EnumCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_InitCache_Proxy( 
    IOleCache * This,
     IDataObject *pDataObject);


void __stdcall IOleCache_InitCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_SetData_Proxy( 
    IOleCache * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium,
     BOOL fRelease);


void __stdcall IOleCache_SetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 595 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleCache2 *LPOLECACHE2;



















typedef  
enum tagDISCARDCACHE
    {	DISCARDCACHE_SAVEIFDIRTY	= 0,
	DISCARDCACHE_NOSAVE	= 1
    } 	DISCARDCACHE;


extern "C" const IID IID_IOleCache2;


    
    struct __declspec(uuid("00000128-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache2 : public IOleCache
    {
    public:
        virtual  HRESULT __stdcall UpdateCache( 
             LPDATAOBJECT pDataObject,
             DWORD grfUpdf,
             LPVOID pReserved) = 0;
        
        virtual HRESULT __stdcall DiscardCache( 
             DWORD dwDiscardOptions) = 0;
        
    };
    



































































































#line 748 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



 HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy( 
    IOleCache2 * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache2_DiscardCache_Proxy( 
    IOleCache2 * This,
     DWORD dwDiscardOptions);


void __stdcall IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 779 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleCacheControl *LPOLECACHECONTROL;


extern "C" const IID IID_IOleCacheControl;


    
    struct __declspec(uuid("00000129-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnRun( 
            LPDATAOBJECT pDataObject) = 0;
        
        virtual HRESULT __stdcall OnStop( void) = 0;
        
    };
    
























































#line 862 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleCacheControl_OnRun_Proxy( 
    IOleCacheControl * This,
    LPDATAOBJECT pDataObject);


void __stdcall IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCacheControl_OnStop_Proxy( 
    IOleCacheControl * This);


void __stdcall IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 890 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IParseDisplayName *LPPARSEDISPLAYNAME;


extern "C" const IID IID_IParseDisplayName;


    
    struct __declspec(uuid("0000011a-0000-0000-C000-000000000046")) __declspec(novtable)
    IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName( 
             IBindCtx *pbc,
             LPOLESTR pszDisplayName,
             ULONG *pchEaten,
             IMoniker **ppmkOut) = 0;
        
    };
    





















































#line 971 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IParseDisplayName_ParseDisplayName_Proxy( 
    IParseDisplayName * This,
     IBindCtx *pbc,
     LPOLESTR pszDisplayName,
     ULONG *pchEaten,
     IMoniker **ppmkOut);


void __stdcall IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 991 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleContainer *LPOLECONTAINER;


extern "C" const IID IID_IOleContainer;


    
    struct __declspec(uuid("0000011b-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT __stdcall EnumObjects( 
             DWORD grfFlags,
             IEnumUnknown **ppenum) = 0;
        
        virtual HRESULT __stdcall LockContainer( 
             BOOL fLock) = 0;
        
    };
    





































































#line 1089 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleContainer_EnumObjects_Proxy( 
    IOleContainer * This,
     DWORD grfFlags,
     IEnumUnknown **ppenum);


void __stdcall IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleContainer_LockContainer_Proxy( 
    IOleContainer * This,
     BOOL fLock);


void __stdcall IOleContainer_LockContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1119 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleClientSite *LPOLECLIENTSITE;


extern "C" const IID IID_IOleClientSite;


    
    struct __declspec(uuid("00000118-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SaveObject( void) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall GetContainer( 
             IOleContainer **ppContainer) = 0;
        
        virtual HRESULT __stdcall ShowObject( void) = 0;
        
        virtual HRESULT __stdcall OnShowWindow( 
             BOOL fShow) = 0;
        
        virtual HRESULT __stdcall RequestNewObjectLayout( void) = 0;
        
    };
    




















































































#line 1242 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleClientSite_SaveObject_Proxy( 
    IOleClientSite * This);


void __stdcall IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetMoniker_Proxy( 
    IOleClientSite * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker **ppmk);


void __stdcall IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetContainer_Proxy( 
    IOleClientSite * This,
     IOleContainer **ppContainer);


void __stdcall IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_ShowObject_Proxy( 
    IOleClientSite * This);


void __stdcall IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_OnShowWindow_Proxy( 
    IOleClientSite * This,
     BOOL fShow);


void __stdcall IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_RequestNewObjectLayout_Proxy( 
    IOleClientSite * This);


void __stdcall IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1318 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleObject *LPOLEOBJECT;

typedef 
enum tagOLEGETMONIKER
    {	OLEGETMONIKER_ONLYIFTHERE	= 1,
	OLEGETMONIKER_FORCEASSIGN	= 2,
	OLEGETMONIKER_UNASSIGN	= 3,
	OLEGETMONIKER_TEMPFORUSER	= 4
    } 	OLEGETMONIKER;

typedef 
enum tagOLEWHICHMK
    {	OLEWHICHMK_CONTAINER	= 1,
	OLEWHICHMK_OBJREL	= 2,
	OLEWHICHMK_OBJFULL	= 3
    } 	OLEWHICHMK;

typedef 
enum tagUSERCLASSTYPE
    {	USERCLASSTYPE_FULL	= 1,
	USERCLASSTYPE_SHORT	= 2,
	USERCLASSTYPE_APPNAME	= 3
    } 	USERCLASSTYPE;

typedef 
enum tagOLEMISC
    {	OLEMISC_RECOMPOSEONRESIZE	= 0x1,
	OLEMISC_ONLYICONIC	= 0x2,
	OLEMISC_INSERTNOTREPLACE	= 0x4,
	OLEMISC_STATIC	= 0x8,
	OLEMISC_CANTLINKINSIDE	= 0x10,
	OLEMISC_CANLINKBYOLE1	= 0x20,
	OLEMISC_ISLINKOBJECT	= 0x40,
	OLEMISC_INSIDEOUT	= 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE	= 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 0x200,
	OLEMISC_INVISIBLEATRUNTIME	= 0x400,
	OLEMISC_ALWAYSRUN	= 0x800,
	OLEMISC_ACTSLIKEBUTTON	= 0x1000,
	OLEMISC_ACTSLIKELABEL	= 0x2000,
	OLEMISC_NOUIACTIVATE	= 0x4000,
	OLEMISC_ALIGNABLE	= 0x8000,
	OLEMISC_SIMPLEFRAME	= 0x10000,
	OLEMISC_SETCLIENTSITEFIRST	= 0x20000,
	OLEMISC_IMEMODE	= 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE	= 0x80000,
	OLEMISC_WANTSTOMENUMERGE	= 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO	= 0x200000
    } 	OLEMISC;

typedef 
enum tagOLECLOSE
    {	OLECLOSE_SAVEIFDIRTY	= 0,
	OLECLOSE_NOSAVE	= 1,
	OLECLOSE_PROMPTSAVE	= 2
    } 	OLECLOSE;


extern "C" const IID IID_IOleObject;


    
    struct __declspec(uuid("00000112-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetClientSite( 
             IOleClientSite *pClientSite) = 0;
        
        virtual HRESULT __stdcall GetClientSite( 
             IOleClientSite **ppClientSite) = 0;
        
        virtual HRESULT __stdcall SetHostNames( 
             LPCOLESTR szContainerApp,
             LPCOLESTR szContainerObj) = 0;
        
        virtual HRESULT __stdcall Close( 
             DWORD dwSaveOption) = 0;
        
        virtual HRESULT __stdcall SetMoniker( 
             DWORD dwWhichMoniker,
             IMoniker *pmk) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall InitFromData( 
             IDataObject *pDataObject,
             BOOL fCreation,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall GetClipboardData( 
             DWORD dwReserved,
             IDataObject **ppDataObject) = 0;
        
        virtual HRESULT __stdcall DoVerb( 
             LONG iVerb,
             LPMSG lpmsg,
             IOleClientSite *pActiveSite,
             LONG lindex,
             HWND hwndParent,
             LPCRECT lprcPosRect) = 0;
        
        virtual HRESULT __stdcall EnumVerbs( 
             IEnumOLEVERB **ppEnumOleVerb) = 0;
        
        virtual HRESULT __stdcall Update( void) = 0;
        
        virtual HRESULT __stdcall IsUpToDate( void) = 0;
        
        virtual HRESULT __stdcall GetUserClassID( 
             CLSID *pClsid) = 0;
        
        virtual HRESULT __stdcall GetUserType( 
             DWORD dwFormOfType,
             LPOLESTR *pszUserType) = 0;
        
        virtual HRESULT __stdcall SetExtent( 
             DWORD dwDrawAspect,
             SIZEL *psizel) = 0;
        
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
             SIZEL *psizel) = 0;
        
        virtual HRESULT __stdcall Advise( 
             IAdviseSink *pAdvSink,
             DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             IEnumSTATDATA **ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall GetMiscStatus( 
             DWORD dwAspect,
             DWORD *pdwStatus) = 0;
        
        virtual HRESULT __stdcall SetColorScheme( 
             LOGPALETTE *pLogpal) = 0;
        
    };
    













































































































































































































#line 1678 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleObject_SetClientSite_Proxy( 
    IOleObject * This,
     IOleClientSite *pClientSite);


void __stdcall IOleObject_SetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClientSite_Proxy( 
    IOleObject * This,
     IOleClientSite **ppClientSite);


void __stdcall IOleObject_GetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetHostNames_Proxy( 
    IOleObject * This,
     LPCOLESTR szContainerApp,
     LPCOLESTR szContainerObj);


void __stdcall IOleObject_SetHostNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Close_Proxy( 
    IOleObject * This,
     DWORD dwSaveOption);


void __stdcall IOleObject_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetMoniker_Proxy( 
    IOleObject * This,
     DWORD dwWhichMoniker,
     IMoniker *pmk);


void __stdcall IOleObject_SetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMoniker_Proxy( 
    IOleObject * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker **ppmk);


void __stdcall IOleObject_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_InitFromData_Proxy( 
    IOleObject * This,
     IDataObject *pDataObject,
     BOOL fCreation,
     DWORD dwReserved);


void __stdcall IOleObject_InitFromData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClipboardData_Proxy( 
    IOleObject * This,
     DWORD dwReserved,
     IDataObject **ppDataObject);


void __stdcall IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_DoVerb_Proxy( 
    IOleObject * This,
     LONG iVerb,
     LPMSG lpmsg,
     IOleClientSite *pActiveSite,
     LONG lindex,
     HWND hwndParent,
     LPCRECT lprcPosRect);


void __stdcall IOleObject_DoVerb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumVerbs_Proxy( 
    IOleObject * This,
     IEnumOLEVERB **ppEnumOleVerb);


void __stdcall IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Update_Proxy( 
    IOleObject * This);


void __stdcall IOleObject_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_IsUpToDate_Proxy( 
    IOleObject * This);


void __stdcall IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserClassID_Proxy( 
    IOleObject * This,
     CLSID *pClsid);


void __stdcall IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserType_Proxy( 
    IOleObject * This,
     DWORD dwFormOfType,
     LPOLESTR *pszUserType);


void __stdcall IOleObject_GetUserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetExtent_Proxy( 
    IOleObject * This,
     DWORD dwDrawAspect,
     SIZEL *psizel);


void __stdcall IOleObject_SetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetExtent_Proxy( 
    IOleObject * This,
     DWORD dwDrawAspect,
     SIZEL *psizel);


void __stdcall IOleObject_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Advise_Proxy( 
    IOleObject * This,
     IAdviseSink *pAdvSink,
     DWORD *pdwConnection);


void __stdcall IOleObject_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Unadvise_Proxy( 
    IOleObject * This,
     DWORD dwConnection);


void __stdcall IOleObject_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumAdvise_Proxy( 
    IOleObject * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMiscStatus_Proxy( 
    IOleObject * This,
     DWORD dwAspect,
     DWORD *pdwStatus);


void __stdcall IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetColorScheme_Proxy( 
    IOleObject * This,
     LOGPALETTE *pLogpal);


void __stdcall IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1950 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef 
enum tagOLERENDER
    {	OLERENDER_NONE	= 0,
	OLERENDER_DRAW	= 1,
	OLERENDER_FORMAT	= 2,
	OLERENDER_ASIS	= 3
    } 	OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } 	OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#line 1995 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"





 

typedef  IOleWindow *LPOLEWINDOW;


extern "C" const IID IID_IOleWindow;


    
    struct __declspec(uuid("00000114-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleWindow : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetWindow( 
             HWND *phwnd) = 0;
        
        virtual HRESULT __stdcall ContextSensitiveHelp( 
             BOOL fEnterMode) = 0;
        
    };
    

























































#line 2079 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



 HRESULT __stdcall IOleWindow_GetWindow_Proxy( 
    IOleWindow * This,
     HWND *phwnd);


void __stdcall IOleWindow_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleWindow_ContextSensitiveHelp_Proxy( 
    IOleWindow * This,
     BOOL fEnterMode);


void __stdcall IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2108 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleLink *LPOLELINK;

typedef 
enum tagOLEUPDATE
    {	OLEUPDATE_ALWAYS	= 1,
	OLEUPDATE_ONCALL	= 3
    } 	OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef 
enum tagOLELINKBIND
    {	OLELINKBIND_EVENIFCLASSDIFF	= 1
    } 	OLELINKBIND;


extern "C" const IID IID_IOleLink;


    
    struct __declspec(uuid("0000011d-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleLink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUpdateOptions( 
             DWORD dwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall GetUpdateOptions( 
             DWORD *pdwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall SetSourceMoniker( 
             IMoniker *pmk,
             const IID & rclsid) = 0;
        
        virtual HRESULT __stdcall GetSourceMoniker( 
             IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall SetSourceDisplayName( 
             LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall GetSourceDisplayName( 
             LPOLESTR *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall BindToSource( 
             DWORD bindflags,
             IBindCtx *pbc) = 0;
        
        virtual HRESULT __stdcall BindIfRunning( void) = 0;
        
        virtual HRESULT __stdcall GetBoundSource( 
             IUnknown **ppunk) = 0;
        
        virtual HRESULT __stdcall UnbindSource( void) = 0;
        
        virtual HRESULT __stdcall Update( 
             IBindCtx *pbc) = 0;
        
    };
    
























































































































#line 2298 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleLink_SetUpdateOptions_Proxy( 
    IOleLink * This,
     DWORD dwUpdateOpt);


void __stdcall IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetUpdateOptions_Proxy( 
    IOleLink * This,
     DWORD *pdwUpdateOpt);


void __stdcall IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceMoniker_Proxy( 
    IOleLink * This,
     IMoniker *pmk,
     const IID & rclsid);


void __stdcall IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceMoniker_Proxy( 
    IOleLink * This,
     IMoniker **ppmk);


void __stdcall IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceDisplayName_Proxy( 
    IOleLink * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceDisplayName_Proxy( 
    IOleLink * This,
     LPOLESTR *ppszDisplayName);


void __stdcall IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindToSource_Proxy( 
    IOleLink * This,
     DWORD bindflags,
     IBindCtx *pbc);


void __stdcall IOleLink_BindToSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindIfRunning_Proxy( 
    IOleLink * This);


void __stdcall IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetBoundSource_Proxy( 
    IOleLink * This,
     IUnknown **ppunk);


void __stdcall IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_UnbindSource_Proxy( 
    IOleLink * This);


void __stdcall IOleLink_UnbindSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_Update_Proxy( 
    IOleLink * This,
     IBindCtx *pbc);


void __stdcall IOleLink_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2435 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleItemContainer *LPOLEITEMCONTAINER;

typedef 
enum tagBINDSPEED
    {	BINDSPEED_INDEFINITE	= 1,
	BINDSPEED_MODERATE	= 2,
	BINDSPEED_IMMEDIATE	= 3
    } 	BINDSPEED;

typedef  
enum tagOLECONTF
    {	OLECONTF_EMBEDDINGS	= 1,
	OLECONTF_LINKS	= 2,
	OLECONTF_OTHERS	= 4,
	OLECONTF_ONLYUSER	= 8,
	OLECONTF_ONLYIFRUNNING	= 16
    } 	OLECONTF;


extern "C" const IID IID_IOleItemContainer;


    
    struct __declspec(uuid("0000011c-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleItemContainer : public IOleContainer
    {
    public:
        virtual HRESULT __stdcall GetObjectA( 
             LPOLESTR pszItem,
             DWORD dwSpeedNeeded,
             IBindCtx *pbc,
             const IID & riid,
             void **ppvObject) = 0;
        
        virtual HRESULT __stdcall GetObjectStorage( 
             LPOLESTR pszItem,
             IBindCtx *pbc,
             const IID & riid,
             void **ppvStorage) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
             LPOLESTR pszItem) = 0;
        
    };
    


































































































#line 2587 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleItemContainer_GetObject_Proxy( 
    IOleItemContainer * This,
     LPOLESTR pszItem,
     DWORD dwSpeedNeeded,
     IBindCtx *pbc,
     const IID & riid,
     void **ppvObject);


void __stdcall IOleItemContainer_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleItemContainer_GetObjectStorage_Proxy( 
    IOleItemContainer * This,
     LPOLESTR pszItem,
     IBindCtx *pbc,
     const IID & riid,
     void **ppvStorage);


void __stdcall IOleItemContainer_GetObjectStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleItemContainer_IsRunning_Proxy( 
    IOleItemContainer * This,
     LPOLESTR pszItem);


void __stdcall IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2635 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern "C" const IID IID_IOleInPlaceUIWindow;


    
    struct __declspec(uuid("00000115-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall GetBorder( 
             LPRECT lprectBorder) = 0;
        
        virtual  HRESULT __stdcall RequestBorderSpace( 
             LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual  HRESULT __stdcall SetBorderSpace( 
             LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual HRESULT __stdcall SetActiveObject( 
             IOleInPlaceActiveObject *pActiveObject,
             LPCOLESTR pszObjName) = 0;
        
    };
    























































































#line 2763 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



 HRESULT __stdcall IOleInPlaceUIWindow_GetBorder_Proxy( 
    IOleInPlaceUIWindow * This,
     LPRECT lprectBorder);


void __stdcall IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Proxy( 
    IOleInPlaceUIWindow * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_SetBorderSpace_Proxy( 
    IOleInPlaceUIWindow * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceUIWindow_SetActiveObject_Proxy( 
    IOleInPlaceUIWindow * This,
     IOleInPlaceActiveObject *pActiveObject,
     LPCOLESTR pszObjName);


void __stdcall IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2817 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern "C" const IID IID_IOleInPlaceActiveObject;


    
    struct __declspec(uuid("00000117-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall TranslateAcceleratorA( 
             LPMSG lpmsg) = 0;
        
        virtual  HRESULT __stdcall OnFrameWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall OnDocWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall ResizeBorder( 
             LPCRECT prcBorder,
             IOleInPlaceUIWindow *pUIWindow,
             BOOL fFrameWindow) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
    };
    































































































#line 2951 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



 HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy( 
    IOleInPlaceActiveObject * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Proxy( 
    IOleInPlaceActiveObject * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy( 
    IOleInPlaceActiveObject * This,
     LPCRECT prcBorder,
     const IID & riid,
     IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceActiveObject_EnableModeless_Proxy( 
    IOleInPlaceActiveObject * This,
     BOOL fEnable);


void __stdcall IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3018 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } 	OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } 	OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern "C" const IID IID_IOleInPlaceFrame;


    
    struct __declspec(uuid("00000116-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenus( 
             HMENU hmenuShared,
             LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;
        
        virtual  HRESULT __stdcall SetMenu( 
             HMENU hmenuShared,
             HOLEMENU holemenu,
             HWND hwndActiveObject) = 0;
        
        virtual HRESULT __stdcall RemoveMenus( 
             HMENU hmenuShared) = 0;
        
        virtual  HRESULT __stdcall SetStatusText( 
             LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             LPMSG lpmsg,
             WORD wID) = 0;
        
    };
    






































































































































#line 3216 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleInPlaceFrame_InsertMenus_Proxy( 
    IOleInPlaceFrame * This,
     HMENU hmenuShared,
     LPOLEMENUGROUPWIDTHS lpMenuWidths);


void __stdcall IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetMenu_Proxy( 
    IOleInPlaceFrame * This,
     HMENU hmenuShared,
     HOLEMENU holemenu,
     HWND hwndActiveObject);


void __stdcall IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_RemoveMenus_Proxy( 
    IOleInPlaceFrame * This,
     HMENU hmenuShared);


void __stdcall IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetStatusText_Proxy( 
    IOleInPlaceFrame * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_EnableModeless_Proxy( 
    IOleInPlaceFrame * This,
     BOOL fEnable);


void __stdcall IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_TranslateAccelerator_Proxy( 
    IOleInPlaceFrame * This,
     LPMSG lpmsg,
     WORD wID);


void __stdcall IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3297 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern "C" const IID IID_IOleInPlaceObject;


    
    struct __declspec(uuid("00000113-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall UIDeactivate( void) = 0;
        
        virtual  HRESULT __stdcall SetObjectRects( 
             LPCRECT lprcPosRect,
             LPCRECT lprcClipRect) = 0;
        
        virtual HRESULT __stdcall ReactivateAndUndo( void) = 0;
        
    };
    




















































































#line 3413 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleInPlaceObject_InPlaceDeactivate_Proxy( 
    IOleInPlaceObject * This);


void __stdcall IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_UIDeactivate_Proxy( 
    IOleInPlaceObject * This);


void __stdcall IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceObject_SetObjectRects_Proxy( 
    IOleInPlaceObject * This,
     LPCRECT lprcPosRect,
     LPCRECT lprcClipRect);


void __stdcall IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_ReactivateAndUndo_Proxy( 
    IOleInPlaceObject * This);


void __stdcall IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3464 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IOleInPlaceSite *LPOLEINPLACESITE;


extern "C" const IID IID_IOleInPlaceSite;


    
    struct __declspec(uuid("00000119-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall CanInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnUIActivate( void) = 0;
        
        virtual HRESULT __stdcall GetWindowContext( 
             IOleInPlaceFrame **ppFrame,
             IOleInPlaceUIWindow **ppDoc,
             LPRECT lprcPosRect,
             LPRECT lprcClipRect,
             LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;
        
        virtual HRESULT __stdcall Scroll( 
             SIZE scrollExtant) = 0;
        
        virtual HRESULT __stdcall OnUIDeactivate( 
             BOOL fUndoable) = 0;
        
        virtual HRESULT __stdcall OnInPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall DiscardUndoState( void) = 0;
        
        virtual HRESULT __stdcall DeactivateAndUndo( void) = 0;
        
        virtual HRESULT __stdcall OnPosRectChange( 
             LPCRECT lprcPosRect) = 0;
        
    };
    






























































































































#line 3640 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IOleInPlaceSite_CanInPlaceActivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceActivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIActivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_GetWindowContext_Proxy( 
    IOleInPlaceSite * This,
     IOleInPlaceFrame **ppFrame,
     IOleInPlaceUIWindow **ppDoc,
     LPRECT lprcPosRect,
     LPRECT lprcClipRect,
     LPOLEINPLACEFRAMEINFO lpFrameInfo);


void __stdcall IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_Scroll_Proxy( 
    IOleInPlaceSite * This,
     SIZE scrollExtant);


void __stdcall IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIDeactivate_Proxy( 
    IOleInPlaceSite * This,
     BOOL fUndoable);


void __stdcall IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DiscardUndoState_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DeactivateAndUndo_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnPosRectChange_Proxy( 
    IOleInPlaceSite * This,
     LPCRECT lprcPosRect);


void __stdcall IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3763 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 


extern "C" const IID IID_IContinue;


    
    struct __declspec(uuid("0000012a-0000-0000-C000-000000000046")) __declspec(novtable)
    IContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;
        
    };
    

















































#line 3834 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IContinue_FContinue_Proxy( 
    IContinue * This);


void __stdcall IContinue_FContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3850 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IViewObject *LPVIEWOBJECT;


extern "C" const IID IID_IViewObject;


    
    struct __declspec(uuid("0000010d-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Draw( 
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hdcTargetDev,
             HDC hdcDraw,
             LPCRECTL lprcBounds,
             LPCRECTL lprcWBounds,
             BOOL ( __stdcall *pfnContinue )( 
                ULONG_PTR dwContinue),
             ULONG_PTR dwContinue) = 0;
        
        virtual  HRESULT __stdcall GetColorSet( 
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hicTargetDev,
             LOGPALETTE **ppColorSet) = 0;
        
        virtual  HRESULT __stdcall Freeze( 
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DWORD *pdwFreeze) = 0;
        
        virtual HRESULT __stdcall Unfreeze( 
             DWORD dwFreeze) = 0;
        
        virtual HRESULT __stdcall SetAdvise( 
             DWORD aspects,
             DWORD advf,
             IAdviseSink *pAdvSink) = 0;
        
        virtual  HRESULT __stdcall GetAdvise( 
             DWORD *pAspects,
             DWORD *pAdvf,
             IAdviseSink **ppAdvSink) = 0;
        
    };
    











































































































#line 4019 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



 HRESULT __stdcall IViewObject_RemoteDraw_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hdcTargetDev,
     ULONG_PTR hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
     LOGPALETTE **ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteFreeze_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DWORD *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_Unfreeze_Proxy( 
    IViewObject * This,
     DWORD dwFreeze);


void __stdcall IViewObject_Unfreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_SetAdvise_Proxy( 
    IViewObject * This,
     DWORD aspects,
     DWORD advf,
     IAdviseSink *pAdvSink);


void __stdcall IViewObject_SetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy( 
    IViewObject * This,
     DWORD *pAspects,
     DWORD *pAdvf,
     IAdviseSink **ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4116 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IViewObject2 *LPVIEWOBJECT2;


extern "C" const IID IID_IViewObject2;


    
    struct __declspec(uuid("00000127-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
             LONG lindex,
             DVTARGETDEVICE *ptd,
             LPSIZEL lpsizel) = 0;
        
    };
    






















































































































#line 4262 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IViewObject2_GetExtent_Proxy( 
    IViewObject2 * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DVTARGETDEVICE *ptd,
     LPSIZEL lpsizel);


void __stdcall IViewObject2_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4282 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IDropSource *LPDROPSOURCE;


extern "C" const IID IID_IDropSource;


    
    struct __declspec(uuid("00000121-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSource : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinueDrag( 
             BOOL fEscapePressed,
             DWORD grfKeyState) = 0;
        
        virtual HRESULT __stdcall GiveFeedback( 
             DWORD dwEffect) = 0;
        
    };
    


























































#line 4369 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IDropSource_QueryContinueDrag_Proxy( 
    IDropSource * This,
     BOOL fEscapePressed,
     DWORD grfKeyState);


void __stdcall IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropSource_GiveFeedback_Proxy( 
    IDropSource * This,
     DWORD dwEffect);


void __stdcall IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4399 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IDropTarget *LPDROPTARGET;


































extern "C" const IID IID_IDropTarget;


    
    struct __declspec(uuid("00000122-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnter( 
             IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragOver( 
             DWORD grfKeyState,
             POINTL pt,
             DWORD *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragLeave( void) = 0;
        
        virtual HRESULT __stdcall Drop( 
             IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD *pdwEffect) = 0;
        
    };
    














































































#line 4550 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



HRESULT __stdcall IDropTarget_DragEnter_Proxy( 
    IDropTarget * This,
     IDataObject *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD *pdwEffect);


void __stdcall IDropTarget_DragEnter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragOver_Proxy( 
    IDropTarget * This,
     DWORD grfKeyState,
     POINTL pt,
     DWORD *pdwEffect);


void __stdcall IDropTarget_DragOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragLeave_Proxy( 
    IDropTarget * This);


void __stdcall IDropTarget_DragLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_Drop_Proxy( 
    IDropTarget * This,
     IDataObject *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD *pdwEffect);


void __stdcall IDropTarget_Drop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4610 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"






 

typedef  IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } 	OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef  
enum tagOLEVERBATTRIB
    {	OLEVERBATTRIB_NEVERDIRTIES	= 1,
	OLEVERBATTRIB_ONCONTAINERMENU	= 2
    } 	OLEVERBATTRIB;


extern "C" const IID IID_IEnumOLEVERB;


    
    struct __declspec(uuid("00000104-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumOLEVERB : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             LPOLEVERB rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumOLEVERB **ppenum) = 0;
        
    };
    








































































#line 4733 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"



 HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy( 
    IEnumOLEVERB * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Skip_Proxy( 
    IEnumOLEVERB * This,
     ULONG celt);


void __stdcall IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Reset_Proxy( 
    IEnumOLEVERB * This);


void __stdcall IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Clone_Proxy( 
    IEnumOLEVERB * This,
     IEnumOLEVERB **ppenum);


void __stdcall IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4787 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"




unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long *, unsigned long            , CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long *, unsigned char *, CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long *, CLIPFORMAT * ); 

unsigned long             __stdcall  HACCEL_UserSize(     unsigned long *, unsigned long            , HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserMarshal(  unsigned long *, unsigned char *, HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL * ); 
void                      __stdcall  HACCEL_UserFree(     unsigned long *, HACCEL * ); 

unsigned long             __stdcall  HGLOBAL_UserSize(     unsigned long *, unsigned long            , HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserMarshal(  unsigned long *, unsigned char *, HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL * ); 
void                      __stdcall  HGLOBAL_UserFree(     unsigned long *, HGLOBAL * ); 

unsigned long             __stdcall  HMENU_UserSize(     unsigned long *, unsigned long            , HMENU * ); 
unsigned char * __stdcall  HMENU_UserMarshal(  unsigned long *, unsigned char *, HMENU * ); 
unsigned char * __stdcall  HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU * ); 
void                      __stdcall  HMENU_UserFree(     unsigned long *, HMENU * ); 

unsigned long             __stdcall  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __stdcall  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long *, unsigned long            , STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long *, STGMEDIUM * ); 

 HRESULT __stdcall IOleCache2_UpdateCache_Proxy( 
    IOleCache2 * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LPVOID pReserved);


 HRESULT __stdcall IOleCache2_UpdateCache_Stub( 
    IOleCache2 * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);

 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject * This,
     LPMSG lpmsg);


 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub( 
    IOleInPlaceActiveObject * This);

 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy( 
    IOleInPlaceActiveObject * This,
     LPCRECT prcBorder,
     IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);


 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub( 
    IOleInPlaceActiveObject * This,
     LPCRECT prcBorder,
     const IID & riid,
     IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);

 HRESULT __stdcall IViewObject_Draw_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DVTARGETDEVICE *ptd,
     HDC hdcTargetDev,
     HDC hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     BOOL ( __stdcall *pfnContinue )( 
        ULONG_PTR dwContinue),
     ULONG_PTR dwContinue);


 HRESULT __stdcall IViewObject_Draw_Stub( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hdcTargetDev,
     ULONG_PTR hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue *pContinue);

 HRESULT __stdcall IViewObject_GetColorSet_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DVTARGETDEVICE *ptd,
     HDC hicTargetDev,
     LOGPALETTE **ppColorSet);


 HRESULT __stdcall IViewObject_GetColorSet_Stub( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
     LOGPALETTE **ppColorSet);

 HRESULT __stdcall IViewObject_Freeze_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DWORD *pdwFreeze);


 HRESULT __stdcall IViewObject_Freeze_Stub( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DWORD *pdwFreeze);

 HRESULT __stdcall IViewObject_GetAdvise_Proxy( 
    IViewObject * This,
     DWORD *pAspects,
     DWORD *pAdvf,
     IAdviseSink **ppAdvSink);


 HRESULT __stdcall IViewObject_GetAdvise_Stub( 
    IViewObject * This,
     DWORD *pAspects,
     DWORD *pAdvf,
     IAdviseSink **ppAdvSink);

 HRESULT __stdcall IEnumOLEVERB_Next_Proxy( 
    IEnumOLEVERB * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumOLEVERB_Next_Stub( 
    IEnumOLEVERB * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG *pceltFetched);






}
#line 4950 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"

#line 4952 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\oleidl.h"


#line 111 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"


















extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);









extern "C" __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );


extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStg( LPSTORAGE pStg,  CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStg( LPSTORAGE pStg,  const IID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStm( LPSTREAM pStm,  CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStm( LPSTREAM pStm,  const IID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg ( LPSTORAGE pstg,  CLIPFORMAT cf,  LPOLESTR lpszUserType);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg ( LPSTORAGE pstg,  CLIPFORMAT * pcf,  LPOLESTR * lplpszUserType);




extern "C" __declspec(dllimport) HRESULT __stdcall OleInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall OleUninitialize(void);





extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject);




extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreate( const IID & rclsid,  const IID & riid,  DWORD renderopt,
                 LPFORMATETC pFormatEtc,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateEx( const IID & rclsid,  const IID & riid,  DWORD dwFlags,
                 DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                 DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromData( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                 DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                  DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj,  const IID & iid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLink( LPMONIKER pmkLinkSrc,  const IID & riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkEx( LPMONIKER pmkLinkSrc,  const IID & riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFile( LPCOLESTR lpszFileName,  const IID & riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFileEx( LPCOLESTR lpszFileName,  const IID & riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFile( const IID & rclsid,  LPCOLESTR lpszFileName,  const IID & riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFileEx( const IID & rclsid,  LPCOLESTR lpszFileName,  const IID & riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoad( LPSTORAGE pStg,  const IID & riid,  LPOLECLIENTSITE pClientSite,
             LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleSave( LPPERSISTSTORAGE pPS,  LPSTORAGE pStg,  BOOL fSameAsLoad);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoadFromStream(  LPSTREAM pStm,  const IID & iidInterface,  LPVOID * ppvObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleSaveToStream(  LPPERSISTSTREAM pPStm,  LPSTREAM pStm );


extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetContainedObject( LPUNKNOWN pUnknown,  BOOL fContained);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleNoteObjectVisible( LPUNKNOWN pUnknown,  BOOL fVisible);




extern "C" __declspec(dllimport) HRESULT __stdcall  RegisterDragDrop( HWND hwnd,  LPDROPTARGET pDropTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall  RevokeDragDrop( HWND hwnd);
extern "C" __declspec(dllimport) HRESULT __stdcall  DoDragDrop( LPDATAOBJECT pDataObj,  LPDROPSOURCE pDropSource,
             DWORD dwOKEffects,  LPDWORD pdwEffect);



extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetClipboard( LPDATAOBJECT pDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleGetClipboard( LPDATAOBJECT * ppDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleFlushClipboard(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleIsCurrentClipboard( LPDATAOBJECT pDataObj);




extern "C" __declspec(dllimport) HOLEMENU __stdcall   OleCreateMenuDescriptor ( HMENU hmenuCombined,
                                 LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleSetMenuDescriptor ( HOLEMENU holemenu,  HWND hwndFrame,
                                 HWND hwndActiveObject,
                                 LPOLEINPLACEFRAME lpFrame,
                                 LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleDestroyMenuDescriptor ( HOLEMENU holemenu);

extern "C" __declspec(dllimport) HRESULT __stdcall              OleTranslateAccelerator ( LPOLEINPLACEFRAME lpFrame,
                             LPOLEINPLACEFRAMEINFO lpFrameInfo,  LPMSG lpmsg);



extern "C" __declspec(dllimport) HANDLE __stdcall OleDuplicateData ( HANDLE hSrc,  CLIPFORMAT cfFormat,
                         UINT uiFlags);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleDraw ( LPUNKNOWN pUnknown,  DWORD dwAspect,  HDC hdcDraw,
                     LPCRECT lprcBounds);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleRun( LPUNKNOWN pUnknown);
extern "C" __declspec(dllimport) BOOL __stdcall   OleIsRunning( LPOLEOBJECT pObject);
extern "C" __declspec(dllimport) HRESULT __stdcall          OleLockRunning( LPUNKNOWN pUnknown,  BOOL fLock,  BOOL fLastUnlockCloses);
extern "C" __declspec(dllimport) void __stdcall   ReleaseStgMedium( LPSTGMEDIUM);
extern "C" __declspec(dllimport) HRESULT __stdcall          CreateOleAdviseHolder( LPOLEADVISEHOLDER * ppOAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateDefaultHandler( const IID & clsid,  LPUNKNOWN pUnkOuter,
                     const IID & riid,  LPVOID * lplpObj);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateEmbeddingHelper( const IID & clsid,  LPUNKNOWN pUnkOuter,
                     DWORD flags,  LPCLASSFACTORY pCF,
                     const IID & riid,  LPVOID * lplpObj);

extern "C" __declspec(dllimport) BOOL __stdcall   IsAccelerator( HACCEL hAccel,  int cAccelEntries,  LPMSG lpMsg,
                                         WORD * lpwCmd);


extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile( LPOLESTR lpszPath,  BOOL fUseFileAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass( const IID & rclsid,      LPOLESTR lpszLabel,
                                         BOOL fUseTypeAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel( HICON hIcon,  LPOLESTR lpszLabel,
                                         LPOLESTR lpszSourceFile,  UINT iIconIndex);





extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetUserType ( const IID & clsid,  DWORD dwFormOfType,
                                         LPOLESTR * pszUserType);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetMiscStatus     ( const IID & clsid,  DWORD dwAspect,
                                         DWORD * pdwStatus);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegEnumFormatEtc     ( const IID & clsid,  DWORD dwDirection,
                                         LPENUMFORMATETC * ppenum);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegEnumVerbs ( const IID & clsid,  LPENUMOLEVERB * ppenum);


























typedef struct _OLESTREAM *  LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL *  LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    ( LPOLESTREAM                lpolestream,
     LPSTORAGE                   pstg,
     const DVTARGETDEVICE *   ptd);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    ( LPSTORAGE      pstg,
     LPOLESTREAM     lpolestream);



extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromILockBytes ( LPLOCKBYTES plkbyt,  HGLOBAL * phglobal);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateILockBytesOnHGlobal ( HGLOBAL hGlobal,  BOOL fDeleteOnRelease,
                                     LPLOCKBYTES * pplkbyt);

extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromStream ( LPSTREAM pstm,  HGLOBAL * phglobal);
extern "C" __declspec(dllimport) HRESULT __stdcall CreateStreamOnHGlobal ( HGLOBAL hGlobal,  BOOL fDeleteOnRelease,
                                 LPSTREAM * ppstm);




extern "C" __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert( LPSTORAGE pStg,  LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert( const IID & clsidOld,  LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert( const IID & clsidOld,  const IID & clsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall GetConvertStg( LPSTORAGE pStg);
extern "C" __declspec(dllimport) HRESULT __stdcall SetConvertStg( LPSTORAGE pStg,  BOOL fConvert);


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    ( LPSTORAGE          pstg,
                                    
      CLIPFORMAT         cfFormat,   
      LONG               lWidth,     
      LONG               lHeight,    
      DWORD              dwSize,     
      LPSTGMEDIUM        pmedium,    
      LPOLESTREAM        polestm);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    ( LPOLESTREAM        polestm,
      LPSTORAGE          pstg,
                                    
      CLIPFORMAT *    pcfFormat,  
      LONG *          plwWidth,   
      LONG *          plHeight,   
      DWORD *         pdwSize,    
      LPSTGMEDIUM        pmedium);   



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 414 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"
#line 415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"











#line 427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"

#line 429 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ole2.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"
#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\unknwn.h"



































































































































































































































































































































































































































































































































































































#line 383 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"











#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"
























































#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"








#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\guiddef.h"











































































































































#line 395 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\cguid.h"













#pragma once
#line 16 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\cguid.h"


extern "C" {
#line 20 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\cguid.h"

extern const IID GUID_NULL;
extern const IID CATID_MARSHALER;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;
extern const CLSID CLSID_AddrControl;










extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;

extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;

extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;


}
#line 131 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\cguid.h"


#line 134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\cguid.h"
#line 398 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 399 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"


typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED  = 0x2,      


  
  COINIT_MULTITHREADED      = 0x0,      
  COINIT_DISABLE_OLE1DDE    = 0x4,      
  COINIT_SPEED_OVER_MEMORY  = 0x8,      
#line 411 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
} COINIT;







extern "C" __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



extern "C" __declspec(dllimport) HRESULT __stdcall  CoInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall  CoUninitialize(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetMalloc( DWORD dwMemContext,  LPMALLOC * ppMalloc);
extern "C" __declspec(dllimport) DWORD __stdcall CoGetCurrentProcess(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeMallocSpy(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoCreateStandardMalloc( DWORD memctx,  IMalloc * * ppMalloc);


extern "C" __declspec(dllimport) HRESULT __stdcall  CoInitializeEx( LPVOID pvReserved,  DWORD dwCoInit);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetCallerTID( LPDWORD lpdwTID );
#line 435 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"




#line 440 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall     CoGetObjectContext( const IID & riid,  LPVOID * ppv);



extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetClassObject( const IID & rclsid,  DWORD dwClsContext,  LPVOID pvReserved,
                     const IID & riid,  LPVOID * ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterClassObject( const IID & rclsid,  LPUNKNOWN pUnk,
                     DWORD dwClsContext,  DWORD flags,  LPDWORD lpdwRegister);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeClassObject( DWORD dwRegister);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoResumeClassObjects(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoSuspendClassObjects(void);
extern "C" __declspec(dllimport) ULONG __stdcall CoAddRefServerProcess(void);
extern "C" __declspec(dllimport) ULONG __stdcall CoReleaseServerProcess(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetPSClsid( const IID & riid,  CLSID *pClsid);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterPSClsid( const IID & riid,  const IID & rclsid);


extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterSurrogate( LPSURROGATE pSurrogate);



extern "C" __declspec(dllimport) HRESULT __stdcall CoGetMarshalSizeMax( ULONG *pulSize,  const IID & riid,  LPUNKNOWN pUnk,
                     DWORD dwDestContext,  LPVOID pvDestContext,  DWORD mshlflags);
extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalInterface( LPSTREAM pStm,  const IID & riid,  LPUNKNOWN pUnk,
                     DWORD dwDestContext,  LPVOID pvDestContext,  DWORD mshlflags);
extern "C" __declspec(dllimport) HRESULT __stdcall CoUnmarshalInterface( LPSTREAM pStm,  const IID & riid,  LPVOID * ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalHresult( LPSTREAM pstm,  HRESULT hresult);
extern "C" __declspec(dllimport) HRESULT __stdcall CoUnmarshalHresult( LPSTREAM pstm,  HRESULT  * phresult);
extern "C" __declspec(dllimport) HRESULT __stdcall CoReleaseMarshalData( LPSTREAM pStm);
extern "C" __declspec(dllimport) HRESULT __stdcall CoDisconnectObject( LPUNKNOWN pUnk,  DWORD dwReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall CoLockObjectExternal( LPUNKNOWN pUnk,  BOOL fLock,  BOOL fLastUnlockReleases);
extern "C" __declspec(dllimport) HRESULT __stdcall CoGetStandardMarshal( const IID & riid,  LPUNKNOWN pUnk,
                     DWORD dwDestContext,  LPVOID pvDestContext,  DWORD mshlflags,
                     LPMARSHAL * ppMarshal);


extern "C" __declspec(dllimport) HRESULT __stdcall CoGetStdMarshalEx( LPUNKNOWN pUnkOuter,  DWORD smexflags,
                             LPUNKNOWN * ppUnkInner);


typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER     = 0x01,       
    SMEXF_HANDLER    = 0x02        
} STDMSHLFLAGS;


extern "C" __declspec(dllimport) BOOL __stdcall CoIsHandlerConnected( LPUNKNOWN pUnk);


extern "C" __declspec(dllimport) HRESULT __stdcall CoMarshalInterThreadInterfaceInStream( const IID & riid,  LPUNKNOWN pUnk,
                     LPSTREAM *ppStm);

extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInterfaceAndReleaseStream( LPSTREAM pStm,  const IID & iid,
                     LPVOID * ppv);

extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateFreeThreadedMarshaler( LPUNKNOWN  punkOuter,
                     LPUNKNOWN *ppunkMarshal);



extern "C" __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary( LPOLESTR lpszLibName,  BOOL bAutoFree);
extern "C" __declspec(dllimport) void __stdcall CoFreeLibrary( HINSTANCE hInst);
extern "C" __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);
extern "C" __declspec(dllimport) void __stdcall CoFreeUnusedLibraries(void);


#line 511 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"





extern "C" __declspec(dllimport) HRESULT __stdcall CoInitializeSecurity(
                     PSECURITY_DESCRIPTOR         pSecDesc,
                     LONG                         cAuthSvc,
                     SOLE_AUTHENTICATION_SERVICE *asAuthSvc,
                     void                        *pReserved1,
                     DWORD                        dwAuthnLevel,
                     DWORD                        dwImpLevel,
                     void                        *pAuthList,
                     DWORD                        dwCapabilities,
                     void                        *pReserved3 );
extern "C" __declspec(dllimport) HRESULT __stdcall CoGetCallContext(  const IID & riid,  void **ppInterface );
extern "C" __declspec(dllimport) HRESULT __stdcall CoQueryProxyBlanket(
      IUnknown                  *pProxy,
     DWORD                     *pwAuthnSvc,
     DWORD                     *pAuthzSvc,
     OLECHAR                  **pServerPrincName,
     DWORD                     *pAuthnLevel,
     DWORD                     *pImpLevel,
     RPC_AUTH_IDENTITY_HANDLE  *pAuthInfo,
     DWORD                     *pCapabilites );
extern "C" __declspec(dllimport) HRESULT __stdcall CoSetProxyBlanket(
     IUnknown                 *pProxy,
     DWORD                     dwAuthnSvc,
     DWORD                     dwAuthzSvc,
     OLECHAR                  *pServerPrincName,
     DWORD                     dwAuthnLevel,
     DWORD                     dwImpLevel,
     RPC_AUTH_IDENTITY_HANDLE  pAuthInfo,
     DWORD                     dwCapabilities );
extern "C" __declspec(dllimport) HRESULT __stdcall CoCopyProxy(
      IUnknown    *pProxy,
     IUnknown   **ppCopy );
extern "C" __declspec(dllimport) HRESULT __stdcall CoQueryClientBlanket(
     DWORD             *pAuthnSvc,
     DWORD             *pAuthzSvc,
     OLECHAR          **pServerPrincName,
     DWORD             *pAuthnLevel,
     DWORD             *pImpLevel,
     RPC_AUTHZ_HANDLE  *pPrivs,
     DWORD             *pCapabilities );
extern "C" __declspec(dllimport) HRESULT __stdcall CoImpersonateClient();
extern "C" __declspec(dllimport) HRESULT __stdcall CoRevertToSelf();
extern "C" __declspec(dllimport) HRESULT __stdcall CoQueryAuthenticationServices(
     DWORD *pcAuthSvc,
     SOLE_AUTHENTICATION_SERVICE **asAuthSvc );
extern "C" __declspec(dllimport) HRESULT __stdcall CoSwitchCallContext(  IUnknown *pNewObject,  IUnknown **ppOldObject );




#line 567 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateInstance( const IID & rclsid,  LPUNKNOWN pUnkOuter,
                     DWORD dwClsContext,  const IID & riid,  LPVOID * ppv);




extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromFile(
     COSERVERINFO *              pServerInfo,
     CLSID       *               pClsid,
     IUnknown    *               punkOuter, 
     DWORD                       dwClsCtx,
     DWORD                       grfMode,
     OLECHAR *                   pwszName,
     DWORD                       dwCount,
      MULTI_QI    *           pResults );

extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromIStorage(
     COSERVERINFO *              pServerInfo,
     CLSID       *               pClsid,
     IUnknown    *               punkOuter, 
     DWORD                       dwClsCtx,
     struct IStorage *           pstg,
     DWORD                       dwCount,
      MULTI_QI    *           pResults );

extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateInstanceEx(
     const IID &                    Clsid,
     IUnknown    *               punkOuter, 
     DWORD                       dwClsCtx,
     COSERVERINFO *              pServerInfo,
     DWORD                       dwCount,
      MULTI_QI    *           pResults );

#line 604 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"















#line 620 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"



extern "C" __declspec(dllimport) HRESULT __stdcall StringFromCLSID( const IID & rclsid,  LPOLESTR * lplpsz);
extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromString( LPOLESTR lpsz,  LPCLSID pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall StringFromIID( const IID & rclsid,  LPOLESTR * lplpsz);
extern "C" __declspec(dllimport) HRESULT __stdcall IIDFromString( LPOLESTR lpsz,  LPIID lpiid);
extern "C" __declspec(dllimport) BOOL __stdcall CoIsOle1Class( const IID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ProgIDFromCLSID ( const IID & clsid,  LPOLESTR * lplpszProgID);
extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgID ( LPCOLESTR lpszProgID,  LPCLSID lpclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgIDEx ( LPCOLESTR lpszProgID,  LPCLSID lpclsid);
extern "C" __declspec(dllimport) int __stdcall StringFromGUID2( const GUID & rguid,  LPOLESTR lpsz,  int cchMax);

extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateGuid( GUID  *pguid);

extern "C" __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                  FILETIME * lpFileTime,  LPWORD lpDosDate,  LPWORD lpDosTime);
extern "C" __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                        WORD nDosDate,  WORD nDosTime,  FILETIME * lpFileTime);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoFileTimeNow(  FILETIME * lpFileTime );


extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter(  LPMESSAGEFILTER lpMessageFilter,
                                 LPMESSAGEFILTER * lplpMessageFilter );


extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterChannelHook(  const GUID & ExtensionUuid,  IChannelHook *pChannelHook );
#line 648 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"




extern "C" __declspec(dllimport) HRESULT __stdcall CoWaitForMultipleHandles ( DWORD dwFlags,
                                     DWORD dwTimeout,
                                     ULONG cHandles,
                                     LPHANDLE pHandles,
                                     LPDWORD  lpdwindex);



typedef enum tagCOWAIT_FLAGS
{
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2
}COWAIT_FLAGS;

#line 667 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"




extern "C" __declspec(dllimport) HRESULT __stdcall CoGetTreatAsClass( const IID & clsidOld,  LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall CoTreatAsClass( const IID & clsidOld,  const IID & clsidNew);










typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID &, const IID &, LPVOID *);





typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern "C" HRESULT __stdcall  DllGetClassObject( const IID & rclsid,  const IID & riid,  LPVOID * ppv);

extern "C" HRESULT __stdcall  DllCanUnloadNow(void);



extern "C" __declspec(dllimport) LPVOID __stdcall CoTaskMemAlloc( SIZE_T cb);
extern "C" __declspec(dllimport) LPVOID __stdcall CoTaskMemRealloc( LPVOID pv,  SIZE_T cb);
extern "C" __declspec(dllimport) void __stdcall   CoTaskMemFree( LPVOID pv);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataCache( LPUNKNOWN pUnkOuter,  const IID & rclsid,
                                         const IID & iid,  LPVOID * ppv);







extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfile( const OLECHAR * pwcsName,
             DWORD grfMode,
             DWORD reserved,
             IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfileOnILockBytes( ILockBytes  *plkbyt,
                     DWORD grfMode,
                     DWORD reserved,
                     IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorage( const OLECHAR * pwcsName,
                IStorage  *pstgPriority,
                DWORD grfMode,
                SNB snbExclude,
                DWORD reserved,
               IStorage  *  *ppstgOpen);
extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageOnILockBytes( ILockBytes  *plkbyt,
                    IStorage  *pstgPriority,
                    DWORD grfMode,
                    SNB snbExclude,
                    DWORD reserved,
                   IStorage  *  *ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageFile( const OLECHAR * pwcsName);
extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageILockBytes( ILockBytes * plkbyt);

extern "C" __declspec(dllimport) HRESULT __stdcall StgSetTimes( OLECHAR const * lpszName,
                    FILETIME const * pctime,
                    FILETIME const * patime,
                    FILETIME const * pmtime);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes(  IFillLockBytes *pflb,
               DWORD grfMode,
               DWORD asyncFlags,
              IStorage **ppstgOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes(  ILockBytes *pilb,
              IFillLockBytes **ppflb);

extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile( OLECHAR const *pwcsName,
              IFillLockBytes **ppflb);


extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile( OLECHAR const *pwcsDfName,
               DWORD grfMode,
               DWORD reserved,
              IStorage **ppstgOpen);




typedef struct tagSTGOPTIONS
{
    USHORT usVersion;            
    USHORT reserved;             
    ULONG ulSectorSize;          
    const WCHAR *pwcsTemplateFile;  
} STGOPTIONS;

extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateStorageEx ( const WCHAR* pwcsName,
              DWORD grfMode,
              DWORD stgfmt,              
              DWORD grfAttrs,             
              STGOPTIONS * pStgOptions,
              void * reserved,
              const IID & riid,
             void ** ppObjectOpen);

extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageEx ( const WCHAR* pwcsName,
              DWORD grfMode,
              DWORD stgfmt,              
              DWORD grfAttrs,             
              STGOPTIONS * pStgOptions,
              void * reserved,
              const IID & riid,
             void ** ppObjectOpen);






extern "C" __declspec(dllimport) HRESULT __stdcall  BindMoniker( LPMONIKER pmk,  DWORD grfOpt,  const IID & iidResult,  LPVOID * ppvResult);

extern "C" __declspec(dllimport) HRESULT __stdcall  CoInstall(
      IBindCtx     * pbc,
      DWORD          dwFlags,
      uCLSSPEC     * pClassSpec,
      QUERYCONTEXT * pQuery,
      LPWSTR         pszCodeBase);

extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetObject( LPCWSTR pszName,  BIND_OPTS *pBindOptions,  const IID & riid,  void **ppv);
extern "C" __declspec(dllimport) HRESULT __stdcall  MkParseDisplayName( LPBC pbc,  LPCOLESTR szUserName,
                 ULONG  * pchEaten,  LPMONIKER  * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerRelativePathTo( LPMONIKER pmkSrc,  LPMONIKER pmkDest,  LPMONIKER
                * ppmkRelPath,  BOOL dwReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerCommonPrefixWith( LPMONIKER pmkThis,  LPMONIKER pmkOther,
                 LPMONIKER * ppmkCommon);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateBindCtx( DWORD reserved,  LPBC * ppbc);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateGenericComposite( LPMONIKER pmkFirst,  LPMONIKER pmkRest,
     LPMONIKER * ppmkComposite);
extern "C" __declspec(dllimport) HRESULT __stdcall  GetClassFile ( LPCOLESTR szFilename,  CLSID * pclsid);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateClassMoniker( const IID & rclsid,  LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateFileMoniker( LPCOLESTR lpszPathName,  LPMONIKER * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  CreateItemMoniker( LPCOLESTR lpszDelim,  LPCOLESTR lpszItem,
     LPMONIKER * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateAntiMoniker( LPMONIKER * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreatePointerMoniker( LPUNKNOWN punk,  LPMONIKER * ppmk);
extern "C" __declspec(dllimport) HRESULT __stdcall  CreateObjrefMoniker( LPUNKNOWN punk,  LPMONIKER  * ppmk);

extern "C" __declspec(dllimport) HRESULT __stdcall  GetRunningObjectTable(  DWORD reserved,  LPRUNNINGOBJECTTABLE * pprot);

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"

 



typedef struct IPersistMoniker IPersistMoniker;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IMonikerProp IMonikerProp;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IBindProtocol IBindProtocol;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IBinding IBinding;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IBindStatusCallback IBindStatusCallback;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IAuthenticate IAuthenticate;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IHttpNegotiate IHttpNegotiate;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IHttpNegotiate2 IHttpNegotiate2;
#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IWindowForBindingUI IWindowForBindingUI;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct ICodeInstall ICodeInstall;
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IWinInetInfo IWinInetInfo;
#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IHttpSecurity IHttpSecurity;
#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IWinInetHttpInfo IWinInetHttpInfo;
#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IBindHost IBindHost;
#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternet IInternet;
#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetBindInfo IInternetBindInfo;
#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetProtocolRoot IInternetProtocolRoot;
#line 145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetProtocol IInternetProtocol;
#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetProtocolSink IInternetProtocolSink;
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;
#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetSession IInternetSession;
#line 169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetThreadSwitch IInternetThreadSwitch;
#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetPriority IInternetPriority;
#line 181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetProtocolInfo IInternetProtocolInfo;
#line 187 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;
#line 193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetSecurityManager IInternetSecurityManager;
#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IInternetZoneManager IInternetZoneManager;
#line 211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct ISoftDistExt ISoftDistExt;
#line 217 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct ICatalogFileInfo ICatalogFileInfo;
#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IDataFilter IDataFilter;
#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IEncodingFilterFactory IEncodingFilterFactory;
#line 235 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




typedef struct IWrappedProtocol IWrappedProtocol;
#line 241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"





#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"

 



typedef struct IServiceProvider IServiceProvider;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"






extern "C"{
#line 57 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 












#pragma comment(lib,"uuid.lib")







extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_s_ifspec;





 

typedef  IServiceProvider *LPSERVICEPROVIDER;


    extern "C" const IID IID_IServiceProvider;
    extern "C++"
    {
        struct __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) __declspec(novtable)
        IServiceProvider : public IUnknown
        {
        public:
            virtual  HRESULT __stdcall QueryService( 
                 const GUID & guidService,
                 const IID & riid,
                 void  * *ppvObject) = 0;
            
            template <class Q>
            HRESULT __stdcall QueryService(const GUID & guidService, Q** pp)
            {
                return QueryService(guidService, __uuidof(Q), (void **)pp);
            }
        };
    }

     HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy( 
        IServiceProvider  * This,
         const GUID & guidService,
         const IID & riid,
         IUnknown  * *ppvObject);

    void __stdcall IServiceProvider_RemoteQueryService_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

























































































#line 216 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"



 

#line 222 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"


extern RPC_IF_HANDLE __MIDL_itf_servprov_0088_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0088_v0_0_s_ifspec;



 HRESULT __stdcall IServiceProvider_QueryService_Proxy( 
    IServiceProvider * This,
     const GUID & guidService,
     const IID & riid,
     void **ppvObject);


 HRESULT __stdcall IServiceProvider_QueryService_Stub( 
    IServiceProvider * This,
     const GUID & guidService,
     const IID & riid,
     IUnknown **ppvObject);






}
#line 249 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"

#line 251 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\servprov.h"


#line 247 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

#pragma warning( disable: 4049 )  




 























#pragma once
#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

 



typedef struct IXMLDOMImplementation IXMLDOMImplementation;
#line 40 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMNode IXMLDOMNode;
#line 46 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
#line 52 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMDocument IXMLDOMDocument;
#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMNodeList IXMLDOMNodeList;
#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
#line 70 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;
#line 76 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMAttribute IXMLDOMAttribute;
#line 82 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMElement IXMLDOMElement;
#line 88 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMText IXMLDOMText;
#line 94 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMComment IXMLDOMComment;
#line 100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
#line 106 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;
#line 112 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;
#line 118 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMNotation IXMLDOMNotation;
#line 124 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMEntity IXMLDOMEntity;
#line 130 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;
#line 136 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDOMParseError IXMLDOMParseError;
#line 142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXTLRuntime IXTLRuntime;
#line 148 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
#line 154 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






typedef class DOMDocument DOMDocument;


#line 164 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

#line 166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






typedef class DOMFreeThreadedDocument DOMFreeThreadedDocument;


#line 176 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

#line 178 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLHttpRequest IXMLHttpRequest;
#line 184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






typedef class XMLHTTPRequest XMLHTTPRequest;


#line 194 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

#line 196 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDSOControl IXMLDSOControl;
#line 202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






typedef class XMLDSOControl XMLDSOControl;


#line 212 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

#line 214 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLElementCollection IXMLElementCollection;
#line 220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDocument IXMLDocument;
#line 226 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLDocument2 IXMLDocument2;
#line 232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLElement IXMLElement;
#line 238 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLElement2 IXMLElement2;
#line 244 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLAttribute IXMLAttribute;
#line 250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




typedef struct IXMLError IXMLError;
#line 256 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






typedef class XMLDocument XMLDocument;


#line 266 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

#line 268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"








extern "C"{
#line 278 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 







typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } 	XML_ERROR;



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;






 


























typedef  
enum tagDOMNodeType
    {	NODE_INVALID	= 0,
	NODE_ELEMENT	= NODE_INVALID + 1,
	NODE_ATTRIBUTE	= NODE_ELEMENT + 1,
	NODE_TEXT	= NODE_ATTRIBUTE + 1,
	NODE_CDATA_SECTION	= NODE_TEXT + 1,
	NODE_ENTITY_REFERENCE	= NODE_CDATA_SECTION + 1,
	NODE_ENTITY	= NODE_ENTITY_REFERENCE + 1,
	NODE_PROCESSING_INSTRUCTION	= NODE_ENTITY + 1,
	NODE_COMMENT	= NODE_PROCESSING_INSTRUCTION + 1,
	NODE_DOCUMENT	= NODE_COMMENT + 1,
	NODE_DOCUMENT_TYPE	= NODE_DOCUMENT + 1,
	NODE_DOCUMENT_FRAGMENT	= NODE_DOCUMENT_TYPE + 1,
	NODE_NOTATION	= NODE_DOCUMENT_FRAGMENT + 1
    } 	DOMNodeType;
















typedef  
enum tagXMLEMEM_TYPE
    {	XMLELEMTYPE_ELEMENT	= 0,
	XMLELEMTYPE_TEXT	= XMLELEMTYPE_ELEMENT + 1,
	XMLELEMTYPE_COMMENT	= XMLELEMTYPE_TEXT + 1,
	XMLELEMTYPE_DOCUMENT	= XMLELEMTYPE_COMMENT + 1,
	XMLELEMTYPE_DTD	= XMLELEMTYPE_DOCUMENT + 1,
	XMLELEMTYPE_PI	= XMLELEMTYPE_DTD + 1,
	XMLELEMTYPE_OTHER	= XMLELEMTYPE_PI + 1
    } 	XMLELEM_TYPE;


extern "C" const IID LIBID_MSXML;





 


extern "C" const IID IID_IXMLDOMImplementation;


    
    struct __declspec(uuid("2933BF8F-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMImplementation : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall hasFeature( 
             BSTR feature,
             BSTR version,
             VARIANT_BOOL *hasFeature) = 0;
        
    };
    






























































































#line 503 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMImplementation_hasFeature_Proxy( 
    IXMLDOMImplementation * This,
     BSTR feature,
     BSTR version,
     VARIANT_BOOL *hasFeature);


void __stdcall IXMLDOMImplementation_hasFeature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 522 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNode;


    
    struct __declspec(uuid("2933BF80-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNode : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_nodeName( 
             BSTR *name) = 0;
        
        virtual  HRESULT __stdcall get_nodeValue( 
             VARIANT *value) = 0;
        
        virtual  HRESULT __stdcall put_nodeValue( 
             VARIANT value) = 0;
        
        virtual  HRESULT __stdcall get_nodeType( 
             DOMNodeType *type) = 0;
        
        virtual  HRESULT __stdcall get_parentNode( 
             IXMLDOMNode **parent) = 0;
        
        virtual  HRESULT __stdcall get_childNodes( 
             IXMLDOMNodeList **childList) = 0;
        
        virtual  HRESULT __stdcall get_firstChild( 
             IXMLDOMNode **firstChild) = 0;
        
        virtual  HRESULT __stdcall get_lastChild( 
             IXMLDOMNode **lastChild) = 0;
        
        virtual  HRESULT __stdcall get_previousSibling( 
             IXMLDOMNode **previousSibling) = 0;
        
        virtual  HRESULT __stdcall get_nextSibling( 
             IXMLDOMNode **nextSibling) = 0;
        
        virtual  HRESULT __stdcall get_attributes( 
             IXMLDOMNamedNodeMap **attributeMap) = 0;
        
        virtual  HRESULT __stdcall insertBefore( 
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild) = 0;
        
        virtual  HRESULT __stdcall replaceChild( 
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild) = 0;
        
        virtual  HRESULT __stdcall removeChild( 
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild) = 0;
        
        virtual  HRESULT __stdcall appendChild( 
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild) = 0;
        
        virtual  HRESULT __stdcall hasChildNodes( 
             VARIANT_BOOL *hasChild) = 0;
        
        virtual  HRESULT __stdcall get_ownerDocument( 
             IXMLDOMDocument **DOMDocument) = 0;
        
        virtual  HRESULT __stdcall cloneNode( 
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot) = 0;
        
        virtual  HRESULT __stdcall get_nodeTypeString( 
             BSTR *nodeType) = 0;
        
        virtual  HRESULT __stdcall get_text( 
             BSTR *text) = 0;
        
        virtual  HRESULT __stdcall put_text( 
             BSTR text) = 0;
        
        virtual  HRESULT __stdcall get_specified( 
             VARIANT_BOOL *isSpecified) = 0;
        
        virtual  HRESULT __stdcall get_definition( 
             IXMLDOMNode **definitionNode) = 0;
        
        virtual  HRESULT __stdcall get_nodeTypedValue( 
             VARIANT *typedValue) = 0;
        
        virtual  HRESULT __stdcall put_nodeTypedValue( 
             VARIANT typedValue) = 0;
        
        virtual  HRESULT __stdcall get_dataType( 
             VARIANT *dataTypeName) = 0;
        
        virtual  HRESULT __stdcall put_dataType( 
             BSTR dataTypeName) = 0;
        
        virtual  HRESULT __stdcall get_xml( 
             BSTR *xmlString) = 0;
        
        virtual  HRESULT __stdcall transformNode( 
             IXMLDOMNode *stylesheet,
             BSTR *xmlString) = 0;
        
        virtual  HRESULT __stdcall selectNodes( 
             BSTR queryString,
             IXMLDOMNodeList **resultList) = 0;
        
        virtual  HRESULT __stdcall selectSingleNode( 
             BSTR queryString,
             IXMLDOMNode **resultNode) = 0;
        
        virtual  HRESULT __stdcall get_parsed( 
             VARIANT_BOOL *isParsed) = 0;
        
        virtual  HRESULT __stdcall get_namespaceURI( 
             BSTR *namespaceURI) = 0;
        
        virtual  HRESULT __stdcall get_prefix( 
             BSTR *prefixString) = 0;
        
        virtual  HRESULT __stdcall get_baseName( 
             BSTR *nameString) = 0;
        
        virtual  HRESULT __stdcall transformNodeToObject( 
             IXMLDOMNode *stylesheet,
             VARIANT outputObject) = 0;
        
    };
    




























































































































































































































































































































































#line 1009 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMNode_get_nodeName_Proxy( 
    IXMLDOMNode * This,
     BSTR *name);


void __stdcall IXMLDOMNode_get_nodeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT *value);


void __stdcall IXMLDOMNode_get_nodeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_nodeValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT value);


void __stdcall IXMLDOMNode_put_nodeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeType_Proxy( 
    IXMLDOMNode * This,
     DOMNodeType *type);


void __stdcall IXMLDOMNode_get_nodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_parentNode_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **parent);


void __stdcall IXMLDOMNode_get_parentNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_childNodes_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNodeList **childList);


void __stdcall IXMLDOMNode_get_childNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_firstChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **firstChild);


void __stdcall IXMLDOMNode_get_firstChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_lastChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **lastChild);


void __stdcall IXMLDOMNode_get_lastChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_previousSibling_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **previousSibling);


void __stdcall IXMLDOMNode_get_previousSibling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nextSibling_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **nextSibling);


void __stdcall IXMLDOMNode_get_nextSibling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_attributes_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNamedNodeMap **attributeMap);


void __stdcall IXMLDOMNode_get_attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_insertBefore_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *newChild,
     VARIANT refChild,
     IXMLDOMNode **outNewChild);


void __stdcall IXMLDOMNode_insertBefore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_replaceChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *newChild,
     IXMLDOMNode *oldChild,
     IXMLDOMNode **outOldChild);


void __stdcall IXMLDOMNode_replaceChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_removeChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *childNode,
     IXMLDOMNode **oldChild);


void __stdcall IXMLDOMNode_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_appendChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *newChild,
     IXMLDOMNode **outNewChild);


void __stdcall IXMLDOMNode_appendChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_hasChildNodes_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL *hasChild);


void __stdcall IXMLDOMNode_hasChildNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_ownerDocument_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMDocument **DOMDocument);


void __stdcall IXMLDOMNode_get_ownerDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_cloneNode_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL deep,
     IXMLDOMNode **cloneRoot);


void __stdcall IXMLDOMNode_cloneNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeTypeString_Proxy( 
    IXMLDOMNode * This,
     BSTR *nodeType);


void __stdcall IXMLDOMNode_get_nodeTypeString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_text_Proxy( 
    IXMLDOMNode * This,
     BSTR *text);


void __stdcall IXMLDOMNode_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_text_Proxy( 
    IXMLDOMNode * This,
     BSTR text);


void __stdcall IXMLDOMNode_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_specified_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL *isSpecified);


void __stdcall IXMLDOMNode_get_specified_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_definition_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **definitionNode);


void __stdcall IXMLDOMNode_get_definition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeTypedValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT *typedValue);


void __stdcall IXMLDOMNode_get_nodeTypedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_nodeTypedValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT typedValue);


void __stdcall IXMLDOMNode_put_nodeTypedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_dataType_Proxy( 
    IXMLDOMNode * This,
     VARIANT *dataTypeName);


void __stdcall IXMLDOMNode_get_dataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_dataType_Proxy( 
    IXMLDOMNode * This,
     BSTR dataTypeName);


void __stdcall IXMLDOMNode_put_dataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_xml_Proxy( 
    IXMLDOMNode * This,
     BSTR *xmlString);


void __stdcall IXMLDOMNode_get_xml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_transformNode_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *stylesheet,
     BSTR *xmlString);


void __stdcall IXMLDOMNode_transformNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_selectNodes_Proxy( 
    IXMLDOMNode * This,
     BSTR queryString,
     IXMLDOMNodeList **resultList);


void __stdcall IXMLDOMNode_selectNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_selectSingleNode_Proxy( 
    IXMLDOMNode * This,
     BSTR queryString,
     IXMLDOMNode **resultNode);


void __stdcall IXMLDOMNode_selectSingleNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_parsed_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL *isParsed);


void __stdcall IXMLDOMNode_get_parsed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_namespaceURI_Proxy( 
    IXMLDOMNode * This,
     BSTR *namespaceURI);


void __stdcall IXMLDOMNode_get_namespaceURI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_prefix_Proxy( 
    IXMLDOMNode * This,
     BSTR *prefixString);


void __stdcall IXMLDOMNode_get_prefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_baseName_Proxy( 
    IXMLDOMNode * This,
     BSTR *nameString);


void __stdcall IXMLDOMNode_get_baseName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_transformNodeToObject_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *stylesheet,
     VARIANT outputObject);


void __stdcall IXMLDOMNode_transformNodeToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1457 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMDocumentFragment;


    
    struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMDocumentFragment : public IXMLDOMNode
    {
    public:
    };
    





























































































































































































































































































































































#line 1826 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




#line 1831 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMDocument;


    
    struct __declspec(uuid("2933BF81-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocument : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_doctype( 
             IXMLDOMDocumentType **documentType) = 0;
        
        virtual  HRESULT __stdcall get_implementation( 
             IXMLDOMImplementation **impl) = 0;
        
        virtual  HRESULT __stdcall get_documentElement( 
             IXMLDOMElement **DOMElement) = 0;
        
        virtual  HRESULT __stdcall putref_documentElement( 
             IXMLDOMElement *DOMElement) = 0;
        
        virtual  HRESULT __stdcall createElement( 
             BSTR tagName,
             IXMLDOMElement **element) = 0;
        
        virtual  HRESULT __stdcall createDocumentFragment( 
             IXMLDOMDocumentFragment **docFrag) = 0;
        
        virtual  HRESULT __stdcall createTextNode( 
             BSTR data,
             IXMLDOMText **text) = 0;
        
        virtual  HRESULT __stdcall createComment( 
             BSTR data,
             IXMLDOMComment **comment) = 0;
        
        virtual  HRESULT __stdcall createCDATASection( 
             BSTR data,
             IXMLDOMCDATASection **cdata) = 0;
        
        virtual  HRESULT __stdcall createProcessingInstruction( 
             BSTR target,
             BSTR data,
             IXMLDOMProcessingInstruction **pi) = 0;
        
        virtual  HRESULT __stdcall createAttribute( 
             BSTR name,
             IXMLDOMAttribute **attribute) = 0;
        
        virtual  HRESULT __stdcall createEntityReference( 
             BSTR name,
             IXMLDOMEntityReference **entityRef) = 0;
        
        virtual  HRESULT __stdcall getElementsByTagName( 
             BSTR tagName,
             IXMLDOMNodeList **resultList) = 0;
        
        virtual  HRESULT __stdcall createNode( 
             VARIANT Type,
             BSTR name,
             BSTR namespaceURI,
             IXMLDOMNode **node) = 0;
        
        virtual  HRESULT __stdcall nodeFromID( 
             BSTR idString,
             IXMLDOMNode **node) = 0;
        
        virtual  HRESULT __stdcall load( 
             VARIANT xmlSource,
             VARIANT_BOOL *isSuccessful) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *value) = 0;
        
        virtual  HRESULT __stdcall get_parseError( 
             IXMLDOMParseError **errorObj) = 0;
        
        virtual  HRESULT __stdcall get_url( 
             BSTR *urlString) = 0;
        
        virtual  HRESULT __stdcall get_async( 
             VARIANT_BOOL *isAsync) = 0;
        
        virtual  HRESULT __stdcall put_async( 
             VARIANT_BOOL isAsync) = 0;
        
        virtual  HRESULT __stdcall abort( void) = 0;
        
        virtual  HRESULT __stdcall loadXML( 
             BSTR bstrXML,
             VARIANT_BOOL *isSuccessful) = 0;
        
        virtual  HRESULT __stdcall save( 
             VARIANT desination) = 0;
        
        virtual  HRESULT __stdcall get_validateOnParse( 
             VARIANT_BOOL *isValidating) = 0;
        
        virtual  HRESULT __stdcall put_validateOnParse( 
             VARIANT_BOOL isValidating) = 0;
        
        virtual  HRESULT __stdcall get_resolveExternals( 
             VARIANT_BOOL *isResolving) = 0;
        
        virtual  HRESULT __stdcall put_resolveExternals( 
             VARIANT_BOOL isResolving) = 0;
        
        virtual  HRESULT __stdcall get_preserveWhiteSpace( 
             VARIANT_BOOL *isPreserving) = 0;
        
        virtual  HRESULT __stdcall put_preserveWhiteSpace( 
             VARIANT_BOOL isPreserving) = 0;
        
        virtual  HRESULT __stdcall put_onreadystatechange( 
             VARIANT readystatechangeSink) = 0;
        
        virtual  HRESULT __stdcall put_ondataavailable( 
             VARIANT ondataavailableSink) = 0;
        
        virtual  HRESULT __stdcall put_ontransformnode( 
             VARIANT ontransformnodeSink) = 0;
        
    };
    


















































































































































































































































































































































































































































































































































































































#line 2558 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMDocument_get_doctype_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMDocumentType **documentType);


void __stdcall IXMLDOMDocument_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_implementation_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMImplementation **impl);


void __stdcall IXMLDOMDocument_get_implementation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_documentElement_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMElement **DOMElement);


void __stdcall IXMLDOMDocument_get_documentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_putref_documentElement_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMElement *DOMElement);


void __stdcall IXMLDOMDocument_putref_documentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createElement_Proxy( 
    IXMLDOMDocument * This,
     BSTR tagName,
     IXMLDOMElement **element);


void __stdcall IXMLDOMDocument_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createDocumentFragment_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMDocumentFragment **docFrag);


void __stdcall IXMLDOMDocument_createDocumentFragment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createTextNode_Proxy( 
    IXMLDOMDocument * This,
     BSTR data,
     IXMLDOMText **text);


void __stdcall IXMLDOMDocument_createTextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createComment_Proxy( 
    IXMLDOMDocument * This,
     BSTR data,
     IXMLDOMComment **comment);


void __stdcall IXMLDOMDocument_createComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createCDATASection_Proxy( 
    IXMLDOMDocument * This,
     BSTR data,
     IXMLDOMCDATASection **cdata);


void __stdcall IXMLDOMDocument_createCDATASection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createProcessingInstruction_Proxy( 
    IXMLDOMDocument * This,
     BSTR target,
     BSTR data,
     IXMLDOMProcessingInstruction **pi);


void __stdcall IXMLDOMDocument_createProcessingInstruction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createAttribute_Proxy( 
    IXMLDOMDocument * This,
     BSTR name,
     IXMLDOMAttribute **attribute);


void __stdcall IXMLDOMDocument_createAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createEntityReference_Proxy( 
    IXMLDOMDocument * This,
     BSTR name,
     IXMLDOMEntityReference **entityRef);


void __stdcall IXMLDOMDocument_createEntityReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_getElementsByTagName_Proxy( 
    IXMLDOMDocument * This,
     BSTR tagName,
     IXMLDOMNodeList **resultList);


void __stdcall IXMLDOMDocument_getElementsByTagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createNode_Proxy( 
    IXMLDOMDocument * This,
     VARIANT Type,
     BSTR name,
     BSTR namespaceURI,
     IXMLDOMNode **node);


void __stdcall IXMLDOMDocument_createNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_nodeFromID_Proxy( 
    IXMLDOMDocument * This,
     BSTR idString,
     IXMLDOMNode **node);


void __stdcall IXMLDOMDocument_nodeFromID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_load_Proxy( 
    IXMLDOMDocument * This,
     VARIANT xmlSource,
     VARIANT_BOOL *isSuccessful);


void __stdcall IXMLDOMDocument_load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_readyState_Proxy( 
    IXMLDOMDocument * This,
     long *value);


void __stdcall IXMLDOMDocument_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_parseError_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMParseError **errorObj);


void __stdcall IXMLDOMDocument_get_parseError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_url_Proxy( 
    IXMLDOMDocument * This,
     BSTR *urlString);


void __stdcall IXMLDOMDocument_get_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_async_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isAsync);


void __stdcall IXMLDOMDocument_get_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_async_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isAsync);


void __stdcall IXMLDOMDocument_put_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_abort_Proxy( 
    IXMLDOMDocument * This);


void __stdcall IXMLDOMDocument_abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_loadXML_Proxy( 
    IXMLDOMDocument * This,
     BSTR bstrXML,
     VARIANT_BOOL *isSuccessful);


void __stdcall IXMLDOMDocument_loadXML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_save_Proxy( 
    IXMLDOMDocument * This,
     VARIANT desination);


void __stdcall IXMLDOMDocument_save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_validateOnParse_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isValidating);


void __stdcall IXMLDOMDocument_get_validateOnParse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_validateOnParse_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isValidating);


void __stdcall IXMLDOMDocument_put_validateOnParse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_resolveExternals_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isResolving);


void __stdcall IXMLDOMDocument_get_resolveExternals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_resolveExternals_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isResolving);


void __stdcall IXMLDOMDocument_put_resolveExternals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_preserveWhiteSpace_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isPreserving);


void __stdcall IXMLDOMDocument_get_preserveWhiteSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_preserveWhiteSpace_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isPreserving);


void __stdcall IXMLDOMDocument_put_preserveWhiteSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_onreadystatechange_Proxy( 
    IXMLDOMDocument * This,
     VARIANT readystatechangeSink);


void __stdcall IXMLDOMDocument_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_ondataavailable_Proxy( 
    IXMLDOMDocument * This,
     VARIANT ondataavailableSink);


void __stdcall IXMLDOMDocument_put_ondataavailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_ontransformnode_Proxy( 
    IXMLDOMDocument * This,
     VARIANT ontransformnodeSink);


void __stdcall IXMLDOMDocument_put_ontransformnode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2973 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNodeList;


    
    struct __declspec(uuid("2933BF82-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNodeList : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_item( 
             long index,
             IXMLDOMNode **listItem) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *listLength) = 0;
        
        virtual  HRESULT __stdcall nextNode( 
             IXMLDOMNode **nextItem) = 0;
        
        virtual  HRESULT __stdcall reset( void) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown **ppUnk) = 0;
        
    };
    
























































































































#line 3128 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMNodeList_get_item_Proxy( 
    IXMLDOMNodeList * This,
     long index,
     IXMLDOMNode **listItem);


void __stdcall IXMLDOMNodeList_get_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_get_length_Proxy( 
    IXMLDOMNodeList * This,
     long *listLength);


void __stdcall IXMLDOMNodeList_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_nextNode_Proxy( 
    IXMLDOMNodeList * This,
     IXMLDOMNode **nextItem);


void __stdcall IXMLDOMNodeList_nextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_reset_Proxy( 
    IXMLDOMNodeList * This);


void __stdcall IXMLDOMNodeList_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_get__newEnum_Proxy( 
    IXMLDOMNodeList * This,
     IUnknown **ppUnk);


void __stdcall IXMLDOMNodeList_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNamedNodeMap;


    
    struct __declspec(uuid("2933BF83-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNamedNodeMap : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall getNamedItem( 
             BSTR name,
             IXMLDOMNode **namedItem) = 0;
        
        virtual  HRESULT __stdcall setNamedItem( 
             IXMLDOMNode *newItem,
             IXMLDOMNode **nameItem) = 0;
        
        virtual  HRESULT __stdcall removeNamedItem( 
             BSTR name,
             IXMLDOMNode **namedItem) = 0;
        
        virtual  HRESULT __stdcall get_item( 
             long index,
             IXMLDOMNode **listItem) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *listLength) = 0;
        
        virtual  HRESULT __stdcall getQualifiedItem( 
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem) = 0;
        
        virtual  HRESULT __stdcall removeQualifiedItem( 
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem) = 0;
        
        virtual  HRESULT __stdcall nextNode( 
             IXMLDOMNode **nextItem) = 0;
        
        virtual  HRESULT __stdcall reset( void) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown **ppUnk) = 0;
        
    };
    


































































































































































#line 3412 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMNamedNodeMap_getNamedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR name,
     IXMLDOMNode **namedItem);


void __stdcall IXMLDOMNamedNodeMap_getNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_setNamedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     IXMLDOMNode *newItem,
     IXMLDOMNode **nameItem);


void __stdcall IXMLDOMNamedNodeMap_setNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_removeNamedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR name,
     IXMLDOMNode **namedItem);


void __stdcall IXMLDOMNamedNodeMap_removeNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_get_item_Proxy( 
    IXMLDOMNamedNodeMap * This,
     long index,
     IXMLDOMNode **listItem);


void __stdcall IXMLDOMNamedNodeMap_get_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_get_length_Proxy( 
    IXMLDOMNamedNodeMap * This,
     long *listLength);


void __stdcall IXMLDOMNamedNodeMap_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_getQualifiedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR baseName,
     BSTR namespaceURI,
     IXMLDOMNode **qualifiedItem);


void __stdcall IXMLDOMNamedNodeMap_getQualifiedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR baseName,
     BSTR namespaceURI,
     IXMLDOMNode **qualifiedItem);


void __stdcall IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_nextNode_Proxy( 
    IXMLDOMNamedNodeMap * This,
     IXMLDOMNode **nextItem);


void __stdcall IXMLDOMNamedNodeMap_nextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_reset_Proxy( 
    IXMLDOMNamedNodeMap * This);


void __stdcall IXMLDOMNamedNodeMap_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_get__newEnum_Proxy( 
    IXMLDOMNamedNodeMap * This,
     IUnknown **ppUnk);


void __stdcall IXMLDOMNamedNodeMap_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3544 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMCharacterData;


    
    struct __declspec(uuid("2933BF84-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCharacterData : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_data( 
             BSTR *data) = 0;
        
        virtual  HRESULT __stdcall put_data( 
             BSTR data) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *dataLength) = 0;
        
        virtual  HRESULT __stdcall substringData( 
             long offset,
             long count,
             BSTR *data) = 0;
        
        virtual  HRESULT __stdcall appendData( 
             BSTR data) = 0;
        
        virtual  HRESULT __stdcall insertData( 
             long offset,
             BSTR data) = 0;
        
        virtual  HRESULT __stdcall deleteData( 
             long offset,
             long count) = 0;
        
        virtual  HRESULT __stdcall replaceData( 
             long offset,
             long count,
             BSTR data) = 0;
        
    };
    



























































































































































































































































































































































































































#line 4005 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMCharacterData_get_data_Proxy( 
    IXMLDOMCharacterData * This,
     BSTR *data);


void __stdcall IXMLDOMCharacterData_get_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_put_data_Proxy( 
    IXMLDOMCharacterData * This,
     BSTR data);


void __stdcall IXMLDOMCharacterData_put_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_get_length_Proxy( 
    IXMLDOMCharacterData * This,
     long *dataLength);


void __stdcall IXMLDOMCharacterData_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_substringData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     long count,
     BSTR *data);


void __stdcall IXMLDOMCharacterData_substringData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_appendData_Proxy( 
    IXMLDOMCharacterData * This,
     BSTR data);


void __stdcall IXMLDOMCharacterData_appendData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_insertData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     BSTR data);


void __stdcall IXMLDOMCharacterData_insertData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_deleteData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     long count);


void __stdcall IXMLDOMCharacterData_deleteData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_replaceData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     long count,
     BSTR data);


void __stdcall IXMLDOMCharacterData_replaceData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4112 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMAttribute;


    
    struct __declspec(uuid("2933BF85-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMAttribute : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_name( 
             BSTR *attributeName) = 0;
        
        virtual  HRESULT __stdcall get_value( 
             VARIANT *attributeValue) = 0;
        
        virtual  HRESULT __stdcall put_value( 
             VARIANT attributeValue) = 0;
        
    };
    


















































































































































































































































































































































































#line 4511 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMAttribute_get_name_Proxy( 
    IXMLDOMAttribute * This,
     BSTR *attributeName);


void __stdcall IXMLDOMAttribute_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMAttribute_get_value_Proxy( 
    IXMLDOMAttribute * This,
     VARIANT *attributeValue);


void __stdcall IXMLDOMAttribute_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMAttribute_put_value_Proxy( 
    IXMLDOMAttribute * This,
     VARIANT attributeValue);


void __stdcall IXMLDOMAttribute_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4552 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMElement;


    
    struct __declspec(uuid("2933BF86-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMElement : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_tagName( 
             BSTR *tagName) = 0;
        
        virtual  HRESULT __stdcall getAttribute( 
             BSTR name,
             VARIANT *value) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             BSTR name,
             VARIANT value) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             BSTR name) = 0;
        
        virtual  HRESULT __stdcall getAttributeNode( 
             BSTR name,
             IXMLDOMAttribute **attributeNode) = 0;
        
        virtual  HRESULT __stdcall setAttributeNode( 
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode) = 0;
        
        virtual  HRESULT __stdcall removeAttributeNode( 
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode) = 0;
        
        virtual  HRESULT __stdcall getElementsByTagName( 
             BSTR tagName,
             IXMLDOMNodeList **resultList) = 0;
        
        virtual  HRESULT __stdcall normalize( void) = 0;
        
    };
    

































































































































































































































































































































































































































#line 5021 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMElement_get_tagName_Proxy( 
    IXMLDOMElement * This,
     BSTR *tagName);


void __stdcall IXMLDOMElement_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_getAttribute_Proxy( 
    IXMLDOMElement * This,
     BSTR name,
     VARIANT *value);


void __stdcall IXMLDOMElement_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_setAttribute_Proxy( 
    IXMLDOMElement * This,
     BSTR name,
     VARIANT value);


void __stdcall IXMLDOMElement_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_removeAttribute_Proxy( 
    IXMLDOMElement * This,
     BSTR name);


void __stdcall IXMLDOMElement_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_getAttributeNode_Proxy( 
    IXMLDOMElement * This,
     BSTR name,
     IXMLDOMAttribute **attributeNode);


void __stdcall IXMLDOMElement_getAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_setAttributeNode_Proxy( 
    IXMLDOMElement * This,
     IXMLDOMAttribute *DOMAttribute,
     IXMLDOMAttribute **attributeNode);


void __stdcall IXMLDOMElement_setAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_removeAttributeNode_Proxy( 
    IXMLDOMElement * This,
     IXMLDOMAttribute *DOMAttribute,
     IXMLDOMAttribute **attributeNode);


void __stdcall IXMLDOMElement_removeAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_getElementsByTagName_Proxy( 
    IXMLDOMElement * This,
     BSTR tagName,
     IXMLDOMNodeList **resultList);


void __stdcall IXMLDOMElement_getElementsByTagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_normalize_Proxy( 
    IXMLDOMElement * This);


void __stdcall IXMLDOMElement_normalize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMText;


    
    struct __declspec(uuid("2933BF87-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMText : public IXMLDOMCharacterData
    {
    public:
        virtual  HRESULT __stdcall splitText( 
             long offset,
             IXMLDOMText **rightHandTextNode) = 0;
        
    };
    




































































































































































































































































































































































































































#line 5583 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMText_splitText_Proxy( 
    IXMLDOMText * This,
     long offset,
     IXMLDOMText **rightHandTextNode);


void __stdcall IXMLDOMText_splitText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5601 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMComment;


    
    struct __declspec(uuid("2933BF88-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMComment : public IXMLDOMCharacterData
    {
    public:
    };
    




























































































































































































































































































































































































































#line 6033 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




#line 6038 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMProcessingInstruction;


    
    struct __declspec(uuid("2933BF89-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMProcessingInstruction : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_target( 
             BSTR *name) = 0;
        
        virtual  HRESULT __stdcall get_data( 
             BSTR *value) = 0;
        
        virtual  HRESULT __stdcall put_data( 
             BSTR value) = 0;
        
    };
    


















































































































































































































































































































































































#line 6437 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMProcessingInstruction_get_target_Proxy( 
    IXMLDOMProcessingInstruction * This,
     BSTR *name);


void __stdcall IXMLDOMProcessingInstruction_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMProcessingInstruction_get_data_Proxy( 
    IXMLDOMProcessingInstruction * This,
     BSTR *value);


void __stdcall IXMLDOMProcessingInstruction_get_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMProcessingInstruction_put_data_Proxy( 
    IXMLDOMProcessingInstruction * This,
     BSTR value);


void __stdcall IXMLDOMProcessingInstruction_put_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6478 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMCDATASection;


    
    struct __declspec(uuid("2933BF8A-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCDATASection : public IXMLDOMText
    {
    public:
    };
    





































































































































































































































































































































































































































#line 6919 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




#line 6924 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMDocumentType;


    
    struct __declspec(uuid("2933BF8B-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocumentType : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_name( 
             BSTR *rootName) = 0;
        
        virtual  HRESULT __stdcall get_entities( 
             IXMLDOMNamedNodeMap **entityMap) = 0;
        
        virtual  HRESULT __stdcall get_notations( 
             IXMLDOMNamedNodeMap **notationMap) = 0;
        
    };
    


















































































































































































































































































































































































#line 7323 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMDocumentType_get_name_Proxy( 
    IXMLDOMDocumentType * This,
     BSTR *rootName);


void __stdcall IXMLDOMDocumentType_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocumentType_get_entities_Proxy( 
    IXMLDOMDocumentType * This,
     IXMLDOMNamedNodeMap **entityMap);


void __stdcall IXMLDOMDocumentType_get_entities_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocumentType_get_notations_Proxy( 
    IXMLDOMDocumentType * This,
     IXMLDOMNamedNodeMap **notationMap);


void __stdcall IXMLDOMDocumentType_get_notations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7364 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNotation;


    
    struct __declspec(uuid("2933BF8C-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNotation : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_publicId( 
             VARIANT *publicID) = 0;
        
        virtual  HRESULT __stdcall get_systemId( 
             VARIANT *systemID) = 0;
        
    };
    











































































































































































































































































































































































#line 7753 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMNotation_get_publicId_Proxy( 
    IXMLDOMNotation * This,
     VARIANT *publicID);


void __stdcall IXMLDOMNotation_get_publicId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNotation_get_systemId_Proxy( 
    IXMLDOMNotation * This,
     VARIANT *systemID);


void __stdcall IXMLDOMNotation_get_systemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7782 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMEntity;


    
    struct __declspec(uuid("2933BF8D-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntity : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_publicId( 
             VARIANT *publicID) = 0;
        
        virtual  HRESULT __stdcall get_systemId( 
             VARIANT *systemID) = 0;
        
        virtual  HRESULT __stdcall get_notationName( 
             BSTR *name) = 0;
        
    };
    


















































































































































































































































































































































































#line 8181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMEntity_get_publicId_Proxy( 
    IXMLDOMEntity * This,
     VARIANT *publicID);


void __stdcall IXMLDOMEntity_get_publicId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMEntity_get_systemId_Proxy( 
    IXMLDOMEntity * This,
     VARIANT *systemID);


void __stdcall IXMLDOMEntity_get_systemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMEntity_get_notationName_Proxy( 
    IXMLDOMEntity * This,
     BSTR *name);


void __stdcall IXMLDOMEntity_get_notationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8222 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMEntityReference;


    
    struct __declspec(uuid("2933BF8E-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntityReference : public IXMLDOMNode
    {
    public:
    };
    





























































































































































































































































































































































#line 8591 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"




#line 8596 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDOMParseError;


    
    struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMParseError : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_errorCode( 
             long *errorCode) = 0;
        
        virtual  HRESULT __stdcall get_url( 
             BSTR *urlString) = 0;
        
        virtual  HRESULT __stdcall get_reason( 
             BSTR *reasonString) = 0;
        
        virtual  HRESULT __stdcall get_srcText( 
             BSTR *sourceString) = 0;
        
        virtual  HRESULT __stdcall get_line( 
             long *lineNumber) = 0;
        
        virtual  HRESULT __stdcall get_linepos( 
             long *linePosition) = 0;
        
        virtual  HRESULT __stdcall get_filepos( 
             long *filePosition) = 0;
        
    };
    






































































































































#line 8771 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDOMParseError_get_errorCode_Proxy( 
    IXMLDOMParseError * This,
     long *errorCode);


void __stdcall IXMLDOMParseError_get_errorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_url_Proxy( 
    IXMLDOMParseError * This,
     BSTR *urlString);


void __stdcall IXMLDOMParseError_get_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_reason_Proxy( 
    IXMLDOMParseError * This,
     BSTR *reasonString);


void __stdcall IXMLDOMParseError_get_reason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_srcText_Proxy( 
    IXMLDOMParseError * This,
     BSTR *sourceString);


void __stdcall IXMLDOMParseError_get_srcText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_line_Proxy( 
    IXMLDOMParseError * This,
     long *lineNumber);


void __stdcall IXMLDOMParseError_get_line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_linepos_Proxy( 
    IXMLDOMParseError * This,
     long *linePosition);


void __stdcall IXMLDOMParseError_get_linepos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_filepos_Proxy( 
    IXMLDOMParseError * This,
     long *filePosition);


void __stdcall IXMLDOMParseError_get_filepos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8860 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXTLRuntime;


    
    struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXTLRuntime : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall uniqueID( 
             IXMLDOMNode *pNode,
             long *pID) = 0;
        
        virtual  HRESULT __stdcall depth( 
             IXMLDOMNode *pNode,
             long *pDepth) = 0;
        
        virtual  HRESULT __stdcall childNumber( 
             IXMLDOMNode *pNode,
             long *pNumber) = 0;
        
        virtual  HRESULT __stdcall ancestorChildNumber( 
             BSTR bstrNodeName,
             IXMLDOMNode *pNode,
             long *pNumber) = 0;
        
        virtual  HRESULT __stdcall absoluteChildNumber( 
             IXMLDOMNode *pNode,
             long *pNumber) = 0;
        
        virtual  HRESULT __stdcall formatIndex( 
             long lIndex,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString) = 0;
        
        virtual  HRESULT __stdcall formatNumber( 
             double dblNumber,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString) = 0;
        
        virtual  HRESULT __stdcall formatDate( 
             VARIANT varDate,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString) = 0;
        
        virtual  HRESULT __stdcall formatTime( 
             VARIANT varTime,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString) = 0;
        
    };
    












































































































































































































































































































































































































































#line 9351 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXTLRuntime_uniqueID_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pID);


void __stdcall IXTLRuntime_uniqueID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_depth_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pDepth);


void __stdcall IXTLRuntime_depth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_childNumber_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pNumber);


void __stdcall IXTLRuntime_childNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_ancestorChildNumber_Proxy( 
    IXTLRuntime * This,
     BSTR bstrNodeName,
     IXMLDOMNode *pNode,
     long *pNumber);


void __stdcall IXTLRuntime_ancestorChildNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_absoluteChildNumber_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pNumber);


void __stdcall IXTLRuntime_absoluteChildNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatIndex_Proxy( 
    IXTLRuntime * This,
     long lIndex,
     BSTR bstrFormat,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatNumber_Proxy( 
    IXTLRuntime * This,
     double dblNumber,
     BSTR bstrFormat,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatDate_Proxy( 
    IXTLRuntime * This,
     VARIANT varDate,
     BSTR bstrFormat,
     VARIANT varDestLocale,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatTime_Proxy( 
    IXTLRuntime * This,
     VARIANT varTime,
     BSTR bstrFormat,
     VARIANT varDestLocale,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9480 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID DIID_XMLDOMDocumentEvents;



    struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    XMLDOMDocumentEvents : public IDispatch
    {
    };
    




















































































#line 9583 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"


#line 9586 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"


extern "C" const CLSID CLSID_DOMDocument;



class __declspec(uuid("2933BF90-7B36-11d2-B20E-00C04F983E60"))
DOMDocument;
#line 9595 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

extern "C" const CLSID CLSID_DOMFreeThreadedDocument;



class __declspec(uuid("2933BF91-7B36-11d2-B20E-00C04F983E60"))
DOMFreeThreadedDocument;
#line 9603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"





 


extern "C" const IID IID_IXMLHttpRequest;


    
    struct __declspec(uuid("ED8C108D-4349-11D2-91A4-00C04F7969E8")) __declspec(novtable)
    IXMLHttpRequest : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall open( 
             BSTR bstrMethod,
             BSTR bstrUrl,
             VARIANT varAsync,
             VARIANT bstrUser,
             VARIANT bstrPassword) = 0;
        
        virtual  HRESULT __stdcall setRequestHeader( 
             BSTR bstrHeader,
             BSTR bstrValue) = 0;
        
        virtual  HRESULT __stdcall getResponseHeader( 
             BSTR bstrHeader,
             BSTR *pbstrValue) = 0;
        
        virtual  HRESULT __stdcall getAllResponseHeaders( 
             BSTR *pbstrHeaders) = 0;
        
        virtual  HRESULT __stdcall send( 
             VARIANT varBody) = 0;
        
        virtual  HRESULT __stdcall abort( void) = 0;
        
        virtual  HRESULT __stdcall get_status( 
             long *plStatus) = 0;
        
        virtual  HRESULT __stdcall get_statusText( 
             BSTR *pbstrStatus) = 0;
        
        virtual  HRESULT __stdcall get_responseXML( 
             IDispatch **ppBody) = 0;
        
        virtual  HRESULT __stdcall get_responseText( 
             BSTR *pbstrBody) = 0;
        
        virtual  HRESULT __stdcall get_responseBody( 
             VARIANT *pvarBody) = 0;
        
        virtual  HRESULT __stdcall get_responseStream( 
             VARIANT *pvarBody) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *plState) = 0;
        
        virtual  HRESULT __stdcall put_onreadystatechange( 
             IDispatch *pReadyStateSink) = 0;
        
    };
    




























































































































































































#line 9857 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLHttpRequest_open_Proxy( 
    IXMLHttpRequest * This,
     BSTR bstrMethod,
     BSTR bstrUrl,
     VARIANT varAsync,
     VARIANT bstrUser,
     VARIANT bstrPassword);


void __stdcall IXMLHttpRequest_open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_setRequestHeader_Proxy( 
    IXMLHttpRequest * This,
     BSTR bstrHeader,
     BSTR bstrValue);


void __stdcall IXMLHttpRequest_setRequestHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_getResponseHeader_Proxy( 
    IXMLHttpRequest * This,
     BSTR bstrHeader,
     BSTR *pbstrValue);


void __stdcall IXMLHttpRequest_getResponseHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_getAllResponseHeaders_Proxy( 
    IXMLHttpRequest * This,
     BSTR *pbstrHeaders);


void __stdcall IXMLHttpRequest_getAllResponseHeaders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_send_Proxy( 
    IXMLHttpRequest * This,
     VARIANT varBody);


void __stdcall IXMLHttpRequest_send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_abort_Proxy( 
    IXMLHttpRequest * This);


void __stdcall IXMLHttpRequest_abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_status_Proxy( 
    IXMLHttpRequest * This,
     long *plStatus);


void __stdcall IXMLHttpRequest_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_statusText_Proxy( 
    IXMLHttpRequest * This,
     BSTR *pbstrStatus);


void __stdcall IXMLHttpRequest_get_statusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseXML_Proxy( 
    IXMLHttpRequest * This,
     IDispatch **ppBody);


void __stdcall IXMLHttpRequest_get_responseXML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseText_Proxy( 
    IXMLHttpRequest * This,
     BSTR *pbstrBody);


void __stdcall IXMLHttpRequest_get_responseText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseBody_Proxy( 
    IXMLHttpRequest * This,
     VARIANT *pvarBody);


void __stdcall IXMLHttpRequest_get_responseBody_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseStream_Proxy( 
    IXMLHttpRequest * This,
     VARIANT *pvarBody);


void __stdcall IXMLHttpRequest_get_responseStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_readyState_Proxy( 
    IXMLHttpRequest * This,
     long *plState);


void __stdcall IXMLHttpRequest_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_put_onreadystatechange_Proxy( 
    IXMLHttpRequest * This,
     IDispatch *pReadyStateSink);


void __stdcall IXMLHttpRequest_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10035 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"


extern "C" const CLSID CLSID_XMLHTTPRequest;



class __declspec(uuid("ED8C108E-4349-11D2-91A4-00C04F7969E8"))
XMLHTTPRequest;
#line 10044 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"





 


extern "C" const IID IID_IXMLDSOControl;


    
    struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) __declspec(novtable)
    IXMLDSOControl : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_XMLDocument( 
             IXMLDOMDocument **ppDoc) = 0;
        
        virtual  HRESULT __stdcall put_XMLDocument( 
             IXMLDOMDocument *ppDoc) = 0;
        
        virtual  HRESULT __stdcall get_JavaDSOCompatible( 
             BOOL *fJavaDSOCompatible) = 0;
        
        virtual  HRESULT __stdcall put_JavaDSOCompatible( 
             BOOL fJavaDSOCompatible) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *state) = 0;
        
    };
    
























































































































#line 10198 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDSOControl_get_XMLDocument_Proxy( 
    IXMLDSOControl * This,
     IXMLDOMDocument **ppDoc);


void __stdcall IXMLDSOControl_get_XMLDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_put_XMLDocument_Proxy( 
    IXMLDSOControl * This,
     IXMLDOMDocument *ppDoc);


void __stdcall IXMLDSOControl_put_XMLDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_get_JavaDSOCompatible_Proxy( 
    IXMLDSOControl * This,
     BOOL *fJavaDSOCompatible);


void __stdcall IXMLDSOControl_get_JavaDSOCompatible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_put_JavaDSOCompatible_Proxy( 
    IXMLDSOControl * This,
     BOOL fJavaDSOCompatible);


void __stdcall IXMLDSOControl_put_JavaDSOCompatible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_get_readyState_Proxy( 
    IXMLDSOControl * This,
     long *state);


void __stdcall IXMLDSOControl_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10263 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"


extern "C" const CLSID CLSID_XMLDSOControl;



class __declspec(uuid("550dda30-0541-11d2-9ca9-0060b0ec3d39"))
XMLDSOControl;
#line 10272 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"





 


extern "C" const IID IID_IXMLElementCollection;


    
    struct __declspec(uuid("65725580-9B5D-11d0-9BFE-00C04FC99C8E")) __declspec(novtable)
    IXMLElementCollection : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall put_length( 
             long v) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *p) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown **ppUnk) = 0;
        
        virtual  HRESULT __stdcall item( 
             VARIANT var1,
             VARIANT var2,
             IDispatch **ppDisp) = 0;
        
    };
    



















































































































#line 10420 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLElementCollection_put_length_Proxy( 
    IXMLElementCollection * This,
     long v);


void __stdcall IXMLElementCollection_put_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_get_length_Proxy( 
    IXMLElementCollection * This,
     long *p);


void __stdcall IXMLElementCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_get__newEnum_Proxy( 
    IXMLElementCollection * This,
     IUnknown **ppUnk);


void __stdcall IXMLElementCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_item_Proxy( 
    IXMLElementCollection * This,
     VARIANT var1,
     VARIANT var2,
     IDispatch **ppDisp);


void __stdcall IXMLElementCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10475 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDocument;


    
    struct __declspec(uuid("F52E2B61-18A1-11d1-B105-00805F49916B")) __declspec(novtable)
    IXMLDocument : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_root( 
             IXMLElement **p) = 0;
        
        virtual  HRESULT __stdcall get_fileSize( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileModifiedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileUpdatedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_URL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_URL( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_mimeType( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall get_charset( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_charset( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_version( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_doctype( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_dtdURL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall createElement( 
             VARIANT vType,
             VARIANT var1,
             IXMLElement **ppElem) = 0;
        
    };
    

























































































































































































#line 10724 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDocument_get_root_Proxy( 
    IXMLDocument * This,
     IXMLElement **p);


void __stdcall IXMLDocument_get_root_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileSize_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_fileSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileModifiedDate_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_fileModifiedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileUpdatedDate_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_fileUpdatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_URL_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_put_URL_Proxy( 
    IXMLDocument * This,
     BSTR p);


void __stdcall IXMLDocument_put_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_mimeType_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_readyState_Proxy( 
    IXMLDocument * This,
     long *pl);


void __stdcall IXMLDocument_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_charset_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_put_charset_Proxy( 
    IXMLDocument * This,
     BSTR p);


void __stdcall IXMLDocument_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_version_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_doctype_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_dtdURL_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_dtdURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_createElement_Proxy( 
    IXMLDocument * This,
     VARIANT vType,
     VARIANT var1,
     IXMLElement **ppElem);


void __stdcall IXMLDocument_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10899 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLDocument2;


    
    struct __declspec(uuid("2B8DE2FE-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLDocument2 : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_root( 
             IXMLElement2 **p) = 0;
        
        virtual  HRESULT __stdcall get_fileSize( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileModifiedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileUpdatedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_URL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_URL( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_mimeType( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall get_charset( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_charset( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_version( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_doctype( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_dtdURL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall createElement( 
             VARIANT vType,
             VARIANT var1,
             IXMLElement2 **ppElem) = 0;
        
        virtual  HRESULT __stdcall get_async( 
             VARIANT_BOOL *pf) = 0;
        
        virtual  HRESULT __stdcall put_async( 
             VARIANT_BOOL f) = 0;
        
    };
    







































































































































































































#line 11168 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLDocument2_get_root_Proxy( 
    IXMLDocument2 * This,
     IXMLElement2 **p);


void __stdcall IXMLDocument2_get_root_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_fileSize_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_fileSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_fileModifiedDate_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_fileModifiedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_fileUpdatedDate_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_fileUpdatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_URL_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_put_URL_Proxy( 
    IXMLDocument2 * This,
     BSTR p);


void __stdcall IXMLDocument2_put_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_mimeType_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_readyState_Proxy( 
    IXMLDocument2 * This,
     long *pl);


void __stdcall IXMLDocument2_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_charset_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_put_charset_Proxy( 
    IXMLDocument2 * This,
     BSTR p);


void __stdcall IXMLDocument2_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_version_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_doctype_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_dtdURL_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_dtdURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_createElement_Proxy( 
    IXMLDocument2 * This,
     VARIANT vType,
     VARIANT var1,
     IXMLElement2 **ppElem);


void __stdcall IXMLDocument2_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_async_Proxy( 
    IXMLDocument2 * This,
     VARIANT_BOOL *pf);


void __stdcall IXMLDocument2_get_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_put_async_Proxy( 
    IXMLDocument2 * This,
     VARIANT_BOOL f);


void __stdcall IXMLDocument2_put_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLElement;


    
    struct __declspec(uuid("3F7F31AC-E15F-11d0-9C25-00C04FC99C8E")) __declspec(novtable)
    IXMLElement : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_tagName( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_tagName( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_parent( 
             IXMLElement **ppParent) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             BSTR strPropertyName,
             VARIANT PropertyValue) = 0;
        
        virtual  HRESULT __stdcall getAttribute( 
             BSTR strPropertyName,
             VARIANT *PropertyValue) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             BSTR strPropertyName) = 0;
        
        virtual  HRESULT __stdcall get_children( 
             IXMLElementCollection **pp) = 0;
        
        virtual  HRESULT __stdcall get_type( 
             long *plType) = 0;
        
        virtual  HRESULT __stdcall get_text( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_text( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall addChild( 
             IXMLElement *pChildElem,
            long lIndex,
            long lReserved) = 0;
        
        virtual  HRESULT __stdcall removeChild( 
             IXMLElement *pChildElem) = 0;
        
    };
    













































































































































































#line 11600 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLElement_get_tagName_Proxy( 
    IXMLElement * This,
     BSTR *p);


void __stdcall IXMLElement_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_put_tagName_Proxy( 
    IXMLElement * This,
     BSTR p);


void __stdcall IXMLElement_put_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_parent_Proxy( 
    IXMLElement * This,
     IXMLElement **ppParent);


void __stdcall IXMLElement_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_setAttribute_Proxy( 
    IXMLElement * This,
     BSTR strPropertyName,
     VARIANT PropertyValue);


void __stdcall IXMLElement_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_getAttribute_Proxy( 
    IXMLElement * This,
     BSTR strPropertyName,
     VARIANT *PropertyValue);


void __stdcall IXMLElement_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_removeAttribute_Proxy( 
    IXMLElement * This,
     BSTR strPropertyName);


void __stdcall IXMLElement_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_children_Proxy( 
    IXMLElement * This,
     IXMLElementCollection **pp);


void __stdcall IXMLElement_get_children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_type_Proxy( 
    IXMLElement * This,
     long *plType);


void __stdcall IXMLElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_text_Proxy( 
    IXMLElement * This,
     BSTR *p);


void __stdcall IXMLElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_put_text_Proxy( 
    IXMLElement * This,
     BSTR p);


void __stdcall IXMLElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_addChild_Proxy( 
    IXMLElement * This,
     IXMLElement *pChildElem,
    long lIndex,
    long lReserved);


void __stdcall IXMLElement_addChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_removeChild_Proxy( 
    IXMLElement * This,
     IXMLElement *pChildElem);


void __stdcall IXMLElement_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11753 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLElement2;


    
    struct __declspec(uuid("2B8DE2FF-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLElement2 : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_tagName( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_tagName( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_parent( 
             IXMLElement2 **ppParent) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             BSTR strPropertyName,
             VARIANT PropertyValue) = 0;
        
        virtual  HRESULT __stdcall getAttribute( 
             BSTR strPropertyName,
             VARIANT *PropertyValue) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             BSTR strPropertyName) = 0;
        
        virtual  HRESULT __stdcall get_children( 
             IXMLElementCollection **pp) = 0;
        
        virtual  HRESULT __stdcall get_type( 
             long *plType) = 0;
        
        virtual  HRESULT __stdcall get_text( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_text( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall addChild( 
             IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved) = 0;
        
        virtual  HRESULT __stdcall removeChild( 
             IXMLElement2 *pChildElem) = 0;
        
        virtual  HRESULT __stdcall get_attributes( 
             IXMLElementCollection **pp) = 0;
        
    };
    




















































































































































































#line 11996 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLElement2_get_tagName_Proxy( 
    IXMLElement2 * This,
     BSTR *p);


void __stdcall IXMLElement2_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_put_tagName_Proxy( 
    IXMLElement2 * This,
     BSTR p);


void __stdcall IXMLElement2_put_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_parent_Proxy( 
    IXMLElement2 * This,
     IXMLElement2 **ppParent);


void __stdcall IXMLElement2_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_setAttribute_Proxy( 
    IXMLElement2 * This,
     BSTR strPropertyName,
     VARIANT PropertyValue);


void __stdcall IXMLElement2_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_getAttribute_Proxy( 
    IXMLElement2 * This,
     BSTR strPropertyName,
     VARIANT *PropertyValue);


void __stdcall IXMLElement2_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_removeAttribute_Proxy( 
    IXMLElement2 * This,
     BSTR strPropertyName);


void __stdcall IXMLElement2_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_children_Proxy( 
    IXMLElement2 * This,
     IXMLElementCollection **pp);


void __stdcall IXMLElement2_get_children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_type_Proxy( 
    IXMLElement2 * This,
     long *plType);


void __stdcall IXMLElement2_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_text_Proxy( 
    IXMLElement2 * This,
     BSTR *p);


void __stdcall IXMLElement2_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_put_text_Proxy( 
    IXMLElement2 * This,
     BSTR p);


void __stdcall IXMLElement2_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_addChild_Proxy( 
    IXMLElement2 * This,
     IXMLElement2 *pChildElem,
    long lIndex,
    long lReserved);


void __stdcall IXMLElement2_addChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_removeChild_Proxy( 
    IXMLElement2 * This,
     IXMLElement2 *pChildElem);


void __stdcall IXMLElement2_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_attributes_Proxy( 
    IXMLElement2 * This,
     IXMLElementCollection **pp);


void __stdcall IXMLElement2_get_attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12161 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLAttribute;


    
    struct __declspec(uuid("D4D4A0FC-3B73-11d1-B2B4-00C04FB92596")) __declspec(novtable)
    IXMLAttribute : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_name( 
             BSTR *n) = 0;
        
        virtual  HRESULT __stdcall get_value( 
             BSTR *v) = 0;
        
    };
    



































































































#line 12286 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



 HRESULT __stdcall IXMLAttribute_get_name_Proxy( 
    IXMLAttribute * This,
     BSTR *n);


void __stdcall IXMLAttribute_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLAttribute_get_value_Proxy( 
    IXMLAttribute * This,
     BSTR *v);


void __stdcall IXMLAttribute_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12315 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






 


extern "C" const IID IID_IXMLError;


    
    struct __declspec(uuid("948C5AD3-C58D-11d0-9C0B-00C04FC99C8E")) __declspec(novtable)
    IXMLError : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetErrorInfo( 
            XML_ERROR *pErrorReturn) = 0;
        
    };
    


















































#line 12388 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"



HRESULT __stdcall IXMLError_GetErrorInfo_Proxy( 
    IXMLError * This,
    XML_ERROR *pErrorReturn);


void __stdcall IXMLError_GetErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12405 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"


extern "C" const CLSID CLSID_XMLDocument;



class __declspec(uuid("CFC399AF-D876-11d0-9C10-00C04FC99C8E"))
XMLDocument;
#line 12414 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"
#line 12415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"






}
#line 12423 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"

#line 12425 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml.h"


#line 248 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"


extern "C"{
#line 252 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 












#pragma comment(lib,"uuid.lib")















extern "C" const IID CLSID_SBS_StdURLMoniker;  
extern "C" const IID CLSID_SBS_HttpProtocol;   
extern "C" const IID CLSID_SBS_FtpProtocol;    
extern "C" const IID CLSID_SBS_GopherProtocol; 
extern "C" const IID CLSID_SBS_HttpSProtocol;  
extern "C" const IID CLSID_SBS_FileProtocol;   
extern "C" const IID CLSID_SBS_MkProtocol;     
extern "C" const IID CLSID_SBS_UrlMkBindCtx;   
extern "C" const IID CLSID_SBS_SoftDistExt;  
extern "C" const IID CLSID_SBS_StdEncodingFilterFac; 
extern "C" const IID CLSID_SBS_DeCompMimeFilter;     
extern "C" const IID CLSID_SBS_CdlProtocol;          
extern "C" const IID CLSID_SBS_ClassInstallFilter;   
extern "C" const IID CLSID_SBS_InternetSecurityManager;  
extern "C" const IID CLSID_SBS_InternetZoneManager;  







extern "C" const IID IID_IAsyncMoniker;    
extern "C" const IID CLSID_StdURLMoniker;  
extern "C" const IID CLSID_HttpProtocol;   
extern "C" const IID CLSID_FtpProtocol;    
extern "C" const IID CLSID_GopherProtocol; 
extern "C" const IID CLSID_HttpSProtocol;  
extern "C" const IID CLSID_FileProtocol;   
extern "C" const IID CLSID_MkProtocol;     
extern "C" const IID CLSID_StdURLProtocol; 
extern "C" const IID CLSID_UrlMkBindCtx;   
extern "C" const IID CLSID_StdEncodingFilterFac; 
extern "C" const IID CLSID_DeCompMimeFilter;     
extern "C" const IID CLSID_CdlProtocol;          
extern "C" const IID CLSID_ClassInstallFilter;   
extern "C" const IID IID_IAsyncBindCtx;    
 






 
extern "C" HRESULT __stdcall CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER  * ppmk);             
extern "C" HRESULT __stdcall CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER  * ppmk, DWORD dwFlags);             
extern "C" HRESULT __stdcall GetClassURL(LPCWSTR szURL, CLSID *pClsID);                                           
extern "C" HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,                       
                                IEnumFORMATETC *pEFetc, IBindCtx **ppBC);                   
extern "C" HRESULT __stdcall CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,   
                            IBindCtx **ppBC, DWORD reserved);                                                     
extern "C" HRESULT __stdcall MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,          
                                LPMONIKER *ppmk);                                           
extern "C" HRESULT __stdcall RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb,                     
                                IBindStatusCallback**  ppBSCBPrev, DWORD dwReserved);       
extern "C" HRESULT __stdcall RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);                      
extern "C" HRESULT __stdcall GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid); 
extern "C" HRESULT __stdcall IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);                               
extern "C" HRESULT __stdcall CoGetClassObjectFromURL( const IID & rCLASSID,
            LPCWSTR szCODE, DWORD dwFileVersionMS, 
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
            LPBINDCTX pBindCtx, DWORD dwClsContext,
            LPVOID pvReserved, const IID & riid, LPVOID * ppv);
extern "C" HRESULT __stdcall FaultInIEFeature( HWND hWnd,
            uCLSSPEC *pClassSpec,
            QUERYCONTEXT *pQuery, DWORD dwFlags);                                           
extern "C" HRESULT __stdcall GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec,
             LPSTR * ppszComponentID);                                                      


                                                 
                                                 
                                                 


 

extern "C" HRESULT __stdcall IsAsyncMoniker(IMoniker* pmk);                                                       
extern "C" HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);                  
 
extern "C" HRESULT __stdcall RegisterMediaTypes(UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);            
extern "C" HRESULT __stdcall FindMediaType(LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);                                       
extern "C" HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc); 
extern "C" HRESULT __stdcall RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);          
extern "C" HRESULT __stdcall RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);                            
extern "C" HRESULT __stdcall RegisterMediaTypeClass(LPBC pBC,UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);    
extern "C" HRESULT __stdcall FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);                          
extern "C" HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);       
extern "C" HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLength, DWORD dwReserved);       
extern "C" HRESULT __stdcall FindMimeFromData(                                                                                                                  
                        LPBC pBC,                           
                        LPCWSTR pwzUrl,                     
                        LPVOID pBuffer,                     
                        DWORD cbSize,                       
                        LPCWSTR pwzMimeProposed,            
                        DWORD dwMimeFlags,                  
                        LPWSTR *ppwzMimeOut,                
                        DWORD dwReserved);                  


extern "C" HRESULT __stdcall ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD* cbSize);       
extern "C" HRESULT __stdcall CompareSecurityIds(BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);    
 




 


































 






#line 437 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"
                                                                             



                                                                             









































extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_s_ifspec;





 

typedef  IPersistMoniker *LPPERSISTMONIKER;


extern "C" const IID IID_IPersistMoniker;


    
    struct __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IPersistMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID( 
             CLSID *pClassID) = 0;
        
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             BOOL fFullyAvailable,
             IMoniker *pimkName,
             LPBC pibc,
             DWORD grfMode) = 0;
        
        virtual HRESULT __stdcall Save( 
             IMoniker *pimkName,
             LPBC pbc,
             BOOL fRemember) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
             IMoniker *pimkName,
             LPBC pibc) = 0;
        
        virtual HRESULT __stdcall GetCurMoniker( 
             IMoniker **ppimkName) = 0;
        
    };
    


























































































#line 619 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IPersistMoniker_GetClassID_Proxy( 
    IPersistMoniker * This,
     CLSID *pClassID);


void __stdcall IPersistMoniker_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_IsDirty_Proxy( 
    IPersistMoniker * This);


void __stdcall IPersistMoniker_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_Load_Proxy( 
    IPersistMoniker * This,
     BOOL fFullyAvailable,
     IMoniker *pimkName,
     LPBC pibc,
     DWORD grfMode);


void __stdcall IPersistMoniker_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_Save_Proxy( 
    IPersistMoniker * This,
     IMoniker *pimkName,
     LPBC pbc,
     BOOL fRemember);


void __stdcall IPersistMoniker_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_SaveCompleted_Proxy( 
    IPersistMoniker * This,
     IMoniker *pimkName,
     LPBC pibc);


void __stdcall IPersistMoniker_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_GetCurMoniker_Proxy( 
    IPersistMoniker * This,
     IMoniker **ppimkName);


void __stdcall IPersistMoniker_GetCurMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 701 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 707 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0173_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0173_v0_0_s_ifspec;





 

typedef  IMonikerProp *LPMONIKERPROP;

typedef  
enum __MIDL_IMonikerProp_0001
    {	MIMETYPEPROP	= 0
    } 	MONIKERPROPERTY;


extern "C" const IID IID_IMonikerProp;


    
    struct __declspec(uuid("a5ca5f7f-1847-4d87-9c5b-918509f7511d")) __declspec(novtable)
    IMonikerProp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PutProperty( 
             MONIKERPROPERTY mkp,
             LPCWSTR val) = 0;
        
    };
    



















































#line 794 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IMonikerProp_PutProperty_Proxy( 
    IMonikerProp * This,
     MONIKERPROPERTY mkp,
     LPCWSTR val);


void __stdcall IMonikerProp_PutProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 812 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 818 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0174_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0174_v0_0_s_ifspec;





 

typedef  IBindProtocol *LPBINDPROTOCOL;


extern "C" const IID IID_IBindProtocol;


    
    struct __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBinding( 
             LPCWSTR szUrl,
             IBindCtx *pbc,
             IBinding **ppb) = 0;
        
    };
    




















































#line 902 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IBindProtocol_CreateBinding_Proxy( 
    IBindProtocol * This,
     LPCWSTR szUrl,
     IBindCtx *pbc,
     IBinding **ppb);


void __stdcall IBindProtocol_CreateBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 927 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0175_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0175_v0_0_s_ifspec;





 

typedef  IBinding *LPBINDING;


extern "C" const IID IID_IBinding;


    
    struct __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBinding : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Abort( void) = 0;
        
        virtual HRESULT __stdcall Suspend( void) = 0;
        
        virtual HRESULT __stdcall Resume( void) = 0;
        
        virtual HRESULT __stdcall SetPriority( 
             LONG nPriority) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
             LONG *pnPriority) = 0;
        
        virtual  HRESULT __stdcall GetBindResult( 
             CLSID *pclsidProtocol,
             DWORD *pdwResult,
             LPOLESTR *pszResult,
             DWORD *pdwReserved) = 0;
        
    };
    





















































































#line 1057 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IBinding_Abort_Proxy( 
    IBinding * This);


void __stdcall IBinding_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_Suspend_Proxy( 
    IBinding * This);


void __stdcall IBinding_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_Resume_Proxy( 
    IBinding * This);


void __stdcall IBinding_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_SetPriority_Proxy( 
    IBinding * This,
     LONG nPriority);


void __stdcall IBinding_SetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_GetPriority_Proxy( 
    IBinding * This,
     LONG *pnPriority);


void __stdcall IBinding_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy( 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     LPOLESTR *pszResult,
     DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 1140 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0176_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0176_v0_0_s_ifspec;





 

typedef  IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef  
enum __MIDL_IBindStatusCallback_0001
    {	BINDVERB_GET	= 0,
	BINDVERB_POST	= 0x1,
	BINDVERB_PUT	= 0x2,
	BINDVERB_CUSTOM	= 0x3
    } 	BINDVERB;

typedef  
enum __MIDL_IBindStatusCallback_0002
    {	BINDINFOF_URLENCODESTGMEDDATA	= 0x1,
	BINDINFOF_URLENCODEDEXTRAINFO	= 0x2
    } 	BINDINFOF;

typedef  
enum __MIDL_IBindStatusCallback_0003
    {	BINDF_ASYNCHRONOUS	= 0x1,
	BINDF_ASYNCSTORAGE	= 0x2,
	BINDF_NOPROGRESSIVERENDERING	= 0x4,
	BINDF_OFFLINEOPERATION	= 0x8,
	BINDF_GETNEWESTVERSION	= 0x10,
	BINDF_NOWRITECACHE	= 0x20,
	BINDF_NEEDFILE	= 0x40,
	BINDF_PULLDATA	= 0x80,
	BINDF_IGNORESECURITYPROBLEM	= 0x100,
	BINDF_RESYNCHRONIZE	= 0x200,
	BINDF_HYPERLINK	= 0x400,
	BINDF_NO_UI	= 0x800,
	BINDF_SILENTOPERATION	= 0x1000,
	BINDF_PRAGMA_NO_CACHE	= 0x2000,
	BINDF_GETCLASSOBJECT	= 0x4000,
	BINDF_RESERVED_1	= 0x8000,
	BINDF_FREE_THREADED	= 0x10000,
	BINDF_DIRECT_READ	= 0x20000,
	BINDF_FORMS_SUBMIT	= 0x40000,
	BINDF_GETFROMCACHE_IF_NET_FAIL	= 0x80000,
	BINDF_FROMURLMON	= 0x100000,
	BINDF_FWD_BACK	= 0x200000,
	BINDF_PREFERDEFAULTHANDLER	= 0x400000,
	BINDF_ENFORCERESTRICTED	= 0x800000
    } 	BINDF;

typedef  
enum __MIDL_IBindStatusCallback_0004
    {	URL_ENCODING_NONE	= 0,
	URL_ENCODING_ENABLE_UTF8	= 0x10000000,
	URL_ENCODING_DISABLE_UTF8	= 0x20000000
    } 	URL_ENCODING;

typedef struct _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    } 	REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	RemBINDINFO;

typedef struct tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } 	RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef  
enum __MIDL_IBindStatusCallback_0005
    {	BINDINFO_OPTIONS_WININETFLAG	= 0x10000,
	BINDINFO_OPTIONS_ENABLE_UTF8	= 0x20000,
	BINDINFO_OPTIONS_DISABLE_UTF8	= 0x40000,
	BINDINFO_OPTIONS_USE_IE_ENCODING	= 0x80000,
	BINDINFO_OPTIONS_BINDTOOBJECT	= 0x100000
    } 	BINDINFO_OPTIONS;

typedef  
enum __MIDL_IBindStatusCallback_0006
    {	BSCF_FIRSTDATANOTIFICATION	= 0x1,
	BSCF_INTERMEDIATEDATANOTIFICATION	= 0x2,
	BSCF_LASTDATANOTIFICATION	= 0x4,
	BSCF_DATAFULLYAVAILABLE	= 0x8,
	BSCF_AVAILABLEDATASIZEUNKNOWN	= 0x10
    } 	BSCF;

typedef 
enum tagBINDSTATUS
    {	BINDSTATUS_FINDINGRESOURCE	= 1,
	BINDSTATUS_CONNECTING	= BINDSTATUS_FINDINGRESOURCE + 1,
	BINDSTATUS_REDIRECTING	= BINDSTATUS_CONNECTING + 1,
	BINDSTATUS_BEGINDOWNLOADDATA	= BINDSTATUS_REDIRECTING + 1,
	BINDSTATUS_DOWNLOADINGDATA	= BINDSTATUS_BEGINDOWNLOADDATA + 1,
	BINDSTATUS_ENDDOWNLOADDATA	= BINDSTATUS_DOWNLOADINGDATA + 1,
	BINDSTATUS_BEGINDOWNLOADCOMPONENTS	= BINDSTATUS_ENDDOWNLOADDATA + 1,
	BINDSTATUS_INSTALLINGCOMPONENTS	= BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1,
	BINDSTATUS_ENDDOWNLOADCOMPONENTS	= BINDSTATUS_INSTALLINGCOMPONENTS + 1,
	BINDSTATUS_USINGCACHEDCOPY	= BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1,
	BINDSTATUS_SENDINGREQUEST	= BINDSTATUS_USINGCACHEDCOPY + 1,
	BINDSTATUS_CLASSIDAVAILABLE	= BINDSTATUS_SENDINGREQUEST + 1,
	BINDSTATUS_MIMETYPEAVAILABLE	= BINDSTATUS_CLASSIDAVAILABLE + 1,
	BINDSTATUS_CACHEFILENAMEAVAILABLE	= BINDSTATUS_MIMETYPEAVAILABLE + 1,
	BINDSTATUS_BEGINSYNCOPERATION	= BINDSTATUS_CACHEFILENAMEAVAILABLE + 1,
	BINDSTATUS_ENDSYNCOPERATION	= BINDSTATUS_BEGINSYNCOPERATION + 1,
	BINDSTATUS_BEGINUPLOADDATA	= BINDSTATUS_ENDSYNCOPERATION + 1,
	BINDSTATUS_UPLOADINGDATA	= BINDSTATUS_BEGINUPLOADDATA + 1,
	BINDSTATUS_ENDUPLOADDATA	= BINDSTATUS_UPLOADINGDATA + 1,
	BINDSTATUS_PROTOCOLCLASSID	= BINDSTATUS_ENDUPLOADDATA + 1,
	BINDSTATUS_ENCODING	= BINDSTATUS_PROTOCOLCLASSID + 1,
	BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE	= BINDSTATUS_ENCODING + 1,
	BINDSTATUS_CLASSINSTALLLOCATION	= BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1,
	BINDSTATUS_DECODING	= BINDSTATUS_CLASSINSTALLLOCATION + 1,
	BINDSTATUS_LOADINGMIMEHANDLER	= BINDSTATUS_DECODING + 1,
	BINDSTATUS_CONTENTDISPOSITIONATTACH	= BINDSTATUS_LOADINGMIMEHANDLER + 1,
	BINDSTATUS_FILTERREPORTMIMETYPE	= BINDSTATUS_CONTENTDISPOSITIONATTACH + 1,
	BINDSTATUS_CLSIDCANINSTANTIATE	= BINDSTATUS_FILTERREPORTMIMETYPE + 1,
	BINDSTATUS_IUNKNOWNAVAILABLE	= BINDSTATUS_CLSIDCANINSTANTIATE + 1,
	BINDSTATUS_DIRECTBIND	= BINDSTATUS_IUNKNOWNAVAILABLE + 1,
	BINDSTATUS_RAWMIMETYPE	= BINDSTATUS_DIRECTBIND + 1,
	BINDSTATUS_PROXYDETECTING	= BINDSTATUS_RAWMIMETYPE + 1,
	BINDSTATUS_ACCEPTRANGES	= BINDSTATUS_PROXYDETECTING + 1,
	BINDSTATUS_COOKIE_SENT	= BINDSTATUS_ACCEPTRANGES + 1,
	BINDSTATUS_COMPACT_POLICY_RECEIVED	= BINDSTATUS_COOKIE_SENT + 1,
	BINDSTATUS_COOKIE_SUPPRESSED	= BINDSTATUS_COMPACT_POLICY_RECEIVED + 1,
	BINDSTATUS_COOKIE_STATE_UNKNOWN	= BINDSTATUS_COOKIE_SUPPRESSED + 1,
	BINDSTATUS_COOKIE_STATE_ACCEPT	= BINDSTATUS_COOKIE_STATE_UNKNOWN + 1,
	BINDSTATUS_COOKIE_STATE_REJECT	= BINDSTATUS_COOKIE_STATE_ACCEPT + 1,
	BINDSTATUS_COOKIE_STATE_PROMPT	= BINDSTATUS_COOKIE_STATE_REJECT + 1,
	BINDSTATUS_COOKIE_STATE_LEASH	= BINDSTATUS_COOKIE_STATE_PROMPT + 1,
	BINDSTATUS_COOKIE_STATE_DOWNGRADE	= BINDSTATUS_COOKIE_STATE_LEASH + 1,
	BINDSTATUS_POLICY_HREF	= BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1,
	BINDSTATUS_P3P_HEADER	= BINDSTATUS_POLICY_HREF + 1,
	BINDSTATUS_SESSION_COOKIE_RECEIVED	= BINDSTATUS_P3P_HEADER + 1,
	BINDSTATUS_PERSISTENT_COOKIE_RECEIVED	= BINDSTATUS_SESSION_COOKIE_RECEIVED + 1,
	BINDSTATUS_SESSION_COOKIES_ALLOWED	= BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1
    } 	BINDSTATUS;


extern "C" const IID IID_IBindStatusCallback;


    
    struct __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStartBinding( 
             DWORD dwReserved,
             IBinding *pib) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
             LONG *pnPriority) = 0;
        
        virtual HRESULT __stdcall OnLowResource( 
             DWORD reserved) = 0;
        
        virtual HRESULT __stdcall OnProgress( 
             ULONG ulProgress,
             ULONG ulProgressMax,
             ULONG ulStatusCode,
             LPCWSTR szStatusText) = 0;
        
        virtual HRESULT __stdcall OnStopBinding( 
             HRESULT hresult,
             LPCWSTR szError) = 0;
        
        virtual  HRESULT __stdcall GetBindInfo( 
             DWORD *grfBINDF,
             BINDINFO *pbindinfo) = 0;
        
        virtual  HRESULT __stdcall OnDataAvailable( 
             DWORD grfBSCF,
             DWORD dwSize,
             FORMATETC *pformatetc,
             STGMEDIUM *pstgmed) = 0;
        
        virtual HRESULT __stdcall OnObjectAvailable( 
             const IID & riid,
             IUnknown *punk) = 0;
        
    };
    













































































































#line 1485 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IBindStatusCallback_OnStartBinding_Proxy( 
    IBindStatusCallback * This,
     DWORD dwReserved,
     IBinding *pib);


void __stdcall IBindStatusCallback_OnStartBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_GetPriority_Proxy( 
    IBindStatusCallback * This,
     LONG *pnPriority);


void __stdcall IBindStatusCallback_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnLowResource_Proxy( 
    IBindStatusCallback * This,
     DWORD reserved);


void __stdcall IBindStatusCallback_OnLowResource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnProgress_Proxy( 
    IBindStatusCallback * This,
     ULONG ulProgress,
     ULONG ulProgressMax,
     ULONG ulStatusCode,
     LPCWSTR szStatusText);


void __stdcall IBindStatusCallback_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnStopBinding_Proxy( 
    IBindStatusCallback * This,
     HRESULT hresult,
     LPCWSTR szError);


void __stdcall IBindStatusCallback_OnStopBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy( 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     RemBINDINFO *pbindinfo,
     RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy( 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     RemFORMATETC *pformatetc,
     RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnObjectAvailable_Proxy( 
    IBindStatusCallback * This,
     const IID & riid,
     IUnknown *punk);


void __stdcall IBindStatusCallback_OnObjectAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1597 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 1603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0177_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0177_v0_0_s_ifspec;





 

typedef  IAuthenticate *LPAUTHENTICATION;


extern "C" const IID IID_IAuthenticate;


    
    struct __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Authenticate( 
             HWND *phwnd,
             LPWSTR *pszUsername,
             LPWSTR *pszPassword) = 0;
        
    };
    




















































#line 1687 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IAuthenticate_Authenticate_Proxy( 
    IAuthenticate * This,
     HWND *phwnd,
     LPWSTR *pszUsername,
     LPWSTR *pszPassword);


void __stdcall IAuthenticate_Authenticate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1706 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 1712 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_s_ifspec;





 

typedef  IHttpNegotiate *LPHTTPNEGOTIATE;


extern "C" const IID IID_IHttpNegotiate;


    
    struct __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall BeginningTransaction( 
             LPCWSTR szURL,
             LPCWSTR szHeaders,
             DWORD dwReserved,
             LPWSTR *pszAdditionalHeaders) = 0;
        
        virtual HRESULT __stdcall OnResponse( 
             DWORD dwResponseCode,
             LPCWSTR szResponseHeaders,
             LPCWSTR szRequestHeaders,
             LPWSTR *pszAdditionalRequestHeaders) = 0;
        
    };
    































































#line 1814 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IHttpNegotiate_BeginningTransaction_Proxy( 
    IHttpNegotiate * This,
     LPCWSTR szURL,
     LPCWSTR szHeaders,
     DWORD dwReserved,
     LPWSTR *pszAdditionalHeaders);


void __stdcall IHttpNegotiate_BeginningTransaction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IHttpNegotiate_OnResponse_Proxy( 
    IHttpNegotiate * This,
     DWORD dwResponseCode,
     LPCWSTR szResponseHeaders,
     LPCWSTR szRequestHeaders,
     LPWSTR *pszAdditionalRequestHeaders);


void __stdcall IHttpNegotiate_OnResponse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1849 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 1855 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_s_ifspec;





 

typedef  IHttpNegotiate2 *LPHTTPNEGOTIATE2;


extern "C" const IID IID_IHttpNegotiate2;


    
    struct __declspec(uuid("4F9F9FCB-E0F4-48eb-B7AB-FA2EA9365CB4")) __declspec(novtable)
    IHttpNegotiate2 : public IHttpNegotiate
    {
    public:
        virtual HRESULT __stdcall GetRootSecurityId( 
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved) = 0;
        
    };
    









































































#line 1960 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IHttpNegotiate2_GetRootSecurityId_Proxy( 
    IHttpNegotiate2 * This,
     BYTE *pbSecurityId,
     DWORD *pcbSecurityId,
     DWORD_PTR dwReserved);


void __stdcall IHttpNegotiate2_GetRootSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1979 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 1985 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0180_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0180_v0_0_s_ifspec;





 

typedef  IWindowForBindingUI *LPWINDOWFORBINDINGUI;


extern "C" const IID IID_IWindowForBindingUI;


    
    struct __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWindowForBindingUI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow( 
             const GUID & rguidReason,
             HWND *phwnd) = 0;
        
    };
    



















































#line 2067 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IWindowForBindingUI_GetWindow_Proxy( 
    IWindowForBindingUI * This,
     const GUID & rguidReason,
     HWND *phwnd);


void __stdcall IWindowForBindingUI_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2085 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 2091 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0181_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0181_v0_0_s_ifspec;





 

typedef  ICodeInstall *LPCODEINSTALL;

typedef  
enum __MIDL_ICodeInstall_0001
    {	CIP_DISK_FULL	= 0,
	CIP_ACCESS_DENIED	= CIP_DISK_FULL + 1,
	CIP_NEWER_VERSION_EXISTS	= CIP_ACCESS_DENIED + 1,
	CIP_OLDER_VERSION_EXISTS	= CIP_NEWER_VERSION_EXISTS + 1,
	CIP_NAME_CONFLICT	= CIP_OLDER_VERSION_EXISTS + 1,
	CIP_TRUST_VERIFICATION_COMPONENT_MISSING	= CIP_NAME_CONFLICT + 1,
	CIP_EXE_SELF_REGISTERATION_TIMEOUT	= CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1,
	CIP_UNSAFE_TO_ABORT	= CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1,
	CIP_NEED_REBOOT	= CIP_UNSAFE_TO_ABORT + 1
    } 	CIP_STATUS;


extern "C" const IID IID_ICodeInstall;


    
    struct __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    ICodeInstall : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnCodeInstallProblem( 
             ULONG ulStatusCode,
             LPCWSTR szDestination,
             LPCWSTR szSource,
             DWORD dwReserved) = 0;
        
    };
    






























































#line 2199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall ICodeInstall_OnCodeInstallProblem_Proxy( 
    ICodeInstall * This,
     ULONG ulStatusCode,
     LPCWSTR szDestination,
     LPCWSTR szSource,
     DWORD dwReserved);


void __stdcall ICodeInstall_OnCodeInstallProblem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2219 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 2225 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_s_ifspec;





 

typedef  IWinInetInfo *LPWININETINFO;


extern "C" const IID IID_IWinInetInfo;


    
    struct __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetInfo : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall QueryOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf) = 0;
        
    };
    




















































#line 2309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy( 
    IWinInetInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2328 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 2334 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_s_ifspec;





 

typedef  IHttpSecurity *LPHTTPSECURITY;


extern "C" const IID IID_IHttpSecurity;


    
    struct __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpSecurity : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnSecurityProblem( 
             DWORD dwProblem) = 0;
        
    };
    



























































#line 2424 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IHttpSecurity_OnSecurityProblem_Proxy( 
    IHttpSecurity * This,
     DWORD dwProblem);


void __stdcall IHttpSecurity_OnSecurityProblem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2441 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 2447 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_s_ifspec;





 

typedef  IWinInetHttpInfo *LPWININETHTTPINFO;


extern "C" const IID IID_IWinInetHttpInfo;


    
    struct __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetHttpInfo : public IWinInetInfo
    {
    public:
        virtual  HRESULT __stdcall QueryInfo( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf,
             DWORD *pdwFlags,
             DWORD *pdwReserved) = 0;
        
    };
    
































































#line 2545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy( 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2566 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 2572 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern "C" const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_s_ifspec;





 

typedef  IBindHost *LPBINDHOST;


extern "C" const IID IID_IBindHost;


    
    struct __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352")) __declspec(novtable)
    IBindHost : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateMoniker( 
             LPOLESTR szName,
             IBindCtx *pBC,
             IMoniker **ppmk,
             DWORD dwReserved) = 0;
        
        virtual  HRESULT __stdcall MonikerBindToStorage( 
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID & riid,
             void **ppvObj) = 0;
        
        virtual  HRESULT __stdcall MonikerBindToObject( 
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID & riid,
             void **ppvObj) = 0;
        
    };
    











































































#line 2697 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IBindHost_CreateMoniker_Proxy( 
    IBindHost * This,
     LPOLESTR szName,
     IBindCtx *pBC,
     IMoniker **ppmk,
     DWORD dwReserved);


void __stdcall IBindHost_CreateMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2749 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 2755 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"
                                                                                                           





                                                                                                           
                                                                                                           
struct IBindStatusCallback;                                                                                
extern "C" HRESULT __stdcall HlinkSimpleNavigateToString(                                                                        
     LPCWSTR szTarget,         
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern "C" HRESULT __stdcall HlinkSimpleNavigateToMoniker(                                                                       
     IMoniker *pmkTarget,      
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern "C" HRESULT __stdcall URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                        
extern "C" HRESULT __stdcall URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                       
extern "C" HRESULT __stdcall URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                    
extern "C" HRESULT __stdcall URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                   
extern "C" HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                             
extern "C" HRESULT __stdcall URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                           
extern "C" HRESULT __stdcall URLDownloadToCacheFileA(LPUNKNOWN,LPCSTR,LPTSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);                  
extern "C" HRESULT __stdcall URLDownloadToCacheFileW(LPUNKNOWN,LPCWSTR,LPWSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);                 
extern "C" HRESULT __stdcall URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                      
extern "C" HRESULT __stdcall URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                     
                                                                                                           












#line 2810 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"
                                                                                                           
                                                                                                           
extern "C" HRESULT __stdcall HlinkGoBack(IUnknown *pUnk);                                                                        
extern "C" HRESULT __stdcall HlinkGoForward(IUnknown *pUnk);                                                                     
extern "C" HRESULT __stdcall HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);                                              
extern "C" HRESULT __stdcall HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);                                          
                                                                                                           













extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_s_ifspec;





 

typedef  IInternet *LPIINTERNET;


extern "C" const IID IID_IInternet;


    
    struct __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternet : public IUnknown
    {
    public:
    };
    











































#line 2896 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




#line 2901 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 2907 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_s_ifspec;





 

typedef  IInternetBindInfo *LPIINTERNETBINDINFO;

typedef 
enum tagBINDSTRING
    {	BINDSTRING_HEADERS	= 1,
	BINDSTRING_ACCEPT_MIMES	= BINDSTRING_HEADERS + 1,
	BINDSTRING_EXTRA_URL	= BINDSTRING_ACCEPT_MIMES + 1,
	BINDSTRING_LANGUAGE	= BINDSTRING_EXTRA_URL + 1,
	BINDSTRING_USERNAME	= BINDSTRING_LANGUAGE + 1,
	BINDSTRING_PASSWORD	= BINDSTRING_USERNAME + 1,
	BINDSTRING_UA_PIXELS	= BINDSTRING_PASSWORD + 1,
	BINDSTRING_UA_COLOR	= BINDSTRING_UA_PIXELS + 1,
	BINDSTRING_OS	= BINDSTRING_UA_COLOR + 1,
	BINDSTRING_USER_AGENT	= BINDSTRING_OS + 1,
	BINDSTRING_ACCEPT_ENCODINGS	= BINDSTRING_USER_AGENT + 1,
	BINDSTRING_POST_COOKIE	= BINDSTRING_ACCEPT_ENCODINGS + 1,
	BINDSTRING_POST_DATA_MIME	= BINDSTRING_POST_COOKIE + 1,
	BINDSTRING_URL	= BINDSTRING_POST_DATA_MIME + 1,
	BINDSTRING_IID	= BINDSTRING_URL + 1,
	BINDSTRING_FLAG_BIND_TO_OBJECT	= BINDSTRING_IID + 1,
	BINDSTRING_PTR_BIND_CONTEXT	= BINDSTRING_FLAG_BIND_TO_OBJECT + 1
    } 	BINDSTRING;


extern "C" const IID IID_IInternetBindInfo;


    
    struct __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetBindInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindInfo( 
             DWORD *grfBINDF,
             BINDINFO *pbindinfo) = 0;
        
        virtual HRESULT __stdcall GetBindString( 
             ULONG ulStringType,
             LPOLESTR *ppwzStr,
             ULONG cEl,
             ULONG *pcElFetched) = 0;
        
    };
    





























































#line 3026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetBindInfo_GetBindInfo_Proxy( 
    IInternetBindInfo * This,
     DWORD *grfBINDF,
     BINDINFO *pbindinfo);


void __stdcall IInternetBindInfo_GetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetBindInfo_GetBindString_Proxy( 
    IInternetBindInfo * This,
     ULONG ulStringType,
     LPOLESTR *ppwzStr,
     ULONG cEl,
     ULONG *pcElFetched);


void __stdcall IInternetBindInfo_GetBindString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3059 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 3065 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_s_ifspec;





 

typedef  IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef 
enum _tagPI_FLAGS
    {	PI_PARSE_URL	= 0x1,
	PI_FILTER_MODE	= 0x2,
	PI_FORCE_ASYNC	= 0x4,
	PI_USE_WORKERTHREAD	= 0x8,
	PI_MIMEVERIFICATION	= 0x10,
	PI_CLSIDLOOKUP	= 0x20,
	PI_DATAPROGRESS	= 0x40,
	PI_SYNCHRONOUS	= 0x80,
	PI_APARTMENTTHREADED	= 0x100,
	PI_CLASSINSTALL	= 0x200,
	PI_PASSONBINDCTX	= 0x2000,
	PI_NOMIMEHANDLER	= 0x8000,
	PI_LOADAPPDIRECT	= 0x4000,
	PD_FORCE_SWITCH	= 0x10000,
	PI_PREFERDEFAULTHANDLER	= 0x20000
    } 	PI_FLAGS;

typedef struct _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    } 	PROTOCOLDATA;

typedef struct _tagStartParam
    {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } 	StartParam;


extern "C" const IID IID_IInternetProtocolRoot;


    
    struct __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolRoot : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Start( 
             LPCWSTR szUrl,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall Continue( 
             PROTOCOLDATA *pProtocolData) = 0;
        
        virtual HRESULT __stdcall Abort( 
             HRESULT hrReason,
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall Terminate( 
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall Suspend( void) = 0;
        
        virtual HRESULT __stdcall Resume( void) = 0;
        
    };
    
























































































#line 3235 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetProtocolRoot_Start_Proxy( 
    IInternetProtocolRoot * This,
     LPCWSTR szUrl,
     IInternetProtocolSink *pOIProtSink,
     IInternetBindInfo *pOIBindInfo,
     DWORD grfPI,
     HANDLE_PTR dwReserved);


void __stdcall IInternetProtocolRoot_Start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Continue_Proxy( 
    IInternetProtocolRoot * This,
     PROTOCOLDATA *pProtocolData);


void __stdcall IInternetProtocolRoot_Continue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Abort_Proxy( 
    IInternetProtocolRoot * This,
     HRESULT hrReason,
     DWORD dwOptions);


void __stdcall IInternetProtocolRoot_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Terminate_Proxy( 
    IInternetProtocolRoot * This,
     DWORD dwOptions);


void __stdcall IInternetProtocolRoot_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Suspend_Proxy( 
    IInternetProtocolRoot * This);


void __stdcall IInternetProtocolRoot_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Resume_Proxy( 
    IInternetProtocolRoot * This);


void __stdcall IInternetProtocolRoot_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3315 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 3321 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_s_ifspec;





 

typedef  IInternetProtocol *LPIINTERNETPROTOCOL;


extern "C" const IID IID_IInternetProtocol;


    
    struct __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocol : public IInternetProtocolRoot
    {
    public:
        virtual HRESULT __stdcall Read( 
             void *pv,
             ULONG cb,
             ULONG *pcbRead) = 0;
        
        virtual HRESULT __stdcall Seek( 
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition) = 0;
        
        virtual HRESULT __stdcall LockRequest( 
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall UnlockRequest( void) = 0;
        
    };
    
























































































































#line 3483 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetProtocol_Read_Proxy( 
    IInternetProtocol * This,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);


void __stdcall IInternetProtocol_Read_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_Seek_Proxy( 
    IInternetProtocol * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);


void __stdcall IInternetProtocol_Seek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_LockRequest_Proxy( 
    IInternetProtocol * This,
     DWORD dwOptions);


void __stdcall IInternetProtocol_LockRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_UnlockRequest_Proxy( 
    IInternetProtocol * This);


void __stdcall IInternetProtocol_UnlockRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3539 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 3545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_s_ifspec;





 

typedef  IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;


extern "C" const IID IID_IInternetProtocolSink;


    
    struct __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Switch( 
             PROTOCOLDATA *pProtocolData) = 0;
        
        virtual HRESULT __stdcall ReportProgress( 
             ULONG ulStatusCode,
             LPCWSTR szStatusText) = 0;
        
        virtual HRESULT __stdcall ReportData( 
             DWORD grfBSCF,
             ULONG ulProgress,
             ULONG ulProgressMax) = 0;
        
        virtual HRESULT __stdcall ReportResult( 
             HRESULT hrResult,
             DWORD dwError,
             LPCWSTR szResult) = 0;
        
    };
    












































































#line 3665 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetProtocolSink_Switch_Proxy( 
    IInternetProtocolSink * This,
     PROTOCOLDATA *pProtocolData);


void __stdcall IInternetProtocolSink_Switch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportProgress_Proxy( 
    IInternetProtocolSink * This,
     ULONG ulStatusCode,
     LPCWSTR szStatusText);


void __stdcall IInternetProtocolSink_ReportProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportData_Proxy( 
    IInternetProtocolSink * This,
     DWORD grfBSCF,
     ULONG ulProgress,
     ULONG ulProgressMax);


void __stdcall IInternetProtocolSink_ReportData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportResult_Proxy( 
    IInternetProtocolSink * This,
     HRESULT hrResult,
     DWORD dwError,
     LPCWSTR szResult);


void __stdcall IInternetProtocolSink_ReportResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3723 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 3729 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_s_ifspec;





 

typedef  IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;


extern "C" const IID IID_IInternetProtocolSinkStackable;


    
    struct __declspec(uuid("79eac9f0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSinkStackable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchSink( 
             IInternetProtocolSink *pOIProtSink) = 0;
        
        virtual HRESULT __stdcall CommitSwitch( void) = 0;
        
        virtual HRESULT __stdcall RollbackSwitch( void) = 0;
        
    };
    






























































#line 3825 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetProtocolSinkStackable_SwitchSink_Proxy( 
    IInternetProtocolSinkStackable * This,
     IInternetProtocolSink *pOIProtSink);


void __stdcall IInternetProtocolSinkStackable_SwitchSink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSinkStackable_CommitSwitch_Proxy( 
    IInternetProtocolSinkStackable * This);


void __stdcall IInternetProtocolSinkStackable_CommitSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSinkStackable_RollbackSwitch_Proxy( 
    IInternetProtocolSinkStackable * This);


void __stdcall IInternetProtocolSinkStackable_RollbackSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3864 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 3870 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_s_ifspec;





 

typedef  IInternetSession *LPIINTERNETSESSION;

typedef 
enum _tagOIBDG_FLAGS
    {	OIBDG_APARTMENTTHREADED	= 0x100,
	OIBDG_DATAONLY	= 0x1000
    } 	OIBDG_FLAGS;


extern "C" const IID IID_IInternetSession;


    
    struct __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSession : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterNameSpace( 
             IClassFactory *pCF,
             const IID & rclsid,
             LPCWSTR pwzProtocol,
             ULONG cPatterns,
             const LPCWSTR *ppwzPatterns,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall UnregisterNameSpace( 
             IClassFactory *pCF,
             LPCWSTR pszProtocol) = 0;
        
        virtual HRESULT __stdcall RegisterMimeFilter( 
             IClassFactory *pCF,
             const IID & rclsid,
             LPCWSTR pwzType) = 0;
        
        virtual HRESULT __stdcall UnregisterMimeFilter( 
             IClassFactory *pCF,
             LPCWSTR pwzType) = 0;
        
        virtual HRESULT __stdcall CreateBinding( 
             LPBC pBC,
             LPCWSTR szUrl,
             IUnknown *pUnkOuter,
             IUnknown **ppUnk,
             IInternetProtocol **ppOInetProt,
             DWORD dwOption) = 0;
        
        virtual HRESULT __stdcall SetSessionOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD dwBufferLength,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall GetSessionOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pdwBufferLength,
             DWORD dwReserved) = 0;
        
    };
    
















































































































#line 4056 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetSession_RegisterNameSpace_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     const IID & rclsid,
     LPCWSTR pwzProtocol,
     ULONG cPatterns,
     const LPCWSTR *ppwzPatterns,
     DWORD dwReserved);


void __stdcall IInternetSession_RegisterNameSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_UnregisterNameSpace_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     LPCWSTR pszProtocol);


void __stdcall IInternetSession_UnregisterNameSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_RegisterMimeFilter_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     const IID & rclsid,
     LPCWSTR pwzType);


void __stdcall IInternetSession_RegisterMimeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_UnregisterMimeFilter_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     LPCWSTR pwzType);


void __stdcall IInternetSession_UnregisterMimeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_CreateBinding_Proxy( 
    IInternetSession * This,
     LPBC pBC,
     LPCWSTR szUrl,
     IUnknown *pUnkOuter,
     IUnknown **ppUnk,
     IInternetProtocol **ppOInetProt,
     DWORD dwOption);


void __stdcall IInternetSession_CreateBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_SetSessionOption_Proxy( 
    IInternetSession * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD dwBufferLength,
     DWORD dwReserved);


void __stdcall IInternetSession_SetSessionOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_GetSessionOption_Proxy( 
    IInternetSession * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pdwBufferLength,
     DWORD dwReserved);


void __stdcall IInternetSession_GetSessionOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4165 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 4171 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_s_ifspec;





 

typedef  IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;


extern "C" const IID IID_IInternetThreadSwitch;


    
    struct __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetThreadSwitch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Prepare( void) = 0;
        
        virtual HRESULT __stdcall Continue( void) = 0;
        
    };
    























































#line 4257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetThreadSwitch_Prepare_Proxy( 
    IInternetThreadSwitch * This);


void __stdcall IInternetThreadSwitch_Prepare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetThreadSwitch_Continue_Proxy( 
    IInternetThreadSwitch * This);


void __stdcall IInternetThreadSwitch_Continue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4284 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 4290 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_s_ifspec;





 

typedef  IInternetPriority *LPIINTERNETPRIORITY;


extern "C" const IID IID_IInternetPriority;


    
    struct __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetPriority : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPriority( 
             LONG nPriority) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
             LONG *pnPriority) = 0;
        
    };
    

























































#line 4380 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetPriority_SetPriority_Proxy( 
    IInternetPriority * This,
     LONG nPriority);


void __stdcall IInternetPriority_SetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetPriority_GetPriority_Proxy( 
    IInternetPriority * This,
     LONG *pnPriority);


void __stdcall IInternetPriority_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4409 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 4415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_s_ifspec;





 

typedef  IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef 
enum _tagPARSEACTION
    {	PARSE_CANONICALIZE	= 1,
	PARSE_FRIENDLY	= PARSE_CANONICALIZE + 1,
	PARSE_SECURITY_URL	= PARSE_FRIENDLY + 1,
	PARSE_ROOTDOCUMENT	= PARSE_SECURITY_URL + 1,
	PARSE_DOCUMENT	= PARSE_ROOTDOCUMENT + 1,
	PARSE_ANCHOR	= PARSE_DOCUMENT + 1,
	PARSE_ENCODE	= PARSE_ANCHOR + 1,
	PARSE_DECODE	= PARSE_ENCODE + 1,
	PARSE_PATH_FROM_URL	= PARSE_DECODE + 1,
	PARSE_URL_FROM_PATH	= PARSE_PATH_FROM_URL + 1,
	PARSE_MIME	= PARSE_URL_FROM_PATH + 1,
	PARSE_SERVER	= PARSE_MIME + 1,
	PARSE_SCHEMA	= PARSE_SERVER + 1,
	PARSE_SITE	= PARSE_SCHEMA + 1,
	PARSE_DOMAIN	= PARSE_SITE + 1,
	PARSE_LOCATION	= PARSE_DOMAIN + 1,
	PARSE_SECURITY_DOMAIN	= PARSE_LOCATION + 1,
	PARSE_ESCAPE	= PARSE_SECURITY_DOMAIN + 1,
	PARSE_UNESCAPE	= PARSE_ESCAPE + 1
    } 	PARSEACTION;

typedef 
enum _tagPSUACTION
    {	PSU_DEFAULT	= 1,
	PSU_SECURITY_URL_ONLY	= PSU_DEFAULT + 1
    } 	PSUACTION;

typedef 
enum _tagQUERYOPTION
    {	QUERY_EXPIRATION_DATE	= 1,
	QUERY_TIME_OF_LAST_CHANGE	= QUERY_EXPIRATION_DATE + 1,
	QUERY_CONTENT_ENCODING	= QUERY_TIME_OF_LAST_CHANGE + 1,
	QUERY_CONTENT_TYPE	= QUERY_CONTENT_ENCODING + 1,
	QUERY_REFRESH	= QUERY_CONTENT_TYPE + 1,
	QUERY_RECOMBINE	= QUERY_REFRESH + 1,
	QUERY_CAN_NAVIGATE	= QUERY_RECOMBINE + 1,
	QUERY_USES_NETWORK	= QUERY_CAN_NAVIGATE + 1,
	QUERY_IS_CACHED	= QUERY_USES_NETWORK + 1,
	QUERY_IS_INSTALLEDENTRY	= QUERY_IS_CACHED + 1,
	QUERY_IS_CACHED_OR_MAPPED	= QUERY_IS_INSTALLEDENTRY + 1,
	QUERY_USES_CACHE	= QUERY_IS_CACHED_OR_MAPPED + 1,
	QUERY_IS_SECURE	= QUERY_USES_CACHE + 1,
	QUERY_IS_SAFE	= QUERY_IS_SECURE + 1
    } 	QUERYOPTION;


extern "C" const IID IID_IInternetProtocolInfo;


    
    struct __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseUrl( 
             LPCWSTR pwzUrl,
             PARSEACTION ParseAction,
             DWORD dwParseFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall CombineUrl( 
             LPCWSTR pwzBaseUrl,
             LPCWSTR pwzRelativeUrl,
             DWORD dwCombineFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall CompareUrl( 
             LPCWSTR pwzUrl1,
             LPCWSTR pwzUrl2,
             DWORD dwCompareFlags) = 0;
        
        virtual HRESULT __stdcall QueryInfo( 
             LPCWSTR pwzUrl,
             QUERYOPTION OueryOption,
             DWORD dwQueryFlags,
             LPVOID pBuffer,
             DWORD cbBuffer,
             DWORD *pcbBuf,
             DWORD dwReserved) = 0;
        
    };
    



























































































#line 4612 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetProtocolInfo_ParseUrl_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzUrl,
     PARSEACTION ParseAction,
     DWORD dwParseFlags,
     LPWSTR pwzResult,
     DWORD cchResult,
     DWORD *pcchResult,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_ParseUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_CombineUrl_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzBaseUrl,
     LPCWSTR pwzRelativeUrl,
     DWORD dwCombineFlags,
     LPWSTR pwzResult,
     DWORD cchResult,
     DWORD *pcchResult,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_CombineUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_CompareUrl_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzUrl1,
     LPCWSTR pwzUrl2,
     DWORD dwCompareFlags);


void __stdcall IInternetProtocolInfo_CompareUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_QueryInfo_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzUrl,
     QUERYOPTION OueryOption,
     DWORD dwQueryFlags,
     LPVOID pBuffer,
     DWORD cbBuffer,
     DWORD *pcbBuf,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_QueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4685 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 4691 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"































extern "C" HRESULT __stdcall CoInternetParseUrl(               
    LPCWSTR     pwzUrl,                  
    PARSEACTION ParseAction,             
    DWORD       dwFlags,                 
    LPWSTR      pszResult,               
    DWORD       cchResult,               
    DWORD      *pcchResult,              
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetCombineUrl(             
    LPCWSTR     pwzBaseUrl,              
    LPCWSTR     pwzRelativeUrl,          
    DWORD       dwCombineFlags,          
    LPWSTR      pszResult,               
    DWORD       cchResult,               
    DWORD      *pcchResult,              
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetCompareUrl(             
    LPCWSTR pwzUrl1,                     
    LPCWSTR pwzUrl2,                     
    DWORD dwFlags                        
    );                                   
extern "C" HRESULT __stdcall CoInternetGetProtocolFlags(       
    LPCWSTR     pwzUrl,                  
    DWORD      *pdwFlags,                
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetQueryInfo(              
    LPCWSTR     pwzUrl,                  
    QUERYOPTION QueryOptions,            
    DWORD       dwQueryFlags,            
    LPVOID      pvBuffer,                
    DWORD       cbBuffer,                
    DWORD      *pcbBuffer,               
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetGetSession(             
    DWORD       dwSessionMode,           
    IInternetSession **ppIInternetSession,
    DWORD       dwReserved               
    );                                   
extern "C" HRESULT __stdcall CoInternetGetSecurityUrl(         
    LPCWSTR pwzUrl,                      
    LPWSTR  *ppwzSecUrl,                 
    PSUACTION  psuAction,                
    DWORD   dwReserved                   
    );                                   
 
extern "C" HRESULT __stdcall CopyStgMedium(const STGMEDIUM * pcstgmedSrc,  
                           STGMEDIUM * pstgmedDest); 
extern "C" HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,   
                           BINDINFO * pbiDest ); 
extern "C" void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );  
 










#line 4788 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"







extern "C" HRESULT __stdcall CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern "C" HRESULT __stdcall CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern "C" const IID CLSID_InternetSecurityManager;  
extern "C" const IID CLSID_InternetZoneManager;  









extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_s_ifspec;





 


extern "C" const IID IID_IInternetSecurityMgrSite;


    
    struct __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityMgrSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow( 
             HWND *phwnd) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
    };
    

























































#line 4896 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetSecurityMgrSite_GetWindow_Proxy( 
    IInternetSecurityMgrSite * This,
     HWND *phwnd);


void __stdcall IInternetSecurityMgrSite_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityMgrSite_EnableModeless_Proxy( 
    IInternetSecurityMgrSite * This,
     BOOL fEnable);


void __stdcall IInternetSecurityMgrSite_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 4931 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_s_ifspec;





 





typedef  
enum __MIDL_IInternetSecurityManager_0001
    {	PUAF_DEFAULT	= 0,
	PUAF_NOUI	= 0x1,
	PUAF_ISFILE	= 0x2,
	PUAF_WARN_IF_DENIED	= 0x4,
	PUAF_FORCEUI_FOREGROUND	= 0x8,
	PUAF_CHECK_TIFS	= 0x10,
	PUAF_DONTCHECKBOXINDIALOG	= 0x20,
	PUAF_TRUSTED	= 0x40,
	PUAF_ACCEPT_WILDCARD_SCHEME	= 0x80,
	PUAF_ENFORCERESTRICTED	= 0x100
    } 	PUAF;







typedef  
enum __MIDL_IInternetSecurityManager_0002
    {	SZM_CREATE	= 0,
	SZM_DELETE	= 0x1
    } 	SZM_FLAGS;
















extern "C" const IID IID_IInternetSecurityManager;


    
    struct __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSecuritySite( 
             IInternetSecurityMgrSite *pSite) = 0;
        
        virtual HRESULT __stdcall GetSecuritySite( 
             IInternetSecurityMgrSite **ppSite) = 0;
        
        virtual HRESULT __stdcall MapUrlToZone( 
             LPCWSTR pwszUrl,
             DWORD *pdwZone,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetSecurityId( 
             LPCWSTR pwszUrl,
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall ProcessUrlAction( 
             LPCWSTR pwszUrl,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall QueryCustomPolicy( 
             LPCWSTR pwszUrl,
             const GUID & guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall SetZoneMapping( 
             DWORD dwZone,
             LPCWSTR lpszPattern,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetZoneMappings( 
             DWORD dwZone,
             IEnumString **ppenumString,
             DWORD dwFlags) = 0;
        
    };
    

























































































































#line 5167 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetSecurityManager_SetSecuritySite_Proxy( 
    IInternetSecurityManager * This,
     IInternetSecurityMgrSite *pSite);


void __stdcall IInternetSecurityManager_SetSecuritySite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetSecuritySite_Proxy( 
    IInternetSecurityManager * This,
     IInternetSecurityMgrSite **ppSite);


void __stdcall IInternetSecurityManager_GetSecuritySite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_MapUrlToZone_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     DWORD *pdwZone,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_MapUrlToZone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetSecurityId_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     BYTE *pbSecurityId,
     DWORD *pcbSecurityId,
     DWORD_PTR dwReserved);


void __stdcall IInternetSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_ProcessUrlAction_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwFlags,
     DWORD dwReserved);


void __stdcall IInternetSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_QueryCustomPolicy_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     const GUID & guidKey,
     BYTE **ppPolicy,
     DWORD *pcbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwReserved);


void __stdcall IInternetSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_SetZoneMapping_Proxy( 
    IInternetSecurityManager * This,
     DWORD dwZone,
     LPCWSTR lpszPattern,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_SetZoneMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetZoneMappings_Proxy( 
    IInternetSecurityManager * This,
     DWORD dwZone,
     IEnumString **ppenumString,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_GetZoneMappings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5290 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 5296 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"







extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_s_ifspec;





 


extern "C" const IID IID_IInternetHostSecurityManager;


    
    struct __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4")) __declspec(novtable)
    IInternetHostSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetSecurityId( 
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall ProcessUrlAction( 
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall QueryCustomPolicy( 
             const GUID & guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved) = 0;
        
    };
    













































































#line 5423 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetHostSecurityManager_GetSecurityId_Proxy( 
    IInternetHostSecurityManager * This,
     BYTE *pbSecurityId,
     DWORD *pcbSecurityId,
     DWORD_PTR dwReserved);


void __stdcall IInternetHostSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetHostSecurityManager_ProcessUrlAction_Proxy( 
    IInternetHostSecurityManager * This,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwFlags,
     DWORD dwReserved);


void __stdcall IInternetHostSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetHostSecurityManager_QueryCustomPolicy_Proxy( 
    IInternetHostSecurityManager * This,
     const GUID & guidKey,
     BYTE **ppPolicy,
     DWORD *pcbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwReserved);


void __stdcall IInternetHostSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5477 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 5483 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"
























































































































































extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_s_ifspec;





 

typedef  IInternetZoneManager *LPURLZONEMANAGER;

typedef 
enum tagURLZONE
    {	URLZONE_PREDEFINED_MIN	= 0,
	URLZONE_LOCAL_MACHINE	= 0,
	URLZONE_INTRANET	= URLZONE_LOCAL_MACHINE + 1,
	URLZONE_TRUSTED	= URLZONE_INTRANET + 1,
	URLZONE_INTERNET	= URLZONE_TRUSTED + 1,
	URLZONE_UNTRUSTED	= URLZONE_INTERNET + 1,
	URLZONE_PREDEFINED_MAX	= 999,
	URLZONE_USER_MIN	= 1000,
	URLZONE_USER_MAX	= 10000
    } 	URLZONE;

typedef 
enum tagURLTEMPLATE
    {	URLTEMPLATE_CUSTOM	= 0,
	URLTEMPLATE_PREDEFINED_MIN	= 0x10000,
	URLTEMPLATE_LOW	= 0x10000,
	URLTEMPLATE_MEDLOW	= 0x10500,
	URLTEMPLATE_MEDIUM	= 0x11000,
	URLTEMPLATE_HIGH	= 0x12000,
	URLTEMPLATE_PREDEFINED_MAX	= 0x20000
    } 	URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {	MAX_ZONE_PATH	= 260,
	MAX_ZONE_DESCRIPTION	= 200
    } ;
typedef  
enum __MIDL_IInternetZoneManager_0002
    {	ZAFLAGS_CUSTOM_EDIT	= 0x1,
	ZAFLAGS_ADD_SITES	= 0x2,
	ZAFLAGS_REQUIRE_VERIFICATION	= 0x4,
	ZAFLAGS_INCLUDE_PROXY_OVERRIDE	= 0x8,
	ZAFLAGS_INCLUDE_INTRANET_SITES	= 0x10,
	ZAFLAGS_NO_UI	= 0x20,
	ZAFLAGS_SUPPORTS_VERIFICATION	= 0x40,
	ZAFLAGS_UNC_AS_INTRANET	= 0x80
    } 	ZAFLAGS;

typedef struct _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    } 	ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;

















typedef 
enum _URLZONEREG
    {	URLZONEREG_DEFAULT	= 0,
	URLZONEREG_HKLM	= URLZONEREG_DEFAULT + 1,
	URLZONEREG_HKCU	= URLZONEREG_HKLM + 1
    } 	URLZONEREG;
































extern "C" const IID IID_IInternetZoneManager;


    
    struct __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetZoneManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributes( 
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes) = 0;
        
        virtual HRESULT __stdcall SetZoneAttributes( 
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes) = 0;
        
        virtual HRESULT __stdcall GetZoneCustomPolicy( 
             DWORD dwZone,
             const GUID & guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall SetZoneCustomPolicy( 
             DWORD dwZone,
             const GUID & guidKey,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall GetZoneActionPolicy( 
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall SetZoneActionPolicy( 
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall PromptAction( 
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags) = 0;
        
        virtual HRESULT __stdcall LogAction( 
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags) = 0;
        
        virtual HRESULT __stdcall CreateZoneEnumerator( 
             DWORD *pdwEnum,
             DWORD *pdwCount,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetZoneAt( 
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD *pdwZone) = 0;
        
        virtual HRESULT __stdcall DestroyZoneEnumerator( 
             DWORD dwEnum) = 0;
        
        virtual HRESULT __stdcall CopyTemplatePoliciesToZone( 
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved) = 0;
        
    };
    






























































































































































#line 5991 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IInternetZoneManager_GetZoneAttributes_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     ZONEATTRIBUTES *pZoneAttributes);


void __stdcall IInternetZoneManager_GetZoneAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneAttributes_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     ZONEATTRIBUTES *pZoneAttributes);


void __stdcall IInternetZoneManager_SetZoneAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneCustomPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     const GUID & guidKey,
     BYTE **ppPolicy,
     DWORD *pcbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_GetZoneCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneCustomPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     const GUID & guidKey,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_SetZoneCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneActionPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_GetZoneActionPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneActionPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_SetZoneActionPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_PromptAction_Proxy( 
    IInternetZoneManager * This,
     DWORD dwAction,
     HWND hwndParent,
     LPCWSTR pwszUrl,
     LPCWSTR pwszText,
     DWORD dwPromptFlags);


void __stdcall IInternetZoneManager_PromptAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_LogAction_Proxy( 
    IInternetZoneManager * This,
     DWORD dwAction,
     LPCWSTR pwszUrl,
     LPCWSTR pwszText,
     DWORD dwLogFlags);


void __stdcall IInternetZoneManager_LogAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_CreateZoneEnumerator_Proxy( 
    IInternetZoneManager * This,
     DWORD *pdwEnum,
     DWORD *pdwCount,
     DWORD dwFlags);


void __stdcall IInternetZoneManager_CreateZoneEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneAt_Proxy( 
    IInternetZoneManager * This,
     DWORD dwEnum,
     DWORD dwIndex,
     DWORD *pdwZone);


void __stdcall IInternetZoneManager_GetZoneAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_DestroyZoneEnumerator_Proxy( 
    IInternetZoneManager * This,
     DWORD dwEnum);


void __stdcall IInternetZoneManager_DestroyZoneEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy( 
    IInternetZoneManager * This,
     DWORD dwTemplate,
     DWORD dwZone,
     DWORD dwReserved);


void __stdcall IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6171 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 6177 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"
extern "C" const IID CLSID_SoftDistExt;  














typedef struct _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    } 	CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    } 	SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_s_ifspec;





 


extern "C" const IID IID_ISoftDistExt;


    
    struct __declspec(uuid("B15B8DC1-C7E1-11d0-8680-00AA00BDCB71")) __declspec(novtable)
    ISoftDistExt : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ProcessSoftDist( 
             LPCWSTR szCDFURL,
             IXMLElement *pSoftDistElement,
             LPSOFTDISTINFO lpsdi) = 0;
        
        virtual HRESULT __stdcall GetFirstCodeBase( 
             LPWSTR *szCodeBase,
             LPDWORD dwMaxSize) = 0;
        
        virtual HRESULT __stdcall GetNextCodeBase( 
             LPWSTR *szCodeBase,
             LPDWORD dwMaxSize) = 0;
        
        virtual HRESULT __stdcall AsyncInstallDistributionUnit( 
             IBindCtx *pbc,
             LPVOID pvReserved,
             DWORD flags,
             LPCODEBASEHOLD lpcbh) = 0;
        
    };
    














































































#line 6343 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall ISoftDistExt_ProcessSoftDist_Proxy( 
    ISoftDistExt * This,
     LPCWSTR szCDFURL,
     IXMLElement *pSoftDistElement,
     LPSOFTDISTINFO lpsdi);


void __stdcall ISoftDistExt_ProcessSoftDist_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_GetFirstCodeBase_Proxy( 
    ISoftDistExt * This,
     LPWSTR *szCodeBase,
     LPDWORD dwMaxSize);


void __stdcall ISoftDistExt_GetFirstCodeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_GetNextCodeBase_Proxy( 
    ISoftDistExt * This,
     LPWSTR *szCodeBase,
     LPDWORD dwMaxSize);


void __stdcall ISoftDistExt_GetNextCodeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_AsyncInstallDistributionUnit_Proxy( 
    ISoftDistExt * This,
     IBindCtx *pbc,
     LPVOID pvReserved,
     DWORD flags,
     LPCODEBASEHOLD lpcbh);


void __stdcall ISoftDistExt_AsyncInstallDistributionUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6403 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

extern "C" HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern "C" HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );
#line 6411 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_s_ifspec;





 

typedef  ICatalogFileInfo *LPCATALOGFILEINFO;


extern "C" const IID IID_ICatalogFileInfo;


    
    struct __declspec(uuid("711C7600-6B48-11d1-B403-00AA00B92AF1")) __declspec(novtable)
    ICatalogFileInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCatalogFile( 
             LPSTR *ppszCatalogFile) = 0;
        
        virtual HRESULT __stdcall GetJavaTrust( 
             void **ppJavaTrust) = 0;
        
    };
    

























































#line 6501 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall ICatalogFileInfo_GetCatalogFile_Proxy( 
    ICatalogFileInfo * This,
     LPSTR *ppszCatalogFile);


void __stdcall ICatalogFileInfo_GetCatalogFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatalogFileInfo_GetJavaTrust_Proxy( 
    ICatalogFileInfo * This,
     void **ppJavaTrust);


void __stdcall ICatalogFileInfo_GetJavaTrust_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6530 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 6536 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_s_ifspec;





 

typedef  IDataFilter *LPDATAFILTER;


extern "C" const IID IID_IDataFilter;


    
    struct __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IDataFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DoEncode( 
             DWORD dwFlags,
             LONG lInBufferSize,
             BYTE *pbInBuffer,
             LONG lOutBufferSize,
             BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
             LONG *plInBytesRead,
             LONG *plOutBytesWritten,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall DoDecode( 
             DWORD dwFlags,
             LONG lInBufferSize,
             BYTE *pbInBuffer,
             LONG lOutBufferSize,
             BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
             LONG *plInBytesRead,
             LONG *plOutBytesWritten,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall SetEncodingLevel( 
             DWORD dwEncLevel) = 0;
        
    };
    
















































































#line 6668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IDataFilter_DoEncode_Proxy( 
    IDataFilter * This,
     DWORD dwFlags,
     LONG lInBufferSize,
     BYTE *pbInBuffer,
     LONG lOutBufferSize,
     BYTE *pbOutBuffer,
     LONG lInBytesAvailable,
     LONG *plInBytesRead,
     LONG *plOutBytesWritten,
     DWORD dwReserved);


void __stdcall IDataFilter_DoEncode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataFilter_DoDecode_Proxy( 
    IDataFilter * This,
     DWORD dwFlags,
     LONG lInBufferSize,
     BYTE *pbInBuffer,
     LONG lOutBufferSize,
     BYTE *pbOutBuffer,
     LONG lInBytesAvailable,
     LONG *plInBytesRead,
     LONG *plOutBytesWritten,
     DWORD dwReserved);


void __stdcall IDataFilter_DoDecode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataFilter_SetEncodingLevel_Proxy( 
    IDataFilter * This,
     DWORD dwEncLevel);


void __stdcall IDataFilter_SetEncodingLevel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6725 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 6731 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"


typedef struct _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } 	PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_s_ifspec;





 

typedef  IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    } 	DATAINFO;


extern "C" const IID IID_IEncodingFilterFactory;


    
    struct __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IEncodingFilterFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FindBestFilter( 
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             DATAINFO info,
             IDataFilter **ppDF) = 0;
        
        virtual HRESULT __stdcall GetDefaultFilter( 
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             IDataFilter **ppDF) = 0;
        
    };
    






























































#line 6848 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IEncodingFilterFactory_FindBestFilter_Proxy( 
    IEncodingFilterFactory * This,
     LPCWSTR pwzCodeIn,
     LPCWSTR pwzCodeOut,
     DATAINFO info,
     IDataFilter **ppDF);


void __stdcall IEncodingFilterFactory_FindBestFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEncodingFilterFactory_GetDefaultFilter_Proxy( 
    IEncodingFilterFactory * This,
     LPCWSTR pwzCodeIn,
     LPCWSTR pwzCodeOut,
     IDataFilter **ppDF);


void __stdcall IEncodingFilterFactory_GetDefaultFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6882 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 6888 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



BOOL __stdcall IsLoggingEnabledA( LPCSTR  pszUrl);                    
BOOL __stdcall IsLoggingEnabledW( LPCWSTR  pwszUrl);                  




#line 6898 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"
typedef struct _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    } 	HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);    

struct CONFIRMSAFETY
    {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern "C" const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY; 
#line 6919 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_s_ifspec;





 

typedef  IWrappedProtocol *LPIWRAPPEDPROTOCOL;


extern "C" const IID IID_IWrappedProtocol;


    
    struct __declspec(uuid("53c84785-8425-4dc5-971b-e58d9c19f9b6")) __declspec(novtable)
    IWrappedProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWrapperCode( 
             LONG *pnCode,
             DWORD_PTR dwReserved) = 0;
        
    };
    



















































#line 7001 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



HRESULT __stdcall IWrappedProtocol_GetWrapperCode_Proxy( 
    IWrappedProtocol * This,
     LONG *pnCode,
     DWORD_PTR dwReserved);


void __stdcall IWrappedProtocol_GetWrapperCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7019 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"



 

#line 7025 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_s_ifspec;



unsigned long             __stdcall  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __stdcall  HWND_UserFree(     unsigned long *, HWND * ); 

 HRESULT __stdcall IBinding_GetBindResult_Proxy( 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     LPOLESTR *pszResult,
     DWORD *pdwReserved);


 HRESULT __stdcall IBinding_GetBindResult_Stub( 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     LPOLESTR *pszResult,
     DWORD dwReserved);

 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy( 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     BINDINFO *pbindinfo);


 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub( 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     RemBINDINFO *pbindinfo,
     RemSTGMEDIUM *pstgmed);

 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy( 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     FORMATETC *pformatetc,
     STGMEDIUM *pstgmed);


 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub( 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     RemFORMATETC *pformatetc,
     RemSTGMEDIUM *pstgmed);

 HRESULT __stdcall IWinInetInfo_QueryOption_Proxy( 
    IWinInetInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf);


 HRESULT __stdcall IWinInetInfo_QueryOption_Stub( 
    IWinInetInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf);

 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy( 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);


 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub( 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);

 HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     void **ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     IUnknown **ppvObj);

 HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     void **ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToObject_Stub( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     IUnknown **ppvObj);






}
#line 7150 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"

#line 7152 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\urlmon.h"


#line 832 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"

 



typedef struct IPropertyStorage IPropertyStorage;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"




typedef struct IPropertySetStorage IPropertySetStorage;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"




typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"




typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"







extern "C"{
#line 76 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 









#pragma warning(push)
#line 93 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"
#pragma warning(disable:4201)    
#pragma warning(disable:4237)    
#line 96 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"

#pragma once
#line 99 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



typedef struct tagVersionedStream
    {
    GUID guidVersion;
    IStream *pStream;
    } 	VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;

























typedef struct tagPROPVARIANT PROPVARIANT;
#line 136 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"
typedef struct tagCAC
    {
    ULONG cElems;
     CHAR *pElems;
    } 	CAC;

typedef struct tagCAUB
    {
    ULONG cElems;
     UCHAR *pElems;
    } 	CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
     SHORT *pElems;
    } 	CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
     USHORT *pElems;
    } 	CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
     LONG *pElems;
    } 	CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
     ULONG *pElems;
    } 	CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
     FLOAT *pElems;
    } 	CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
     DOUBLE *pElems;
    } 	CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
     CY *pElems;
    } 	CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
     DATE *pElems;
    } 	CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
     BSTR *pElems;
    } 	CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
     BSTRBLOB *pElems;
    } 	CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
     VARIANT_BOOL *pElems;
    } 	CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
     SCODE *pElems;
    } 	CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
     PROPVARIANT *pElems;
    } 	CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
     LARGE_INTEGER *pElems;
    } 	CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
     ULARGE_INTEGER *pElems;
    } 	CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
     LPSTR *pElems;
    } 	CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
     LPWSTR *pElems;
    } 	CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
     FILETIME *pElems;
    } 	CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
     CLIPDATA *pElems;
    } 	CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
     CLSID *pElems;
    } 	CACLSID;











typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;

#line 283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"

struct tagPROPVARIANT {
  union {
#line 287 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"
struct 
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
      union 
        {
           
         CHAR cVal;
         UCHAR bVal;
         SHORT iVal;
         USHORT uiVal;
         LONG lVal;
         ULONG ulVal;
         INT intVal;
         UINT uintVal;
         LARGE_INTEGER hVal;
         ULARGE_INTEGER uhVal;
         FLOAT fltVal;
         DOUBLE dblVal;
         VARIANT_BOOL boolVal;
         
         SCODE scode;
         CY cyVal;
         DATE date;
         FILETIME filetime;
         CLSID *puuid;
         CLIPDATA *pclipdata;
         BSTR bstrVal;
         BSTRBLOB bstrblobVal;
         BLOB blob;
         LPSTR pszVal;
         LPWSTR pwszVal;
         IUnknown *punkVal;
         IDispatch *pdispVal;
         IStream *pStream;
         IStorage *pStorage;
         LPVERSIONEDSTREAM pVersionedStream;
         LPSAFEARRAY parray;
         CAC cac;
         CAUB caub;
         CAI cai;
         CAUI caui;
         CAL cal;
         CAUL caul;
         CAH cah;
         CAUH cauh;
         CAFLT caflt;
         CADBL cadbl;
         CABOOL cabool;
         CASCODE cascode;
         CACY cacy;
         CADATE cadate;
         CAFILETIME cafiletime;
         CACLSID cauuid;
         CACLIPDATA caclipdata;
         CABSTR cabstr;
         CABSTRBLOB cabstrblob;
         CALPSTR calpstr;
         CALPWSTR calpwstr;
         CAPROPVARIANT capropvar;
         CHAR *pcVal;
         UCHAR *pbVal;
         SHORT *piVal;
         USHORT *puiVal;
         LONG *plVal;
         ULONG *pulVal;
         INT *pintVal;
         UINT *puintVal;
         FLOAT *pfltVal;
         DOUBLE *pdblVal;
         VARIANT_BOOL *pboolVal;
         DECIMAL *pdecVal;
         SCODE *pscode;
         CY *pcyVal;
         DATE *pdate;
         BSTR *pbstrVal;
         IUnknown **ppunkVal;
         IDispatch **ppdispVal;
         LPSAFEARRAY *pparray;
         PROPVARIANT *pvarVal;
        } 	;
    } ;

    DECIMAL decVal;
  };
};
#line 376 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"






typedef struct tagPROPVARIANT * LPPROPVARIANT;
#line 384 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



















































































enum PIDMSI_STATUS_VALUE
    {	PIDMSI_STATUS_NORMAL	= 0,
	PIDMSI_STATUS_NEW	= PIDMSI_STATUS_NORMAL + 1,
	PIDMSI_STATUS_PRELIM	= PIDMSI_STATUS_NEW + 1,
	PIDMSI_STATUS_DRAFT	= PIDMSI_STATUS_PRELIM + 1,
	PIDMSI_STATUS_INPROGRESS	= PIDMSI_STATUS_DRAFT + 1,
	PIDMSI_STATUS_EDIT	= PIDMSI_STATUS_INPROGRESS + 1,
	PIDMSI_STATUS_REVIEW	= PIDMSI_STATUS_EDIT + 1,
	PIDMSI_STATUS_PROOF	= PIDMSI_STATUS_REVIEW + 1,
	PIDMSI_STATUS_FINAL	= PIDMSI_STATUS_PROOF + 1,
	PIDMSI_STATUS_OTHER	= 0x7fff
    } ;






typedef struct tagPROPSPEC
    {
    ULONG ulKind;
      union 
        {
         PROPID propid;
         LPOLESTR lpwstr;
           
        } 	;
    } 	PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } 	STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } 	STATPROPSETSTG;



extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_s_ifspec;





 


extern "C" const IID IID_IPropertyStorage;


    
    struct __declspec(uuid("00000138-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertyStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadMultiple( 
             ULONG cpspec,
             const PROPSPEC rgpspec[  ],
             PROPVARIANT rgpropvar[  ]) = 0;
        
        virtual HRESULT __stdcall WriteMultiple( 
             ULONG cpspec,
             const PROPSPEC rgpspec[  ],
             const PROPVARIANT rgpropvar[  ],
             PROPID propidNameFirst) = 0;
        
        virtual HRESULT __stdcall DeleteMultiple( 
             ULONG cpspec,
             const PROPSPEC rgpspec[  ]) = 0;
        
        virtual HRESULT __stdcall ReadPropertyNames( 
             ULONG cpropid,
             const PROPID rgpropid[  ],
             LPOLESTR rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall WritePropertyNames( 
             ULONG cpropid,
             const PROPID rgpropid[  ],
             const LPOLESTR rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall DeletePropertyNames( 
             ULONG cpropid,
             const PROPID rgpropid[  ]) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall Enum( 
             IEnumSTATPROPSTG **ppenum) = 0;
        
        virtual HRESULT __stdcall SetTimes( 
             const FILETIME *pctime,
             const FILETIME *patime,
             const FILETIME *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
             const IID & clsid) = 0;
        
        virtual HRESULT __stdcall Stat( 
             STATPROPSETSTG *pstatpsstg) = 0;
        
    };
    











































































































































#line 729 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



HRESULT __stdcall IPropertyStorage_ReadMultiple_Proxy( 
    IPropertyStorage * This,
     ULONG cpspec,
     const PROPSPEC rgpspec[  ],
     PROPVARIANT rgpropvar[  ]);


void __stdcall IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WriteMultiple_Proxy( 
    IPropertyStorage * This,
     ULONG cpspec,
     const PROPSPEC rgpspec[  ],
     const PROPVARIANT rgpropvar[  ],
     PROPID propidNameFirst);


void __stdcall IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeleteMultiple_Proxy( 
    IPropertyStorage * This,
     ULONG cpspec,
     const PROPSPEC rgpspec[  ]);


void __stdcall IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_ReadPropertyNames_Proxy( 
    IPropertyStorage * This,
     ULONG cpropid,
     const PROPID rgpropid[  ],
     LPOLESTR rglpwstrName[  ]);


void __stdcall IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WritePropertyNames_Proxy( 
    IPropertyStorage * This,
     ULONG cpropid,
     const PROPID rgpropid[  ],
     const LPOLESTR rglpwstrName[  ]);


void __stdcall IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeletePropertyNames_Proxy( 
    IPropertyStorage * This,
     ULONG cpropid,
     const PROPID rgpropid[  ]);


void __stdcall IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Commit_Proxy( 
    IPropertyStorage * This,
     DWORD grfCommitFlags);


void __stdcall IPropertyStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Revert_Proxy( 
    IPropertyStorage * This);


void __stdcall IPropertyStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Enum_Proxy( 
    IPropertyStorage * This,
     IEnumSTATPROPSTG **ppenum);


void __stdcall IPropertyStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetTimes_Proxy( 
    IPropertyStorage * This,
     const FILETIME *pctime,
     const FILETIME *patime,
     const FILETIME *pmtime);


void __stdcall IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetClass_Proxy( 
    IPropertyStorage * This,
     const IID & clsid);


void __stdcall IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Stat_Proxy( 
    IPropertyStorage * This,
     STATPROPSETSTG *pstatpsstg);


void __stdcall IPropertyStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 890 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"






 

typedef  IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern "C" const IID IID_IPropertySetStorage;


    
    struct __declspec(uuid("0000013A-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertySetStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Create( 
             const IID & rfmtid,
             const CLSID *pclsid,
             DWORD grfFlags,
             DWORD grfMode,
             IPropertyStorage **ppprstg) = 0;
        
        virtual HRESULT __stdcall Open( 
             const IID & rfmtid,
             DWORD grfMode,
             IPropertyStorage **ppprstg) = 0;
        
        virtual HRESULT __stdcall Delete( 
             const IID & rfmtid) = 0;
        
        virtual HRESULT __stdcall Enum( 
             IEnumSTATPROPSETSTG **ppenum) = 0;
        
    };
    













































































#line 1007 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



HRESULT __stdcall IPropertySetStorage_Create_Proxy( 
    IPropertySetStorage * This,
     const IID & rfmtid,
     const CLSID *pclsid,
     DWORD grfFlags,
     DWORD grfMode,
     IPropertyStorage **ppprstg);


void __stdcall IPropertySetStorage_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Open_Proxy( 
    IPropertySetStorage * This,
     const IID & rfmtid,
     DWORD grfMode,
     IPropertyStorage **ppprstg);


void __stdcall IPropertySetStorage_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Delete_Proxy( 
    IPropertySetStorage * This,
     const IID & rfmtid);


void __stdcall IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Enum_Proxy( 
    IPropertySetStorage * This,
     IEnumSTATPROPSETSTG **ppenum);


void __stdcall IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1066 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"






 

typedef  IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern "C" const IID IID_IEnumSTATPROPSTG;


    
    struct __declspec(uuid("00000139-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATPROPSTG *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATPROPSTG **ppenum) = 0;
        
    };
    








































































#line 1173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



 HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     STATPROPSTG *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Skip_Proxy( 
    IEnumSTATPROPSTG * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Reset_Proxy( 
    IEnumSTATPROPSTG * This);


void __stdcall IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Clone_Proxy( 
    IEnumSTATPROPSTG * This,
     IEnumSTATPROPSTG **ppenum);


void __stdcall IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1227 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"






 

typedef  IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern "C" const IID IID_IEnumSTATPROPSETSTG;


    
    struct __declspec(uuid("0000013B-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSETSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             STATPROPSETSTG *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumSTATPROPSETSTG **ppenum) = 0;
        
    };
    








































































#line 1334 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



 HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     STATPROPSETSTG *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Skip_Proxy( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Reset_Proxy( 
    IEnumSTATPROPSETSTG * This);


void __stdcall IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Clone_Proxy( 
    IEnumSTATPROPSETSTG * This,
     IEnumSTATPROPSETSTG **ppenum);


void __stdcall IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1388 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



 

typedef  IPropertyStorage *LPPROPERTYSTORAGE;

extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantCopy ( PROPVARIANT * pvarDest, const PROPVARIANT * pvarSrc );
extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantClear ( PROPVARIANT * pvar );
extern "C" __declspec(dllimport) HRESULT __stdcall FreePropVariantArray ( ULONG cVariants, PROPVARIANT * rgvars );



inline void PropVariantInit ( PROPVARIANT * pvar )
{
    memset ( pvar, 0, sizeof(PROPVARIANT) );
}


#line 1408 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"



extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropStg( IUnknown* pUnk, const IID & fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenPropStg( IUnknown* pUnk, const IID & fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropSetStg( IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg);


extern "C" __declspec(dllimport) HRESULT __stdcall FmtIdToPropStgName( const FMTID *pfmtid, LPOLESTR oszName );
extern "C" __declspec(dllimport) HRESULT __stdcall PropStgNameToFmtId( const LPOLESTR oszName, FMTID *pfmtid );
#line 1419 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"

#pragma warning(pop)



#line 1425 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"


extern RPC_IF_HANDLE __MIDL_itf_propidl_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0114_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __stdcall  LPSAFEARRAY_UserSize(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserMarshal(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __stdcall  LPSAFEARRAY_UserFree(     unsigned long *, LPSAFEARRAY * ); 

 HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy( 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     STATPROPSTG *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub( 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     STATPROPSTG *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     STATPROPSETSTG *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     STATPROPSETSTG *rgelt,
     ULONG *pceltFetched);






}
#line 1475 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"

#line 1477 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\propidl.h"


#line 833 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"




extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdProgressIndicator( HWND hwndParent,
                                     LPCOLESTR pszTitle,
                                     IBindStatusCallback * pIbscCaller,
                                    IBindStatusCallback ** ppIbsc);


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 844 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 845 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"

#line 847 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objbase.h"
#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"
#line 26 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"




	#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"

















#pragma once
#line 20 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"



#line 24 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 27 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"
#line 28 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"

 



typedef struct IEnumConnections IEnumConnections;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IConnectionPoint IConnectionPoint;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IEnumConnectionPoints IEnumConnectionPoints;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IConnectionPointContainer IConnectionPointContainer;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IClassFactory2 IClassFactory2;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IProvideClassInfo IProvideClassInfo;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IProvideClassInfo2 IProvideClassInfo2;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IProvideMultipleClassInfo IProvideMultipleClassInfo;
#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleControl IOleControl;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleControlSite IOleControlSite;
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPropertyPage IPropertyPage;
#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPropertyPage2 IPropertyPage2;
#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPropertyPageSite IPropertyPageSite;
#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPropertyNotifySink IPropertyNotifySink;
#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct ISpecifyPropertyPages ISpecifyPropertyPages;
#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPersistMemory IPersistMemory;
#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPersistStreamInit IPersistStreamInit;
#line 145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPersistPropertyBag IPersistPropertyBag;
#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct ISimpleFrameSite ISimpleFrameSite;
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IFont IFont;
#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPicture IPicture;
#line 169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IFontEventsDisp IFontEventsDisp;
#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IFontDisp IFontDisp;
#line 181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPictureDisp IPictureDisp;
#line 187 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleInPlaceObjectWindowless IOleInPlaceObjectWindowless;
#line 193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleInPlaceSiteEx IOleInPlaceSiteEx;
#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleInPlaceSiteWindowless IOleInPlaceSiteWindowless;
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IViewObjectEx IViewObjectEx;
#line 211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleUndoUnit IOleUndoUnit;
#line 217 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleParentUndoUnit IOleParentUndoUnit;
#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IEnumOleUndoUnits IEnumOleUndoUnits;
#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IOleUndoManager IOleUndoManager;
#line 235 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPointerInactive IPointerInactive;
#line 241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IObjectWithSite IObjectWithSite;
#line 247 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPerPropertyBrowsing IPerPropertyBrowsing;
#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPropertyBag2 IPropertyBag2;
#line 259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IPersistPropertyBag2 IPersistPropertyBag2;
#line 265 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IAdviseSinkEx IAdviseSinkEx;
#line 271 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




typedef struct IQuickActivate IQuickActivate;
#line 277 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"









extern "C"{
#line 288 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 








#pragma once
#line 304 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"











































extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_v0_0_s_ifspec;





 

typedef  
enum tagUASFLAGS
    {	UAS_NORMAL	= 0,
	UAS_BLOCKED	= 0x1,
	UAS_NOPARENTENABLE	= 0x2,
	UAS_MASK	= 0x3
    } 	UASFLAGS;


typedef  
enum tagREADYSTATE
    {	READYSTATE_UNINITIALIZED	= 0,
	READYSTATE_LOADING	= 1,
	READYSTATE_LOADED	= 2,
	READYSTATE_INTERACTIVE	= 3,
	READYSTATE_COMPLETE	= 4
    } 	READYSTATE;



extern RPC_IF_HANDLE IOleControlTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleControlTypes_v1_0_s_ifspec;
#line 379 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"





 

typedef IEnumConnections *PENUMCONNECTIONS;

typedef IEnumConnections *LPENUMCONNECTIONS;

typedef struct tagCONNECTDATA
    {
    IUnknown *pUnk;
    DWORD dwCookie;
    } 	CONNECTDATA;

typedef struct tagCONNECTDATA *PCONNECTDATA;

typedef struct tagCONNECTDATA *LPCONNECTDATA;


extern "C" const IID IID_IEnumConnections;


    
    struct __declspec(uuid("B196B287-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IEnumConnections : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG cConnections,
             LPCONNECTDATA rgcd,
             ULONG *pcFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG cConnections) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumConnections **ppEnum) = 0;
        
    };
    








































































#line 497 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



 HRESULT __stdcall IEnumConnections_RemoteNext_Proxy( 
    IEnumConnections * This,
     ULONG cConnections,
     LPCONNECTDATA rgcd,
     ULONG *pcFetched);


void __stdcall IEnumConnections_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnections_Skip_Proxy( 
    IEnumConnections * This,
     ULONG cConnections);


void __stdcall IEnumConnections_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnections_Reset_Proxy( 
    IEnumConnections * This);


void __stdcall IEnumConnections_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnections_Clone_Proxy( 
    IEnumConnections * This,
     IEnumConnections **ppEnum);


void __stdcall IEnumConnections_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 551 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IConnectionPoint *PCONNECTIONPOINT;

typedef IConnectionPoint *LPCONNECTIONPOINT;


extern "C" const IID IID_IConnectionPoint;


    
    struct __declspec(uuid("B196B286-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IConnectionPoint : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetConnectionInterface( 
             IID *pIID) = 0;
        
        virtual HRESULT __stdcall GetConnectionPointContainer( 
             IConnectionPointContainer **ppCPC) = 0;
        
        virtual HRESULT __stdcall Advise( 
             IUnknown *pUnkSink,
             DWORD *pdwCookie) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwCookie) = 0;
        
        virtual HRESULT __stdcall EnumConnections( 
             IEnumConnections **ppEnum) = 0;
        
    };
    















































































#line 670 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IConnectionPoint_GetConnectionInterface_Proxy( 
    IConnectionPoint * This,
     IID *pIID);


void __stdcall IConnectionPoint_GetConnectionInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_GetConnectionPointContainer_Proxy( 
    IConnectionPoint * This,
     IConnectionPointContainer **ppCPC);


void __stdcall IConnectionPoint_GetConnectionPointContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_Advise_Proxy( 
    IConnectionPoint * This,
     IUnknown *pUnkSink,
     DWORD *pdwCookie);


void __stdcall IConnectionPoint_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_Unadvise_Proxy( 
    IConnectionPoint * This,
     DWORD dwCookie);


void __stdcall IConnectionPoint_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPoint_EnumConnections_Proxy( 
    IConnectionPoint * This,
     IEnumConnections **ppEnum);


void __stdcall IConnectionPoint_EnumConnections_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 736 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS;

typedef IEnumConnectionPoints *LPENUMCONNECTIONPOINTS;


extern "C" const IID IID_IEnumConnectionPoints;


    
    struct __declspec(uuid("B196B285-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IEnumConnectionPoints : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG cConnections,
             LPCONNECTIONPOINT *ppCP,
             ULONG *pcFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG cConnections) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumConnectionPoints **ppEnum) = 0;
        
    };
    








































































#line 845 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



 HRESULT __stdcall IEnumConnectionPoints_RemoteNext_Proxy( 
    IEnumConnectionPoints * This,
     ULONG cConnections,
     LPCONNECTIONPOINT *ppCP,
     ULONG *pcFetched);


void __stdcall IEnumConnectionPoints_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnectionPoints_Skip_Proxy( 
    IEnumConnectionPoints * This,
     ULONG cConnections);


void __stdcall IEnumConnectionPoints_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnectionPoints_Reset_Proxy( 
    IEnumConnectionPoints * This);


void __stdcall IEnumConnectionPoints_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumConnectionPoints_Clone_Proxy( 
    IEnumConnectionPoints * This,
     IEnumConnectionPoints **ppEnum);


void __stdcall IEnumConnectionPoints_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 899 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER;

typedef IConnectionPointContainer *LPCONNECTIONPOINTCONTAINER;


extern "C" const IID IID_IConnectionPointContainer;


    
    struct __declspec(uuid("B196B284-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IConnectionPointContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnumConnectionPoints( 
             IEnumConnectionPoints **ppEnum) = 0;
        
        virtual HRESULT __stdcall FindConnectionPoint( 
             const IID & riid,
             IConnectionPoint **ppCP) = 0;
        
    };
    


























































#line 988 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IConnectionPointContainer_EnumConnectionPoints_Proxy( 
    IConnectionPointContainer * This,
     IEnumConnectionPoints **ppEnum);


void __stdcall IConnectionPointContainer_EnumConnectionPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IConnectionPointContainer_FindConnectionPoint_Proxy( 
    IConnectionPointContainer * This,
     const IID & riid,
     IConnectionPoint **ppCP);


void __stdcall IConnectionPointContainer_FindConnectionPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1018 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IClassFactory2 *LPCLASSFACTORY2;

typedef struct tagLICINFO
    {
    LONG cbLicInfo;
    BOOL fRuntimeKeyAvail;
    BOOL fLicVerified;
    } 	LICINFO;

typedef struct tagLICINFO *LPLICINFO;


extern "C" const IID IID_IClassFactory2;


    
    struct __declspec(uuid("B196B28F-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IClassFactory2 : public IClassFactory
    {
    public:
        virtual HRESULT __stdcall GetLicInfo( 
             LICINFO *pLicInfo) = 0;
        
        virtual HRESULT __stdcall RequestLicKey( 
             DWORD dwReserved,
             BSTR *pBstrKey) = 0;
        
        virtual  HRESULT __stdcall CreateInstanceLic( 
             IUnknown *pUnkOuter,
             IUnknown *pUnkReserved,
             const IID & riid,
             BSTR bstrKey,
             PVOID *ppvObj) = 0;
        
    };
    






















































































#line 1149 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IClassFactory2_GetLicInfo_Proxy( 
    IClassFactory2 * This,
     LICINFO *pLicInfo);


void __stdcall IClassFactory2_GetLicInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IClassFactory2_RequestLicKey_Proxy( 
    IClassFactory2 * This,
     DWORD dwReserved,
     BSTR *pBstrKey);


void __stdcall IClassFactory2_RequestLicKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IClassFactory2_RemoteCreateInstanceLic_Proxy( 
    IClassFactory2 * This,
     const IID & riid,
     BSTR bstrKey,
     IUnknown **ppvObj);


void __stdcall IClassFactory2_RemoteCreateInstanceLic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IProvideClassInfo *LPPROVIDECLASSINFO;


extern "C" const IID IID_IProvideClassInfo;


    
    struct __declspec(uuid("B196B283-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IProvideClassInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassInfoA( 
             ITypeInfo **ppTI) = 0;
        
    };
    


















































#line 1268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IProvideClassInfo_GetClassInfo_Proxy( 
    IProvideClassInfo * This,
     ITypeInfo **ppTI);


void __stdcall IProvideClassInfo_GetClassInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1285 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IProvideClassInfo2 *LPPROVIDECLASSINFO2;

typedef 
enum tagGUIDKIND
    {	GUIDKIND_DEFAULT_SOURCE_DISP_IID	= 1
    } 	GUIDKIND;


extern "C" const IID IID_IProvideClassInfo2;


    
    struct __declspec(uuid("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")) __declspec(novtable)
    IProvideClassInfo2 : public IProvideClassInfo
    {
    public:
        virtual HRESULT __stdcall GetGUID( 
             DWORD dwGuidKind,
             GUID *pGUID) = 0;
        
    };
    



























































#line 1375 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IProvideClassInfo2_GetGUID_Proxy( 
    IProvideClassInfo2 * This,
     DWORD dwGuidKind,
     GUID *pGUID);


void __stdcall IProvideClassInfo2_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1393 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 






typedef IProvideMultipleClassInfo *LPPROVIDEMULTIPLECLASSINFO;


extern "C" const IID IID_IProvideMultipleClassInfo;


    
    struct __declspec(uuid("A7ABA9C1-8983-11cf-8F20-00805F2CD064")) __declspec(novtable)
    IProvideMultipleClassInfo : public IProvideClassInfo2
    {
    public:
        virtual HRESULT __stdcall GetMultiTypeInfoCount( 
             ULONG *pcti) = 0;
        
        virtual HRESULT __stdcall GetInfoOfIndex( 
             ULONG iti,
             DWORD dwFlags,
             ITypeInfo **pptiCoClass,
             DWORD *pdwTIFlags,
             ULONG *pcdispidReserved,
             IID *piidPrimary,
             IID *piidSource) = 0;
        
    };
    
















































































#line 1512 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IProvideMultipleClassInfo_GetMultiTypeInfoCount_Proxy( 
    IProvideMultipleClassInfo * This,
     ULONG *pcti);


void __stdcall IProvideMultipleClassInfo_GetMultiTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IProvideMultipleClassInfo_GetInfoOfIndex_Proxy( 
    IProvideMultipleClassInfo * This,
     ULONG iti,
     DWORD dwFlags,
     ITypeInfo **pptiCoClass,
     DWORD *pdwTIFlags,
     ULONG *pcdispidReserved,
     IID *piidPrimary,
     IID *piidSource);


void __stdcall IProvideMultipleClassInfo_GetInfoOfIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1547 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IOleControl *LPOLECONTROL;

typedef struct tagCONTROLINFO
    {
    ULONG cb;
    HACCEL hAccel;
    USHORT cAccel;
    DWORD dwFlags;
    } 	CONTROLINFO;

typedef struct tagCONTROLINFO *LPCONTROLINFO;

typedef 
enum tagCTRLINFO
    {	CTRLINFO_EATS_RETURN	= 1,
	CTRLINFO_EATS_ESCAPE	= 2
    } 	CTRLINFO;


extern "C" const IID IID_IOleControl;


    
    struct __declspec(uuid("B196B288-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IOleControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetControlInfo( 
             CONTROLINFO *pCI) = 0;
        
        virtual HRESULT __stdcall OnMnemonic( 
             MSG *pMsg) = 0;
        
        virtual HRESULT __stdcall OnAmbientPropertyChange( 
             DISPID dispID) = 0;
        
        virtual HRESULT __stdcall FreezeEvents( 
             BOOL bFreeze) = 0;
        
    };
    







































































#line 1668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleControl_GetControlInfo_Proxy( 
    IOleControl * This,
     CONTROLINFO *pCI);


void __stdcall IOleControl_GetControlInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControl_OnMnemonic_Proxy( 
    IOleControl * This,
     MSG *pMsg);


void __stdcall IOleControl_OnMnemonic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControl_OnAmbientPropertyChange_Proxy( 
    IOleControl * This,
     DISPID dispID);


void __stdcall IOleControl_OnAmbientPropertyChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControl_FreezeEvents_Proxy( 
    IOleControl * This,
     BOOL bFreeze);


void __stdcall IOleControl_FreezeEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1721 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IOleControlSite *LPOLECONTROLSITE;

typedef struct tagPOINTF
    {
    FLOAT x;
    FLOAT y;
    } 	POINTF;

typedef struct tagPOINTF *LPPOINTF;

typedef 
enum tagXFORMCOORDS
    {	XFORMCOORDS_POSITION	= 0x1,
	XFORMCOORDS_SIZE	= 0x2,
	XFORMCOORDS_HIMETRICTOCONTAINER	= 0x4,
	XFORMCOORDS_CONTAINERTOHIMETRIC	= 0x8,
	XFORMCOORDS_EVENTCOMPAT	= 0x10
    } 	XFORMCOORDS;


extern "C" const IID IID_IOleControlSite;


    
    struct __declspec(uuid("B196B289-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IOleControlSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnControlInfoChanged( void) = 0;
        
        virtual HRESULT __stdcall LockInPlaceActive( 
             BOOL fLock) = 0;
        
        virtual HRESULT __stdcall GetExtendedControl( 
             IDispatch **ppDisp) = 0;
        
        virtual HRESULT __stdcall TransformCoords( 
             POINTL *pPtlHimetric,
             POINTF *pPtfContainer,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             MSG *pMsg,
             DWORD grfModifiers) = 0;
        
        virtual HRESULT __stdcall OnFocus( 
             BOOL fGotFocus) = 0;
        
        virtual HRESULT __stdcall ShowPropertyFrame( void) = 0;
        
    };
    





























































































#line 1875 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleControlSite_OnControlInfoChanged_Proxy( 
    IOleControlSite * This);


void __stdcall IOleControlSite_OnControlInfoChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_LockInPlaceActive_Proxy( 
    IOleControlSite * This,
     BOOL fLock);


void __stdcall IOleControlSite_LockInPlaceActive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_GetExtendedControl_Proxy( 
    IOleControlSite * This,
     IDispatch **ppDisp);


void __stdcall IOleControlSite_GetExtendedControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_TransformCoords_Proxy( 
    IOleControlSite * This,
     POINTL *pPtlHimetric,
     POINTF *pPtfContainer,
     DWORD dwFlags);


void __stdcall IOleControlSite_TransformCoords_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_TranslateAccelerator_Proxy( 
    IOleControlSite * This,
     MSG *pMsg,
     DWORD grfModifiers);


void __stdcall IOleControlSite_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_OnFocus_Proxy( 
    IOleControlSite * This,
     BOOL fGotFocus);


void __stdcall IOleControlSite_OnFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleControlSite_ShowPropertyFrame_Proxy( 
    IOleControlSite * This);


void __stdcall IOleControlSite_ShowPropertyFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1965 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPropertyPage *LPPROPERTYPAGE;

typedef struct tagPROPPAGEINFO
    {
    ULONG cb;
    LPOLESTR pszTitle;
    SIZE size;
    LPOLESTR pszDocString;
    LPOLESTR pszHelpFile;
    DWORD dwHelpContext;
    } 	PROPPAGEINFO;

typedef struct tagPROPPAGEINFO *LPPROPPAGEINFO;


extern "C" const IID IID_IPropertyPage;


    
    struct __declspec(uuid("B196B28D-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IPropertyPage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPageSite( 
             IPropertyPageSite *pPageSite) = 0;
        
        virtual HRESULT __stdcall Activate( 
             HWND hWndParent,
             LPCRECT pRect,
             BOOL bModal) = 0;
        
        virtual HRESULT __stdcall Deactivate( void) = 0;
        
        virtual HRESULT __stdcall GetPageInfo( 
             PROPPAGEINFO *pPageInfo) = 0;
        
        virtual HRESULT __stdcall SetObjects( 
             ULONG cObjects,
             IUnknown **ppUnk) = 0;
        
        virtual HRESULT __stdcall Show( 
             UINT nCmdShow) = 0;
        
        virtual HRESULT __stdcall Move( 
             LPCRECT pRect) = 0;
        
        virtual HRESULT __stdcall IsPageDirty( void) = 0;
        
        virtual HRESULT __stdcall Apply( void) = 0;
        
        virtual HRESULT __stdcall Help( 
             LPCOLESTR pszHelpDir) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             MSG *pMsg) = 0;
        
    };
    
























































































































#line 2152 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPropertyPage_SetPageSite_Proxy( 
    IPropertyPage * This,
     IPropertyPageSite *pPageSite);


void __stdcall IPropertyPage_SetPageSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Activate_Proxy( 
    IPropertyPage * This,
     HWND hWndParent,
     LPCRECT pRect,
     BOOL bModal);


void __stdcall IPropertyPage_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Deactivate_Proxy( 
    IPropertyPage * This);


void __stdcall IPropertyPage_Deactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_GetPageInfo_Proxy( 
    IPropertyPage * This,
     PROPPAGEINFO *pPageInfo);


void __stdcall IPropertyPage_GetPageInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_SetObjects_Proxy( 
    IPropertyPage * This,
     ULONG cObjects,
     IUnknown **ppUnk);


void __stdcall IPropertyPage_SetObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Show_Proxy( 
    IPropertyPage * This,
     UINT nCmdShow);


void __stdcall IPropertyPage_Show_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Move_Proxy( 
    IPropertyPage * This,
     LPCRECT pRect);


void __stdcall IPropertyPage_Move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_IsPageDirty_Proxy( 
    IPropertyPage * This);


void __stdcall IPropertyPage_IsPageDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Apply_Proxy( 
    IPropertyPage * This);


void __stdcall IPropertyPage_Apply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_Help_Proxy( 
    IPropertyPage * This,
     LPCOLESTR pszHelpDir);


void __stdcall IPropertyPage_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPage_TranslateAccelerator_Proxy( 
    IPropertyPage * This,
     MSG *pMsg);


void __stdcall IPropertyPage_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPropertyPage2 *LPPROPERTYPAGE2;


extern "C" const IID IID_IPropertyPage2;


    
    struct __declspec(uuid("01E44665-24AC-101B-84ED-08002B2EC713")) __declspec(novtable)
    IPropertyPage2 : public IPropertyPage
    {
    public:
        virtual HRESULT __stdcall EditProperty( 
             DISPID dispID) = 0;
        
    };
    
































































































































#line 2442 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPropertyPage2_EditProperty_Proxy( 
    IPropertyPage2 * This,
     DISPID dispID);


void __stdcall IPropertyPage2_EditProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2459 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPropertyPageSite *LPPROPERTYPAGESITE;

typedef 
enum tagPROPPAGESTATUS
    {	PROPPAGESTATUS_DIRTY	= 0x1,
	PROPPAGESTATUS_VALIDATE	= 0x2,
	PROPPAGESTATUS_CLEAN	= 0x4
    } 	PROPPAGESTATUS;


extern "C" const IID IID_IPropertyPageSite;


    
    struct __declspec(uuid("B196B28C-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IPropertyPageSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStatusChange( 
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetLocaleID( 
             LCID *pLocaleID) = 0;
        
        virtual HRESULT __stdcall GetPageContainer( 
             IUnknown **ppUnk) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             MSG *pMsg) = 0;
        
    };
    







































































#line 2571 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPropertyPageSite_OnStatusChange_Proxy( 
    IPropertyPageSite * This,
     DWORD dwFlags);


void __stdcall IPropertyPageSite_OnStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPageSite_GetLocaleID_Proxy( 
    IPropertyPageSite * This,
     LCID *pLocaleID);


void __stdcall IPropertyPageSite_GetLocaleID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPageSite_GetPageContainer_Proxy( 
    IPropertyPageSite * This,
     IUnknown **ppUnk);


void __stdcall IPropertyPageSite_GetPageContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyPageSite_TranslateAccelerator_Proxy( 
    IPropertyPageSite * This,
     MSG *pMsg);


void __stdcall IPropertyPageSite_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2624 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPropertyNotifySink *LPPROPERTYNOTIFYSINK;


extern "C" const IID IID_IPropertyNotifySink;


    
    struct __declspec(uuid("9BFBBC02-EFF1-101A-84ED-00AA00341D07")) __declspec(novtable)
    IPropertyNotifySink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnChanged( 
             DISPID dispID) = 0;
        
        virtual HRESULT __stdcall OnRequestEdit( 
             DISPID dispID) = 0;
        
    };
    

























































#line 2709 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPropertyNotifySink_OnChanged_Proxy( 
    IPropertyNotifySink * This,
     DISPID dispID);


void __stdcall IPropertyNotifySink_OnChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyNotifySink_OnRequestEdit_Proxy( 
    IPropertyNotifySink * This,
     DISPID dispID);


void __stdcall IPropertyNotifySink_OnRequestEdit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2738 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef ISpecifyPropertyPages *LPSPECIFYPROPERTYPAGES;

typedef struct tagCAUUID
    {
    ULONG cElems;
     GUID *pElems;
    } 	CAUUID;

typedef struct tagCAUUID *LPCAUUID;


extern "C" const IID IID_ISpecifyPropertyPages;


    
    struct __declspec(uuid("B196B28B-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    ISpecifyPropertyPages : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPages( 
             CAUUID *pPages) = 0;
        
    };
    


















































#line 2821 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall ISpecifyPropertyPages_GetPages_Proxy( 
    ISpecifyPropertyPages * This,
     CAUUID *pPages);


void __stdcall ISpecifyPropertyPages_GetPages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2838 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPersistMemory *LPPERSISTMEMORY;


extern "C" const IID IID_IPersistMemory;


    
    struct __declspec(uuid("BD1AE5E0-A6AE-11CE-BD37-504200C10000")) __declspec(novtable)
    IPersistMemory : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual  HRESULT __stdcall Load( 
             LPVOID pMem,
             ULONG cbSize) = 0;
        
        virtual  HRESULT __stdcall Save( 
             LPVOID pMem,
             BOOL fClearDirty,
             ULONG cbSize) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
             ULONG *pCbSize) = 0;
        
        virtual HRESULT __stdcall InitNew( void) = 0;
        
    };
    























































































#line 2963 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPersistMemory_IsDirty_Proxy( 
    IPersistMemory * This);


void __stdcall IPersistMemory_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IPersistMemory_RemoteLoad_Proxy( 
    IPersistMemory * This,
     BYTE *pMem,
     ULONG cbSize);


void __stdcall IPersistMemory_RemoteLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IPersistMemory_RemoteSave_Proxy( 
    IPersistMemory * This,
     BYTE *pMem,
     BOOL fClearDirty,
     ULONG cbSize);


void __stdcall IPersistMemory_RemoteSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMemory_GetSizeMax_Proxy( 
    IPersistMemory * This,
     ULONG *pCbSize);


void __stdcall IPersistMemory_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMemory_InitNew_Proxy( 
    IPersistMemory * This);


void __stdcall IPersistMemory_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3029 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPersistStreamInit *LPPERSISTSTREAMINIT;


extern "C" const IID IID_IPersistStreamInit;


    
    struct __declspec(uuid("7FD52380-4E07-101B-AE2D-08002B2EC713")) __declspec(novtable)
    IPersistStreamInit : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             LPSTREAM pStm) = 0;
        
        virtual HRESULT __stdcall Save( 
             LPSTREAM pStm,
             BOOL fClearDirty) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
             ULARGE_INTEGER *pCbSize) = 0;
        
        virtual HRESULT __stdcall InitNew( void) = 0;
        
    };
    





















































































#line 3150 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPersistStreamInit_IsDirty_Proxy( 
    IPersistStreamInit * This);


void __stdcall IPersistStreamInit_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_Load_Proxy( 
    IPersistStreamInit * This,
     LPSTREAM pStm);


void __stdcall IPersistStreamInit_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_Save_Proxy( 
    IPersistStreamInit * This,
     LPSTREAM pStm,
     BOOL fClearDirty);


void __stdcall IPersistStreamInit_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_GetSizeMax_Proxy( 
    IPersistStreamInit * This,
     ULARGE_INTEGER *pCbSize);


void __stdcall IPersistStreamInit_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStreamInit_InitNew_Proxy( 
    IPersistStreamInit * This);


void __stdcall IPersistStreamInit_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3214 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPersistPropertyBag *LPPERSISTPROPERTYBAG;


extern "C" const IID IID_IPersistPropertyBag;


    
    struct __declspec(uuid("37D84F60-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPersistPropertyBag : public IPersist
    {
    public:
        virtual HRESULT __stdcall InitNew( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             IPropertyBag *pPropBag,
             IErrorLog *pErrorLog) = 0;
        
        virtual HRESULT __stdcall Save( 
             IPropertyBag *pPropBag,
             BOOL fClearDirty,
             BOOL fSaveAllProperties) = 0;
        
    };
    










































































#line 3321 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPersistPropertyBag_InitNew_Proxy( 
    IPersistPropertyBag * This);


void __stdcall IPersistPropertyBag_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistPropertyBag_Load_Proxy( 
    IPersistPropertyBag * This,
     IPropertyBag *pPropBag,
     IErrorLog *pErrorLog);


void __stdcall IPersistPropertyBag_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistPropertyBag_Save_Proxy( 
    IPersistPropertyBag * This,
     IPropertyBag *pPropBag,
     BOOL fClearDirty,
     BOOL fSaveAllProperties);


void __stdcall IPersistPropertyBag_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3364 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef ISimpleFrameSite *LPSIMPLEFRAMESITE;


extern "C" const IID IID_ISimpleFrameSite;


    
    struct __declspec(uuid("742B0E01-14E6-101B-914E-00AA00300CAB")) __declspec(novtable)
    ISimpleFrameSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreMessageFilter( 
             HWND hWnd,
             UINT msg,
             WPARAM wp,
             LPARAM lp,
             LRESULT *plResult,
             DWORD *pdwCookie) = 0;
        
        virtual HRESULT __stdcall PostMessageFilter( 
             HWND hWnd,
             UINT msg,
             WPARAM wp,
             LPARAM lp,
             LRESULT *plResult,
             DWORD dwCookie) = 0;
        
    };
    



































































#line 3469 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall ISimpleFrameSite_PreMessageFilter_Proxy( 
    ISimpleFrameSite * This,
     HWND hWnd,
     UINT msg,
     WPARAM wp,
     LPARAM lp,
     LRESULT *plResult,
     DWORD *pdwCookie);


void __stdcall ISimpleFrameSite_PreMessageFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISimpleFrameSite_PostMessageFilter_Proxy( 
    ISimpleFrameSite * This,
     HWND hWnd,
     UINT msg,
     WPARAM wp,
     LPARAM lp,
     LRESULT *plResult,
     DWORD dwCookie);


void __stdcall ISimpleFrameSite_PostMessageFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3508 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IFont *LPFONT;


typedef TEXTMETRICW TEXTMETRICOLE;



#line 3524 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"
typedef TEXTMETRICOLE *LPTEXTMETRICOLE;


extern "C" const IID IID_IFont;


    
    struct __declspec(uuid("BEF6E002-A874-101A-8BBA-00AA00300CAB")) __declspec(novtable)
    IFont : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Name( 
             BSTR *pName) = 0;
        
        virtual HRESULT __stdcall put_Name( 
             BSTR name) = 0;
        
        virtual HRESULT __stdcall get_Size( 
             CY *pSize) = 0;
        
        virtual HRESULT __stdcall put_Size( 
             CY size) = 0;
        
        virtual HRESULT __stdcall get_Bold( 
             BOOL *pBold) = 0;
        
        virtual HRESULT __stdcall put_Bold( 
             BOOL bold) = 0;
        
        virtual HRESULT __stdcall get_Italic( 
             BOOL *pItalic) = 0;
        
        virtual HRESULT __stdcall put_Italic( 
             BOOL italic) = 0;
        
        virtual HRESULT __stdcall get_Underline( 
             BOOL *pUnderline) = 0;
        
        virtual HRESULT __stdcall put_Underline( 
             BOOL underline) = 0;
        
        virtual HRESULT __stdcall get_Strikethrough( 
             BOOL *pStrikethrough) = 0;
        
        virtual HRESULT __stdcall put_Strikethrough( 
             BOOL strikethrough) = 0;
        
        virtual HRESULT __stdcall get_Weight( 
             SHORT *pWeight) = 0;
        
        virtual HRESULT __stdcall put_Weight( 
             SHORT weight) = 0;
        
        virtual HRESULT __stdcall get_Charset( 
             SHORT *pCharset) = 0;
        
        virtual HRESULT __stdcall put_Charset( 
             SHORT charset) = 0;
        
        virtual HRESULT __stdcall get_hFont( 
             HFONT *phFont) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IFont **ppFont) = 0;
        
        virtual HRESULT __stdcall IsEqual( 
             IFont *pFontOther) = 0;
        
        virtual HRESULT __stdcall SetRatio( 
             LONG cyLogical,
             LONG cyHimetric) = 0;
        
        virtual HRESULT __stdcall QueryTextMetrics( 
             TEXTMETRICOLE *pTM) = 0;
        
        virtual HRESULT __stdcall AddRefHfont( 
             HFONT hFont) = 0;
        
        virtual HRESULT __stdcall ReleaseHfont( 
             HFONT hFont) = 0;
        
        virtual HRESULT __stdcall SetHdc( 
             HDC hDC) = 0;
        
    };
    




















































































































































































































#line 3823 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IFont_get_Name_Proxy( 
    IFont * This,
     BSTR *pName);


void __stdcall IFont_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Name_Proxy( 
    IFont * This,
     BSTR name);


void __stdcall IFont_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Size_Proxy( 
    IFont * This,
     CY *pSize);


void __stdcall IFont_get_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Size_Proxy( 
    IFont * This,
     CY size);


void __stdcall IFont_put_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Bold_Proxy( 
    IFont * This,
     BOOL *pBold);


void __stdcall IFont_get_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Bold_Proxy( 
    IFont * This,
     BOOL bold);


void __stdcall IFont_put_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Italic_Proxy( 
    IFont * This,
     BOOL *pItalic);


void __stdcall IFont_get_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Italic_Proxy( 
    IFont * This,
     BOOL italic);


void __stdcall IFont_put_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Underline_Proxy( 
    IFont * This,
     BOOL *pUnderline);


void __stdcall IFont_get_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Underline_Proxy( 
    IFont * This,
     BOOL underline);


void __stdcall IFont_put_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Strikethrough_Proxy( 
    IFont * This,
     BOOL *pStrikethrough);


void __stdcall IFont_get_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Strikethrough_Proxy( 
    IFont * This,
     BOOL strikethrough);


void __stdcall IFont_put_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Weight_Proxy( 
    IFont * This,
     SHORT *pWeight);


void __stdcall IFont_get_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Weight_Proxy( 
    IFont * This,
     SHORT weight);


void __stdcall IFont_put_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_Charset_Proxy( 
    IFont * This,
     SHORT *pCharset);


void __stdcall IFont_get_Charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_put_Charset_Proxy( 
    IFont * This,
     SHORT charset);


void __stdcall IFont_put_Charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_get_hFont_Proxy( 
    IFont * This,
     HFONT *phFont);


void __stdcall IFont_get_hFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_Clone_Proxy( 
    IFont * This,
     IFont **ppFont);


void __stdcall IFont_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_IsEqual_Proxy( 
    IFont * This,
     IFont *pFontOther);


void __stdcall IFont_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_SetRatio_Proxy( 
    IFont * This,
     LONG cyLogical,
     LONG cyHimetric);


void __stdcall IFont_SetRatio_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_QueryTextMetrics_Proxy( 
    IFont * This,
     TEXTMETRICOLE *pTM);


void __stdcall IFont_QueryTextMetrics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_AddRefHfont_Proxy( 
    IFont * This,
     HFONT hFont);


void __stdcall IFont_AddRefHfont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_ReleaseHfont_Proxy( 
    IFont * This,
     HFONT hFont);


void __stdcall IFont_ReleaseHfont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFont_SetHdc_Proxy( 
    IFont * This,
     HDC hDC);


void __stdcall IFont_SetHdc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4117 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPicture *LPPICTURE;

typedef 
enum tagPictureAttributes
    {	PICTURE_SCALABLE	= 0x1,
	PICTURE_TRANSPARENT	= 0x2
    } 	PICTUREATTRIBUTES;

typedef   __declspec(uuid("66504313-BE0F-101A-8BBB-00AA00300CAB")) UINT OLE_HANDLE;

typedef   __declspec(uuid("66504306-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_XPOS_HIMETRIC;

typedef   __declspec(uuid("66504307-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_YPOS_HIMETRIC;

typedef   __declspec(uuid("66504308-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_XSIZE_HIMETRIC;

typedef   __declspec(uuid("66504309-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_YSIZE_HIMETRIC;


extern "C" const IID IID_IPicture;


    
    struct __declspec(uuid("7BF80980-BF32-101A-8BBB-00AA00300CAB")) __declspec(novtable)
    IPicture : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Handle( 
             OLE_HANDLE *pHandle) = 0;
        
        virtual HRESULT __stdcall get_hPal( 
             OLE_HANDLE *phPal) = 0;
        
        virtual HRESULT __stdcall get_Type( 
             SHORT *pType) = 0;
        
        virtual HRESULT __stdcall get_Width( 
             OLE_XSIZE_HIMETRIC *pWidth) = 0;
        
        virtual HRESULT __stdcall get_Height( 
             OLE_YSIZE_HIMETRIC *pHeight) = 0;
        
        virtual HRESULT __stdcall Render( 
             HDC hDC,
             LONG x,
             LONG y,
             LONG cx,
             LONG cy,
             OLE_XPOS_HIMETRIC xSrc,
             OLE_YPOS_HIMETRIC ySrc,
             OLE_XSIZE_HIMETRIC cxSrc,
             OLE_YSIZE_HIMETRIC cySrc,
             LPCRECT pRcWBounds) = 0;
        
        virtual HRESULT __stdcall set_hPal( 
             OLE_HANDLE hPal) = 0;
        
        virtual HRESULT __stdcall get_CurDC( 
             HDC *phDC) = 0;
        
        virtual HRESULT __stdcall SelectPicture( 
             HDC hDCIn,
             HDC *phDCOut,
             OLE_HANDLE *phBmpOut) = 0;
        
        virtual HRESULT __stdcall get_KeepOriginalFormat( 
             BOOL *pKeep) = 0;
        
        virtual HRESULT __stdcall put_KeepOriginalFormat( 
             BOOL keep) = 0;
        
        virtual HRESULT __stdcall PictureChanged( void) = 0;
        
        virtual HRESULT __stdcall SaveAsFile( 
             LPSTREAM pStream,
             BOOL fSaveMemCopy,
             LONG *pCbSize) = 0;
        
        virtual HRESULT __stdcall get_Attributes( 
             DWORD *pDwAttr) = 0;
        
    };
    

























































































































































#line 4362 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPicture_get_Handle_Proxy( 
    IPicture * This,
     OLE_HANDLE *pHandle);


void __stdcall IPicture_get_Handle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_hPal_Proxy( 
    IPicture * This,
     OLE_HANDLE *phPal);


void __stdcall IPicture_get_hPal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Type_Proxy( 
    IPicture * This,
     SHORT *pType);


void __stdcall IPicture_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Width_Proxy( 
    IPicture * This,
     OLE_XSIZE_HIMETRIC *pWidth);


void __stdcall IPicture_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Height_Proxy( 
    IPicture * This,
     OLE_YSIZE_HIMETRIC *pHeight);


void __stdcall IPicture_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_Render_Proxy( 
    IPicture * This,
     HDC hDC,
     LONG x,
     LONG y,
     LONG cx,
     LONG cy,
     OLE_XPOS_HIMETRIC xSrc,
     OLE_YPOS_HIMETRIC ySrc,
     OLE_XSIZE_HIMETRIC cxSrc,
     OLE_YSIZE_HIMETRIC cySrc,
     LPCRECT pRcWBounds);


void __stdcall IPicture_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_set_hPal_Proxy( 
    IPicture * This,
     OLE_HANDLE hPal);


void __stdcall IPicture_set_hPal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_CurDC_Proxy( 
    IPicture * This,
     HDC *phDC);


void __stdcall IPicture_get_CurDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_SelectPicture_Proxy( 
    IPicture * This,
     HDC hDCIn,
     HDC *phDCOut,
     OLE_HANDLE *phBmpOut);


void __stdcall IPicture_SelectPicture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_KeepOriginalFormat_Proxy( 
    IPicture * This,
     BOOL *pKeep);


void __stdcall IPicture_get_KeepOriginalFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_put_KeepOriginalFormat_Proxy( 
    IPicture * This,
     BOOL keep);


void __stdcall IPicture_put_KeepOriginalFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_PictureChanged_Proxy( 
    IPicture * This);


void __stdcall IPicture_PictureChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_SaveAsFile_Proxy( 
    IPicture * This,
     LPSTREAM pStream,
     BOOL fSaveMemCopy,
     LONG *pCbSize);


void __stdcall IPicture_SaveAsFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPicture_get_Attributes_Proxy( 
    IPicture * This,
     DWORD *pDwAttr);


void __stdcall IPicture_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4547 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IFontEventsDisp *LPFONTEVENTS;


extern "C" const IID IID_IFontEventsDisp;


    
    struct __declspec(uuid("4EF6100A-AF88-11D0-9846-00C04FC29993")) __declspec(novtable)
    IFontEventsDisp : public IDispatch
    {
    public:
    };
    





















































































#line 4654 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




#line 4659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IFontDisp *LPFONTDISP;


extern "C" const IID IID_IFontDisp;


    
    struct __declspec(uuid("BEF6E003-A874-101A-8BBA-00AA00300CAB")) __declspec(novtable)
    IFontDisp : public IDispatch
    {
    public:
    };
    





















































































#line 4766 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




#line 4771 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPictureDisp *LPPICTUREDISP;


extern "C" const IID IID_IPictureDisp;


    
    struct __declspec(uuid("7BF80981-BF32-101A-8BBB-00AA00300CAB")) __declspec(novtable)
    IPictureDisp : public IDispatch
    {
    public:
    };
    





















































































#line 4878 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




#line 4883 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IOleInPlaceObjectWindowless *LPOLEINPLACEOBJECTWINDOWLESS;


extern "C" const IID IID_IOleInPlaceObjectWindowless;


    
    struct __declspec(uuid("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")) __declspec(novtable)
    IOleInPlaceObjectWindowless : public IOleInPlaceObject
    {
    public:
        virtual HRESULT __stdcall OnWindowMessage( 
             UINT msg,
             WPARAM wParam,
             LPARAM lParam,
             LRESULT *plResult) = 0;
        
        virtual HRESULT __stdcall GetDropTarget( 
             IDropTarget **ppDropTarget) = 0;
        
    };
    






































































































#line 5016 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleInPlaceObjectWindowless_OnWindowMessage_Proxy( 
    IOleInPlaceObjectWindowless * This,
     UINT msg,
     WPARAM wParam,
     LPARAM lParam,
     LRESULT *plResult);


void __stdcall IOleInPlaceObjectWindowless_OnWindowMessage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObjectWindowless_GetDropTarget_Proxy( 
    IOleInPlaceObjectWindowless * This,
     IDropTarget **ppDropTarget);


void __stdcall IOleInPlaceObjectWindowless_GetDropTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5048 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IOleInPlaceSiteEx *LPOLEINPLACESITEEX;

typedef  
enum tagACTIVATEFLAGS
    {	ACTIVATE_WINDOWLESS	= 1
    } 	ACTIVATEFLAGS;


extern "C" const IID IID_IOleInPlaceSiteEx;


    
    struct __declspec(uuid("9C2CAD80-3424-11CF-B670-00AA004CD6D8")) __declspec(novtable)
    IOleInPlaceSiteEx : public IOleInPlaceSite
    {
    public:
        virtual HRESULT __stdcall OnInPlaceActivateEx( 
             BOOL *pfNoRedraw,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall OnInPlaceDeactivateEx( 
             BOOL fNoRedraw) = 0;
        
        virtual HRESULT __stdcall RequestUIActivate( void) = 0;
        
    };
    




















































































































































#line 5232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleInPlaceSiteEx_OnInPlaceActivateEx_Proxy( 
    IOleInPlaceSiteEx * This,
     BOOL *pfNoRedraw,
     DWORD dwFlags);


void __stdcall IOleInPlaceSiteEx_OnInPlaceActivateEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteEx_OnInPlaceDeactivateEx_Proxy( 
    IOleInPlaceSiteEx * This,
     BOOL fNoRedraw);


void __stdcall IOleInPlaceSiteEx_OnInPlaceDeactivateEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteEx_RequestUIActivate_Proxy( 
    IOleInPlaceSiteEx * This);


void __stdcall IOleInPlaceSiteEx_RequestUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5273 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IOleInPlaceSiteWindowless *LPOLEINPLACESITEWINDOWLESS;

typedef  
enum tagOLEDCFLAGS
    {	OLEDC_NODRAW	= 0x1,
	OLEDC_PAINTBKGND	= 0x2,
	OLEDC_OFFSCREEN	= 0x4
    } 	OLEDCFLAGS;


extern "C" const IID IID_IOleInPlaceSiteWindowless;


    
    struct __declspec(uuid("922EADA0-3424-11CF-B670-00AA004CD6D8")) __declspec(novtable)
    IOleInPlaceSiteWindowless : public IOleInPlaceSiteEx
    {
    public:
        virtual HRESULT __stdcall CanWindowlessActivate( void) = 0;
        
        virtual HRESULT __stdcall GetCapture( void) = 0;
        
        virtual HRESULT __stdcall SetCapture( 
             BOOL fCapture) = 0;
        
        virtual HRESULT __stdcall GetFocus( void) = 0;
        
        virtual HRESULT __stdcall SetFocus( 
             BOOL fFocus) = 0;
        
        virtual HRESULT __stdcall GetDC( 
             LPCRECT pRect,
             DWORD grfFlags,
             HDC *phDC) = 0;
        
        virtual HRESULT __stdcall ReleaseDC( 
             HDC hDC) = 0;
        
        virtual HRESULT __stdcall InvalidateRect( 
             LPCRECT pRect,
             BOOL fErase) = 0;
        
        virtual HRESULT __stdcall InvalidateRgn( 
             HRGN hRGN,
             BOOL fErase) = 0;
        
        virtual HRESULT __stdcall ScrollRect( 
             INT dx,
             INT dy,
             LPCRECT pRectScroll,
             LPCRECT pRectClip) = 0;
        
        virtual HRESULT __stdcall AdjustRect( 
             LPRECT prc) = 0;
        
        virtual HRESULT __stdcall OnDefWindowMessage( 
             UINT msg,
             WPARAM wParam,
             LPARAM lParam,
             LRESULT *plResult) = 0;
        
    };
    
















































































































































































































































#line 5585 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleInPlaceSiteWindowless_CanWindowlessActivate_Proxy( 
    IOleInPlaceSiteWindowless * This);


void __stdcall IOleInPlaceSiteWindowless_CanWindowlessActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_GetCapture_Proxy( 
    IOleInPlaceSiteWindowless * This);


void __stdcall IOleInPlaceSiteWindowless_GetCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_SetCapture_Proxy( 
    IOleInPlaceSiteWindowless * This,
     BOOL fCapture);


void __stdcall IOleInPlaceSiteWindowless_SetCapture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_GetFocus_Proxy( 
    IOleInPlaceSiteWindowless * This);


void __stdcall IOleInPlaceSiteWindowless_GetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_SetFocus_Proxy( 
    IOleInPlaceSiteWindowless * This,
     BOOL fFocus);


void __stdcall IOleInPlaceSiteWindowless_SetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_GetDC_Proxy( 
    IOleInPlaceSiteWindowless * This,
     LPCRECT pRect,
     DWORD grfFlags,
     HDC *phDC);


void __stdcall IOleInPlaceSiteWindowless_GetDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_ReleaseDC_Proxy( 
    IOleInPlaceSiteWindowless * This,
     HDC hDC);


void __stdcall IOleInPlaceSiteWindowless_ReleaseDC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_InvalidateRect_Proxy( 
    IOleInPlaceSiteWindowless * This,
     LPCRECT pRect,
     BOOL fErase);


void __stdcall IOleInPlaceSiteWindowless_InvalidateRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_InvalidateRgn_Proxy( 
    IOleInPlaceSiteWindowless * This,
     HRGN hRGN,
     BOOL fErase);


void __stdcall IOleInPlaceSiteWindowless_InvalidateRgn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_ScrollRect_Proxy( 
    IOleInPlaceSiteWindowless * This,
     INT dx,
     INT dy,
     LPCRECT pRectScroll,
     LPCRECT pRectClip);


void __stdcall IOleInPlaceSiteWindowless_ScrollRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_AdjustRect_Proxy( 
    IOleInPlaceSiteWindowless * This,
     LPRECT prc);


void __stdcall IOleInPlaceSiteWindowless_AdjustRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSiteWindowless_OnDefWindowMessage_Proxy( 
    IOleInPlaceSiteWindowless * This,
     UINT msg,
     WPARAM wParam,
     LPARAM lParam,
     LRESULT *plResult);


void __stdcall IOleInPlaceSiteWindowless_OnDefWindowMessage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5741 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IViewObjectEx *LPVIEWOBJECTEX;

typedef  
enum tagVIEWSTATUS
    {	VIEWSTATUS_OPAQUE	= 1,
	VIEWSTATUS_SOLIDBKGND	= 2,
	VIEWSTATUS_DVASPECTOPAQUE	= 4,
	VIEWSTATUS_DVASPECTTRANSPARENT	= 8,
	VIEWSTATUS_SURFACE	= 16,
	VIEWSTATUS_3DSURFACE	= 32
    } 	VIEWSTATUS;

typedef  
enum tagHITRESULT
    {	HITRESULT_OUTSIDE	= 0,
	HITRESULT_TRANSPARENT	= 1,
	HITRESULT_CLOSE	= 2,
	HITRESULT_HIT	= 3
    } 	HITRESULT;

typedef  
enum tagDVASPECT2
    {	DVASPECT_OPAQUE	= 16,
	DVASPECT_TRANSPARENT	= 32
    } 	DVASPECT2;

typedef struct tagExtentInfo
    {
    ULONG cb;
    DWORD dwExtentMode;
    SIZEL sizelProposed;
    } 	DVEXTENTINFO;

typedef  
enum tagExtentMode
    {	DVEXTENT_CONTENT	= 0,
	DVEXTENT_INTEGRAL	= DVEXTENT_CONTENT + 1
    } 	DVEXTENTMODE;

typedef  
enum tagAspectInfoFlag
    {	DVASPECTINFOFLAG_CANOPTIMIZE	= 1
    } 	DVASPECTINFOFLAG;

typedef struct tagAspectInfo
    {
    ULONG cb;
    DWORD dwFlags;
    } 	DVASPECTINFO;


extern "C" const IID IID_IViewObjectEx;


    
    struct __declspec(uuid("3AF24292-0C96-11CE-A0CF-00AA00600AB8")) __declspec(novtable)
    IViewObjectEx : public IViewObject2
    {
    public:
        virtual HRESULT __stdcall GetRect( 
             DWORD dwAspect,
             LPRECTL pRect) = 0;
        
        virtual HRESULT __stdcall GetViewStatus( 
             DWORD *pdwStatus) = 0;
        
        virtual HRESULT __stdcall QueryHitPoint( 
             DWORD dwAspect,
             LPCRECT pRectBounds,
             POINT ptlLoc,
             LONG lCloseHint,
             DWORD *pHitResult) = 0;
        
        virtual HRESULT __stdcall QueryHitRect( 
             DWORD dwAspect,
             LPCRECT pRectBounds,
             LPCRECT pRectLoc,
             LONG lCloseHint,
             DWORD *pHitResult) = 0;
        
        virtual HRESULT __stdcall GetNaturalExtent( 
             DWORD dwAspect,
             LONG lindex,
             DVTARGETDEVICE *ptd,
             HDC hicTargetDev,
             DVEXTENTINFO *pExtentInfo,
             LPSIZEL pSizel) = 0;
        
    };
    








































































































































































#line 6008 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IViewObjectEx_GetRect_Proxy( 
    IViewObjectEx * This,
     DWORD dwAspect,
     LPRECTL pRect);


void __stdcall IViewObjectEx_GetRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_GetViewStatus_Proxy( 
    IViewObjectEx * This,
     DWORD *pdwStatus);


void __stdcall IViewObjectEx_GetViewStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_QueryHitPoint_Proxy( 
    IViewObjectEx * This,
     DWORD dwAspect,
     LPCRECT pRectBounds,
     POINT ptlLoc,
     LONG lCloseHint,
     DWORD *pHitResult);


void __stdcall IViewObjectEx_QueryHitPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_QueryHitRect_Proxy( 
    IViewObjectEx * This,
     DWORD dwAspect,
     LPCRECT pRectBounds,
     LPCRECT pRectLoc,
     LONG lCloseHint,
     DWORD *pHitResult);


void __stdcall IViewObjectEx_QueryHitRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObjectEx_GetNaturalExtent_Proxy( 
    IViewObjectEx * This,
     DWORD dwAspect,
     LONG lindex,
     DVTARGETDEVICE *ptd,
     HDC hicTargetDev,
     DVEXTENTINFO *pExtentInfo,
     LPSIZEL pSizel);


void __stdcall IViewObjectEx_GetNaturalExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6087 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IOleUndoUnit *LPOLEUNDOUNIT;


extern "C" const IID IID_IOleUndoUnit;


    
    struct __declspec(uuid("894AD3B0-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleUndoUnit : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Do( 
             IOleUndoManager *pUndoManager) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
             BSTR *pBstr) = 0;
        
        virtual HRESULT __stdcall GetUnitType( 
             CLSID *pClsid,
             LONG *plID) = 0;
        
        virtual HRESULT __stdcall OnNextAdd( void) = 0;
        
    };
    







































































#line 6192 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleUndoUnit_Do_Proxy( 
    IOleUndoUnit * This,
     IOleUndoManager *pUndoManager);


void __stdcall IOleUndoUnit_Do_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoUnit_GetDescription_Proxy( 
    IOleUndoUnit * This,
     BSTR *pBstr);


void __stdcall IOleUndoUnit_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoUnit_GetUnitType_Proxy( 
    IOleUndoUnit * This,
     CLSID *pClsid,
     LONG *plID);


void __stdcall IOleUndoUnit_GetUnitType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoUnit_OnNextAdd_Proxy( 
    IOleUndoUnit * This);


void __stdcall IOleUndoUnit_OnNextAdd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6245 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IOleParentUndoUnit *LPOLEPARENTUNDOUNIT;


extern "C" const IID IID_IOleParentUndoUnit;


    
    struct __declspec(uuid("A1FAF330-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleParentUndoUnit : public IOleUndoUnit
    {
    public:
        virtual HRESULT __stdcall Open( 
             IOleParentUndoUnit *pPUU) = 0;
        
        virtual HRESULT __stdcall Close( 
             IOleParentUndoUnit *pPUU,
             BOOL fCommit) = 0;
        
        virtual HRESULT __stdcall Add( 
             IOleUndoUnit *pUU) = 0;
        
        virtual HRESULT __stdcall FindUnit( 
             IOleUndoUnit *pUU) = 0;
        
        virtual HRESULT __stdcall GetParentState( 
             DWORD *pdwState) = 0;
        
    };
    












































































































#line 6391 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleParentUndoUnit_Open_Proxy( 
    IOleParentUndoUnit * This,
     IOleParentUndoUnit *pPUU);


void __stdcall IOleParentUndoUnit_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_Close_Proxy( 
    IOleParentUndoUnit * This,
     IOleParentUndoUnit *pPUU,
     BOOL fCommit);


void __stdcall IOleParentUndoUnit_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_Add_Proxy( 
    IOleParentUndoUnit * This,
     IOleUndoUnit *pUU);


void __stdcall IOleParentUndoUnit_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_FindUnit_Proxy( 
    IOleParentUndoUnit * This,
     IOleUndoUnit *pUU);


void __stdcall IOleParentUndoUnit_FindUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleParentUndoUnit_GetParentState_Proxy( 
    IOleParentUndoUnit * This,
     DWORD *pdwState);


void __stdcall IOleParentUndoUnit_GetParentState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6457 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IEnumOleUndoUnits *LPENUMOLEUNDOUNITS;


extern "C" const IID IID_IEnumOleUndoUnits;


    
    struct __declspec(uuid("B3E7C340-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IEnumOleUndoUnits : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG cElt,
             IOleUndoUnit **rgElt,
             ULONG *pcEltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG cElt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumOleUndoUnits **ppEnum) = 0;
        
    };
    








































































#line 6564 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



 HRESULT __stdcall IEnumOleUndoUnits_RemoteNext_Proxy( 
    IEnumOleUndoUnits * This,
     ULONG cElt,
     IOleUndoUnit **rgElt,
     ULONG *pcEltFetched);


void __stdcall IEnumOleUndoUnits_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleUndoUnits_Skip_Proxy( 
    IEnumOleUndoUnits * This,
     ULONG cElt);


void __stdcall IEnumOleUndoUnits_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleUndoUnits_Reset_Proxy( 
    IEnumOleUndoUnits * This);


void __stdcall IEnumOleUndoUnits_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleUndoUnits_Clone_Proxy( 
    IEnumOleUndoUnits * This,
     IEnumOleUndoUnits **ppEnum);


void __stdcall IEnumOleUndoUnits_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6618 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 


typedef IOleUndoManager *LPOLEUNDOMANAGER;


extern "C" const IID IID_IOleUndoManager;


    
    struct __declspec(uuid("D001F200-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleUndoManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Open( 
             IOleParentUndoUnit *pPUU) = 0;
        
        virtual HRESULT __stdcall Close( 
             IOleParentUndoUnit *pPUU,
             BOOL fCommit) = 0;
        
        virtual HRESULT __stdcall Add( 
             IOleUndoUnit *pUU) = 0;
        
        virtual HRESULT __stdcall GetOpenParentState( 
             DWORD *pdwState) = 0;
        
        virtual HRESULT __stdcall DiscardFrom( 
             IOleUndoUnit *pUU) = 0;
        
        virtual HRESULT __stdcall UndoTo( 
             IOleUndoUnit *pUU) = 0;
        
        virtual HRESULT __stdcall RedoTo( 
             IOleUndoUnit *pUU) = 0;
        
        virtual HRESULT __stdcall EnumUndoable( 
             IEnumOleUndoUnits **ppEnum) = 0;
        
        virtual HRESULT __stdcall EnumRedoable( 
             IEnumOleUndoUnits **ppEnum) = 0;
        
        virtual HRESULT __stdcall GetLastUndoDescription( 
             BSTR *pBstr) = 0;
        
        virtual HRESULT __stdcall GetLastRedoDescription( 
             BSTR *pBstr) = 0;
        
        virtual HRESULT __stdcall Enable( 
             BOOL fEnable) = 0;
        
    };
    
































































































































#line 6806 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IOleUndoManager_Open_Proxy( 
    IOleUndoManager * This,
     IOleParentUndoUnit *pPUU);


void __stdcall IOleUndoManager_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_Close_Proxy( 
    IOleUndoManager * This,
     IOleParentUndoUnit *pPUU,
     BOOL fCommit);


void __stdcall IOleUndoManager_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_Add_Proxy( 
    IOleUndoManager * This,
     IOleUndoUnit *pUU);


void __stdcall IOleUndoManager_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_GetOpenParentState_Proxy( 
    IOleUndoManager * This,
     DWORD *pdwState);


void __stdcall IOleUndoManager_GetOpenParentState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_DiscardFrom_Proxy( 
    IOleUndoManager * This,
     IOleUndoUnit *pUU);


void __stdcall IOleUndoManager_DiscardFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_UndoTo_Proxy( 
    IOleUndoManager * This,
     IOleUndoUnit *pUU);


void __stdcall IOleUndoManager_UndoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_RedoTo_Proxy( 
    IOleUndoManager * This,
     IOleUndoUnit *pUU);


void __stdcall IOleUndoManager_RedoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_EnumUndoable_Proxy( 
    IOleUndoManager * This,
     IEnumOleUndoUnits **ppEnum);


void __stdcall IOleUndoManager_EnumUndoable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_EnumRedoable_Proxy( 
    IOleUndoManager * This,
     IEnumOleUndoUnits **ppEnum);


void __stdcall IOleUndoManager_EnumRedoable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_GetLastUndoDescription_Proxy( 
    IOleUndoManager * This,
     BSTR *pBstr);


void __stdcall IOleUndoManager_GetLastUndoDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_GetLastRedoDescription_Proxy( 
    IOleUndoManager * This,
     BSTR *pBstr);


void __stdcall IOleUndoManager_GetLastRedoDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleUndoManager_Enable_Proxy( 
    IOleUndoManager * This,
     BOOL fEnable);


void __stdcall IOleUndoManager_Enable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6956 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPointerInactive *LPPOINTERINACTIVE;

typedef  
enum tagPOINTERINACTIVE
    {	POINTERINACTIVE_ACTIVATEONENTRY	= 1,
	POINTERINACTIVE_DEACTIVATEONLEAVE	= 2,
	POINTERINACTIVE_ACTIVATEONDRAG	= 4
    } 	POINTERINACTIVE;


extern "C" const IID IID_IPointerInactive;


    
    struct __declspec(uuid("55980BA0-35AA-11CF-B671-00AA004CD6D8")) __declspec(novtable)
    IPointerInactive : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetActivationPolicy( 
             DWORD *pdwPolicy) = 0;
        
        virtual HRESULT __stdcall OnInactiveMouseMove( 
             LPCRECT pRectBounds,
             LONG x,
             LONG y,
             DWORD grfKeyState) = 0;
        
        virtual HRESULT __stdcall OnInactiveSetCursor( 
             LPCRECT pRectBounds,
             LONG x,
             LONG y,
             DWORD dwMouseMsg,
             BOOL fSetAlways) = 0;
        
    };
    







































































#line 7072 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPointerInactive_GetActivationPolicy_Proxy( 
    IPointerInactive * This,
     DWORD *pdwPolicy);


void __stdcall IPointerInactive_GetActivationPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPointerInactive_OnInactiveMouseMove_Proxy( 
    IPointerInactive * This,
     LPCRECT pRectBounds,
     LONG x,
     LONG y,
     DWORD grfKeyState);


void __stdcall IPointerInactive_OnInactiveMouseMove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPointerInactive_OnInactiveSetCursor_Proxy( 
    IPointerInactive * This,
     LPCRECT pRectBounds,
     LONG x,
     LONG y,
     DWORD dwMouseMsg,
     BOOL fSetAlways);


void __stdcall IPointerInactive_OnInactiveSetCursor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7120 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IObjectWithSite *LPOBJECTWITHSITE;


extern "C" const IID IID_IObjectWithSite;


    
    struct __declspec(uuid("FC4801A3-2BA9-11CF-A229-00AA003D7352")) __declspec(novtable)
    IObjectWithSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSite( 
             IUnknown *pUnkSite) = 0;
        
        virtual HRESULT __stdcall GetSite( 
             const IID & riid,
             void **ppvSite) = 0;
        
    };
    


























































#line 7207 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IObjectWithSite_SetSite_Proxy( 
    IObjectWithSite * This,
     IUnknown *pUnkSite);


void __stdcall IObjectWithSite_SetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IObjectWithSite_GetSite_Proxy( 
    IObjectWithSite * This,
     const IID & riid,
     void **ppvSite);


void __stdcall IObjectWithSite_GetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7237 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPerPropertyBrowsing *LPPERPROPERTYBROWSING;

typedef struct tagCALPOLESTR
    {
    ULONG cElems;
     LPOLESTR *pElems;
    } 	CALPOLESTR;

typedef struct tagCALPOLESTR *LPCALPOLESTR;

typedef struct tagCADWORD
    {
    ULONG cElems;
     DWORD *pElems;
    } 	CADWORD;

typedef struct tagCADWORD *LPCADWORD;


extern "C" const IID IID_IPerPropertyBrowsing;


    
    struct __declspec(uuid("376BD3AA-3845-101B-84ED-08002B2EC713")) __declspec(novtable)
    IPerPropertyBrowsing : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDisplayString( 
             DISPID dispID,
             BSTR *pBstr) = 0;
        
        virtual HRESULT __stdcall MapPropertyToPage( 
             DISPID dispID,
             CLSID *pClsid) = 0;
        
        virtual HRESULT __stdcall GetPredefinedStrings( 
             DISPID dispID,
             CALPOLESTR *pCaStringsOut,
             CADWORD *pCaCookiesOut) = 0;
        
        virtual HRESULT __stdcall GetPredefinedValue( 
             DISPID dispID,
             DWORD dwCookie,
             VARIANT *pVarOut) = 0;
        
    };
    













































































#line 7370 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPerPropertyBrowsing_GetDisplayString_Proxy( 
    IPerPropertyBrowsing * This,
     DISPID dispID,
     BSTR *pBstr);


void __stdcall IPerPropertyBrowsing_GetDisplayString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPerPropertyBrowsing_MapPropertyToPage_Proxy( 
    IPerPropertyBrowsing * This,
     DISPID dispID,
     CLSID *pClsid);


void __stdcall IPerPropertyBrowsing_MapPropertyToPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPerPropertyBrowsing_GetPredefinedStrings_Proxy( 
    IPerPropertyBrowsing * This,
     DISPID dispID,
     CALPOLESTR *pCaStringsOut,
     CADWORD *pCaCookiesOut);


void __stdcall IPerPropertyBrowsing_GetPredefinedStrings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPerPropertyBrowsing_GetPredefinedValue_Proxy( 
    IPerPropertyBrowsing * This,
     DISPID dispID,
     DWORD dwCookie,
     VARIANT *pVarOut);


void __stdcall IPerPropertyBrowsing_GetPredefinedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7429 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPropertyBag2 *LPPROPERTYBAG2;

typedef  
enum tagPROPBAG2_TYPE
    {	PROPBAG2_TYPE_UNDEFINED	= 0,
	PROPBAG2_TYPE_DATA	= 1,
	PROPBAG2_TYPE_URL	= 2,
	PROPBAG2_TYPE_OBJECT	= 3,
	PROPBAG2_TYPE_STREAM	= 4,
	PROPBAG2_TYPE_STORAGE	= 5,
	PROPBAG2_TYPE_MONIKER	= 6
    } 	PROPBAG2_TYPE;

typedef struct tagPROPBAG2
    {
    DWORD dwType;
    VARTYPE vt;
    CLIPFORMAT cfType;
    DWORD dwHint;
    LPOLESTR pstrName;
    CLSID clsid;
    } 	PROPBAG2;


extern "C" const IID IID_IPropertyBag2;


    
    struct __declspec(uuid("22F55882-280B-11d0-A8A9-00A0C90C2004")) __declspec(novtable)
    IPropertyBag2 : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read( 
             ULONG cProperties,
             PROPBAG2 *pPropBag,
             IErrorLog *pErrLog,
             VARIANT *pvarValue,
             HRESULT *phrError) = 0;
        
        virtual HRESULT __stdcall Write( 
             ULONG cProperties,
             PROPBAG2 *pPropBag,
             VARIANT *pvarValue) = 0;
        
        virtual HRESULT __stdcall CountProperties( 
             ULONG *pcProperties) = 0;
        
        virtual HRESULT __stdcall GetPropertyInfo( 
             ULONG iProperty,
             ULONG cProperties,
             PROPBAG2 *pPropBag,
             ULONG *pcProperties) = 0;
        
        virtual HRESULT __stdcall LoadObject( 
             LPCOLESTR pstrName,
             DWORD dwHint,
             IUnknown *pUnkObject,
             IErrorLog *pErrLog) = 0;
        
    };
    


























































































#line 7589 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPropertyBag2_Read_Proxy( 
    IPropertyBag2 * This,
     ULONG cProperties,
     PROPBAG2 *pPropBag,
     IErrorLog *pErrLog,
     VARIANT *pvarValue,
     HRESULT *phrError);


void __stdcall IPropertyBag2_Read_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyBag2_Write_Proxy( 
    IPropertyBag2 * This,
     ULONG cProperties,
     PROPBAG2 *pPropBag,
     VARIANT *pvarValue);


void __stdcall IPropertyBag2_Write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyBag2_CountProperties_Proxy( 
    IPropertyBag2 * This,
     ULONG *pcProperties);


void __stdcall IPropertyBag2_CountProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyBag2_GetPropertyInfo_Proxy( 
    IPropertyBag2 * This,
     ULONG iProperty,
     ULONG cProperties,
     PROPBAG2 *pPropBag,
     ULONG *pcProperties);


void __stdcall IPropertyBag2_GetPropertyInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyBag2_LoadObject_Proxy( 
    IPropertyBag2 * This,
     LPCOLESTR pstrName,
     DWORD dwHint,
     IUnknown *pUnkObject,
     IErrorLog *pErrLog);


void __stdcall IPropertyBag2_LoadObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7666 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IPersistPropertyBag2 *LPPERSISTPROPERTYBAG2;


extern "C" const IID IID_IPersistPropertyBag2;


    
    struct __declspec(uuid("22F55881-280B-11d0-A8A9-00A0C90C2004")) __declspec(novtable)
    IPersistPropertyBag2 : public IPersist
    {
    public:
        virtual HRESULT __stdcall InitNew( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             IPropertyBag2 *pPropBag,
             IErrorLog *pErrLog) = 0;
        
        virtual HRESULT __stdcall Save( 
             IPropertyBag2 *pPropBag,
             BOOL fClearDirty,
             BOOL fSaveAllProperties) = 0;
        
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
    };
    
















































































#line 7781 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



HRESULT __stdcall IPersistPropertyBag2_InitNew_Proxy( 
    IPersistPropertyBag2 * This);


void __stdcall IPersistPropertyBag2_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistPropertyBag2_Load_Proxy( 
    IPersistPropertyBag2 * This,
     IPropertyBag2 *pPropBag,
     IErrorLog *pErrLog);


void __stdcall IPersistPropertyBag2_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistPropertyBag2_Save_Proxy( 
    IPersistPropertyBag2 * This,
     IPropertyBag2 *pPropBag,
     BOOL fClearDirty,
     BOOL fSaveAllProperties);


void __stdcall IPersistPropertyBag2_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistPropertyBag2_IsDirty_Proxy( 
    IPersistPropertyBag2 * This);


void __stdcall IPersistPropertyBag2_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7835 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IAdviseSinkEx *LPADVISESINKEX;


extern "C" const IID IID_IAdviseSinkEx;


    
    struct __declspec(uuid("3AF24290-0C96-11CE-A0CF-00AA00600AB8")) __declspec(novtable)
    IAdviseSinkEx : public IAdviseSink
    {
    public:
        virtual  void __stdcall OnViewStatusChange( 
             DWORD dwViewStatus) = 0;
        
    };
    






















































































#line 7946 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



 HRESULT __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Proxy( 
    IAdviseSinkEx * This,
     DWORD dwViewStatus);


void __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7963 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"






 

typedef IQuickActivate *LPQUICKACTIVATE;

typedef  
enum tagQACONTAINERFLAGS
    {	QACONTAINER_SHOWHATCHING	= 0x1,
	QACONTAINER_SHOWGRABHANDLES	= 0x2,
	QACONTAINER_USERMODE	= 0x4,
	QACONTAINER_DISPLAYASDEFAULT	= 0x8,
	QACONTAINER_UIDEAD	= 0x10,
	QACONTAINER_AUTOCLIP	= 0x20,
	QACONTAINER_MESSAGEREFLECT	= 0x40,
	QACONTAINER_SUPPORTSMNEMONICS	= 0x80
    } 	QACONTAINERFLAGS;

typedef   __declspec(uuid("66504301-BE0F-101A-8BBB-00AA00300CAB")) DWORD OLE_COLOR;

typedef struct tagQACONTAINER
    {
    ULONG cbSize;
    IOleClientSite *pClientSite;
    IAdviseSinkEx *pAdviseSink;
    IPropertyNotifySink *pPropertyNotifySink;
    IUnknown *pUnkEventSink;
    DWORD dwAmbientFlags;
    OLE_COLOR colorFore;
    OLE_COLOR colorBack;
    IFont *pFont;
    IOleUndoManager *pUndoMgr;
    DWORD dwAppearance;
    LONG lcid;
    HPALETTE hpal;
    IBindHost *pBindHost;
    IOleControlSite *pOleControlSite;
    IServiceProvider *pServiceProvider;
    } 	QACONTAINER;

typedef struct tagQACONTROL
    {
    ULONG cbSize;
    DWORD dwMiscStatus;
    DWORD dwViewStatus;
    DWORD dwEventCookie;
    DWORD dwPropNotifyCookie;
    DWORD dwPointerActivationPolicy;
    } 	QACONTROL;


extern "C" const IID IID_IQuickActivate;


    
    struct __declspec(uuid("CF51ED10-62FE-11CF-BF86-00A0C9034836")) __declspec(novtable)
    IQuickActivate : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall QuickActivate( 
             QACONTAINER *pQaContainer,
             QACONTROL *pQaControl) = 0;
        
        virtual HRESULT __stdcall SetContentExtent( 
             LPSIZEL pSizel) = 0;
        
        virtual HRESULT __stdcall GetContentExtent( 
             LPSIZEL pSizel) = 0;
        
    };
    

































































#line 8104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"



 HRESULT __stdcall IQuickActivate_RemoteQuickActivate_Proxy( 
    IQuickActivate * This,
     QACONTAINER *pQaContainer,
     QACONTROL *pQaControl);


void __stdcall IQuickActivate_RemoteQuickActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IQuickActivate_SetContentExtent_Proxy( 
    IQuickActivate * This,
     LPSIZEL pSizel);


void __stdcall IQuickActivate_SetContentExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IQuickActivate_GetContentExtent_Proxy( 
    IQuickActivate * This,
     LPSIZEL pSizel);


void __stdcall IQuickActivate_GetContentExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8146 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"




unsigned long             __stdcall  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long *, unsigned long            , CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long *, unsigned char *, CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long *, CLIPFORMAT * ); 

unsigned long             __stdcall  HACCEL_UserSize(     unsigned long *, unsigned long            , HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserMarshal(  unsigned long *, unsigned char *, HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL * ); 
void                      __stdcall  HACCEL_UserFree(     unsigned long *, HACCEL * ); 

unsigned long             __stdcall  HDC_UserSize(     unsigned long *, unsigned long            , HDC * ); 
unsigned char * __stdcall  HDC_UserMarshal(  unsigned long *, unsigned char *, HDC * ); 
unsigned char * __stdcall  HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC * ); 
void                      __stdcall  HDC_UserFree(     unsigned long *, HDC * ); 

unsigned long             __stdcall  HFONT_UserSize(     unsigned long *, unsigned long            , HFONT * ); 
unsigned char * __stdcall  HFONT_UserMarshal(  unsigned long *, unsigned char *, HFONT * ); 
unsigned char * __stdcall  HFONT_UserUnmarshal(unsigned long *, unsigned char *, HFONT * ); 
void                      __stdcall  HFONT_UserFree(     unsigned long *, HFONT * ); 

unsigned long             __stdcall  HPALETTE_UserSize(     unsigned long *, unsigned long            , HPALETTE * ); 
unsigned char * __stdcall  HPALETTE_UserMarshal(  unsigned long *, unsigned char *, HPALETTE * ); 
unsigned char * __stdcall  HPALETTE_UserUnmarshal(unsigned long *, unsigned char *, HPALETTE * ); 
void                      __stdcall  HPALETTE_UserFree(     unsigned long *, HPALETTE * ); 

unsigned long             __stdcall  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __stdcall  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __stdcall  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

 HRESULT __stdcall IEnumConnections_Next_Proxy( 
    IEnumConnections * This,
     ULONG cConnections,
     LPCONNECTDATA rgcd,
     ULONG *pcFetched);


 HRESULT __stdcall IEnumConnections_Next_Stub( 
    IEnumConnections * This,
     ULONG cConnections,
     LPCONNECTDATA rgcd,
     ULONG *pcFetched);

 HRESULT __stdcall IEnumConnectionPoints_Next_Proxy( 
    IEnumConnectionPoints * This,
     ULONG cConnections,
     LPCONNECTIONPOINT *ppCP,
     ULONG *pcFetched);


 HRESULT __stdcall IEnumConnectionPoints_Next_Stub( 
    IEnumConnectionPoints * This,
     ULONG cConnections,
     LPCONNECTIONPOINT *ppCP,
     ULONG *pcFetched);

 HRESULT __stdcall IClassFactory2_CreateInstanceLic_Proxy( 
    IClassFactory2 * This,
     IUnknown *pUnkOuter,
     IUnknown *pUnkReserved,
     const IID & riid,
     BSTR bstrKey,
     PVOID *ppvObj);


 HRESULT __stdcall IClassFactory2_CreateInstanceLic_Stub( 
    IClassFactory2 * This,
     const IID & riid,
     BSTR bstrKey,
     IUnknown **ppvObj);

 HRESULT __stdcall IPersistMemory_Load_Proxy( 
    IPersistMemory * This,
     LPVOID pMem,
     ULONG cbSize);


 HRESULT __stdcall IPersistMemory_Load_Stub( 
    IPersistMemory * This,
     BYTE *pMem,
     ULONG cbSize);

 HRESULT __stdcall IPersistMemory_Save_Proxy( 
    IPersistMemory * This,
     LPVOID pMem,
     BOOL fClearDirty,
     ULONG cbSize);


 HRESULT __stdcall IPersistMemory_Save_Stub( 
    IPersistMemory * This,
     BYTE *pMem,
     BOOL fClearDirty,
     ULONG cbSize);

 HRESULT __stdcall IEnumOleUndoUnits_Next_Proxy( 
    IEnumOleUndoUnits * This,
     ULONG cElt,
     IOleUndoUnit **rgElt,
     ULONG *pcEltFetched);


 HRESULT __stdcall IEnumOleUndoUnits_Next_Stub( 
    IEnumOleUndoUnits * This,
     ULONG cElt,
     IOleUndoUnit **rgElt,
     ULONG *pcEltFetched);

 void __stdcall IAdviseSinkEx_OnViewStatusChange_Proxy( 
    IAdviseSinkEx * This,
     DWORD dwViewStatus);


 HRESULT __stdcall IAdviseSinkEx_OnViewStatusChange_Stub( 
    IAdviseSinkEx * This,
     DWORD dwViewStatus);

 HRESULT __stdcall IQuickActivate_QuickActivate_Proxy( 
    IQuickActivate * This,
     QACONTAINER *pQaContainer,
     QACONTROL *pQaControl);


 HRESULT __stdcall IQuickActivate_QuickActivate_Stub( 
    IQuickActivate * This,
     QACONTAINER *pQaContainer,
     QACONTROL *pQaControl);






}
#line 8295 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"

#line 8297 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\ocidl.h"


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"
#line 31 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"







#line 39 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"




extern "C" const GUID  IID_IPropertyFrame;






extern "C" const GUID  CLSID_CFontPropPage;

extern "C" const GUID  CLSID_CColorPropPage;

extern "C" const GUID  CLSID_CPicturePropPage;






extern "C" const GUID  CLSID_PersistPropset;

extern "C" const GUID  CLSID_ConvertVBX;





extern "C" const GUID  CLSID_StdFont;

extern "C" const GUID  CLSID_StdPicture;






extern "C" const GUID  GUID_HIMETRIC;

extern "C" const GUID  GUID_COLOR;

extern "C" const GUID  GUID_XPOSPIXEL;

extern "C" const GUID  GUID_YPOSPIXEL;

extern "C" const GUID  GUID_XSIZEPIXEL;

extern "C" const GUID  GUID_YSIZEPIXEL;

extern "C" const GUID  GUID_XPOS;

extern "C" const GUID  GUID_YPOS;

extern "C" const GUID  GUID_XSIZE;

extern "C" const GUID  GUID_YSIZE;




#line 102 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"


extern "C" const GUID  GUID_OPTIONVALUEEXCLUSIVE;

extern "C" const GUID  GUID_CHECKVALUEEXCLUSIVE;

extern "C" const GUID  GUID_FONTNAME;

extern "C" const GUID  GUID_FONTSIZE;

extern "C" const GUID  GUID_FONTBOLD;

extern "C" const GUID  GUID_FONTITALIC;

extern "C" const GUID  GUID_FONTUNDERSCORE;

extern "C" const GUID  GUID_FONTSTRIKETHROUGH;

extern "C" const GUID  GUID_HANDLE;

#line 123 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"





typedef struct tagOCPFIPARAMS
{
    ULONG cbStructSize;
    HWND hWndOwner;
    int x;
    int y;
    LPCOLESTR lpszCaption;
    ULONG cObjects;
    LPUNKNOWN * lplpUnk;
    ULONG cPages;
    CLSID * lpPages;
    LCID lcid;
    DISPID dispidInitialProperty;

} OCPFIPARAMS, * LPOCPFIPARAMS;







typedef struct tagFONTDESC
{
    UINT cbSizeofstruct;
    LPOLESTR lpstrName;
    CY cySize;
    SHORT sWeight;
    SHORT sCharset;
    BOOL fItalic;
    BOOL fUnderline;
    BOOL fStrikethrough;

} FONTDESC, * LPFONTDESC;












#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"

typedef struct tagPICTDESC
{
    UINT cbSizeofstruct;
    UINT picType;
    union
    {
        struct
        {
            HBITMAP   hbitmap;        
            HPALETTE  hpal;           
        } bmp;

        struct
        {
            HMETAFILE hmeta;          
            int       xExt;
            int       yExt;           
        } wmf;

        struct
        {
            HICON hicon;              
        } icon;


        struct
        {
            HENHMETAFILE hemf;        
        } emf;
#line 206 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"
    };

} PICTDESC, * LPPICTDESC;





typedef long OLE_XPOS_PIXELS;
typedef long OLE_YPOS_PIXELS;
typedef long OLE_XSIZE_PIXELS;
typedef long OLE_YSIZE_PIXELS;
typedef float OLE_XPOS_CONTAINER;
typedef float OLE_YPOS_CONTAINER;
typedef float OLE_XSIZE_CONTAINER;
typedef float OLE_YSIZE_CONTAINER;
typedef enum { triUnchecked = 0, triChecked = 1, triGray = 2 } OLE_TRISTATE;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef VARIANT_BOOL OLE_CANCELBOOL;
typedef VARIANT_BOOL OLE_ENABLEDEFAULTBOOL;

























































































































#line 348 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"
































#line 381 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"


















#line 400 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"













#line 414 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"





extern "C" HRESULT __stdcall DllRegisterServer(void);
extern "C" HRESULT __stdcall DllUnregisterServer(void);





extern "C" __declspec(dllimport) HRESULT __stdcall OleCreatePropertyFrame(HWND hwndOwner, UINT x, UINT y,
    LPCOLESTR lpszCaption, ULONG cObjects, LPUNKNOWN * ppUnk, ULONG cPages,
    LPCLSID pPageClsID, LCID lcid, DWORD dwReserved, LPVOID pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreatePropertyFrameIndirect(LPOCPFIPARAMS lpParams);





extern "C" __declspec(dllimport) HRESULT __stdcall OleTranslateColor(OLE_COLOR clr, HPALETTE hpal,
    COLORREF* lpcolorref);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFontIndirect(LPFONTDESC lpFontDesc, const IID & riid,
    LPVOID * lplpvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreatePictureIndirect(LPPICTDESC lpPictDesc, const IID & riid,
    BOOL fOwn, LPVOID * lplpvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPicture(LPSTREAM lpstream, LONG lSize, BOOL fRunmode,
    const IID & riid, LPVOID * lplpvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPictureEx(LPSTREAM lpstream, LONG lSize, BOOL fRunmode,
    const IID & riid, DWORD xSizeDesired, DWORD ySizeDesired, DWORD dwFlags,
    LPVOID * lplpvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPicturePath(  LPOLESTR  szURLorPath,
				  LPUNKNOWN punkCaller,
				  DWORD     dwReserved,
				  OLE_COLOR clrReserved,
				  const IID &    riid,
				  LPVOID *  ppvRet );

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPictureFile(VARIANT varFileName,
    LPDISPATCH* lplpdispPicture);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadPictureFileEx(VARIANT varFileName,
    DWORD xSizeDesired, DWORD ySizeDesired, DWORD dwFlags, LPDISPATCH* lplpdispPicture);

extern "C" __declspec(dllimport) HRESULT __stdcall OleSavePictureFile(LPDISPATCH lpdispPicture,
    BSTR bstrFileName);

extern "C" __declspec(dllimport) HCURSOR __stdcall OleIconToCursor(HINSTANCE hinstExe, HICON hIcon);







#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 477 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"
#line 478 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"

#line 480 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"










































































































































#line 619 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"

#line 621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\olectl.h"
#line 31 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"
#line 32 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"






	#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

















#line 19 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 20 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 21 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"













































#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


#line 70 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 71 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





#line 77 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


#line 80 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 81 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





#line 87 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

#line 89 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 90 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"












#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"















#line 17 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"
#line 18 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"




extern "C" const GUID  CLSID_ShellDesktop; 
extern "C" const GUID  CLSID_ShellLink; 

extern "C" const GUID  CLSID_NetworkPlaces;
extern "C" const GUID  CLSID_NetworkDomain;
extern "C" const GUID  CLSID_NetworkServer;
extern "C" const GUID  CLSID_NetworkShare;
extern "C" const GUID  CLSID_MyComputer;
extern "C" const GUID  CLSID_Internet;
extern "C" const GUID  CLSID_ShellFSFolder;
extern "C" const GUID  CLSID_RecycleBin;
extern "C" const GUID  CLSID_ControlPanel;
extern "C" const GUID  CLSID_Printers;
extern "C" const GUID  CLSID_MyDocuments;







extern "C" const GUID  CATID_BrowsableShellExt;
extern "C" const GUID  CATID_BrowseInPlace;
extern "C" const GUID  CATID_DeskBand;
extern "C" const GUID  CATID_InfoBand;
extern "C" const GUID  CATID_CommBand;

#line 50 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"


extern "C" const GUID  FMTID_Intshcut;


extern "C" const GUID  FMTID_InternetSite;

extern "C" const GUID  CGID_Explorer;
extern "C" const GUID  CGID_ShellDocView;


extern "C" const GUID  CGID_ShellServiceObject;
extern "C" const GUID  CGID_ExplorerBarDoc;
#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"


extern "C" const GUID  IID_INewShortcutHookA;
extern "C" const GUID  IID_IShellBrowser;
extern "C" const GUID  IID_IShellView;
extern "C" const GUID  IID_IContextMenu;
extern "C" const GUID  IID_IShellIcon;
extern "C" const GUID  IID_IShellFolder;
extern "C" const GUID  IID_IShellExtInit;
extern "C" const GUID  IID_IShellPropSheetExt;
extern "C" const GUID  IID_IPersistFolder;
extern "C" const GUID  IID_IExtractIconA;
extern "C" const GUID  IID_IShellDetails;
extern "C" const GUID  IID_IDelayedRelease;
extern "C" const GUID  IID_IShellLinkA;
extern "C" const GUID  IID_IShellCopyHookA;
extern "C" const GUID  IID_IFileViewerA;
extern "C" const GUID  IID_ICommDlgBrowser;
extern "C" const GUID  IID_IEnumIDList;
extern "C" const GUID  IID_IFileViewerSite;
extern "C" const GUID  IID_IContextMenu2;
extern "C" const GUID  IID_IShellExecuteHookA;
extern "C" const GUID  IID_IPropSheetPage;
extern "C" const GUID  IID_INewShortcutHookW;
extern "C" const GUID  IID_IFileViewerW;
extern "C" const GUID  IID_IShellLinkW;
extern "C" const GUID  IID_IExtractIconW;
extern "C" const GUID  IID_IShellExecuteHookW;
extern "C" const GUID  IID_IShellCopyHookW;

extern "C" const GUID  IID_IRemoteComputer;







extern "C" const GUID  IID_IQueryInfo;
#line 104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"

extern "C" const GUID  IID_IBriefcaseStg;
extern "C" const GUID  IID_IShellView2;
extern "C" const GUID  IID_IShellLinkDataList;

extern "C" const GUID  IID_IResolveShellLink;
#line 111 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"


extern "C" const GUID  IID_IURLSearchHook;
extern "C" const GUID  IID_ISearchContext;
extern "C" const GUID  IID_IURLSearchHook2;
extern "C" const GUID  IID_IDelegateFolder;



extern "C" const GUID  CLSID_FolderShortcut;


extern "C" const GUID  CLSID_StgFolder;
#line 125 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"


extern "C" const GUID  IID_IInputObject;
extern "C" const GUID  IID_IInputObjectSite;

extern "C" const GUID  IID_IDockingWindowSite;
extern "C" const GUID  IID_IDockingWindowFrame;

extern "C" const GUID  IID_IShellIconOverlay;
extern "C" const GUID  IID_IShellIconOverlayIdentifier;


extern "C" const GUID  IID_ICommDlgBrowser2;


extern "C" const GUID  IID_IShellFolderViewCB;



extern "C" const GUID  IID_IPersistFolder3;


extern "C" const GUID  CLSID_CFSIconOverlayManager;



extern "C" const GUID  IID_IRunnableTask;



extern "C" const GUID  IID_IThumbnailCapture;



extern "C" const GUID  IID_IContextMenu3;


#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"





#line 169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"







extern "C" const GUID  IID_IDiscardableBrowserProperty;




extern "C" const GUID  IID_IShellChangeNotify;

#line 184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"















#line 200 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\isguids.h"













extern "C" const GUID  CLSID_InternetShortcut;

extern "C" const GUID  IID_IUniformResourceLocatorA;
extern "C" const GUID  IID_IUniformResourceLocatorW;





#line 24 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\isguids.h"

#line 26 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\isguids.h"
#line 204 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"




#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#pragma warning( disable: 4049 )  




 























#pragma once
#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

 



typedef struct IWebBrowser IWebBrowser;
#line 40 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct DWebBrowserEvents DWebBrowserEvents;
#line 46 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct IWebBrowserApp IWebBrowserApp;
#line 52 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct IWebBrowser2 IWebBrowser2;
#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct DWebBrowserEvents2 DWebBrowserEvents2;
#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class WebBrowser_V1 WebBrowser_V1;


#line 74 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 76 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class WebBrowser WebBrowser;


#line 86 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 88 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class InternetExplorer InternetExplorer;


#line 98 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class ShellBrowserWindow ShellBrowserWindow;


#line 110 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 112 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct DShellWindowsEvents DShellWindowsEvents;
#line 118 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct IShellWindows IShellWindows;
#line 124 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class ShellWindows ShellWindows;


#line 134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 136 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct IShellUIHelper IShellUIHelper;
#line 142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class ShellUIHelper ShellUIHelper;


#line 152 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 154 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct DShellNameSpaceEvents DShellNameSpaceEvents;
#line 160 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct IShellFavoritesNameSpace IShellFavoritesNameSpace;
#line 166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct IShellNameSpace IShellNameSpace;
#line 172 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class ShellNameSpace ShellNameSpace;


#line 182 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct IScriptErrorList IScriptErrorList;
#line 190 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class CScriptErrorList CScriptErrorList;


#line 200 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct ISearch ISearch;
#line 208 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct ISearches ISearches;
#line 214 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct ISearchAssistantOC ISearchAssistantOC;
#line 220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct ISearchAssistantOC2 ISearchAssistantOC2;
#line 226 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct ISearchAssistantOC3 ISearchAssistantOC3;
#line 232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




typedef struct _SearchAssistantEvents _SearchAssistantEvents;
#line 238 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






typedef class SearchAssistantOC SearchAssistantOC;


#line 248 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"




#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"

 



typedef struct IOleDocument IOleDocument;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




typedef struct IOleDocumentSite IOleDocumentSite;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




typedef struct IOleDocumentView IOleDocumentView;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




typedef struct IEnumOleDocumentViews IEnumOleDocumentViews;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




typedef struct IContinueCallback IContinueCallback;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




typedef struct IPrint IPrint;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




typedef struct IOleCommandTarget IOleCommandTarget;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"






extern "C"{
#line 93 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 












#pragma comment(lib,"uuid.lib")

















extern RPC_IF_HANDLE __MIDL_itf_docobj_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0000_v0_0_s_ifspec;





 

typedef  IOleDocument *LPOLEDOCUMENT;

typedef  
enum __MIDL_IOleDocument_0001
    {	DOCMISC_CANCREATEMULTIPLEVIEWS	= 1,
	DOCMISC_SUPPORTCOMPLEXRECTANGLES	= 2,
	DOCMISC_CANTOPENEDIT	= 4,
	DOCMISC_NOFILESUPPORT	= 8
    } 	DOCMISC;


extern "C" const IID IID_IOleDocument;


    
    struct __declspec(uuid("b722bcc5-4e68-101b-a2bc-00aa00404770")) __declspec(novtable)
    IOleDocument : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateView( 
             IOleInPlaceSite *pIPSite,
             IStream *pstm,
             DWORD dwReserved,
             IOleDocumentView **ppView) = 0;
        
        virtual HRESULT __stdcall GetDocMiscStatus( 
             DWORD *pdwStatus) = 0;
        
        virtual HRESULT __stdcall EnumViews( 
             IEnumOleDocumentViews **ppEnum,
             IOleDocumentView **ppView) = 0;
        
    };
    




































































#line 241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



HRESULT __stdcall IOleDocument_CreateView_Proxy( 
    IOleDocument * This,
     IOleInPlaceSite *pIPSite,
     IStream *pstm,
     DWORD dwReserved,
     IOleDocumentView **ppView);


void __stdcall IOleDocument_CreateView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocument_GetDocMiscStatus_Proxy( 
    IOleDocument * This,
     DWORD *pdwStatus);


void __stdcall IOleDocument_GetDocMiscStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocument_EnumViews_Proxy( 
    IOleDocument * This,
     IEnumOleDocumentViews **ppEnum,
     IOleDocumentView **ppView);


void __stdcall IOleDocument_EnumViews_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 286 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 

#line 292 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




extern RPC_IF_HANDLE __MIDL_itf_docobj_0255_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0255_v0_0_s_ifspec;





 

typedef  IOleDocumentSite *LPOLEDOCUMENTSITE;


extern "C" const IID IID_IOleDocumentSite;


    
    struct __declspec(uuid("b722bcc7-4e68-101b-a2bc-00aa00404770")) __declspec(novtable)
    IOleDocumentSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ActivateMe( 
             IOleDocumentView *pViewToActivate) = 0;
        
    };
    


















































#line 372 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



HRESULT __stdcall IOleDocumentSite_ActivateMe_Proxy( 
    IOleDocumentSite * This,
     IOleDocumentView *pViewToActivate);


void __stdcall IOleDocumentSite_ActivateMe_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 389 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 

#line 395 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




extern RPC_IF_HANDLE __MIDL_itf_docobj_0256_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0256_v0_0_s_ifspec;





 

typedef  IOleDocumentView *LPOLEDOCUMENTVIEW;


extern "C" const IID IID_IOleDocumentView;


    
    struct __declspec(uuid("b722bcc6-4e68-101b-a2bc-00aa00404770")) __declspec(novtable)
    IOleDocumentView : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetInPlaceSite( 
             IOleInPlaceSite *pIPSite) = 0;
        
        virtual HRESULT __stdcall GetInPlaceSite( 
             IOleInPlaceSite **ppIPSite) = 0;
        
        virtual HRESULT __stdcall GetDocument( 
             IUnknown **ppunk) = 0;
        
        virtual  HRESULT __stdcall SetRect( 
             LPRECT prcView) = 0;
        
        virtual HRESULT __stdcall GetRect( 
             LPRECT prcView) = 0;
        
        virtual  HRESULT __stdcall SetRectComplex( 
             LPRECT prcView,
             LPRECT prcHScroll,
             LPRECT prcVScroll,
             LPRECT prcSizeBox) = 0;
        
        virtual HRESULT __stdcall Show( 
             BOOL fShow) = 0;
        
        virtual HRESULT __stdcall UIActivate( 
             BOOL fUIActivate) = 0;
        
        virtual HRESULT __stdcall Open( void) = 0;
        
        virtual HRESULT __stdcall CloseView( 
            DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall SaveViewState( 
             LPSTREAM pstm) = 0;
        
        virtual HRESULT __stdcall ApplyViewState( 
             LPSTREAM pstm) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IOleInPlaceSite *pIPSiteNew,
             IOleDocumentView **ppViewNew) = 0;
        
    };
    









































































































































#line 601 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



HRESULT __stdcall IOleDocumentView_SetInPlaceSite_Proxy( 
    IOleDocumentView * This,
     IOleInPlaceSite *pIPSite);


void __stdcall IOleDocumentView_SetInPlaceSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_GetInPlaceSite_Proxy( 
    IOleDocumentView * This,
     IOleInPlaceSite **ppIPSite);


void __stdcall IOleDocumentView_GetInPlaceSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_GetDocument_Proxy( 
    IOleDocumentView * This,
     IUnknown **ppunk);


void __stdcall IOleDocumentView_GetDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleDocumentView_SetRect_Proxy( 
    IOleDocumentView * This,
     LPRECT prcView);


void __stdcall IOleDocumentView_SetRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_GetRect_Proxy( 
    IOleDocumentView * This,
     LPRECT prcView);


void __stdcall IOleDocumentView_GetRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleDocumentView_SetRectComplex_Proxy( 
    IOleDocumentView * This,
     LPRECT prcView,
     LPRECT prcHScroll,
     LPRECT prcVScroll,
     LPRECT prcSizeBox);


void __stdcall IOleDocumentView_SetRectComplex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_Show_Proxy( 
    IOleDocumentView * This,
     BOOL fShow);


void __stdcall IOleDocumentView_Show_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_UIActivate_Proxy( 
    IOleDocumentView * This,
     BOOL fUIActivate);


void __stdcall IOleDocumentView_UIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_Open_Proxy( 
    IOleDocumentView * This);


void __stdcall IOleDocumentView_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_CloseView_Proxy( 
    IOleDocumentView * This,
    DWORD dwReserved);


void __stdcall IOleDocumentView_CloseView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_SaveViewState_Proxy( 
    IOleDocumentView * This,
     LPSTREAM pstm);


void __stdcall IOleDocumentView_SaveViewState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_ApplyViewState_Proxy( 
    IOleDocumentView * This,
     LPSTREAM pstm);


void __stdcall IOleDocumentView_ApplyViewState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleDocumentView_Clone_Proxy( 
    IOleDocumentView * This,
     IOleInPlaceSite *pIPSiteNew,
     IOleDocumentView **ppViewNew);


void __stdcall IOleDocumentView_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 765 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 

#line 771 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




extern RPC_IF_HANDLE __MIDL_itf_docobj_0257_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0257_v0_0_s_ifspec;





 

typedef  IEnumOleDocumentViews *LPENUMOLEDOCUMENTVIEWS;


extern "C" const IID IID_IEnumOleDocumentViews;


    
    struct __declspec(uuid("b722bcc8-4e68-101b-a2bc-00aa00404770")) __declspec(novtable)
    IEnumOleDocumentViews : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG cViews,
             IOleDocumentView **rgpView,
             ULONG *pcFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG cViews) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumOleDocumentViews **ppEnum) = 0;
        
    };
    








































































#line 883 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 HRESULT __stdcall IEnumOleDocumentViews_RemoteNext_Proxy( 
    IEnumOleDocumentViews * This,
     ULONG cViews,
     IOleDocumentView **rgpView,
     ULONG *pcFetched);


void __stdcall IEnumOleDocumentViews_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleDocumentViews_Skip_Proxy( 
    IEnumOleDocumentViews * This,
     ULONG cViews);


void __stdcall IEnumOleDocumentViews_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleDocumentViews_Reset_Proxy( 
    IEnumOleDocumentViews * This);


void __stdcall IEnumOleDocumentViews_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOleDocumentViews_Clone_Proxy( 
    IEnumOleDocumentViews * This,
     IEnumOleDocumentViews **ppEnum);


void __stdcall IEnumOleDocumentViews_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 937 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 

#line 943 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




extern RPC_IF_HANDLE __MIDL_itf_docobj_0258_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0258_v0_0_s_ifspec;





 

typedef  IContinueCallback *LPCONTINUECALLBACK;


extern "C" const IID IID_IContinueCallback;


    
    struct __declspec(uuid("b722bcca-4e68-101b-a2bc-00aa00404770")) __declspec(novtable)
    IContinueCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;
        
        virtual HRESULT __stdcall FContinuePrinting( 
             LONG nCntPrinted,
             LONG nCurPage,
             wchar_t *pwszPrintStatus) = 0;
        
    };
    


























































#line 1035 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



HRESULT __stdcall IContinueCallback_FContinue_Proxy( 
    IContinueCallback * This);


void __stdcall IContinueCallback_FContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IContinueCallback_FContinuePrinting_Proxy( 
    IContinueCallback * This,
     LONG nCntPrinted,
     LONG nCurPage,
     wchar_t *pwszPrintStatus);


void __stdcall IContinueCallback_FContinuePrinting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1065 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 

#line 1071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




extern RPC_IF_HANDLE __MIDL_itf_docobj_0259_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0259_v0_0_s_ifspec;





 

typedef  IPrint *LPPRINT;

typedef  
enum __MIDL_IPrint_0001
    {	PRINTFLAG_MAYBOTHERUSER	= 1,
	PRINTFLAG_PROMPTUSER	= 2,
	PRINTFLAG_USERMAYCHANGEPRINTER	= 4,
	PRINTFLAG_RECOMPOSETODEVICE	= 8,
	PRINTFLAG_DONTACTUALLYPRINT	= 16,
	PRINTFLAG_FORCEPROPERTIES	= 32,
	PRINTFLAG_PRINTTOFILE	= 64
    } 	PRINTFLAG;

typedef struct tagPAGERANGE
    {
    LONG nFromPage;
    LONG nToPage;
    } 	PAGERANGE;

typedef struct tagPAGESET
    {
    ULONG cbStruct;
    BOOL fOddPages;
    BOOL fEvenPages;
    ULONG cPageRange;
     PAGERANGE rgPages[ 1 ];
    } 	PAGESET;



extern "C" const IID IID_IPrint;


    
    struct __declspec(uuid("b722bcc9-4e68-101b-a2bc-00aa00404770")) __declspec(novtable)
    IPrint : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetInitialPageNum( 
             LONG nFirstPage) = 0;
        
        virtual HRESULT __stdcall GetPageInfo( 
             LONG *pnFirstPage,
             LONG *pcPages) = 0;
        
        virtual  HRESULT __stdcall Print( 
             DWORD grfFlags,
             DVTARGETDEVICE **pptd,
             PAGESET **ppPageSet,
             STGMEDIUM *pstgmOptions,
             IContinueCallback *pcallback,
             LONG nFirstPage,
             LONG *pcPagesPrinted,
             LONG *pnLastPage) = 0;
        
    };
    








































































#line 1214 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



HRESULT __stdcall IPrint_SetInitialPageNum_Proxy( 
    IPrint * This,
     LONG nFirstPage);


void __stdcall IPrint_SetInitialPageNum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPrint_GetPageInfo_Proxy( 
    IPrint * This,
     LONG *pnFirstPage,
     LONG *pcPages);


void __stdcall IPrint_GetPageInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IPrint_RemotePrint_Proxy( 
    IPrint * This,
     DWORD grfFlags,
     DVTARGETDEVICE **pptd,
     PAGESET **pppageset,
     RemSTGMEDIUM *pstgmOptions,
     IContinueCallback *pcallback,
     LONG nFirstPage,
     LONG *pcPagesPrinted,
     LONG *pnLastPage);


void __stdcall IPrint_RemotePrint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1263 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 

#line 1269 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"




extern RPC_IF_HANDLE __MIDL_itf_docobj_0260_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0260_v0_0_s_ifspec;





 

typedef  IOleCommandTarget *LPOLECOMMANDTARGET;

typedef 
enum OLECMDF
    {	OLECMDF_SUPPORTED	= 0x1,
	OLECMDF_ENABLED	= 0x2,
	OLECMDF_LATCHED	= 0x4,
	OLECMDF_NINCHED	= 0x8,
	OLECMDF_INVISIBLE	= 0x10,
	OLECMDF_DEFHIDEONCTXTMENU	= 0x20
    } 	OLECMDF;

typedef struct _tagOLECMD
    {
    ULONG cmdID;
    DWORD cmdf;
    } 	OLECMD;

typedef struct _tagOLECMDTEXT
    {
    DWORD cmdtextf;
    ULONG cwActual;
    ULONG cwBuf;
     wchar_t rgwz[ 1 ];
    } 	OLECMDTEXT;

typedef 
enum OLECMDTEXTF
    {	OLECMDTEXTF_NONE	= 0,
	OLECMDTEXTF_NAME	= 1,
	OLECMDTEXTF_STATUS	= 2
    } 	OLECMDTEXTF;

typedef 
enum OLECMDEXECOPT
    {	OLECMDEXECOPT_DODEFAULT	= 0,
	OLECMDEXECOPT_PROMPTUSER	= 1,
	OLECMDEXECOPT_DONTPROMPTUSER	= 2,
	OLECMDEXECOPT_SHOWHELP	= 3
    } 	OLECMDEXECOPT;


typedef 
enum OLECMDID
    {	OLECMDID_OPEN	= 1,
	OLECMDID_NEW	= 2,
	OLECMDID_SAVE	= 3,
	OLECMDID_SAVEAS	= 4,
	OLECMDID_SAVECOPYAS	= 5,
	OLECMDID_PRINT	= 6,
	OLECMDID_PRINTPREVIEW	= 7,
	OLECMDID_PAGESETUP	= 8,
	OLECMDID_SPELL	= 9,
	OLECMDID_PROPERTIES	= 10,
	OLECMDID_CUT	= 11,
	OLECMDID_COPY	= 12,
	OLECMDID_PASTE	= 13,
	OLECMDID_PASTESPECIAL	= 14,
	OLECMDID_UNDO	= 15,
	OLECMDID_REDO	= 16,
	OLECMDID_SELECTALL	= 17,
	OLECMDID_CLEARSELECTION	= 18,
	OLECMDID_ZOOM	= 19,
	OLECMDID_GETZOOMRANGE	= 20,
	OLECMDID_UPDATECOMMANDS	= 21,
	OLECMDID_REFRESH	= 22,
	OLECMDID_STOP	= 23,
	OLECMDID_HIDETOOLBARS	= 24,
	OLECMDID_SETPROGRESSMAX	= 25,
	OLECMDID_SETPROGRESSPOS	= 26,
	OLECMDID_SETPROGRESSTEXT	= 27,
	OLECMDID_SETTITLE	= 28,
	OLECMDID_SETDOWNLOADSTATE	= 29,
	OLECMDID_STOPDOWNLOAD	= 30,
	OLECMDID_ONTOOLBARACTIVATED	= 31,
	OLECMDID_FIND	= 32,
	OLECMDID_DELETE	= 33,
	OLECMDID_HTTPEQUIV	= 34,
	OLECMDID_HTTPEQUIV_DONE	= 35,
	OLECMDID_ENABLE_INTERACTION	= 36,
	OLECMDID_ONUNLOAD	= 37,
	OLECMDID_PROPERTYBAG2	= 38,
	OLECMDID_PREREFRESH	= 39,
	OLECMDID_SHOWSCRIPTERROR	= 40,
	OLECMDID_SHOWMESSAGE	= 41,
	OLECMDID_SHOWFIND	= 42,
	OLECMDID_SHOWPAGESETUP	= 43,
	OLECMDID_SHOWPRINT	= 44,
	OLECMDID_CLOSE	= 45,
	OLECMDID_ALLOWUILESSSAVEAS	= 46,
	OLECMDID_DONTDOWNLOADCSS	= 47,
	OLECMDID_UPDATEPAGESTATUS	= 48,
	OLECMDID_PRINT2	= 49,
	OLECMDID_PRINTPREVIEW2	= 50,
	OLECMDID_SETPRINTTEMPLATE	= 51,
	OLECMDID_GETPRINTTEMPLATE	= 52
    } 	OLECMDID;














extern "C" const IID IID_IOleCommandTarget;


    
    struct __declspec(uuid("b722bccb-4e68-101b-a2bc-00aa00404770")) __declspec(novtable)
    IOleCommandTarget : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall QueryStatus( 
             const GUID *pguidCmdGroup,
             ULONG cCmds,
             OLECMD prgCmds[  ],
             OLECMDTEXT *pCmdText) = 0;
        
        virtual HRESULT __stdcall Exec( 
             const GUID *pguidCmdGroup,
             DWORD nCmdID,
             DWORD nCmdexecopt,
             VARIANT *pvaIn,
             VARIANT *pvaOut) = 0;
        
    };
    
































































#line 1481 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 HRESULT __stdcall IOleCommandTarget_QueryStatus_Proxy( 
    IOleCommandTarget * This,
     const GUID *pguidCmdGroup,
     ULONG cCmds,
     OLECMD prgCmds[  ],
     OLECMDTEXT *pCmdText);


void __stdcall IOleCommandTarget_QueryStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCommandTarget_Exec_Proxy( 
    IOleCommandTarget * This,
     const GUID *pguidCmdGroup,
     DWORD nCmdID,
     DWORD nCmdexecopt,
     VARIANT *pvaIn,
     VARIANT *pvaOut);


void __stdcall IOleCommandTarget_Exec_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1517 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"



 

#line 1523 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"
typedef enum
{
      OLECMDIDF_REFRESH_NORMAL          = 0,
      OLECMDIDF_REFRESH_IFEXPIRED       = 1,
      OLECMDIDF_REFRESH_CONTINUE        = 2,
      OLECMDIDF_REFRESH_COMPLETELY      = 3,
      OLECMDIDF_REFRESH_NO_CACHE        = 4,
      OLECMDIDF_REFRESH_RELOAD          = 5,
      OLECMDIDF_REFRESH_LEVELMASK       = 0x00FF,
      OLECMDIDF_REFRESH_CLEARUSERINPUT  = 0x1000,
      OLECMDIDF_REFRESH_PROMPTIFOFFLINE = 0x2000,
      OLECMDIDF_REFRESH_THROUGHSCRIPT   = 0x4000
} OLECMDID_REFRESHFLAG;



















































extern "C" const GUID SID_SContainerDispatch;


extern RPC_IF_HANDLE __MIDL_itf_docobj_0261_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_docobj_0261_v0_0_s_ifspec;



unsigned long             __stdcall  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

 HRESULT __stdcall IEnumOleDocumentViews_Next_Proxy( 
    IEnumOleDocumentViews * This,
     ULONG cViews,
     IOleDocumentView **rgpView,
     ULONG *pcFetched);


 HRESULT __stdcall IEnumOleDocumentViews_Next_Stub( 
    IEnumOleDocumentViews * This,
     ULONG cViews,
     IOleDocumentView **rgpView,
     ULONG *pcFetched);

 HRESULT __stdcall IPrint_Print_Proxy( 
    IPrint * This,
     DWORD grfFlags,
     DVTARGETDEVICE **pptd,
     PAGESET **ppPageSet,
     STGMEDIUM *pstgmOptions,
     IContinueCallback *pcallback,
     LONG nFirstPage,
     LONG *pcPagesPrinted,
     LONG *pnLastPage);


 HRESULT __stdcall IPrint_Print_Stub( 
    IPrint * This,
     DWORD grfFlags,
     DVTARGETDEVICE **pptd,
     PAGESET **pppageset,
     RemSTGMEDIUM *pstgmOptions,
     IContinueCallback *pcallback,
     LONG nFirstPage,
     LONG *pcPagesPrinted,
     LONG *pnLastPage);






}
#line 1643 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"

#line 1645 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\docobj.h"


#line 255 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


extern "C"{
#line 259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 






 

typedef   __declspec(uuid("34A226E0-DF30-11CF-89A9-00A0C9054129")) 
enum CommandStateChangeConstants
    {	CSC_UPDATECOMMANDS	= 0xffffffff,
	CSC_NAVIGATEFORWARD	= 0x1,
	CSC_NAVIGATEBACK	= 0x2
    } 	CommandStateChangeConstants;

typedef   __declspec(uuid("65507BE0-91A8-11d3-A845-009027220E6D")) 
enum SecureLockIconConstants
    {	secureLockIconUnsecure	= 0,
	secureLockIconMixed	= 0x1,
	secureLockIconSecureUnknownBits	= 0x2,
	secureLockIconSecure40Bit	= 0x3,
	secureLockIconSecure56Bit	= 0x4,
	secureLockIconSecureFortezza	= 0x5,
	secureLockIconSecure128Bit	= 0x6
    } 	SecureLockIconConstants;

typedef   __declspec(uuid("F41E6981-28E5-11d0-82B4-00A0C90C29C5")) 
enum ShellWindowTypeConstants
    {	SWC_EXPLORER	= 0,
	SWC_BROWSER	= 0x1,
	SWC_3RDPARTY	= 0x2,
	SWC_CALLBACK	= 0x4
    } 	ShellWindowTypeConstants;

typedef   __declspec(uuid("7716a370-38ca-11d0-a48b-00a0c90a8f39")) 
enum ShellWindowFindWindowOptions
    {	SWFO_NEEDDISPATCH	= 0x1,
	SWFO_INCLUDEPENDING	= 0x2,
	SWFO_COOKIEPASSED	= 0x4
    } 	ShellWindowFindWindowOptions;


extern "C" const IID LIBID_SHDocVw;





 

typedef   __declspec(uuid("14EE5380-A378-11cf-A731-00A0C9082637")) 
enum BrowserNavConstants
    {	navOpenInNewWindow	= 0x1,
	navNoHistory	= 0x2,
	navNoReadFromCache	= 0x4,
	navNoWriteToCache	= 0x8,
	navAllowAutosearch	= 0x10,
	navBrowserBar	= 0x20,
	navHyperlink	= 0x40,
	navEnforceRestricted	= 0x80
    } 	BrowserNavConstants;

typedef   __declspec(uuid("C317C261-A991-11cf-A731-00A0C9082637")) 
enum RefreshConstants
    {	REFRESH_NORMAL	= 0,
	REFRESH_IFEXPIRED	= 1,
	REFRESH_COMPLETELY	= 3
    } 	RefreshConstants;


extern "C" const IID IID_IWebBrowser;


    
    struct __declspec(uuid("EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B")) __declspec(novtable)
    IWebBrowser : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall GoBack( void) = 0;
        
        virtual  HRESULT __stdcall GoForward( void) = 0;
        
        virtual  HRESULT __stdcall GoHome( void) = 0;
        
        virtual  HRESULT __stdcall GoSearch( void) = 0;
        
        virtual  HRESULT __stdcall Navigate( 
             BSTR URL,
             VARIANT *Flags,
             VARIANT *TargetFrameName,
             VARIANT *PostData,
             VARIANT *Headers) = 0;
        
        virtual  HRESULT __stdcall Refresh( void) = 0;
        
        virtual  HRESULT __stdcall Refresh2( 
             VARIANT *Level) = 0;
        
        virtual  HRESULT __stdcall Stop( void) = 0;
        
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppDisp) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppDisp) = 0;
        
        virtual  HRESULT __stdcall get_Container( 
             IDispatch **ppDisp) = 0;
        
        virtual  HRESULT __stdcall get_Document( 
             IDispatch **ppDisp) = 0;
        
        virtual  HRESULT __stdcall get_TopLevelContainer( 
             VARIANT_BOOL *pBool) = 0;
        
        virtual  HRESULT __stdcall get_Type( 
             BSTR *Type) = 0;
        
        virtual  HRESULT __stdcall get_Left( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall put_Left( 
             long Left) = 0;
        
        virtual  HRESULT __stdcall get_Top( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall put_Top( 
             long Top) = 0;
        
        virtual  HRESULT __stdcall get_Width( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall put_Width( 
             long Width) = 0;
        
        virtual  HRESULT __stdcall get_Height( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall put_Height( 
             long Height) = 0;
        
        virtual  HRESULT __stdcall get_LocationName( 
             BSTR *LocationName) = 0;
        
        virtual  HRESULT __stdcall get_LocationURL( 
             BSTR *LocationURL) = 0;
        
        virtual  HRESULT __stdcall get_Busy( 
             VARIANT_BOOL *pBool) = 0;
        
    };
    


































































































































































































































































#line 674 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IWebBrowser_GoBack_Proxy( 
    IWebBrowser * This);


void __stdcall IWebBrowser_GoBack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_GoForward_Proxy( 
    IWebBrowser * This);


void __stdcall IWebBrowser_GoForward_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_GoHome_Proxy( 
    IWebBrowser * This);


void __stdcall IWebBrowser_GoHome_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_GoSearch_Proxy( 
    IWebBrowser * This);


void __stdcall IWebBrowser_GoSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_Navigate_Proxy( 
    IWebBrowser * This,
     BSTR URL,
     VARIANT *Flags,
     VARIANT *TargetFrameName,
     VARIANT *PostData,
     VARIANT *Headers);


void __stdcall IWebBrowser_Navigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_Refresh_Proxy( 
    IWebBrowser * This);


void __stdcall IWebBrowser_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_Refresh2_Proxy( 
    IWebBrowser * This,
     VARIANT *Level);


void __stdcall IWebBrowser_Refresh2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_Stop_Proxy( 
    IWebBrowser * This);


void __stdcall IWebBrowser_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Application_Proxy( 
    IWebBrowser * This,
     IDispatch **ppDisp);


void __stdcall IWebBrowser_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Parent_Proxy( 
    IWebBrowser * This,
     IDispatch **ppDisp);


void __stdcall IWebBrowser_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Container_Proxy( 
    IWebBrowser * This,
     IDispatch **ppDisp);


void __stdcall IWebBrowser_get_Container_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Document_Proxy( 
    IWebBrowser * This,
     IDispatch **ppDisp);


void __stdcall IWebBrowser_get_Document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_TopLevelContainer_Proxy( 
    IWebBrowser * This,
     VARIANT_BOOL *pBool);


void __stdcall IWebBrowser_get_TopLevelContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Type_Proxy( 
    IWebBrowser * This,
     BSTR *Type);


void __stdcall IWebBrowser_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Left_Proxy( 
    IWebBrowser * This,
     long *pl);


void __stdcall IWebBrowser_get_Left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_put_Left_Proxy( 
    IWebBrowser * This,
     long Left);


void __stdcall IWebBrowser_put_Left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Top_Proxy( 
    IWebBrowser * This,
     long *pl);


void __stdcall IWebBrowser_get_Top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_put_Top_Proxy( 
    IWebBrowser * This,
     long Top);


void __stdcall IWebBrowser_put_Top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Width_Proxy( 
    IWebBrowser * This,
     long *pl);


void __stdcall IWebBrowser_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_put_Width_Proxy( 
    IWebBrowser * This,
     long Width);


void __stdcall IWebBrowser_put_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Height_Proxy( 
    IWebBrowser * This,
     long *pl);


void __stdcall IWebBrowser_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_put_Height_Proxy( 
    IWebBrowser * This,
     long Height);


void __stdcall IWebBrowser_put_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_LocationName_Proxy( 
    IWebBrowser * This,
     BSTR *LocationName);


void __stdcall IWebBrowser_get_LocationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_LocationURL_Proxy( 
    IWebBrowser * This,
     BSTR *LocationURL);


void __stdcall IWebBrowser_get_LocationURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser_get_Busy_Proxy( 
    IWebBrowser * This,
     VARIANT_BOOL *pBool);


void __stdcall IWebBrowser_get_Busy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 977 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID DIID_DWebBrowserEvents;



    struct __declspec(uuid("EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B")) __declspec(novtable)
    DWebBrowserEvents : public IDispatch
    {
    };
    




















































































#line 1080 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


#line 1083 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_IWebBrowserApp;


    
    struct __declspec(uuid("0002DF05-0000-0000-C000-000000000046")) __declspec(novtable)
    IWebBrowserApp : public IWebBrowser
    {
    public:
        virtual  HRESULT __stdcall Quit( void) = 0;
        
        virtual  HRESULT __stdcall ClientToWindow( 
             int *pcx,
             int *pcy) = 0;
        
        virtual  HRESULT __stdcall PutProperty( 
             BSTR Property,
             VARIANT vtValue) = 0;
        
        virtual  HRESULT __stdcall GetProperty( 
             BSTR Property,
             VARIANT *pvtValue) = 0;
        
        virtual  HRESULT __stdcall get_Name( 
             BSTR *Name) = 0;
        
        virtual  HRESULT __stdcall get_HWND( 
             SHANDLE_PTR *pHWND) = 0;
        
        virtual  HRESULT __stdcall get_FullName( 
             BSTR *FullName) = 0;
        
        virtual  HRESULT __stdcall get_Path( 
             BSTR *Path) = 0;
        
        virtual  HRESULT __stdcall get_Visible( 
             VARIANT_BOOL *pBool) = 0;
        
        virtual  HRESULT __stdcall put_Visible( 
             VARIANT_BOOL Value) = 0;
        
        virtual  HRESULT __stdcall get_StatusBar( 
             VARIANT_BOOL *pBool) = 0;
        
        virtual  HRESULT __stdcall put_StatusBar( 
             VARIANT_BOOL Value) = 0;
        
        virtual  HRESULT __stdcall get_StatusText( 
             BSTR *StatusText) = 0;
        
        virtual  HRESULT __stdcall put_StatusText( 
             BSTR StatusText) = 0;
        
        virtual  HRESULT __stdcall get_ToolBar( 
             int *Value) = 0;
        
        virtual  HRESULT __stdcall put_ToolBar( 
             int Value) = 0;
        
        virtual  HRESULT __stdcall get_MenuBar( 
             VARIANT_BOOL *Value) = 0;
        
        virtual  HRESULT __stdcall put_MenuBar( 
             VARIANT_BOOL Value) = 0;
        
        virtual  HRESULT __stdcall get_FullScreen( 
             VARIANT_BOOL *pbFullScreen) = 0;
        
        virtual  HRESULT __stdcall put_FullScreen( 
             VARIANT_BOOL bFullScreen) = 0;
        
    };
    

















































































































































































































































































































































































































#line 1566 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IWebBrowserApp_Quit_Proxy( 
    IWebBrowserApp * This);


void __stdcall IWebBrowserApp_Quit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_ClientToWindow_Proxy( 
    IWebBrowserApp * This,
     int *pcx,
     int *pcy);


void __stdcall IWebBrowserApp_ClientToWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_PutProperty_Proxy( 
    IWebBrowserApp * This,
     BSTR Property,
     VARIANT vtValue);


void __stdcall IWebBrowserApp_PutProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_GetProperty_Proxy( 
    IWebBrowserApp * This,
     BSTR Property,
     VARIANT *pvtValue);


void __stdcall IWebBrowserApp_GetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_Name_Proxy( 
    IWebBrowserApp * This,
     BSTR *Name);


void __stdcall IWebBrowserApp_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_HWND_Proxy( 
    IWebBrowserApp * This,
     SHANDLE_PTR *pHWND);


void __stdcall IWebBrowserApp_get_HWND_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_FullName_Proxy( 
    IWebBrowserApp * This,
     BSTR *FullName);


void __stdcall IWebBrowserApp_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_Path_Proxy( 
    IWebBrowserApp * This,
     BSTR *Path);


void __stdcall IWebBrowserApp_get_Path_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_Visible_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL *pBool);


void __stdcall IWebBrowserApp_get_Visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_put_Visible_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL Value);


void __stdcall IWebBrowserApp_put_Visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_StatusBar_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL *pBool);


void __stdcall IWebBrowserApp_get_StatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_put_StatusBar_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL Value);


void __stdcall IWebBrowserApp_put_StatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_StatusText_Proxy( 
    IWebBrowserApp * This,
     BSTR *StatusText);


void __stdcall IWebBrowserApp_get_StatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_put_StatusText_Proxy( 
    IWebBrowserApp * This,
     BSTR StatusText);


void __stdcall IWebBrowserApp_put_StatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_ToolBar_Proxy( 
    IWebBrowserApp * This,
     int *Value);


void __stdcall IWebBrowserApp_get_ToolBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_put_ToolBar_Proxy( 
    IWebBrowserApp * This,
     int Value);


void __stdcall IWebBrowserApp_put_ToolBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_MenuBar_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL *Value);


void __stdcall IWebBrowserApp_get_MenuBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_put_MenuBar_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL Value);


void __stdcall IWebBrowserApp_put_MenuBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_get_FullScreen_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL *pbFullScreen);


void __stdcall IWebBrowserApp_get_FullScreen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowserApp_put_FullScreen_Proxy( 
    IWebBrowserApp * This,
     VARIANT_BOOL bFullScreen);


void __stdcall IWebBrowserApp_put_FullScreen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1813 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_IWebBrowser2;


    
    struct __declspec(uuid("D30C1661-CDAF-11d0-8A3E-00C04FC9E26E")) __declspec(novtable)
    IWebBrowser2 : public IWebBrowserApp
    {
    public:
        virtual  HRESULT __stdcall Navigate2( 
             VARIANT *URL,
             VARIANT *Flags,
             VARIANT *TargetFrameName,
             VARIANT *PostData,
             VARIANT *Headers) = 0;
        
        virtual  HRESULT __stdcall QueryStatusWB( 
             OLECMDID cmdID,
             OLECMDF *pcmdf) = 0;
        
        virtual  HRESULT __stdcall ExecWB( 
             OLECMDID cmdID,
             OLECMDEXECOPT cmdexecopt,
             VARIANT *pvaIn,
             VARIANT *pvaOut) = 0;
        
        virtual  HRESULT __stdcall ShowBrowserBar( 
             VARIANT *pvaClsid,
             VARIANT *pvarShow,
             VARIANT *pvarSize) = 0;
        
        virtual  HRESULT __stdcall get_ReadyState( 
             READYSTATE *plReadyState) = 0;
        
        virtual  HRESULT __stdcall get_Offline( 
             VARIANT_BOOL *pbOffline) = 0;
        
        virtual  HRESULT __stdcall put_Offline( 
             VARIANT_BOOL bOffline) = 0;
        
        virtual  HRESULT __stdcall get_Silent( 
             VARIANT_BOOL *pbSilent) = 0;
        
        virtual  HRESULT __stdcall put_Silent( 
             VARIANT_BOOL bSilent) = 0;
        
        virtual  HRESULT __stdcall get_RegisterAsBrowser( 
             VARIANT_BOOL *pbRegister) = 0;
        
        virtual  HRESULT __stdcall put_RegisterAsBrowser( 
             VARIANT_BOOL bRegister) = 0;
        
        virtual  HRESULT __stdcall get_RegisterAsDropTarget( 
             VARIANT_BOOL *pbRegister) = 0;
        
        virtual  HRESULT __stdcall put_RegisterAsDropTarget( 
             VARIANT_BOOL bRegister) = 0;
        
        virtual  HRESULT __stdcall get_TheaterMode( 
             VARIANT_BOOL *pbRegister) = 0;
        
        virtual  HRESULT __stdcall put_TheaterMode( 
             VARIANT_BOOL bRegister) = 0;
        
        virtual  HRESULT __stdcall get_AddressBar( 
             VARIANT_BOOL *Value) = 0;
        
        virtual  HRESULT __stdcall put_AddressBar( 
             VARIANT_BOOL Value) = 0;
        
        virtual  HRESULT __stdcall get_Resizable( 
             VARIANT_BOOL *Value) = 0;
        
        virtual  HRESULT __stdcall put_Resizable( 
             VARIANT_BOOL Value) = 0;
        
    };
    

































































































































































































































































































































































































































































































































































#line 2445 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IWebBrowser2_Navigate2_Proxy( 
    IWebBrowser2 * This,
     VARIANT *URL,
     VARIANT *Flags,
     VARIANT *TargetFrameName,
     VARIANT *PostData,
     VARIANT *Headers);


void __stdcall IWebBrowser2_Navigate2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_QueryStatusWB_Proxy( 
    IWebBrowser2 * This,
     OLECMDID cmdID,
     OLECMDF *pcmdf);


void __stdcall IWebBrowser2_QueryStatusWB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_ExecWB_Proxy( 
    IWebBrowser2 * This,
     OLECMDID cmdID,
     OLECMDEXECOPT cmdexecopt,
     VARIANT *pvaIn,
     VARIANT *pvaOut);


void __stdcall IWebBrowser2_ExecWB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_ShowBrowserBar_Proxy( 
    IWebBrowser2 * This,
     VARIANT *pvaClsid,
     VARIANT *pvarShow,
     VARIANT *pvarSize);


void __stdcall IWebBrowser2_ShowBrowserBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_ReadyState_Proxy( 
    IWebBrowser2 * This,
     READYSTATE *plReadyState);


void __stdcall IWebBrowser2_get_ReadyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_Offline_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL *pbOffline);


void __stdcall IWebBrowser2_get_Offline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_put_Offline_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL bOffline);


void __stdcall IWebBrowser2_put_Offline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_Silent_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL *pbSilent);


void __stdcall IWebBrowser2_get_Silent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_put_Silent_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL bSilent);


void __stdcall IWebBrowser2_put_Silent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_RegisterAsBrowser_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL *pbRegister);


void __stdcall IWebBrowser2_get_RegisterAsBrowser_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_put_RegisterAsBrowser_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL bRegister);


void __stdcall IWebBrowser2_put_RegisterAsBrowser_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_RegisterAsDropTarget_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL *pbRegister);


void __stdcall IWebBrowser2_get_RegisterAsDropTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_put_RegisterAsDropTarget_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL bRegister);


void __stdcall IWebBrowser2_put_RegisterAsDropTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_TheaterMode_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL *pbRegister);


void __stdcall IWebBrowser2_get_TheaterMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_put_TheaterMode_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL bRegister);


void __stdcall IWebBrowser2_put_TheaterMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_AddressBar_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL *Value);


void __stdcall IWebBrowser2_get_AddressBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_put_AddressBar_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL Value);


void __stdcall IWebBrowser2_put_AddressBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_get_Resizable_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL *Value);


void __stdcall IWebBrowser2_get_Resizable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebBrowser2_put_Resizable_Proxy( 
    IWebBrowser2 * This,
     VARIANT_BOOL Value);


void __stdcall IWebBrowser2_put_Resizable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2688 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID DIID_DWebBrowserEvents2;



    struct __declspec(uuid("34A715A0-6587-11D0-924A-0020AFC7AC4D")) __declspec(novtable)
    DWebBrowserEvents2 : public IDispatch
    {
    };
    




















































































#line 2791 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


#line 2794 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


extern "C" const CLSID CLSID_WebBrowser_V1;



class __declspec(uuid("EAB22AC3-30C1-11CF-A7EB-0000C05BAE0B"))
WebBrowser_V1;
#line 2803 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

extern "C" const CLSID CLSID_WebBrowser;



class __declspec(uuid("8856F961-340A-11D0-A96B-00C04FD705A2"))
WebBrowser;
#line 2811 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

extern "C" const CLSID CLSID_InternetExplorer;



class __declspec(uuid("0002DF01-0000-0000-C000-000000000046"))
InternetExplorer;
#line 2819 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

extern "C" const CLSID CLSID_ShellBrowserWindow;



class __declspec(uuid("c08afd90-f2a1-11d1-8455-00a0c91f3880"))
ShellBrowserWindow;
#line 2827 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"





 


extern "C" const IID DIID_DShellWindowsEvents;



    struct __declspec(uuid("fe4106e0-399a-11d0-a48c-00a0c90a8f39")) __declspec(novtable)
    DShellWindowsEvents : public IDispatch
    {
    };
    




















































































#line 2929 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


#line 2932 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_IShellWindows;


    
    struct __declspec(uuid("85CB6900-4D95-11CF-960C-0080C7F4EE85")) __declspec(novtable)
    IShellWindows : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Count( 
             long *Count) = 0;
        
        virtual  HRESULT __stdcall Item( 
             VARIANT index,
             IDispatch **Folder) = 0;
        
        virtual  HRESULT __stdcall _NewEnum( 
             IUnknown **ppunk) = 0;
        
        virtual  HRESULT __stdcall Register( 
             IDispatch *pid,
             long hwnd,
             int swClass,
             long *plCookie) = 0;
        
        virtual  HRESULT __stdcall RegisterPending( 
             long lThreadId,
             VARIANT *pvarloc,
             VARIANT *pvarlocRoot,
             int swClass,
             long *plCookie) = 0;
        
        virtual  HRESULT __stdcall Revoke( 
             long lCookie) = 0;
        
        virtual  HRESULT __stdcall OnNavigate( 
             long lCookie,
             VARIANT *pvarLoc) = 0;
        
        virtual  HRESULT __stdcall OnActivated( 
             long lCookie,
             VARIANT_BOOL fActive) = 0;
        
        virtual  HRESULT __stdcall FindWindowSW( 
             VARIANT *pvarLoc,
             VARIANT *pvarLocRoot,
             int swClass,
             long *phwnd,
             int swfwOptions,
             IDispatch **ppdispOut) = 0;
        
        virtual  HRESULT __stdcall OnCreated( 
             long lCookie,
             IUnknown *punk) = 0;
        
        virtual  HRESULT __stdcall ProcessAttachDetach( 
             VARIANT_BOOL fAttach) = 0;
        
    };
    


















































































































































































#line 3179 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IShellWindows_get_Count_Proxy( 
    IShellWindows * This,
     long *Count);


void __stdcall IShellWindows_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_Item_Proxy( 
    IShellWindows * This,
     VARIANT index,
     IDispatch **Folder);


void __stdcall IShellWindows_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows__NewEnum_Proxy( 
    IShellWindows * This,
     IUnknown **ppunk);


void __stdcall IShellWindows__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_Register_Proxy( 
    IShellWindows * This,
     IDispatch *pid,
     long hwnd,
     int swClass,
     long *plCookie);


void __stdcall IShellWindows_Register_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_RegisterPending_Proxy( 
    IShellWindows * This,
     long lThreadId,
     VARIANT *pvarloc,
     VARIANT *pvarlocRoot,
     int swClass,
     long *plCookie);


void __stdcall IShellWindows_RegisterPending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_Revoke_Proxy( 
    IShellWindows * This,
     long lCookie);


void __stdcall IShellWindows_Revoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_OnNavigate_Proxy( 
    IShellWindows * This,
     long lCookie,
     VARIANT *pvarLoc);


void __stdcall IShellWindows_OnNavigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_OnActivated_Proxy( 
    IShellWindows * This,
     long lCookie,
     VARIANT_BOOL fActive);


void __stdcall IShellWindows_OnActivated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_FindWindowSW_Proxy( 
    IShellWindows * This,
     VARIANT *pvarLoc,
     VARIANT *pvarLocRoot,
     int swClass,
     long *phwnd,
     int swfwOptions,
     IDispatch **ppdispOut);


void __stdcall IShellWindows_FindWindowSW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_OnCreated_Proxy( 
    IShellWindows * This,
     long lCookie,
     IUnknown *punk);


void __stdcall IShellWindows_OnCreated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellWindows_ProcessAttachDetach_Proxy( 
    IShellWindows * This,
     VARIANT_BOOL fAttach);


void __stdcall IShellWindows_ProcessAttachDetach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3332 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


extern "C" const CLSID CLSID_ShellWindows;



class __declspec(uuid("9BA05972-F6A8-11CF-A442-00A0C90A8F39"))
ShellWindows;
#line 3341 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"





 


extern "C" const IID IID_IShellUIHelper;


    
    struct __declspec(uuid("729FE2F8-1EA8-11d1-8F85-00C04FC2FBE1")) __declspec(novtable)
    IShellUIHelper : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall ResetFirstBootMode( void) = 0;
        
        virtual  HRESULT __stdcall ResetSafeMode( void) = 0;
        
        virtual  HRESULT __stdcall RefreshOfflineDesktop( void) = 0;
        
        virtual  HRESULT __stdcall AddFavorite( 
             BSTR URL,
             VARIANT *Title) = 0;
        
        virtual  HRESULT __stdcall AddChannel( 
             BSTR URL) = 0;
        
        virtual  HRESULT __stdcall AddDesktopComponent( 
             BSTR URL,
             BSTR Type,
             VARIANT *Left,
             VARIANT *Top,
             VARIANT *Width,
             VARIANT *Height) = 0;
        
        virtual  HRESULT __stdcall IsSubscribed( 
             BSTR URL,
             VARIANT_BOOL *pBool) = 0;
        
        virtual  HRESULT __stdcall NavigateAndFind( 
             BSTR URL,
             BSTR strQuery,
             VARIANT *varTargetFrame) = 0;
        
        virtual  HRESULT __stdcall ImportExportFavorites( 
             VARIANT_BOOL fImport,
             BSTR strImpExpPath) = 0;
        
        virtual  HRESULT __stdcall AutoCompleteSaveForm( 
             VARIANT *Form) = 0;
        
        virtual  HRESULT __stdcall AutoScan( 
             BSTR strSearch,
             BSTR strFailureUrl,
             VARIANT *pvarTargetFrame) = 0;
        
        virtual  HRESULT __stdcall AutoCompleteAttach( 
             VARIANT *Reserved) = 0;
        
        virtual  HRESULT __stdcall ShowBrowserUI( 
             BSTR bstrName,
             VARIANT *pvarIn,
             VARIANT *pvarOut) = 0;
        
    };
    



























































































































































































#line 3597 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IShellUIHelper_ResetFirstBootMode_Proxy( 
    IShellUIHelper * This);


void __stdcall IShellUIHelper_ResetFirstBootMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_ResetSafeMode_Proxy( 
    IShellUIHelper * This);


void __stdcall IShellUIHelper_ResetSafeMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_RefreshOfflineDesktop_Proxy( 
    IShellUIHelper * This);


void __stdcall IShellUIHelper_RefreshOfflineDesktop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_AddFavorite_Proxy( 
    IShellUIHelper * This,
     BSTR URL,
     VARIANT *Title);


void __stdcall IShellUIHelper_AddFavorite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_AddChannel_Proxy( 
    IShellUIHelper * This,
     BSTR URL);


void __stdcall IShellUIHelper_AddChannel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_AddDesktopComponent_Proxy( 
    IShellUIHelper * This,
     BSTR URL,
     BSTR Type,
     VARIANT *Left,
     VARIANT *Top,
     VARIANT *Width,
     VARIANT *Height);


void __stdcall IShellUIHelper_AddDesktopComponent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_IsSubscribed_Proxy( 
    IShellUIHelper * This,
     BSTR URL,
     VARIANT_BOOL *pBool);


void __stdcall IShellUIHelper_IsSubscribed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_NavigateAndFind_Proxy( 
    IShellUIHelper * This,
     BSTR URL,
     BSTR strQuery,
     VARIANT *varTargetFrame);


void __stdcall IShellUIHelper_NavigateAndFind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_ImportExportFavorites_Proxy( 
    IShellUIHelper * This,
     VARIANT_BOOL fImport,
     BSTR strImpExpPath);


void __stdcall IShellUIHelper_ImportExportFavorites_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_AutoCompleteSaveForm_Proxy( 
    IShellUIHelper * This,
     VARIANT *Form);


void __stdcall IShellUIHelper_AutoCompleteSaveForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_AutoScan_Proxy( 
    IShellUIHelper * This,
     BSTR strSearch,
     BSTR strFailureUrl,
     VARIANT *pvarTargetFrame);


void __stdcall IShellUIHelper_AutoScan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_AutoCompleteAttach_Proxy( 
    IShellUIHelper * This,
     VARIANT *Reserved);


void __stdcall IShellUIHelper_AutoCompleteAttach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellUIHelper_ShowBrowserUI_Proxy( 
    IShellUIHelper * This,
     BSTR bstrName,
     VARIANT *pvarIn,
     VARIANT *pvarOut);


void __stdcall IShellUIHelper_ShowBrowserUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3769 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


extern "C" const CLSID CLSID_ShellUIHelper;



class __declspec(uuid("64AB4BB7-111E-11d1-8F79-00C04FC2FBE1"))
ShellUIHelper;
#line 3778 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"





 


extern "C" const IID DIID_DShellNameSpaceEvents;



    struct __declspec(uuid("55136806-B2DE-11D1-B9F2-00A0C98BC547")) __declspec(novtable)
    DShellNameSpaceEvents : public IDispatch
    {
    };
    




















































































#line 3880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


#line 3883 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_IShellFavoritesNameSpace;


    
    struct __declspec(uuid("55136804-B2DE-11D1-B9F2-00A0C98BC547")) __declspec(novtable)
    IShellFavoritesNameSpace : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall MoveSelectionUp( void) = 0;
        
        virtual  HRESULT __stdcall MoveSelectionDown( void) = 0;
        
        virtual  HRESULT __stdcall ResetSort( void) = 0;
        
        virtual  HRESULT __stdcall NewFolder( void) = 0;
        
        virtual  HRESULT __stdcall Synchronize( void) = 0;
        
        virtual  HRESULT __stdcall Import( void) = 0;
        
        virtual  HRESULT __stdcall Export( void) = 0;
        
        virtual  HRESULT __stdcall InvokeContextMenuCommand( 
             BSTR strCommand) = 0;
        
        virtual  HRESULT __stdcall MoveSelectionTo( void) = 0;
        
        virtual  HRESULT __stdcall get_SubscriptionsEnabled( 
             VARIANT_BOOL *pBool) = 0;
        
        virtual  HRESULT __stdcall CreateSubscriptionForSelection( 
             VARIANT_BOOL *pBool) = 0;
        
        virtual  HRESULT __stdcall DeleteSubscriptionForSelection( 
             VARIANT_BOOL *pBool) = 0;
        
        virtual  HRESULT __stdcall SetRoot( 
             BSTR bstrFullPath) = 0;
        
    };
    








































































































































































#line 4102 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IShellFavoritesNameSpace_MoveSelectionUp_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_MoveSelectionUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_MoveSelectionDown_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_MoveSelectionDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_ResetSort_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_ResetSort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_NewFolder_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_NewFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_Synchronize_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_Synchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_Import_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_Import_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_Export_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_Export_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_InvokeContextMenuCommand_Proxy( 
    IShellFavoritesNameSpace * This,
     BSTR strCommand);


void __stdcall IShellFavoritesNameSpace_InvokeContextMenuCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_MoveSelectionTo_Proxy( 
    IShellFavoritesNameSpace * This);


void __stdcall IShellFavoritesNameSpace_MoveSelectionTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_get_SubscriptionsEnabled_Proxy( 
    IShellFavoritesNameSpace * This,
     VARIANT_BOOL *pBool);


void __stdcall IShellFavoritesNameSpace_get_SubscriptionsEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_CreateSubscriptionForSelection_Proxy( 
    IShellFavoritesNameSpace * This,
     VARIANT_BOOL *pBool);


void __stdcall IShellFavoritesNameSpace_CreateSubscriptionForSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_DeleteSubscriptionForSelection_Proxy( 
    IShellFavoritesNameSpace * This,
     VARIANT_BOOL *pBool);


void __stdcall IShellFavoritesNameSpace_DeleteSubscriptionForSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFavoritesNameSpace_SetRoot_Proxy( 
    IShellFavoritesNameSpace * This,
     BSTR bstrFullPath);


void __stdcall IShellFavoritesNameSpace_SetRoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4255 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_IShellNameSpace;


    
    struct __declspec(uuid("e572d3c9-37be-4ae2-825d-d521763e3108")) __declspec(novtable)
    IShellNameSpace : public IShellFavoritesNameSpace
    {
    public:
        virtual  HRESULT __stdcall get_EnumOptions( 
             LONG *pgrfEnumFlags) = 0;
        
        virtual  HRESULT __stdcall put_EnumOptions( 
             LONG lVal) = 0;
        
        virtual  HRESULT __stdcall get_SelectedItem( 
             IDispatch **pItem) = 0;
        
        virtual  HRESULT __stdcall put_SelectedItem( 
             IDispatch *pItem) = 0;
        
        virtual  HRESULT __stdcall get_Root( 
             VARIANT *pvar) = 0;
        
        virtual  HRESULT __stdcall put_Root( 
             VARIANT var) = 0;
        
        virtual  HRESULT __stdcall get_Depth( 
             int *piDepth) = 0;
        
        virtual  HRESULT __stdcall put_Depth( 
             int iDepth) = 0;
        
        virtual  HRESULT __stdcall get_Mode( 
             UINT *puMode) = 0;
        
        virtual  HRESULT __stdcall put_Mode( 
             UINT uMode) = 0;
        
        virtual  HRESULT __stdcall get_Flags( 
             DWORD *pdwFlags) = 0;
        
        virtual  HRESULT __stdcall put_Flags( 
             DWORD dwFlags) = 0;
        
        virtual  HRESULT __stdcall put_TVFlags( 
             DWORD dwFlags) = 0;
        
        virtual  HRESULT __stdcall get_TVFlags( 
             DWORD *dwFlags) = 0;
        
        virtual  HRESULT __stdcall get_Columns( 
             BSTR *bstrColumns) = 0;
        
        virtual  HRESULT __stdcall put_Columns( 
             BSTR bstrColumns) = 0;
        
        virtual  HRESULT __stdcall get_CountViewTypes( 
             int *piTypes) = 0;
        
        virtual  HRESULT __stdcall SetViewType( 
             int iType) = 0;
        
        virtual  HRESULT __stdcall SelectedItems( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall Expand( 
             VARIANT var,
            int iDepth) = 0;
        
        virtual  HRESULT __stdcall UnselectAll( void) = 0;
        
    };
    




























































































































































































































































































































#line 4654 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IShellNameSpace_get_EnumOptions_Proxy( 
    IShellNameSpace * This,
     LONG *pgrfEnumFlags);


void __stdcall IShellNameSpace_get_EnumOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_EnumOptions_Proxy( 
    IShellNameSpace * This,
     LONG lVal);


void __stdcall IShellNameSpace_put_EnumOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_SelectedItem_Proxy( 
    IShellNameSpace * This,
     IDispatch **pItem);


void __stdcall IShellNameSpace_get_SelectedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_SelectedItem_Proxy( 
    IShellNameSpace * This,
     IDispatch *pItem);


void __stdcall IShellNameSpace_put_SelectedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_Root_Proxy( 
    IShellNameSpace * This,
     VARIANT *pvar);


void __stdcall IShellNameSpace_get_Root_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_Root_Proxy( 
    IShellNameSpace * This,
     VARIANT var);


void __stdcall IShellNameSpace_put_Root_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_Depth_Proxy( 
    IShellNameSpace * This,
     int *piDepth);


void __stdcall IShellNameSpace_get_Depth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_Depth_Proxy( 
    IShellNameSpace * This,
     int iDepth);


void __stdcall IShellNameSpace_put_Depth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_Mode_Proxy( 
    IShellNameSpace * This,
     UINT *puMode);


void __stdcall IShellNameSpace_get_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_Mode_Proxy( 
    IShellNameSpace * This,
     UINT uMode);


void __stdcall IShellNameSpace_put_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_Flags_Proxy( 
    IShellNameSpace * This,
     DWORD *pdwFlags);


void __stdcall IShellNameSpace_get_Flags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_Flags_Proxy( 
    IShellNameSpace * This,
     DWORD dwFlags);


void __stdcall IShellNameSpace_put_Flags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_TVFlags_Proxy( 
    IShellNameSpace * This,
     DWORD dwFlags);


void __stdcall IShellNameSpace_put_TVFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_TVFlags_Proxy( 
    IShellNameSpace * This,
     DWORD *dwFlags);


void __stdcall IShellNameSpace_get_TVFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_Columns_Proxy( 
    IShellNameSpace * This,
     BSTR *bstrColumns);


void __stdcall IShellNameSpace_get_Columns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_put_Columns_Proxy( 
    IShellNameSpace * This,
     BSTR bstrColumns);


void __stdcall IShellNameSpace_put_Columns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_get_CountViewTypes_Proxy( 
    IShellNameSpace * This,
     int *piTypes);


void __stdcall IShellNameSpace_get_CountViewTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_SetViewType_Proxy( 
    IShellNameSpace * This,
     int iType);


void __stdcall IShellNameSpace_SetViewType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_SelectedItems_Proxy( 
    IShellNameSpace * This,
     IDispatch **ppid);


void __stdcall IShellNameSpace_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_Expand_Proxy( 
    IShellNameSpace * This,
     VARIANT var,
    int iDepth);


void __stdcall IShellNameSpace_Expand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellNameSpace_UnselectAll_Proxy( 
    IShellNameSpace * This);


void __stdcall IShellNameSpace_UnselectAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4911 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


extern "C" const CLSID CLSID_ShellNameSpace;



class __declspec(uuid("55136805-B2DE-11D1-B9F2-00A0C98BC547"))
ShellNameSpace;
#line 4920 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"





 


extern "C" const IID IID_IScriptErrorList;


    
    struct __declspec(uuid("F3470F24-15FD-11d2-BB2E-00805FF7EFCA")) __declspec(novtable)
    IScriptErrorList : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall advanceError( void) = 0;
        
        virtual  HRESULT __stdcall retreatError( void) = 0;
        
        virtual  HRESULT __stdcall canAdvanceError( 
             BOOL *pfCanAdvance) = 0;
        
        virtual  HRESULT __stdcall canRetreatError( 
             BOOL *pfCanRetreat) = 0;
        
        virtual  HRESULT __stdcall getErrorLine( 
             LONG *plLine) = 0;
        
        virtual  HRESULT __stdcall getErrorChar( 
             LONG *plChar) = 0;
        
        virtual  HRESULT __stdcall getErrorCode( 
             LONG *plCode) = 0;
        
        virtual  HRESULT __stdcall getErrorMsg( 
             BSTR *pstr) = 0;
        
        virtual  HRESULT __stdcall getErrorUrl( 
             BSTR *pstr) = 0;
        
        virtual  HRESULT __stdcall getAlwaysShowLockState( 
             BOOL *pfAlwaysShowLocked) = 0;
        
        virtual  HRESULT __stdcall getDetailsPaneOpen( 
             BOOL *pfDetailsPaneOpen) = 0;
        
        virtual  HRESULT __stdcall setDetailsPaneOpen( 
            BOOL fDetailsPaneOpen) = 0;
        
        virtual  HRESULT __stdcall getPerErrorDisplay( 
             BOOL *pfPerErrorDisplay) = 0;
        
        virtual  HRESULT __stdcall setPerErrorDisplay( 
            BOOL fPerErrorDisplay) = 0;
        
    };
    





















































































































































































#line 5160 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall IScriptErrorList_advanceError_Proxy( 
    IScriptErrorList * This);


void __stdcall IScriptErrorList_advanceError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_retreatError_Proxy( 
    IScriptErrorList * This);


void __stdcall IScriptErrorList_retreatError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_canAdvanceError_Proxy( 
    IScriptErrorList * This,
     BOOL *pfCanAdvance);


void __stdcall IScriptErrorList_canAdvanceError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_canRetreatError_Proxy( 
    IScriptErrorList * This,
     BOOL *pfCanRetreat);


void __stdcall IScriptErrorList_canRetreatError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getErrorLine_Proxy( 
    IScriptErrorList * This,
     LONG *plLine);


void __stdcall IScriptErrorList_getErrorLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getErrorChar_Proxy( 
    IScriptErrorList * This,
     LONG *plChar);


void __stdcall IScriptErrorList_getErrorChar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getErrorCode_Proxy( 
    IScriptErrorList * This,
     LONG *plCode);


void __stdcall IScriptErrorList_getErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getErrorMsg_Proxy( 
    IScriptErrorList * This,
     BSTR *pstr);


void __stdcall IScriptErrorList_getErrorMsg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getErrorUrl_Proxy( 
    IScriptErrorList * This,
     BSTR *pstr);


void __stdcall IScriptErrorList_getErrorUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getAlwaysShowLockState_Proxy( 
    IScriptErrorList * This,
     BOOL *pfAlwaysShowLocked);


void __stdcall IScriptErrorList_getAlwaysShowLockState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getDetailsPaneOpen_Proxy( 
    IScriptErrorList * This,
     BOOL *pfDetailsPaneOpen);


void __stdcall IScriptErrorList_getDetailsPaneOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_setDetailsPaneOpen_Proxy( 
    IScriptErrorList * This,
    BOOL fDetailsPaneOpen);


void __stdcall IScriptErrorList_setDetailsPaneOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_getPerErrorDisplay_Proxy( 
    IScriptErrorList * This,
     BOOL *pfPerErrorDisplay);


void __stdcall IScriptErrorList_getPerErrorDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IScriptErrorList_setPerErrorDisplay_Proxy( 
    IScriptErrorList * This,
    BOOL fPerErrorDisplay);


void __stdcall IScriptErrorList_setPerErrorDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


extern "C" const CLSID CLSID_CScriptErrorList;



class __declspec(uuid("EFD01300-160F-11d2-BB2E-00805FF7EFCA"))
CScriptErrorList;
#line 5340 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"





 


extern "C" const IID IID_ISearch;


    
    struct __declspec(uuid("ba9239a4-3dd5-11d2-bf8b-00c04fb93661")) __declspec(novtable)
    ISearch : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Title( 
             BSTR *pbstrTitle) = 0;
        
        virtual  HRESULT __stdcall get_Id( 
             BSTR *pbstrId) = 0;
        
        virtual  HRESULT __stdcall get_Url( 
             BSTR *pbstrUrl) = 0;
        
    };
    










































































































#line 5474 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall ISearch_get_Title_Proxy( 
    ISearch * This,
     BSTR *pbstrTitle);


void __stdcall ISearch_get_Title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearch_get_Id_Proxy( 
    ISearch * This,
     BSTR *pbstrId);


void __stdcall ISearch_get_Id_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearch_get_Url_Proxy( 
    ISearch * This,
     BSTR *pbstrUrl);


void __stdcall ISearch_get_Url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5515 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_ISearches;


    
    struct __declspec(uuid("47c922a2-3dd5-11d2-bf8b-00c04fb93661")) __declspec(novtable)
    ISearches : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Count( 
             long *plCount) = 0;
        
        virtual  HRESULT __stdcall get_Default( 
             BSTR *pbstrDefault) = 0;
        
        virtual  HRESULT __stdcall Item( 
             VARIANT index,
             ISearch **ppid) = 0;
        
        virtual  HRESULT __stdcall _NewEnum( 
             IUnknown **ppunk) = 0;
        
    };
    


















































































































#line 5662 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall ISearches_get_Count_Proxy( 
    ISearches * This,
     long *plCount);


void __stdcall ISearches_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearches_get_Default_Proxy( 
    ISearches * This,
     BSTR *pbstrDefault);


void __stdcall ISearches_get_Default_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearches_Item_Proxy( 
    ISearches * This,
     VARIANT index,
     ISearch **ppid);


void __stdcall ISearches_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearches__NewEnum_Proxy( 
    ISearches * This,
     IUnknown **ppunk);


void __stdcall ISearches__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_ISearchAssistantOC;


    
    struct __declspec(uuid("72423E8F-8011-11d2-BE79-00A0C9A83DA1")) __declspec(novtable)
    ISearchAssistantOC : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall AddNextMenuItem( 
             BSTR bstrText,
             long idItem) = 0;
        
        virtual  HRESULT __stdcall SetDefaultSearchUrl( 
             BSTR bstrUrl) = 0;
        
        virtual  HRESULT __stdcall NavigateToDefaultSearch( void) = 0;
        
        virtual  HRESULT __stdcall IsRestricted( 
             BSTR bstrGuid,
             VARIANT_BOOL *pVal) = 0;
        
        virtual  HRESULT __stdcall get_ShellFeaturesEnabled( 
             VARIANT_BOOL *pVal) = 0;
        
        virtual  HRESULT __stdcall get_SearchAssistantDefault( 
             VARIANT_BOOL *pVal) = 0;
        
        virtual  HRESULT __stdcall get_Searches( 
             ISearches **ppid) = 0;
        
        virtual  HRESULT __stdcall get_InWebFolder( 
             VARIANT_BOOL *pVal) = 0;
        
        virtual  HRESULT __stdcall PutProperty( 
             VARIANT_BOOL bPerLocale,
             BSTR bstrName,
             BSTR bstrValue) = 0;
        
        virtual  HRESULT __stdcall GetProperty( 
             VARIANT_BOOL bPerLocale,
             BSTR bstrName,
             BSTR *pbstrValue) = 0;
        
        virtual  HRESULT __stdcall put_EventHandled( 
             VARIANT_BOOL bHandled) = 0;
        
        virtual  HRESULT __stdcall ResetNextMenu( void) = 0;
        
        virtual  HRESULT __stdcall FindOnWeb( void) = 0;
        
        virtual  HRESULT __stdcall FindFilesOrFolders( void) = 0;
        
        virtual  HRESULT __stdcall FindComputer( void) = 0;
        
        virtual  HRESULT __stdcall FindPrinter( void) = 0;
        
        virtual  HRESULT __stdcall FindPeople( void) = 0;
        
        virtual  HRESULT __stdcall GetSearchAssistantURL( 
             VARIANT_BOOL bSubstitute,
             VARIANT_BOOL bCustomize,
             BSTR *pbstrValue) = 0;
        
        virtual  HRESULT __stdcall NotifySearchSettingsChanged( void) = 0;
        
        virtual  HRESULT __stdcall put_ASProvider( 
             BSTR Provider) = 0;
        
        virtual  HRESULT __stdcall get_ASProvider( 
             BSTR *pProvider) = 0;
        
        virtual  HRESULT __stdcall put_ASSetting( 
             int Setting) = 0;
        
        virtual  HRESULT __stdcall get_ASSetting( 
             int *pSetting) = 0;
        
        virtual  HRESULT __stdcall NETDetectNextNavigate( void) = 0;
        
        virtual  HRESULT __stdcall PutFindText( 
             BSTR FindText) = 0;
        
        virtual  HRESULT __stdcall get_Version( 
             int *pVersion) = 0;
        
        virtual  HRESULT __stdcall EncodeString( 
             BSTR bstrValue,
             BSTR bstrCharSet,
             VARIANT_BOOL bUseUTF8,
             BSTR *pbstrResult) = 0;
        
    };
    




















































































































































































































































































#line 6095 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall ISearchAssistantOC_AddNextMenuItem_Proxy( 
    ISearchAssistantOC * This,
     BSTR bstrText,
     long idItem);


void __stdcall ISearchAssistantOC_AddNextMenuItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_SetDefaultSearchUrl_Proxy( 
    ISearchAssistantOC * This,
     BSTR bstrUrl);


void __stdcall ISearchAssistantOC_SetDefaultSearchUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_NavigateToDefaultSearch_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_NavigateToDefaultSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_IsRestricted_Proxy( 
    ISearchAssistantOC * This,
     BSTR bstrGuid,
     VARIANT_BOOL *pVal);


void __stdcall ISearchAssistantOC_IsRestricted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_get_ShellFeaturesEnabled_Proxy( 
    ISearchAssistantOC * This,
     VARIANT_BOOL *pVal);


void __stdcall ISearchAssistantOC_get_ShellFeaturesEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_get_SearchAssistantDefault_Proxy( 
    ISearchAssistantOC * This,
     VARIANT_BOOL *pVal);


void __stdcall ISearchAssistantOC_get_SearchAssistantDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_get_Searches_Proxy( 
    ISearchAssistantOC * This,
     ISearches **ppid);


void __stdcall ISearchAssistantOC_get_Searches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_get_InWebFolder_Proxy( 
    ISearchAssistantOC * This,
     VARIANT_BOOL *pVal);


void __stdcall ISearchAssistantOC_get_InWebFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_PutProperty_Proxy( 
    ISearchAssistantOC * This,
     VARIANT_BOOL bPerLocale,
     BSTR bstrName,
     BSTR bstrValue);


void __stdcall ISearchAssistantOC_PutProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_GetProperty_Proxy( 
    ISearchAssistantOC * This,
     VARIANT_BOOL bPerLocale,
     BSTR bstrName,
     BSTR *pbstrValue);


void __stdcall ISearchAssistantOC_GetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_put_EventHandled_Proxy( 
    ISearchAssistantOC * This,
     VARIANT_BOOL bHandled);


void __stdcall ISearchAssistantOC_put_EventHandled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_ResetNextMenu_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_ResetNextMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_FindOnWeb_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_FindOnWeb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_FindFilesOrFolders_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_FindFilesOrFolders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_FindComputer_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_FindComputer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_FindPrinter_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_FindPrinter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_FindPeople_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_FindPeople_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_GetSearchAssistantURL_Proxy( 
    ISearchAssistantOC * This,
     VARIANT_BOOL bSubstitute,
     VARIANT_BOOL bCustomize,
     BSTR *pbstrValue);


void __stdcall ISearchAssistantOC_GetSearchAssistantURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_NotifySearchSettingsChanged_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_NotifySearchSettingsChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_put_ASProvider_Proxy( 
    ISearchAssistantOC * This,
     BSTR Provider);


void __stdcall ISearchAssistantOC_put_ASProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_get_ASProvider_Proxy( 
    ISearchAssistantOC * This,
     BSTR *pProvider);


void __stdcall ISearchAssistantOC_get_ASProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_put_ASSetting_Proxy( 
    ISearchAssistantOC * This,
     int Setting);


void __stdcall ISearchAssistantOC_put_ASSetting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_get_ASSetting_Proxy( 
    ISearchAssistantOC * This,
     int *pSetting);


void __stdcall ISearchAssistantOC_get_ASSetting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_NETDetectNextNavigate_Proxy( 
    ISearchAssistantOC * This);


void __stdcall ISearchAssistantOC_NETDetectNextNavigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_PutFindText_Proxy( 
    ISearchAssistantOC * This,
     BSTR FindText);


void __stdcall ISearchAssistantOC_PutFindText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_get_Version_Proxy( 
    ISearchAssistantOC * This,
     int *pVersion);


void __stdcall ISearchAssistantOC_get_Version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC_EncodeString_Proxy( 
    ISearchAssistantOC * This,
     BSTR bstrValue,
     BSTR bstrCharSet,
     VARIANT_BOOL bUseUTF8,
     BSTR *pbstrResult);


void __stdcall ISearchAssistantOC_EncodeString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6426 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_ISearchAssistantOC2;


    
    struct __declspec(uuid("72423E8F-8011-11d2-BE79-00A0C9A83DA2")) __declspec(novtable)
    ISearchAssistantOC2 : public ISearchAssistantOC
    {
    public:
        virtual  HRESULT __stdcall get_ShowFindPrinter( 
             VARIANT_BOOL *pbShowFindPrinter) = 0;
        
    };
    




























































































































































































































































































#line 6733 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall ISearchAssistantOC2_get_ShowFindPrinter_Proxy( 
    ISearchAssistantOC2 * This,
     VARIANT_BOOL *pbShowFindPrinter);


void __stdcall ISearchAssistantOC2_get_ShowFindPrinter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6750 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID IID_ISearchAssistantOC3;


    
    struct __declspec(uuid("72423E8F-8011-11d2-BE79-00A0C9A83DA3")) __declspec(novtable)
    ISearchAssistantOC3 : public ISearchAssistantOC2
    {
    public:
        virtual  HRESULT __stdcall get_SearchCompanionAvailable( 
             VARIANT_BOOL *pbAvailable) = 0;
        
        virtual  HRESULT __stdcall put_UseSearchCompanion( 
             VARIANT_BOOL bUseSC) = 0;
        
        virtual  HRESULT __stdcall get_UseSearchCompanion( 
             VARIANT_BOOL *pbUseSC) = 0;
        
    };
    


















































































































































































































































































































#line 7085 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"



 HRESULT __stdcall ISearchAssistantOC3_get_SearchCompanionAvailable_Proxy( 
    ISearchAssistantOC3 * This,
     VARIANT_BOOL *pbAvailable);


void __stdcall ISearchAssistantOC3_get_SearchCompanionAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC3_put_UseSearchCompanion_Proxy( 
    ISearchAssistantOC3 * This,
     VARIANT_BOOL bUseSC);


void __stdcall ISearchAssistantOC3_put_UseSearchCompanion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchAssistantOC3_get_UseSearchCompanion_Proxy( 
    ISearchAssistantOC3 * This,
     VARIANT_BOOL *pbUseSC);


void __stdcall ISearchAssistantOC3_get_UseSearchCompanion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7126 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






 


extern "C" const IID DIID__SearchAssistantEvents;



    struct __declspec(uuid("1611FDDA-445B-11d2-85DE-00C04FA35C89")) __declspec(novtable)
    _SearchAssistantEvents : public IDispatch
    {
    };
    




















































































#line 7229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


#line 7232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


extern "C" const CLSID CLSID_SearchAssistantOC;



class __declspec(uuid("B45FF030-4447-11D2-85DE-00C04FA35C89"))
SearchAssistantOC;
#line 7241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"
#line 7242 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"






}
#line 7250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"

#line 7252 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\exdisp.h"


#line 210 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

 



typedef struct IFolderViewOC IFolderViewOC;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct DShellFolderViewEvents DShellFolderViewEvents;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class ShellFolderViewOC ShellFolderViewOC;


#line 65 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct DFConstraint DFConstraint;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct ISearchCommandExt ISearchCommandExt;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct FolderItem FolderItem;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct FolderItems FolderItems;
#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct FolderItemVerb FolderItemVerb;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct FolderItemVerbs FolderItemVerbs;
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct Folder Folder;
#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct Folder2 Folder2;
#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct Folder3 Folder3;
#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct FolderItem2 FolderItem2;
#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class ShellFolderItem ShellFolderItem;


#line 137 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct FolderItems2 FolderItems2;
#line 145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct FolderItems3 FolderItems3;
#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellLinkDual IShellLinkDual;
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellLinkDual2 IShellLinkDual2;
#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class ShellLinkObject ShellLinkObject;


#line 173 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellFolderViewDual IShellFolderViewDual;
#line 181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellFolderViewDual2 IShellFolderViewDual2;
#line 187 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class ShellFolderView ShellFolderView;


#line 197 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IMigrationWizardAuto IMigrationWizardAuto;
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct DMigrationWizardAutoEvents DMigrationWizardAutoEvents;
#line 211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class MigrationWizardAuto MigrationWizardAuto;


#line 221 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellDispatch IShellDispatch;
#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellDispatch2 IShellDispatch2;
#line 235 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellDispatch3 IShellDispatch3;
#line 241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IShellDispatch4 IShellDispatch4;
#line 247 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class Shell Shell;


#line 257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class ShellDispatchInproc ShellDispatchInproc;


#line 269 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 271 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class WebViewFolderContents WebViewFolderContents;


#line 281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct DSearchCommandEvents DSearchCommandEvents;
#line 289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class SearchCommand SearchCommand;


#line 299 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 301 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IFileSearchBand IFileSearchBand;
#line 307 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class FileSearchBand FileSearchBand;


#line 317 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 319 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IWebWizardHost IWebWizardHost;
#line 325 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct INewWDEvents INewWDEvents;
#line 331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IPassportClientServices IPassportClientServices;
#line 337 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






typedef class PassportClientServices PassportClientServices;


#line 347 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 349 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IAutoComplete IAutoComplete;
#line 355 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IAutoComplete2 IAutoComplete2;
#line 361 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IEnumACString IEnumACString;
#line 367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"




typedef struct IAsyncOperation IAsyncOperation;
#line 373 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






extern "C"{
#line 381 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 




extern RPC_IF_HANDLE __MIDL_itf_shldisp_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shldisp_0000_v0_0_s_ifspec;






 

typedef   __declspec(uuid("418f4e6a-b903-11d1-b0a6-00c04fc33aa5")) 
enum SearchCommandExecuteErrors
    {	SCEE_PATHNOTFOUND	= 1,
	SCEE_MAXFILESFOUND	= SCEE_PATHNOTFOUND + 1,
	SCEE_INDEXSEARCH	= SCEE_MAXFILESFOUND + 1,
	SCEE_CONSTRAINT	= SCEE_INDEXSEARCH + 1,
	SCEE_SCOPEMISMATCH	= SCEE_CONSTRAINT + 1,
	SCEE_CASESENINDEX	= SCEE_SCOPEMISMATCH + 1,
	SCEE_INDEXNOTCOMPLETE	= SCEE_CASESENINDEX + 1
    } 	SearchCommandExecuteErrors;





typedef   __declspec(uuid("35f1a0d0-3e9a-11d2-8499-005345000000")) 
enum OfflineFolderStatus
    {	OFS_INACTIVE	= -1,
	OFS_ONLINE	= OFS_INACTIVE + 1,
	OFS_OFFLINE	= OFS_ONLINE + 1,
	OFS_SERVERBACK	= OFS_OFFLINE + 1,
	OFS_DIRTYCACHE	= OFS_SERVERBACK + 1
    } 	OfflineFolderStatus;















































typedef   __declspec(uuid("742A99A0-C77E-11D0-A32C-00A0C91EEDBA")) 
enum ShellFolderViewOptions
    {	SFVVO_SHOWALLOBJECTS	= 0x1,
	SFVVO_SHOWEXTENSIONS	= 0x2,
	SFVVO_SHOWCOMPCOLOR	= 0x8,
	SFVVO_SHOWSYSFILES	= 0x20,
	SFVVO_WIN95CLASSIC	= 0x40,
	SFVVO_DOUBLECLICKINWEBVIEW	= 0x80,
	SFVVO_DESKTOPHTML	= 0x200
    } 	ShellFolderViewOptions;

typedef   __declspec(uuid("CA31EA20-48D0-11CF-8350-444553540000")) 
enum ShellSpecialFolderConstants
    {	ssfDESKTOP	= 0,
	ssfPROGRAMS	= 0x2,
	ssfCONTROLS	= 0x3,
	ssfPRINTERS	= 0x4,
	ssfPERSONAL	= 0x5,
	ssfFAVORITES	= 0x6,
	ssfSTARTUP	= 0x7,
	ssfRECENT	= 0x8,
	ssfSENDTO	= 0x9,
	ssfBITBUCKET	= 0xa,
	ssfSTARTMENU	= 0xb,
	ssfDESKTOPDIRECTORY	= 0x10,
	ssfDRIVES	= 0x11,
	ssfNETWORK	= 0x12,
	ssfNETHOOD	= 0x13,
	ssfFONTS	= 0x14,
	ssfTEMPLATES	= 0x15,
	ssfCOMMONSTARTMENU	= 0x16,
	ssfCOMMONPROGRAMS	= 0x17,
	ssfCOMMONSTARTUP	= 0x18,
	ssfCOMMONDESKTOPDIR	= 0x19,
	ssfAPPDATA	= 0x1a,
	ssfPRINTHOOD	= 0x1b,
	ssfLOCALAPPDATA	= 0x1c,
	ssfALTSTARTUP	= 0x1d,
	ssfCOMMONALTSTARTUP	= 0x1e,
	ssfCOMMONFAVORITES	= 0x1f,
	ssfINTERNETCACHE	= 0x20,
	ssfCOOKIES	= 0x21,
	ssfHISTORY	= 0x22,
	ssfCOMMONAPPDATA	= 0x23,
	ssfWINDOWS	= 0x24,
	ssfSYSTEM	= 0x25,
	ssfPROGRAMFILES	= 0x26,
	ssfMYPICTURES	= 0x27,
	ssfPROFILE	= 0x28,
	ssfSYSTEMx86	= 0x29,
	ssfPROGRAMFILESx86	= 0x30
    } 	ShellSpecialFolderConstants;


extern "C" const IID LIBID_Shell32;





 


extern "C" const IID IID_IFolderViewOC;


    
    struct __declspec(uuid("9BA05970-F6A8-11CF-A442-00A0C90A8F39")) __declspec(novtable)
    IFolderViewOC : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall SetFolderView( 
             IDispatch *pdisp) = 0;
        
    };
    




























































































#line 640 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IFolderViewOC_SetFolderView_Proxy( 
    IFolderViewOC * This,
     IDispatch *pdisp);


void __stdcall IFolderViewOC_SetFolderView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 657 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID DIID_DShellFolderViewEvents;



    struct __declspec(uuid("62112AA2-EBE4-11cf-A5FB-0020AFE7292D")) __declspec(novtable)
    DShellFolderViewEvents : public IDispatch
    {
    };
    




















































































#line 760 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


#line 763 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_ShellFolderViewOC;



class __declspec(uuid("9BA05971-F6A8-11CF-A442-00A0C90A8F39"))
ShellFolderViewOC;
#line 772 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID IID_DFConstraint;


    
    struct __declspec(uuid("4a3df050-23bd-11d2-939f-00a0c91eedba")) __declspec(novtable)
    DFConstraint : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Name( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall get_Value( 
             VARIANT *pv) = 0;
        
    };
    



































































































#line 896 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall DFConstraint_get_Name_Proxy( 
    DFConstraint * This,
     BSTR *pbs);


void __stdcall DFConstraint_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall DFConstraint_get_Value_Proxy( 
    DFConstraint * This,
     VARIANT *pv);


void __stdcall DFConstraint_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 925 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 

typedef  
enum __MIDL_ISearchCommandExt_0001
    {	SCE_SEARCHFORFILES	= 0,
	SCE_SEARCHFORCOMPUTERS	= 1
    } 	SEARCH_FOR_TYPE;


extern "C" const IID IID_ISearchCommandExt;


    
    struct __declspec(uuid("1D2EFD50-75CE-11d1-B75A-00A0C90564FE")) __declspec(novtable)
    ISearchCommandExt : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall ClearResults( void) = 0;
        
        virtual  HRESULT __stdcall NavigateToSearchResults( void) = 0;
        
        virtual  HRESULT __stdcall get_ProgressText( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall SaveSearch( void) = 0;
        
        virtual  HRESULT __stdcall GetErrorInfo( 
             BSTR *pbs,
             int *phr) = 0;
        
        virtual  HRESULT __stdcall SearchFor( 
             int iFor) = 0;
        
        virtual  HRESULT __stdcall GetScopeInfo( 
             BSTR bsScope,
             int *pdwScopeInfo) = 0;
        
        virtual  HRESULT __stdcall RestoreSavedSearch( 
             VARIANT *pvarFile) = 0;
        
        virtual  HRESULT __stdcall Execute( 
             VARIANT *RecordsAffected,
             VARIANT *Parameters,
             long Options) = 0;
        
        virtual  HRESULT __stdcall AddConstraint( 
             BSTR Name,
             VARIANT Value) = 0;
        
        virtual  HRESULT __stdcall GetNextConstraint( 
             VARIANT_BOOL fReset,
             DFConstraint **ppdfc) = 0;
        
    };
    





































































































































































#line 1152 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall ISearchCommandExt_ClearResults_Proxy( 
    ISearchCommandExt * This);


void __stdcall ISearchCommandExt_ClearResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_NavigateToSearchResults_Proxy( 
    ISearchCommandExt * This);


void __stdcall ISearchCommandExt_NavigateToSearchResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_get_ProgressText_Proxy( 
    ISearchCommandExt * This,
     BSTR *pbs);


void __stdcall ISearchCommandExt_get_ProgressText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_SaveSearch_Proxy( 
    ISearchCommandExt * This);


void __stdcall ISearchCommandExt_SaveSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_GetErrorInfo_Proxy( 
    ISearchCommandExt * This,
     BSTR *pbs,
     int *phr);


void __stdcall ISearchCommandExt_GetErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_SearchFor_Proxy( 
    ISearchCommandExt * This,
     int iFor);


void __stdcall ISearchCommandExt_SearchFor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_GetScopeInfo_Proxy( 
    ISearchCommandExt * This,
     BSTR bsScope,
     int *pdwScopeInfo);


void __stdcall ISearchCommandExt_GetScopeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_RestoreSavedSearch_Proxy( 
    ISearchCommandExt * This,
     VARIANT *pvarFile);


void __stdcall ISearchCommandExt_RestoreSavedSearch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_Execute_Proxy( 
    ISearchCommandExt * This,
     VARIANT *RecordsAffected,
     VARIANT *Parameters,
     long Options);


void __stdcall ISearchCommandExt_Execute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_AddConstraint_Proxy( 
    ISearchCommandExt * This,
     BSTR Name,
     VARIANT Value);


void __stdcall ISearchCommandExt_AddConstraint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISearchCommandExt_GetNextConstraint_Proxy( 
    ISearchCommandExt * This,
     VARIANT_BOOL fReset,
     DFConstraint **ppdfc);


void __stdcall ISearchCommandExt_GetNextConstraint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1292 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 

typedef  FolderItem *LPFOLDERITEM;


extern "C" const IID IID_FolderItem;


    
    struct __declspec(uuid("FAC32C80-CBE4-11CE-8350-444553540000")) __declspec(novtable)
    FolderItem : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Name( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall put_Name( 
             BSTR bs) = 0;
        
        virtual  HRESULT __stdcall get_Path( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall get_GetLink( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_GetFolder( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_IsLink( 
             VARIANT_BOOL *pb) = 0;
        
        virtual  HRESULT __stdcall get_IsFolder( 
             VARIANT_BOOL *pb) = 0;
        
        virtual  HRESULT __stdcall get_IsFileSystem( 
             VARIANT_BOOL *pb) = 0;
        
        virtual  HRESULT __stdcall get_IsBrowsable( 
             VARIANT_BOOL *pb) = 0;
        
        virtual  HRESULT __stdcall get_ModifyDate( 
             DATE *pdt) = 0;
        
        virtual  HRESULT __stdcall put_ModifyDate( 
             DATE dt) = 0;
        
        virtual  HRESULT __stdcall get_Size( 
             LONG *pul) = 0;
        
        virtual  HRESULT __stdcall get_Type( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall Verbs( 
             FolderItemVerbs **ppfic) = 0;
        
        virtual  HRESULT __stdcall InvokeVerb( 
             VARIANT vVerb) = 0;
        
    };
    












































































































































































































#line 1569 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall FolderItem_get_Application_Proxy( 
    FolderItem * This,
     IDispatch **ppid);


void __stdcall FolderItem_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_Parent_Proxy( 
    FolderItem * This,
     IDispatch **ppid);


void __stdcall FolderItem_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_Name_Proxy( 
    FolderItem * This,
     BSTR *pbs);


void __stdcall FolderItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_put_Name_Proxy( 
    FolderItem * This,
     BSTR bs);


void __stdcall FolderItem_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_Path_Proxy( 
    FolderItem * This,
     BSTR *pbs);


void __stdcall FolderItem_get_Path_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_GetLink_Proxy( 
    FolderItem * This,
     IDispatch **ppid);


void __stdcall FolderItem_get_GetLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_GetFolder_Proxy( 
    FolderItem * This,
     IDispatch **ppid);


void __stdcall FolderItem_get_GetFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_IsLink_Proxy( 
    FolderItem * This,
     VARIANT_BOOL *pb);


void __stdcall FolderItem_get_IsLink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_IsFolder_Proxy( 
    FolderItem * This,
     VARIANT_BOOL *pb);


void __stdcall FolderItem_get_IsFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_IsFileSystem_Proxy( 
    FolderItem * This,
     VARIANT_BOOL *pb);


void __stdcall FolderItem_get_IsFileSystem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_IsBrowsable_Proxy( 
    FolderItem * This,
     VARIANT_BOOL *pb);


void __stdcall FolderItem_get_IsBrowsable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_ModifyDate_Proxy( 
    FolderItem * This,
     DATE *pdt);


void __stdcall FolderItem_get_ModifyDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_put_ModifyDate_Proxy( 
    FolderItem * This,
     DATE dt);


void __stdcall FolderItem_put_ModifyDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_Size_Proxy( 
    FolderItem * This,
     LONG *pul);


void __stdcall FolderItem_get_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_get_Type_Proxy( 
    FolderItem * This,
     BSTR *pbs);


void __stdcall FolderItem_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_Verbs_Proxy( 
    FolderItem * This,
     FolderItemVerbs **ppfic);


void __stdcall FolderItem_Verbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem_InvokeVerb_Proxy( 
    FolderItem * This,
     VARIANT vVerb);


void __stdcall FolderItem_InvokeVerb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1778 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_FolderItems;


    
    struct __declspec(uuid("744129E0-CBE5-11CE-8350-444553540000")) __declspec(novtable)
    FolderItems : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Count( 
             long *plCount) = 0;
        
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall Item( 
             VARIANT index,
             FolderItem **ppid) = 0;
        
        virtual  HRESULT __stdcall _NewEnum( 
             IUnknown **ppunk) = 0;
        
    };
    

























































































































#line 1935 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall FolderItems_get_Count_Proxy( 
    FolderItems * This,
     long *plCount);


void __stdcall FolderItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItems_get_Application_Proxy( 
    FolderItems * This,
     IDispatch **ppid);


void __stdcall FolderItems_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItems_get_Parent_Proxy( 
    FolderItems * This,
     IDispatch **ppid);


void __stdcall FolderItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItems_Item_Proxy( 
    FolderItems * This,
     VARIANT index,
     FolderItem **ppid);


void __stdcall FolderItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItems__NewEnum_Proxy( 
    FolderItems * This,
     IUnknown **ppunk);


void __stdcall FolderItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2001 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_FolderItemVerb;


    
    struct __declspec(uuid("08EC3E00-50B0-11CF-960C-0080C7F4EE85")) __declspec(novtable)
    FolderItemVerb : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Name( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall DoIt( void) = 0;
        
    };
    
















































































































#line 2144 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall FolderItemVerb_get_Application_Proxy( 
    FolderItemVerb * This,
     IDispatch **ppid);


void __stdcall FolderItemVerb_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItemVerb_get_Parent_Proxy( 
    FolderItemVerb * This,
     IDispatch **ppid);


void __stdcall FolderItemVerb_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItemVerb_get_Name_Proxy( 
    FolderItemVerb * This,
     BSTR *pbs);


void __stdcall FolderItemVerb_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItemVerb_DoIt_Proxy( 
    FolderItemVerb * This);


void __stdcall FolderItemVerb_DoIt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2196 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_FolderItemVerbs;


    
    struct __declspec(uuid("1F8352C0-50B0-11CF-960C-0080C7F4EE85")) __declspec(novtable)
    FolderItemVerbs : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Count( 
             long *plCount) = 0;
        
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall Item( 
             VARIANT index,
             FolderItemVerb **ppid) = 0;
        
        virtual  HRESULT __stdcall _NewEnum( 
             IUnknown **ppunk) = 0;
        
    };
    

























































































































#line 2353 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall FolderItemVerbs_get_Count_Proxy( 
    FolderItemVerbs * This,
     long *plCount);


void __stdcall FolderItemVerbs_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItemVerbs_get_Application_Proxy( 
    FolderItemVerbs * This,
     IDispatch **ppid);


void __stdcall FolderItemVerbs_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItemVerbs_get_Parent_Proxy( 
    FolderItemVerbs * This,
     IDispatch **ppid);


void __stdcall FolderItemVerbs_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItemVerbs_Item_Proxy( 
    FolderItemVerbs * This,
     VARIANT index,
     FolderItemVerb **ppid);


void __stdcall FolderItemVerbs_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItemVerbs__NewEnum_Proxy( 
    FolderItemVerbs * This,
     IUnknown **ppunk);


void __stdcall FolderItemVerbs__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2419 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_Folder;


    
    struct __declspec(uuid("BBCBDE60-C3FF-11CE-8350-444553540000")) __declspec(novtable)
    Folder : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Title( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_ParentFolder( 
             Folder **ppsf) = 0;
        
        virtual  HRESULT __stdcall Items( 
             FolderItems **ppid) = 0;
        
        virtual  HRESULT __stdcall ParseName( 
             BSTR bName,
             FolderItem **ppid) = 0;
        
        virtual  HRESULT __stdcall NewFolder( 
             BSTR bName,
             VARIANT vOptions) = 0;
        
        virtual  HRESULT __stdcall MoveHere( 
             VARIANT vItem,
             VARIANT vOptions) = 0;
        
        virtual  HRESULT __stdcall CopyHere( 
             VARIANT vItem,
             VARIANT vOptions) = 0;
        
        virtual  HRESULT __stdcall GetDetailsOf( 
             VARIANT vItem,
             int iColumn,
             BSTR *pbs) = 0;
        
    };
    

































































































































































#line 2636 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall Folder_get_Title_Proxy( 
    Folder * This,
     BSTR *pbs);


void __stdcall Folder_get_Title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_get_Application_Proxy( 
    Folder * This,
     IDispatch **ppid);


void __stdcall Folder_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_get_Parent_Proxy( 
    Folder * This,
     IDispatch **ppid);


void __stdcall Folder_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_get_ParentFolder_Proxy( 
    Folder * This,
     Folder **ppsf);


void __stdcall Folder_get_ParentFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_Items_Proxy( 
    Folder * This,
     FolderItems **ppid);


void __stdcall Folder_Items_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_ParseName_Proxy( 
    Folder * This,
     BSTR bName,
     FolderItem **ppid);


void __stdcall Folder_ParseName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_NewFolder_Proxy( 
    Folder * This,
     BSTR bName,
     VARIANT vOptions);


void __stdcall Folder_NewFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_MoveHere_Proxy( 
    Folder * This,
     VARIANT vItem,
     VARIANT vOptions);


void __stdcall Folder_MoveHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_CopyHere_Proxy( 
    Folder * This,
     VARIANT vItem,
     VARIANT vOptions);


void __stdcall Folder_CopyHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder_GetDetailsOf_Proxy( 
    Folder * This,
     VARIANT vItem,
     int iColumn,
     BSTR *pbs);


void __stdcall Folder_GetDetailsOf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2767 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_Folder2;


    
    struct __declspec(uuid("f0d2d8ef-3890-11d2-bf8b-00c04fb93661")) __declspec(novtable)
    Folder2 : public Folder
    {
    public:
        virtual  HRESULT __stdcall get_Self( 
             FolderItem **ppfi) = 0;
        
        virtual  HRESULT __stdcall get_OfflineStatus( 
             LONG *pul) = 0;
        
        virtual  HRESULT __stdcall Synchronize( void) = 0;
        
        virtual  HRESULT __stdcall get_HaveToShowWebViewBarricade( 
             VARIANT_BOOL *pbHaveToShowWebViewBarricade) = 0;
        
        virtual  HRESULT __stdcall DismissedWebViewBarricade( void) = 0;
        
    };
    



































































































































































































#line 2995 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall Folder2_get_Self_Proxy( 
    Folder2 * This,
     FolderItem **ppfi);


void __stdcall Folder2_get_Self_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder2_get_OfflineStatus_Proxy( 
    Folder2 * This,
     LONG *pul);


void __stdcall Folder2_get_OfflineStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder2_Synchronize_Proxy( 
    Folder2 * This);


void __stdcall Folder2_Synchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder2_get_HaveToShowWebViewBarricade_Proxy( 
    Folder2 * This,
     VARIANT_BOOL *pbHaveToShowWebViewBarricade);


void __stdcall Folder2_get_HaveToShowWebViewBarricade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder2_DismissedWebViewBarricade_Proxy( 
    Folder2 * This);


void __stdcall Folder2_DismissedWebViewBarricade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3058 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_Folder3;


    
    struct __declspec(uuid("A7AE5F64-C4D7-4d7f-9307-4D24EE54B841")) __declspec(novtable)
    Folder3 : public Folder2
    {
    public:
        virtual  HRESULT __stdcall get_ShowWebViewBarricade( 
             VARIANT_BOOL *pbShowWebViewBarricade) = 0;
        
        virtual  HRESULT __stdcall put_ShowWebViewBarricade( 
             VARIANT_BOOL bShowWebViewBarricade) = 0;
        
    };
    


















































































































































































































#line 3294 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall Folder3_get_ShowWebViewBarricade_Proxy( 
    Folder3 * This,
     VARIANT_BOOL *pbShowWebViewBarricade);


void __stdcall Folder3_get_ShowWebViewBarricade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall Folder3_put_ShowWebViewBarricade_Proxy( 
    Folder3 * This,
     VARIANT_BOOL bShowWebViewBarricade);


void __stdcall Folder3_put_ShowWebViewBarricade_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3323 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_FolderItem2;


    
    struct __declspec(uuid("edc817aa-92b8-11d1-b075-00c04fc33aa5")) __declspec(novtable)
    FolderItem2 : public FolderItem
    {
    public:
        virtual  HRESULT __stdcall InvokeVerbEx( 
             VARIANT vVerb,
             VARIANT vArgs) = 0;
        
        virtual  HRESULT __stdcall ExtendedProperty( 
             BSTR bstrPropName,
             VARIANT *pvRet) = 0;
        
    };
    





























































































































































































































#line 3572 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall FolderItem2_InvokeVerbEx_Proxy( 
    FolderItem2 * This,
     VARIANT vVerb,
     VARIANT vArgs);


void __stdcall FolderItem2_InvokeVerbEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItem2_ExtendedProperty_Proxy( 
    FolderItem2 * This,
     BSTR bstrPropName,
     VARIANT *pvRet);


void __stdcall FolderItem2_ExtendedProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3603 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_ShellFolderItem;



class __declspec(uuid("2fe352ea-fd1f-11d2-b1f4-00c04f8eeb3e"))
ShellFolderItem;
#line 3612 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID IID_FolderItems2;


    
    struct __declspec(uuid("C94F0AD0-F363-11d2-A327-00C04F8EEC7F")) __declspec(novtable)
    FolderItems2 : public FolderItems
    {
    public:
        virtual  HRESULT __stdcall InvokeVerbEx( 
             VARIANT vVerb,
             VARIANT vArgs) = 0;
        
    };
    


































































































































#line 3765 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall FolderItems2_InvokeVerbEx_Proxy( 
    FolderItems2 * This,
     VARIANT vVerb,
     VARIANT vArgs);


void __stdcall FolderItems2_InvokeVerbEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3783 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_FolderItems3;


    
    struct __declspec(uuid("eaa7c309-bbec-49d5-821d-64d966cb667f")) __declspec(novtable)
    FolderItems3 : public FolderItems2
    {
    public:
        virtual  HRESULT __stdcall Filter( 
             long grfFlags,
             BSTR bstrFileSpec) = 0;
        
        virtual  HRESULT __stdcall get_Verbs( 
             FolderItemVerbs **ppfic) = 0;
        
    };
    


















































































































































#line 3956 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall FolderItems3_Filter_Proxy( 
    FolderItems3 * This,
     long grfFlags,
     BSTR bstrFileSpec);


void __stdcall FolderItems3_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall FolderItems3_get_Verbs_Proxy( 
    FolderItems3 * This,
     FolderItemVerbs **ppfic);


void __stdcall FolderItems3_get_Verbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3986 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_IShellLinkDual;


    
    struct __declspec(uuid("88A05C00-F000-11CE-8350-444553540000")) __declspec(novtable)
    IShellLinkDual : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Path( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall put_Path( 
             BSTR bs) = 0;
        
        virtual  HRESULT __stdcall get_Description( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall put_Description( 
             BSTR bs) = 0;
        
        virtual  HRESULT __stdcall get_WorkingDirectory( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall put_WorkingDirectory( 
             BSTR bs) = 0;
        
        virtual  HRESULT __stdcall get_Arguments( 
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall put_Arguments( 
             BSTR bs) = 0;
        
        virtual  HRESULT __stdcall get_Hotkey( 
             int *piHK) = 0;
        
        virtual  HRESULT __stdcall put_Hotkey( 
             int iHK) = 0;
        
        virtual  HRESULT __stdcall get_ShowCommand( 
             int *piShowCommand) = 0;
        
        virtual  HRESULT __stdcall put_ShowCommand( 
             int iShowCommand) = 0;
        
        virtual  HRESULT __stdcall Resolve( 
             int fFlags) = 0;
        
        virtual  HRESULT __stdcall GetIconLocation( 
             BSTR *pbs,
             int *piIcon) = 0;
        
        virtual  HRESULT __stdcall SetIconLocation( 
             BSTR bs,
             int iIcon) = 0;
        
        virtual  HRESULT __stdcall Save( 
             VARIANT vWhere) = 0;
        
    };
    







































































































































































































#line 4255 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellLinkDual_get_Path_Proxy( 
    IShellLinkDual * This,
     BSTR *pbs);


void __stdcall IShellLinkDual_get_Path_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_put_Path_Proxy( 
    IShellLinkDual * This,
     BSTR bs);


void __stdcall IShellLinkDual_put_Path_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_get_Description_Proxy( 
    IShellLinkDual * This,
     BSTR *pbs);


void __stdcall IShellLinkDual_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_put_Description_Proxy( 
    IShellLinkDual * This,
     BSTR bs);


void __stdcall IShellLinkDual_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_get_WorkingDirectory_Proxy( 
    IShellLinkDual * This,
     BSTR *pbs);


void __stdcall IShellLinkDual_get_WorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_put_WorkingDirectory_Proxy( 
    IShellLinkDual * This,
     BSTR bs);


void __stdcall IShellLinkDual_put_WorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_get_Arguments_Proxy( 
    IShellLinkDual * This,
     BSTR *pbs);


void __stdcall IShellLinkDual_get_Arguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_put_Arguments_Proxy( 
    IShellLinkDual * This,
     BSTR bs);


void __stdcall IShellLinkDual_put_Arguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_get_Hotkey_Proxy( 
    IShellLinkDual * This,
     int *piHK);


void __stdcall IShellLinkDual_get_Hotkey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_put_Hotkey_Proxy( 
    IShellLinkDual * This,
     int iHK);


void __stdcall IShellLinkDual_put_Hotkey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_get_ShowCommand_Proxy( 
    IShellLinkDual * This,
     int *piShowCommand);


void __stdcall IShellLinkDual_get_ShowCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_put_ShowCommand_Proxy( 
    IShellLinkDual * This,
     int iShowCommand);


void __stdcall IShellLinkDual_put_ShowCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_Resolve_Proxy( 
    IShellLinkDual * This,
     int fFlags);


void __stdcall IShellLinkDual_Resolve_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_GetIconLocation_Proxy( 
    IShellLinkDual * This,
     BSTR *pbs,
     int *piIcon);


void __stdcall IShellLinkDual_GetIconLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_SetIconLocation_Proxy( 
    IShellLinkDual * This,
     BSTR bs,
     int iIcon);


void __stdcall IShellLinkDual_SetIconLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellLinkDual_Save_Proxy( 
    IShellLinkDual * This,
     VARIANT vWhere);


void __stdcall IShellLinkDual_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4454 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_IShellLinkDual2;


    
    struct __declspec(uuid("317EE249-F12E-11d2-B1E4-00C04F8EEB3E")) __declspec(novtable)
    IShellLinkDual2 : public IShellLinkDual
    {
    public:
        virtual  HRESULT __stdcall get_Target( 
             FolderItem **ppfi) = 0;
        
    };
    















































































































































































































#line 4684 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellLinkDual2_get_Target_Proxy( 
    IShellLinkDual2 * This,
     FolderItem **ppfi);


void __stdcall IShellLinkDual2_get_Target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4701 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_ShellLinkObject;



class __declspec(uuid("11219420-1768-11d1-95BE-00609797EA4F"))
ShellLinkObject;
#line 4710 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID IID_IShellFolderViewDual;


    
    struct __declspec(uuid("E7A1AF80-4D96-11CF-960C-0080C7F4EE85")) __declspec(novtable)
    IShellFolderViewDual : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Folder( 
             Folder **ppid) = 0;
        
        virtual  HRESULT __stdcall SelectedItems( 
             FolderItems **ppid) = 0;
        
        virtual  HRESULT __stdcall get_FocusedItem( 
             FolderItem **ppid) = 0;
        
        virtual  HRESULT __stdcall SelectItem( 
             VARIANT *pvfi,
             int dwFlags) = 0;
        
        virtual  HRESULT __stdcall PopupItemMenu( 
             FolderItem *pfi,
             VARIANT vx,
             VARIANT vy,
             BSTR *pbs) = 0;
        
        virtual  HRESULT __stdcall get_Script( 
             IDispatch **ppDisp) = 0;
        
        virtual  HRESULT __stdcall get_ViewOptions( 
             long *plViewOptions) = 0;
        
    };
    
























































































































































#line 4912 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellFolderViewDual_get_Application_Proxy( 
    IShellFolderViewDual * This,
     IDispatch **ppid);


void __stdcall IShellFolderViewDual_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_get_Parent_Proxy( 
    IShellFolderViewDual * This,
     IDispatch **ppid);


void __stdcall IShellFolderViewDual_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_get_Folder_Proxy( 
    IShellFolderViewDual * This,
     Folder **ppid);


void __stdcall IShellFolderViewDual_get_Folder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_SelectedItems_Proxy( 
    IShellFolderViewDual * This,
     FolderItems **ppid);


void __stdcall IShellFolderViewDual_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_get_FocusedItem_Proxy( 
    IShellFolderViewDual * This,
     FolderItem **ppid);


void __stdcall IShellFolderViewDual_get_FocusedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_SelectItem_Proxy( 
    IShellFolderViewDual * This,
     VARIANT *pvfi,
     int dwFlags);


void __stdcall IShellFolderViewDual_SelectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_PopupItemMenu_Proxy( 
    IShellFolderViewDual * This,
     FolderItem *pfi,
     VARIANT vx,
     VARIANT vy,
     BSTR *pbs);


void __stdcall IShellFolderViewDual_PopupItemMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_get_Script_Proxy( 
    IShellFolderViewDual * This,
     IDispatch **ppDisp);


void __stdcall IShellFolderViewDual_get_Script_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual_get_ViewOptions_Proxy( 
    IShellFolderViewDual * This,
     long *plViewOptions);


void __stdcall IShellFolderViewDual_get_ViewOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5029 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_IShellFolderViewDual2;


    
    struct __declspec(uuid("31C147b6-0ADE-4A3C-B514-DDF932EF6D17")) __declspec(novtable)
    IShellFolderViewDual2 : public IShellFolderViewDual
    {
    public:
        virtual  HRESULT __stdcall get_CurrentViewMode( 
             UINT *pViewMode) = 0;
        
        virtual  HRESULT __stdcall put_CurrentViewMode( 
             UINT ViewMode) = 0;
        
        virtual  HRESULT __stdcall SelectItemRelative( 
             int iRelative) = 0;
        
    };
    














































































































































































#line 5232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellFolderViewDual2_get_CurrentViewMode_Proxy( 
    IShellFolderViewDual2 * This,
     UINT *pViewMode);


void __stdcall IShellFolderViewDual2_get_CurrentViewMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual2_put_CurrentViewMode_Proxy( 
    IShellFolderViewDual2 * This,
     UINT ViewMode);


void __stdcall IShellFolderViewDual2_put_CurrentViewMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellFolderViewDual2_SelectItemRelative_Proxy( 
    IShellFolderViewDual2 * This,
     int iRelative);


void __stdcall IShellFolderViewDual2_SelectItemRelative_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5273 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_ShellFolderView;



class __declspec(uuid("62112AA1-EBE4-11cf-A5FB-0020AFE7292D"))
ShellFolderView;
#line 5282 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID IID_IMigrationWizardAuto;


    
    struct __declspec(uuid("CE20DAB9-B353-469b-8B4D-6DBB3A7BA016")) __declspec(novtable)
    IMigrationWizardAuto : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall CreateToolDisk( 
             BSTR pszDrivePath,
             BSTR pszFilesPath,
             BSTR pszManifestPath) = 0;
        
        virtual  HRESULT __stdcall ApplySettings( 
             BSTR pszStore) = 0;
        
        virtual  HRESULT __stdcall Cancel( void) = 0;
        
    };
    











































































































#line 5418 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IMigrationWizardAuto_CreateToolDisk_Proxy( 
    IMigrationWizardAuto * This,
     BSTR pszDrivePath,
     BSTR pszFilesPath,
     BSTR pszManifestPath);


void __stdcall IMigrationWizardAuto_CreateToolDisk_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMigrationWizardAuto_ApplySettings_Proxy( 
    IMigrationWizardAuto * This,
     BSTR pszStore);


void __stdcall IMigrationWizardAuto_ApplySettings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMigrationWizardAuto_Cancel_Proxy( 
    IMigrationWizardAuto * This);


void __stdcall IMigrationWizardAuto_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5460 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID DIID_DMigrationWizardAutoEvents;



    struct __declspec(uuid("D2AC137D-A6D8-43b6-9879-EA34B67E1880")) __declspec(novtable)
    DMigrationWizardAutoEvents : public IDispatch
    {
    };
    




















































































#line 5563 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


#line 5566 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_MigrationWizardAuto;



class __declspec(uuid("67331D85-BE17-42f6-8D3F-47B8E8B26637"))
MigrationWizardAuto;
#line 5575 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID IID_IShellDispatch;


    
    struct __declspec(uuid("D8F015C0-C278-11CE-A49E-444553540000")) __declspec(novtable)
    IShellDispatch : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_Application( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall get_Parent( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall NameSpace( 
             VARIANT vDir,
             Folder **ppsdf) = 0;
        
        virtual  HRESULT __stdcall BrowseForFolder( 
             long Hwnd,
             BSTR Title,
             long Options,
             VARIANT RootFolder,
             Folder **ppsdf) = 0;
        
        virtual  HRESULT __stdcall Windows( 
             IDispatch **ppid) = 0;
        
        virtual  HRESULT __stdcall Open( 
             VARIANT vDir) = 0;
        
        virtual  HRESULT __stdcall Explore( 
             VARIANT vDir) = 0;
        
        virtual  HRESULT __stdcall MinimizeAll( void) = 0;
        
        virtual  HRESULT __stdcall UndoMinimizeALL( void) = 0;
        
        virtual  HRESULT __stdcall FileRun( void) = 0;
        
        virtual  HRESULT __stdcall CascadeWindows( void) = 0;
        
        virtual  HRESULT __stdcall TileVertically( void) = 0;
        
        virtual  HRESULT __stdcall TileHorizontally( void) = 0;
        
        virtual  HRESULT __stdcall ShutdownWindows( void) = 0;
        
        virtual  HRESULT __stdcall Suspend( void) = 0;
        
        virtual  HRESULT __stdcall EjectPC( void) = 0;
        
        virtual  HRESULT __stdcall SetTime( void) = 0;
        
        virtual  HRESULT __stdcall TrayProperties( void) = 0;
        
        virtual  HRESULT __stdcall Help( void) = 0;
        
        virtual  HRESULT __stdcall FindFiles( void) = 0;
        
        virtual  HRESULT __stdcall FindComputer( void) = 0;
        
        virtual  HRESULT __stdcall RefreshMenu( void) = 0;
        
        virtual  HRESULT __stdcall ControlPanelItem( 
             BSTR szDir) = 0;
        
    };
    












































































































































































































































#line 5889 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellDispatch_get_Application_Proxy( 
    IShellDispatch * This,
     IDispatch **ppid);


void __stdcall IShellDispatch_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_get_Parent_Proxy( 
    IShellDispatch * This,
     IDispatch **ppid);


void __stdcall IShellDispatch_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_NameSpace_Proxy( 
    IShellDispatch * This,
     VARIANT vDir,
     Folder **ppsdf);


void __stdcall IShellDispatch_NameSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_BrowseForFolder_Proxy( 
    IShellDispatch * This,
     long Hwnd,
     BSTR Title,
     long Options,
     VARIANT RootFolder,
     Folder **ppsdf);


void __stdcall IShellDispatch_BrowseForFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_Windows_Proxy( 
    IShellDispatch * This,
     IDispatch **ppid);


void __stdcall IShellDispatch_Windows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_Open_Proxy( 
    IShellDispatch * This,
     VARIANT vDir);


void __stdcall IShellDispatch_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_Explore_Proxy( 
    IShellDispatch * This,
     VARIANT vDir);


void __stdcall IShellDispatch_Explore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_MinimizeAll_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_MinimizeAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_UndoMinimizeALL_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_UndoMinimizeALL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_FileRun_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_FileRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_CascadeWindows_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_CascadeWindows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_TileVertically_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_TileVertically_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_TileHorizontally_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_TileHorizontally_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_ShutdownWindows_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_ShutdownWindows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_Suspend_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_EjectPC_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_EjectPC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_SetTime_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_SetTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_TrayProperties_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_TrayProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_Help_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_FindFiles_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_FindFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_FindComputer_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_FindComputer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_RefreshMenu_Proxy( 
    IShellDispatch * This);


void __stdcall IShellDispatch_RefreshMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch_ControlPanelItem_Proxy( 
    IShellDispatch * This,
     BSTR szDir);


void __stdcall IShellDispatch_ControlPanelItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6160 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_IShellDispatch2;


    
    struct __declspec(uuid("A4C6892C-3BA9-11d2-9DEA-00C04FB16162")) __declspec(novtable)
    IShellDispatch2 : public IShellDispatch
    {
    public:
        virtual  HRESULT __stdcall IsRestricted( 
             BSTR Group,
             BSTR Restriction,
             long *plRestrictValue) = 0;
        
        virtual  HRESULT __stdcall ShellExecuteA( 
             BSTR File,
             VARIANT vArgs,
             VARIANT vDir,
             VARIANT vOperation,
             VARIANT vShow) = 0;
        
        virtual  HRESULT __stdcall FindPrinter( 
             BSTR name,
             BSTR location,
             BSTR model) = 0;
        
        virtual  HRESULT __stdcall GetSystemInformation( 
             BSTR name,
             VARIANT *pv) = 0;
        
        virtual  HRESULT __stdcall ServiceStart( 
             BSTR ServiceName,
             VARIANT Persistent,
             VARIANT *pSuccess) = 0;
        
        virtual  HRESULT __stdcall ServiceStop( 
             BSTR ServiceName,
             VARIANT Persistent,
             VARIANT *pSuccess) = 0;
        
        virtual  HRESULT __stdcall IsServiceRunning( 
             BSTR ServiceName,
             VARIANT *pRunning) = 0;
        
        virtual  HRESULT __stdcall CanStartStopService( 
             BSTR ServiceName,
             VARIANT *pCanStartStop) = 0;
        
        virtual  HRESULT __stdcall ShowBrowserBar( 
             BSTR bstrClsid,
             VARIANT bShow,
             VARIANT *pSuccess) = 0;
        
    };
    





























































































































































































































































































































#line 6541 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellDispatch2_IsRestricted_Proxy( 
    IShellDispatch2 * This,
     BSTR Group,
     BSTR Restriction,
     long *plRestrictValue);


void __stdcall IShellDispatch2_IsRestricted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_ShellExecute_Proxy( 
    IShellDispatch2 * This,
     BSTR File,
     VARIANT vArgs,
     VARIANT vDir,
     VARIANT vOperation,
     VARIANT vShow);


void __stdcall IShellDispatch2_ShellExecute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_FindPrinter_Proxy( 
    IShellDispatch2 * This,
     BSTR name,
     BSTR location,
     BSTR model);


void __stdcall IShellDispatch2_FindPrinter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_GetSystemInformation_Proxy( 
    IShellDispatch2 * This,
     BSTR name,
     VARIANT *pv);


void __stdcall IShellDispatch2_GetSystemInformation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_ServiceStart_Proxy( 
    IShellDispatch2 * This,
     BSTR ServiceName,
     VARIANT Persistent,
     VARIANT *pSuccess);


void __stdcall IShellDispatch2_ServiceStart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_ServiceStop_Proxy( 
    IShellDispatch2 * This,
     BSTR ServiceName,
     VARIANT Persistent,
     VARIANT *pSuccess);


void __stdcall IShellDispatch2_ServiceStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_IsServiceRunning_Proxy( 
    IShellDispatch2 * This,
     BSTR ServiceName,
     VARIANT *pRunning);


void __stdcall IShellDispatch2_IsServiceRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_CanStartStopService_Proxy( 
    IShellDispatch2 * This,
     BSTR ServiceName,
     VARIANT *pCanStartStop);


void __stdcall IShellDispatch2_CanStartStopService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch2_ShowBrowserBar_Proxy( 
    IShellDispatch2 * This,
     BSTR bstrClsid,
     VARIANT bShow,
     VARIANT *pSuccess);


void __stdcall IShellDispatch2_ShowBrowserBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6671 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_IShellDispatch3;


    
    struct __declspec(uuid("177160ca-bb5a-411c-841d-bd38facdeaa0")) __declspec(novtable)
    IShellDispatch3 : public IShellDispatch2
    {
    public:
        virtual  HRESULT __stdcall AddToRecent( 
             VARIANT varFile,
             BSTR bstrCategory) = 0;
        
    };
    






































































































































































































































































































































#line 7021 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellDispatch3_AddToRecent_Proxy( 
    IShellDispatch3 * This,
     VARIANT varFile,
     BSTR bstrCategory);


void __stdcall IShellDispatch3_AddToRecent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7039 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_IShellDispatch4;


    
    struct __declspec(uuid("efd84b2d-4bcf-4298-be25-eb542a59fbda")) __declspec(novtable)
    IShellDispatch4 : public IShellDispatch3
    {
    public:
        virtual  HRESULT __stdcall WindowsSecurity( void) = 0;
        
        virtual  HRESULT __stdcall ToggleDesktop( void) = 0;
        
        virtual  HRESULT __stdcall ExplorerPolicy( 
             BSTR bstrPolicyName,
             VARIANT *pValue) = 0;
        
        virtual  HRESULT __stdcall GetSetting( 
             long lSetting,
             VARIANT_BOOL *pResult) = 0;
        
    };
    



































































































































































































































































































































































#line 7426 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IShellDispatch4_WindowsSecurity_Proxy( 
    IShellDispatch4 * This);


void __stdcall IShellDispatch4_WindowsSecurity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch4_ToggleDesktop_Proxy( 
    IShellDispatch4 * This);


void __stdcall IShellDispatch4_ToggleDesktop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch4_ExplorerPolicy_Proxy( 
    IShellDispatch4 * This,
     BSTR bstrPolicyName,
     VARIANT *pValue);


void __stdcall IShellDispatch4_ExplorerPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellDispatch4_GetSetting_Proxy( 
    IShellDispatch4 * This,
     long lSetting,
     VARIANT_BOOL *pResult);


void __stdcall IShellDispatch4_GetSetting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7479 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_Shell;



class __declspec(uuid("13709620-C279-11CE-A49E-444553540000"))
Shell;
#line 7488 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

extern "C" const CLSID CLSID_ShellDispatchInproc;



class __declspec(uuid("0A89A860-D7B1-11CE-8350-444553540000"))
ShellDispatchInproc;
#line 7496 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

extern "C" const CLSID CLSID_WebViewFolderContents;



class __declspec(uuid("1820FED0-473E-11D0-A96C-00C04FD705A2"))
WebViewFolderContents;
#line 7504 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID DIID_DSearchCommandEvents;



    struct __declspec(uuid("60890160-69f0-11d1-b758-00a0c90564fe")) __declspec(novtable)
    DSearchCommandEvents : public IDispatch
    {
    };
    




















































































#line 7606 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


#line 7609 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_SearchCommand;



class __declspec(uuid("B005E690-678D-11d1-B758-00A0C90564FE"))
SearchCommand;
#line 7618 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID IID_IFileSearchBand;


    
    struct __declspec(uuid("2D91EEA1-9932-11d2-BE86-00A0C9A83DA1")) __declspec(novtable)
    IFileSearchBand : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall SetFocus( void) = 0;
        
        virtual  HRESULT __stdcall SetSearchParameters( 
             BSTR *pbstrSearchID,
             VARIANT_BOOL bNavToResults,
             VARIANT *pvarScope,
             VARIANT *pvarQueryFile) = 0;
        
        virtual  HRESULT __stdcall get_SearchID( 
             BSTR *pbstrSearchID) = 0;
        
        virtual  HRESULT __stdcall get_Scope( 
             VARIANT *pvarScope) = 0;
        
        virtual  HRESULT __stdcall get_QueryFile( 
             VARIANT *pvarFile) = 0;
        
    };
    


























































































































#line 7776 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IFileSearchBand_SetFocus_Proxy( 
    IFileSearchBand * This);


void __stdcall IFileSearchBand_SetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFileSearchBand_SetSearchParameters_Proxy( 
    IFileSearchBand * This,
     BSTR *pbstrSearchID,
     VARIANT_BOOL bNavToResults,
     VARIANT *pvarScope,
     VARIANT *pvarQueryFile);


void __stdcall IFileSearchBand_SetSearchParameters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFileSearchBand_get_SearchID_Proxy( 
    IFileSearchBand * This,
     BSTR *pbstrSearchID);


void __stdcall IFileSearchBand_get_SearchID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFileSearchBand_get_Scope_Proxy( 
    IFileSearchBand * This,
     VARIANT *pvarScope);


void __stdcall IFileSearchBand_get_Scope_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFileSearchBand_get_QueryFile_Proxy( 
    IFileSearchBand * This,
     VARIANT *pvarFile);


void __stdcall IFileSearchBand_get_QueryFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7843 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_FileSearchBand;



class __declspec(uuid("C4EE31F3-4768-11D2-BE5C-00A0C9A83DA1"))
FileSearchBand;
#line 7852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"





 


extern "C" const IID IID_IWebWizardHost;


    
    struct __declspec(uuid("18bcc359-4990-4bfb-b951-3c83702be5f9")) __declspec(novtable)
    IWebWizardHost : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall FinalBack( void) = 0;
        
        virtual  HRESULT __stdcall FinalNext( void) = 0;
        
        virtual  HRESULT __stdcall Cancel( void) = 0;
        
        virtual  HRESULT __stdcall put_Caption( 
             BSTR bstrCaption) = 0;
        
        virtual  HRESULT __stdcall get_Caption( 
             BSTR *pbstrCaption) = 0;
        
        virtual  HRESULT __stdcall put_Property( 
             BSTR bstrPropertyName,
             VARIANT *pvProperty) = 0;
        
        virtual  HRESULT __stdcall get_Property( 
             BSTR bstrPropertyName,
             VARIANT *pvProperty) = 0;
        
        virtual  HRESULT __stdcall SetWizardButtons( 
             VARIANT_BOOL vfEnableBack,
             VARIANT_BOOL vfEnableNext,
             VARIANT_BOOL vfLastPage) = 0;
        
        virtual  HRESULT __stdcall SetHeaderText( 
             BSTR bstrHeaderTitle,
             BSTR bstrHeaderSubtitle) = 0;
        
    };
    






















































































































































#line 8050 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IWebWizardHost_FinalBack_Proxy( 
    IWebWizardHost * This);


void __stdcall IWebWizardHost_FinalBack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_FinalNext_Proxy( 
    IWebWizardHost * This);


void __stdcall IWebWizardHost_FinalNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_Cancel_Proxy( 
    IWebWizardHost * This);


void __stdcall IWebWizardHost_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_put_Caption_Proxy( 
    IWebWizardHost * This,
     BSTR bstrCaption);


void __stdcall IWebWizardHost_put_Caption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_get_Caption_Proxy( 
    IWebWizardHost * This,
     BSTR *pbstrCaption);


void __stdcall IWebWizardHost_get_Caption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_put_Property_Proxy( 
    IWebWizardHost * This,
     BSTR bstrPropertyName,
     VARIANT *pvProperty);


void __stdcall IWebWizardHost_put_Property_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_get_Property_Proxy( 
    IWebWizardHost * This,
     BSTR bstrPropertyName,
     VARIANT *pvProperty);


void __stdcall IWebWizardHost_get_Property_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_SetWizardButtons_Proxy( 
    IWebWizardHost * This,
     VARIANT_BOOL vfEnableBack,
     VARIANT_BOOL vfEnableNext,
     VARIANT_BOOL vfLastPage);


void __stdcall IWebWizardHost_SetWizardButtons_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IWebWizardHost_SetHeaderText_Proxy( 
    IWebWizardHost * This,
     BSTR bstrHeaderTitle,
     BSTR bstrHeaderSubtitle);


void __stdcall IWebWizardHost_SetHeaderText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8165 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_INewWDEvents;


    
    struct __declspec(uuid("0751c551-7568-41c9-8e5b-e22e38919236")) __declspec(novtable)
    INewWDEvents : public IWebWizardHost
    {
    public:
        virtual  HRESULT __stdcall PassportAuthenticate( 
             BSTR bstrSignInUrl,
             VARIANT_BOOL *pvfAuthenitcated) = 0;
        
    };
    































































































































































#line 8348 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall INewWDEvents_PassportAuthenticate_Proxy( 
    INewWDEvents * This,
     BSTR bstrSignInUrl,
     VARIANT_BOOL *pvfAuthenitcated);


void __stdcall INewWDEvents_PassportAuthenticate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8366 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 


extern "C" const IID IID_IPassportClientServices;


    
    struct __declspec(uuid("b30f7305-5967-45d1-b7bc-d6eb7163d770")) __declspec(novtable)
    IPassportClientServices : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall MemberExists( 
             BSTR bstrUser,
             BSTR bstrPassword,
             VARIANT_BOOL *pvfExists) = 0;
        
    };
    






























































































#line 8485 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 HRESULT __stdcall IPassportClientServices_MemberExists_Proxy( 
    IPassportClientServices * This,
     BSTR bstrUser,
     BSTR bstrPassword,
     VARIANT_BOOL *pvfExists);


void __stdcall IPassportClientServices_MemberExists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8504 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


extern "C" const CLSID CLSID_PassportClientServices;



class __declspec(uuid("2d2307c8-7db4-40d6-9100-d52af4f97a5b"))
PassportClientServices;
#line 8513 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"
#line 8514 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


 



















extern RPC_IF_HANDLE __MIDL_itf_shldisp_0279_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shldisp_0279_v0_0_s_ifspec;





 

typedef  IAutoComplete *LPAUTOCOMPLETE;


extern "C" const IID IID_IAutoComplete;


    
    struct __declspec(uuid("00bb2762-6a77-11d0-a535-00c04fd7d062")) __declspec(novtable)
    IAutoComplete : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Init( 
             HWND hwndEdit,
             IUnknown *punkACL,
             LPCOLESTR pwszRegKeyPath,
             LPCOLESTR pwszQuickComplete) = 0;
        
        virtual HRESULT __stdcall Enable( 
             BOOL fEnable) = 0;
        
    };
    




























































#line 8628 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



HRESULT __stdcall IAutoComplete_Init_Proxy( 
    IAutoComplete * This,
     HWND hwndEdit,
     IUnknown *punkACL,
     LPCOLESTR pwszRegKeyPath,
     LPCOLESTR pwszQuickComplete);


void __stdcall IAutoComplete_Init_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAutoComplete_Enable_Proxy( 
    IAutoComplete * This,
     BOOL fEnable);


void __stdcall IAutoComplete_Enable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8660 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"






 

typedef  IAutoComplete2 *LPAUTOCOMPLETE2;

typedef 
enum _tagAUTOCOMPLETEOPTIONS
    {	ACO_NONE	= 0,
	ACO_AUTOSUGGEST	= 0x1,
	ACO_AUTOAPPEND	= 0x2,
	ACO_SEARCH	= 0x4,
	ACO_FILTERPREFIXES	= 0x8,
	ACO_USETAB	= 0x10,
	ACO_UPDOWNKEYDROPSLIST	= 0x20,
	ACO_RTLREADING	= 0x40
    } 	AUTOCOMPLETEOPTIONS;


extern "C" const IID IID_IAutoComplete2;


    
    struct __declspec(uuid("EAC04BC0-3791-11d2-BB95-0060977B464C")) __declspec(novtable)
    IAutoComplete2 : public IAutoComplete
    {
    public:
        virtual HRESULT __stdcall SetOptions( 
             DWORD dwFlag) = 0;
        
        virtual HRESULT __stdcall GetOptions( 
             DWORD *pdwFlag) = 0;
        
    };
    











































































#line 8775 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



HRESULT __stdcall IAutoComplete2_SetOptions_Proxy( 
    IAutoComplete2 * This,
     DWORD dwFlag);


void __stdcall IAutoComplete2_SetOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAutoComplete2_GetOptions_Proxy( 
    IAutoComplete2 * This,
     DWORD *pdwFlag);


void __stdcall IAutoComplete2_GetOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8804 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 













extern RPC_IF_HANDLE __MIDL_itf_shldisp_0281_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shldisp_0281_v0_0_s_ifspec;





 

typedef  IEnumACString *PENUMACSTRING;

typedef  IEnumACString *LPENUMACSTRING;

typedef 
enum _tagACENUMOPTION
    {	ACEO_NONE	= 0,
	ACEO_MOSTRECENTFIRST	= 0x1,
	ACEO_FIRSTUNUSED	= 0x10000
    } 	ACENUMOPTION;


extern "C" const IID IID_IEnumACString;


    
    struct __declspec(uuid("8E74C210-CF9D-4eaf-A403-7356428F0A5A")) __declspec(novtable)
    IEnumACString : public IEnumString
    {
    public:
        virtual HRESULT __stdcall NextItem( 
             LPOLESTR pszUrl,
             ULONG cchMax,
             ULONG *pulSortIndex) = 0;
        
        virtual HRESULT __stdcall SetEnumOptions( 
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall GetEnumOptions( 
             DWORD *pdwOptions) = 0;
        
    };
    
































































































#line 8960 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



HRESULT __stdcall IEnumACString_NextItem_Proxy( 
    IEnumACString * This,
     LPOLESTR pszUrl,
     ULONG cchMax,
     ULONG *pulSortIndex);


void __stdcall IEnumACString_NextItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumACString_SetEnumOptions_Proxy( 
    IEnumACString * This,
     DWORD dwOptions);


void __stdcall IEnumACString_SetEnumOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumACString_GetEnumOptions_Proxy( 
    IEnumACString * This,
     DWORD *pdwOptions);


void __stdcall IEnumACString_GetEnumOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9003 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



 


















































extern RPC_IF_HANDLE __MIDL_itf_shldisp_0282_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shldisp_0282_v0_0_s_ifspec;





 

typedef  IAsyncOperation *LPASYNCOPERATION;


extern "C" const IID IID_IAsyncOperation;


    
    struct __declspec(uuid("3D8B0590-F691-11d2-8EA9-006097DF5BD4")) __declspec(novtable)
    IAsyncOperation : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetAsyncMode( 
             BOOL fDoOpAsync) = 0;
        
        virtual HRESULT __stdcall GetAsyncMode( 
             BOOL *pfIsOpAsync) = 0;
        
        virtual HRESULT __stdcall StartOperation( 
             IBindCtx *pbcReserved) = 0;
        
        virtual HRESULT __stdcall InOperation( 
             BOOL *pfInAsyncOp) = 0;
        
        virtual HRESULT __stdcall EndOperation( 
             HRESULT hResult,
             IBindCtx *pbcReserved,
             DWORD dwEffects) = 0;
        
    };
    
















































































#line 9177 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"



HRESULT __stdcall IAsyncOperation_SetAsyncMode_Proxy( 
    IAsyncOperation * This,
     BOOL fDoOpAsync);


void __stdcall IAsyncOperation_SetAsyncMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncOperation_GetAsyncMode_Proxy( 
    IAsyncOperation * This,
     BOOL *pfIsOpAsync);


void __stdcall IAsyncOperation_GetAsyncMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncOperation_StartOperation_Proxy( 
    IAsyncOperation * This,
     IBindCtx *pbcReserved);


void __stdcall IAsyncOperation_StartOperation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncOperation_InOperation_Proxy( 
    IAsyncOperation * This,
     BOOL *pfInAsyncOp);


void __stdcall IAsyncOperation_InOperation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncOperation_EndOperation_Proxy( 
    IAsyncOperation * This,
     HRESULT hResult,
     IBindCtx *pbcReserved,
     DWORD dwEffects);


void __stdcall IAsyncOperation_EndOperation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9244 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"







}
#line 9253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"

#line 9255 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shldisp.h"


#line 211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"
#line 212 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"




extern "C" const GUID  CLSID_CUrlHistory;



extern "C" const GUID  CLSID_CURLSearchHook;






extern "C" const GUID  IID_IAutoCompList;
extern "C" const GUID  IID_IObjMgr;
extern "C" const GUID  IID_IACList;
extern "C" const GUID  IID_IACList2;
extern "C" const GUID  IID_ICurrentWorkingDirectory;     
extern "C" const GUID  CLSID_AutoComplete;
extern "C" const GUID  CLSID_ACLHistory;
extern "C" const GUID  CLSID_ACListISF;
extern "C" const GUID  CLSID_ACLMRU;          
extern "C" const GUID  CLSID_ACLMulti;


#line 240 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"





extern "C" const GUID  CLSID_ProgressDialog;

extern "C" const GUID  IID_IProgressDialog;
#line 249 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"











extern "C" const GUID  SID_STopLevelBrowser;

#line 263 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"

#line 265 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"





extern "C" const GUID  CLSID_ActiveDesktop;


extern "C" const GUID  IID_IActiveDesktop;



extern "C" const GUID  IID_ISynchronizedCallBack;



extern "C" const GUID  IID_IShellDetails3;


extern "C" const GUID  IID_IQueryAssociations;


extern "C" const GUID  CLSID_QueryAssociations;



extern "C" const GUID  IID_IColumnProvider;


extern "C" const GUID  CLSID_DocFileColumnProvider;


extern "C" const GUID  CLSID_LinkColumnProvider;


extern "C" const GUID  CLSID_FileSysColumnProvider;





extern "C" const GUID  CGID_ShortCut;



extern "C" const GUID  IID_INamedPropertyBag;


extern "C" const GUID  CLSID_InternetButtons;



extern "C" const GUID  CLSID_MSOButtons;


extern "C" const GUID  CLSID_ToolbarExtButtons;
#line 322 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"


extern "C" const GUID  CLSID_DarwinAppPublisher;


extern "C" const GUID  CLSID_DocHostUIHandler;
#line 329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"




extern "C" const GUID  IID_IShellFolder2;


extern "C" const GUID  FMTID_ShellDetails;









extern "C" const GUID  FMTID_Storage;



extern "C" const GUID  FMTID_ImageProperties;





extern "C" const GUID  FMTID_Displaced;





extern "C" const GUID  FMTID_Briefcase;





extern "C" const GUID  FMTID_Misc;








extern "C" const GUID  FMTID_WebView;





extern "C" const GUID  FMTID_MUSIC;











extern "C" const GUID  FMTID_DRM;






































extern "C" const GUID  FMTID_Volume;













extern "C" const GUID  FMTID_Query;














extern "C" const GUID  IID_IEnumExtraSearch;


extern "C" const GUID  CLSID_MountedVolume;


extern "C" const GUID  CLSID_HWShellExecute;


extern "C" const GUID  IID_IMountedVolume;


extern "C" const GUID  CLSID_DragDropHelper;


extern "C" const GUID  IID_IDropTargetHelper;


extern "C" const GUID  IID_IDragSourceHelper;


extern "C" const GUID  CLSID_CAnchorBrowsePropertyPage;


extern "C" const GUID  CLSID_CImageBrowsePropertyPage;


extern "C" const GUID  CLSID_CDocBrowsePropertyPage;


extern "C" const GUID  IID_IFileSystemBindData;


extern "C" const GUID  SID_STopWindow;


extern "C" const GUID  SID_SGetViewFromViewDual;





extern "C" const GUID  BHID_SFObject;

extern "C" const GUID  BHID_SFUIObject;

extern "C" const GUID  BHID_SFViewObject;

extern "C" const GUID  BHID_Storage;

extern "C" const GUID  BHID_Stream;

extern "C" const GUID  BHID_LinkTargetItem;

extern "C" const GUID  BHID_StorageEnum;


#line 521 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"








#line 530 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"


#line 533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlguid.h"
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 104 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 107 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


extern "C" {            
#line 111 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"

#pragma warning( disable: 4049 )  




 























#pragma once
#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"

 





extern "C"{
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 














































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 95 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"
typedef struct _SHITEMID
    {
    USHORT cb;
    BYTE abID[ 1 ];
    } 	SHITEMID;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 102 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"


#line 105 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"
typedef SHITEMID  *LPSHITEMID;

typedef const SHITEMID  *LPCSHITEMID;




#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"
typedef struct _ITEMIDLIST
    {
    SHITEMID mkid;
    } 	ITEMIDLIST;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 119 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"
typedef  BYTE_BLOB *wirePIDL;

typedef  ITEMIDLIST  *LPITEMIDLIST;

typedef  const ITEMIDLIST  *LPCITEMIDLIST;

typedef struct _WINBASE_DEFINED_STRUCT
    {
    int dummy;
    } 	WINBASE_DEFINED_STRUCT;




















typedef  
enum tagSTRRET_TYPE
    {	STRRET_WSTR	= 0,
	STRRET_OFFSET	= 0x1,
	STRRET_CSTR	= 0x2
    } 	STRRET_TYPE;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"
typedef struct _STRRET
    {
    UINT uType;
     union 
        {
         LPWSTR pOleStr;
         UINT uOffset;
         char cStr[ 260 ];
        } 	;
    } 	STRRET;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"
typedef STRRET *LPSTRRET;













#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"
typedef struct _SHELLDETAILS
    {
    int fmt;
    int cxChar;
    STRRET str;
    } 	SHELLDETAILS;

typedef struct _SHELLDETAILS *LPSHELLDETAILS;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 194 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"


extern RPC_IF_HANDLE __MIDL_itf_shtypes_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shtypes_0000_v0_0_s_ifspec;






}
#line 206 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"

#line 208 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shtypes.h"


#line 113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

 



typedef struct IPersistFolder IPersistFolder;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IPersistFolder2 IPersistFolder2;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IPersistIDList IPersistIDList;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IEnumIDList IEnumIDList;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellFolder IShellFolder;
#line 73 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IEnumExtraSearch IEnumExtraSearch;
#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellFolder2 IShellFolder2;
#line 85 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellView IShellView;
#line 91 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellView2 IShellView2;
#line 97 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IFolderView IFolderView;
#line 103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IFolderFilterSite IFolderFilterSite;
#line 109 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IFolderFilter IFolderFilter;
#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellBrowser IShellBrowser;
#line 121 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IProfferService IProfferService;
#line 127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IPropertyUI IPropertyUI;
#line 133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct ICategoryProvider ICategoryProvider;
#line 139 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct ICategorizer ICategorizer;
#line 145 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellLinkA IShellLinkA;
#line 151 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellLinkW IShellLinkW;
#line 157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IActionProgressDialog IActionProgressDialog;
#line 163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IHWEventHandler IHWEventHandler;
#line 169 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IQueryCancelAutoPlay IQueryCancelAutoPlay;
#line 175 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IActionProgress IActionProgress;
#line 181 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellExtInit IShellExtInit;
#line 187 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IShellPropSheetExt IShellPropSheetExt;
#line 193 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IRemoteComputer IRemoteComputer;
#line 199 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IQueryContinue IQueryContinue;
#line 205 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IUserNotification IUserNotification;
#line 211 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IItemNameLimits IItemNameLimits;
#line 217 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct INetCrawler INetCrawler;
#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IExtractImage IExtractImage;
#line 229 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IExtractImage2 IExtractImage2;
#line 235 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IUserEventTimerCallback IUserEventTimerCallback;
#line 241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IUserEventTimer IUserEventTimer;
#line 247 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IDockingWindow IDockingWindow;
#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IDeskBand IDeskBand;
#line 259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct ITaskbarList ITaskbarList;
#line 265 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct ITaskbarList2 ITaskbarList2;
#line 271 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct ICDBurn ICDBurn;
#line 277 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IAddressBarParser IAddressBarParser;
#line 283 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IWizardSite IWizardSite;
#line 289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IWizardExtension IWizardExtension;
#line 295 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IWebWizardExtension IWebWizardExtension;
#line 301 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IPublishingWizard IPublishingWizard;
#line 307 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IFolderViewHost IFolderViewHost;
#line 313 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




typedef struct IAutoCompleteDropDown IAutoCompleteDropDown;
#line 319 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class QueryCancelAutoPlay QueryCancelAutoPlay;


#line 329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 331 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class DriveSizeCategorizer DriveSizeCategorizer;


#line 341 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 343 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class DriveTypeCategorizer DriveTypeCategorizer;


#line 353 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 355 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class FreeSpaceCategorizer FreeSpaceCategorizer;


#line 365 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class TimeCategorizer TimeCategorizer;


#line 377 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 379 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class SizeCategorizer SizeCategorizer;


#line 389 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 391 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class AlphabeticalCategorizer AlphabeticalCategorizer;


#line 401 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 403 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class MergedCategorizer MergedCategorizer;


#line 413 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class ImageProperties ImageProperties;


#line 425 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class PropertiesUI PropertiesUI;


#line 437 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 439 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class UserNotification UserNotification;


#line 449 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 451 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class UserEventTimerCallback UserEventTimerCallback;


#line 461 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 463 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class UserEventTimer UserEventTimer;


#line 473 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 475 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class NetCrawler NetCrawler;


#line 485 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 487 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class CDBurn CDBurn;


#line 497 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 499 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class AddressBarParser AddressBarParser;


#line 509 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 511 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class TaskbarList TaskbarList;


#line 521 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 523 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class WebWizardHost WebWizardHost;


#line 533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 535 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class PublishDropTarget PublishDropTarget;


#line 545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 547 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class PublishingWizard PublishingWizard;


#line 557 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 559 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class InternetPrintOrdering InternetPrintOrdering;


#line 569 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 571 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






typedef class FolderViewHost FolderViewHost;


#line 581 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 583 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"








#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"

 



typedef struct IEnumGUID IEnumGUID;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"




typedef struct IEnumCATEGORYINFO IEnumCATEGORYINFO;
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"




typedef struct ICatRegister ICatRegister;
#line 61 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"




typedef struct ICatInformation ICatInformation;
#line 67 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"






extern "C"{
#line 75 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 












#pragma comment(lib,"uuid.lib")









extern "C" const CLSID CLSID_StdComponentCategoriesMgr;



typedef GUID CATID;

typedef const GUID & REFCATID;











extern "C" const CATID CATID_Insertable;
extern "C" const CATID CATID_Control;
extern "C" const CATID CATID_Programmable;
extern "C" const CATID CATID_IsShortcut;
extern "C" const CATID CATID_NeverShowExt;
extern "C" const CATID CATID_DocObject;
extern "C" const CATID CATID_Printable;
extern "C" const CATID CATID_RequiresDataPathHost;
extern "C" const CATID CATID_PersistsToMoniker;
extern "C" const CATID CATID_PersistsToStorage;
extern "C" const CATID CATID_PersistsToStreamInit;
extern "C" const CATID CATID_PersistsToStream;
extern "C" const CATID CATID_PersistsToMemory;
extern "C" const CATID CATID_PersistsToFile;
extern "C" const CATID CATID_PersistsToPropertyBag;
extern "C" const CATID CATID_InternetAware;
extern "C" const CATID CATID_DesignTimeUIActivatableControl;







extern RPC_IF_HANDLE __MIDL_itf_comcat_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_comcat_0000_v0_0_s_ifspec;





 

typedef  IEnumGUID *LPENUMGUID;


extern "C" const IID IID_IEnumGUID;


    
    struct __declspec(uuid("0002E000-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumGUID : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next( 
             ULONG celt,
             GUID *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumGUID **ppenum) = 0;
        
    };
    








































































#line 253 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



HRESULT __stdcall IEnumGUID_Next_Proxy( 
    IEnumGUID * This,
     ULONG celt,
     GUID *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumGUID_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumGUID_Skip_Proxy( 
    IEnumGUID * This,
     ULONG celt);


void __stdcall IEnumGUID_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumGUID_Reset_Proxy( 
    IEnumGUID * This);


void __stdcall IEnumGUID_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumGUID_Clone_Proxy( 
    IEnumGUID * This,
     IEnumGUID **ppenum);


void __stdcall IEnumGUID_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 307 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



 

#line 313 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"




extern RPC_IF_HANDLE __MIDL_itf_comcat_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_comcat_0009_v0_0_s_ifspec;





 

typedef  IEnumCATEGORYINFO *LPENUMCATEGORYINFO;

typedef struct tagCATEGORYINFO
    {
    CATID catid;
    LCID lcid;
    OLECHAR szDescription[ 128 ];
    } 	CATEGORYINFO;

typedef struct tagCATEGORYINFO *LPCATEGORYINFO;


extern "C" const IID IID_IEnumCATEGORYINFO;


    
    struct __declspec(uuid("0002E011-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumCATEGORYINFO : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next( 
             ULONG celt,
             CATEGORYINFO *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumCATEGORYINFO **ppenum) = 0;
        
    };
    








































































#line 434 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



HRESULT __stdcall IEnumCATEGORYINFO_Next_Proxy( 
    IEnumCATEGORYINFO * This,
     ULONG celt,
     CATEGORYINFO *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumCATEGORYINFO_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumCATEGORYINFO_Skip_Proxy( 
    IEnumCATEGORYINFO * This,
     ULONG celt);


void __stdcall IEnumCATEGORYINFO_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumCATEGORYINFO_Reset_Proxy( 
    IEnumCATEGORYINFO * This);


void __stdcall IEnumCATEGORYINFO_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumCATEGORYINFO_Clone_Proxy( 
    IEnumCATEGORYINFO * This,
     IEnumCATEGORYINFO **ppenum);


void __stdcall IEnumCATEGORYINFO_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 488 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



 

#line 494 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"




extern RPC_IF_HANDLE __MIDL_itf_comcat_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_comcat_0010_v0_0_s_ifspec;





 

typedef  ICatRegister *LPCATREGISTER;


extern "C" const IID IID_ICatRegister;


    
    struct __declspec(uuid("0002E012-0000-0000-C000-000000000046")) __declspec(novtable)
    ICatRegister : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterCategories( 
             ULONG cCategories,
             CATEGORYINFO rgCategoryInfo[  ]) = 0;
        
        virtual HRESULT __stdcall UnRegisterCategories( 
             ULONG cCategories,
             CATID rgcatid[  ]) = 0;
        
        virtual HRESULT __stdcall RegisterClassImplCategories( 
             const IID & rclsid,
             ULONG cCategories,
             CATID rgcatid[  ]) = 0;
        
        virtual HRESULT __stdcall UnRegisterClassImplCategories( 
             const IID & rclsid,
             ULONG cCategories,
             CATID rgcatid[  ]) = 0;
        
        virtual HRESULT __stdcall RegisterClassReqCategories( 
             const IID & rclsid,
             ULONG cCategories,
             CATID rgcatid[  ]) = 0;
        
        virtual HRESULT __stdcall UnRegisterClassReqCategories( 
             const IID & rclsid,
             ULONG cCategories,
             CATID rgcatid[  ]) = 0;
        
    };
    































































































#line 644 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



HRESULT __stdcall ICatRegister_RegisterCategories_Proxy( 
    ICatRegister * This,
     ULONG cCategories,
     CATEGORYINFO rgCategoryInfo[  ]);


void __stdcall ICatRegister_RegisterCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatRegister_UnRegisterCategories_Proxy( 
    ICatRegister * This,
     ULONG cCategories,
     CATID rgcatid[  ]);


void __stdcall ICatRegister_UnRegisterCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatRegister_RegisterClassImplCategories_Proxy( 
    ICatRegister * This,
     const IID & rclsid,
     ULONG cCategories,
     CATID rgcatid[  ]);


void __stdcall ICatRegister_RegisterClassImplCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatRegister_UnRegisterClassImplCategories_Proxy( 
    ICatRegister * This,
     const IID & rclsid,
     ULONG cCategories,
     CATID rgcatid[  ]);


void __stdcall ICatRegister_UnRegisterClassImplCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatRegister_RegisterClassReqCategories_Proxy( 
    ICatRegister * This,
     const IID & rclsid,
     ULONG cCategories,
     CATID rgcatid[  ]);


void __stdcall ICatRegister_RegisterClassReqCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatRegister_UnRegisterClassReqCategories_Proxy( 
    ICatRegister * This,
     const IID & rclsid,
     ULONG cCategories,
     CATID rgcatid[  ]);


void __stdcall ICatRegister_UnRegisterClassReqCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 731 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



 

#line 737 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"




extern RPC_IF_HANDLE __MIDL_itf_comcat_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_comcat_0011_v0_0_s_ifspec;





 

typedef  ICatInformation *LPCATINFORMATION;


extern "C" const IID IID_ICatInformation;


    
    struct __declspec(uuid("0002E013-0000-0000-C000-000000000046")) __declspec(novtable)
    ICatInformation : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnumCategories( 
             LCID lcid,
             IEnumCATEGORYINFO **ppenumCategoryInfo) = 0;
        
        virtual HRESULT __stdcall GetCategoryDesc( 
             REFCATID rcatid,
             LCID lcid,
             LPWSTR *pszDesc) = 0;
        
        virtual  HRESULT __stdcall EnumClassesOfCategories( 
             ULONG cImplemented,
             CATID rgcatidImpl[  ],
             ULONG cRequired,
             CATID rgcatidReq[  ],
             IEnumGUID **ppenumClsid) = 0;
        
        virtual  HRESULT __stdcall IsClassOfCategories( 
             const IID & rclsid,
             ULONG cImplemented,
             CATID rgcatidImpl[  ],
             ULONG cRequired,
             CATID rgcatidReq[  ]) = 0;
        
        virtual HRESULT __stdcall EnumImplCategoriesOfClass( 
             const IID & rclsid,
             IEnumGUID **ppenumCatid) = 0;
        
        virtual HRESULT __stdcall EnumReqCategoriesOfClass( 
             const IID & rclsid,
             IEnumGUID **ppenumCatid) = 0;
        
    };
    


































































































#line 893 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



HRESULT __stdcall ICatInformation_EnumCategories_Proxy( 
    ICatInformation * This,
     LCID lcid,
     IEnumCATEGORYINFO **ppenumCategoryInfo);


void __stdcall ICatInformation_EnumCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatInformation_GetCategoryDesc_Proxy( 
    ICatInformation * This,
     REFCATID rcatid,
     LCID lcid,
     LPWSTR *pszDesc);


void __stdcall ICatInformation_GetCategoryDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICatInformation_RemoteEnumClassesOfCategories_Proxy( 
    ICatInformation * This,
     ULONG cImplemented,
     CATID rgcatidImpl[  ],
     ULONG cRequired,
     CATID rgcatidReq[  ],
     IEnumGUID **ppenumClsid);


void __stdcall ICatInformation_RemoteEnumClassesOfCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICatInformation_RemoteIsClassOfCategories_Proxy( 
    ICatInformation * This,
     const IID & rclsid,
     ULONG cImplemented,
     CATID rgcatidImpl[  ],
     ULONG cRequired,
     CATID rgcatidReq[  ]);


void __stdcall ICatInformation_RemoteIsClassOfCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatInformation_EnumImplCategoriesOfClass_Proxy( 
    ICatInformation * This,
     const IID & rclsid,
     IEnumGUID **ppenumCatid);


void __stdcall ICatInformation_EnumImplCategoriesOfClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatInformation_EnumReqCategoriesOfClass_Proxy( 
    ICatInformation * This,
     const IID & rclsid,
     IEnumGUID **ppenumCatid);


void __stdcall ICatInformation_EnumReqCategoriesOfClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 983 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"



 

#line 989 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"


extern RPC_IF_HANDLE __MIDL_itf_comcat_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_comcat_0012_v0_0_s_ifspec;



 HRESULT __stdcall ICatInformation_EnumClassesOfCategories_Proxy( 
    ICatInformation * This,
     ULONG cImplemented,
     CATID rgcatidImpl[  ],
     ULONG cRequired,
     CATID rgcatidReq[  ],
     IEnumGUID **ppenumClsid);


 HRESULT __stdcall ICatInformation_EnumClassesOfCategories_Stub( 
    ICatInformation * This,
     ULONG cImplemented,
     CATID rgcatidImpl[  ],
     ULONG cRequired,
     CATID rgcatidReq[  ],
     IEnumGUID **ppenumClsid);

 HRESULT __stdcall ICatInformation_IsClassOfCategories_Proxy( 
    ICatInformation * This,
     const IID & rclsid,
     ULONG cImplemented,
     CATID rgcatidImpl[  ],
     ULONG cRequired,
     CATID rgcatidReq[  ]);


 HRESULT __stdcall ICatInformation_IsClassOfCategories_Stub( 
    ICatInformation * This,
     const IID & rclsid,
     ULONG cImplemented,
     CATID rgcatidImpl[  ],
     ULONG cRequired,
     CATID rgcatidReq[  ]);






}
#line 1037 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"

#line 1039 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comcat.h"


#line 592 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 594 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



extern "C"{
#line 599 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 







#line 613 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
#line 614 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
#line 615 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"


extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0000_v0_0_s_ifspec;





 


extern "C" const IID IID_IPersistFolder;


    
    struct __declspec(uuid("000214EA-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistFolder : public IPersist
    {
    public:
        virtual HRESULT __stdcall Initialize( 
             LPCITEMIDLIST pidl) = 0;
        
    };
    


























































#line 699 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IPersistFolder_Initialize_Proxy( 
    IPersistFolder * This,
     LPCITEMIDLIST pidl);


void __stdcall IPersistFolder_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IPersistFolder *LPPERSISTFOLDER;




extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0191_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0191_v0_0_s_ifspec;





 


extern "C" const IID IID_IPersistFolder2;


    
    struct __declspec(uuid("1AC3D9F0-175C-11d1-95BE-00609797EA4F")) __declspec(novtable)
    IPersistFolder2 : public IPersistFolder
    {
    public:
        virtual HRESULT __stdcall GetCurFolder( 
             LPITEMIDLIST *ppidl) = 0;
        
    };
    


































































#line 816 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IPersistFolder2_GetCurFolder_Proxy( 
    IPersistFolder2 * This,
     LPITEMIDLIST *ppidl);


void __stdcall IPersistFolder2_GetCurFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 833 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IPersistFolder2 *LPPERSISTFOLDER2;

#line 841 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"


extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0192_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0192_v0_0_s_ifspec;





 


extern "C" const IID IID_IPersistIDList;


    
    struct __declspec(uuid("1079acfc-29bd-11d3-8e0d-00c04f6837d5")) __declspec(novtable)
    IPersistIDList : public IPersist
    {
    public:
        virtual HRESULT __stdcall SetIDList( 
             LPCITEMIDLIST pidl) = 0;
        
        virtual HRESULT __stdcall GetIDList( 
             LPITEMIDLIST *ppidl) = 0;
        
    };
    

































































#line 935 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IPersistIDList_SetIDList_Proxy( 
    IPersistIDList * This,
     LPCITEMIDLIST pidl);


void __stdcall IPersistIDList_SetIDList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistIDList_GetIDList_Proxy( 
    IPersistIDList * This,
     LPITEMIDLIST *ppidl);


void __stdcall IPersistIDList_GetIDList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 964 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IEnumIDList;


    
    struct __declspec(uuid("000214F2-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumIDList : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next( 
             ULONG celt,
             LPITEMIDLIST *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumIDList **ppenum) = 0;
        
    };
    








































































#line 1069 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IEnumIDList_Next_Proxy( 
    IEnumIDList * This,
     ULONG celt,
     LPITEMIDLIST *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumIDList_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumIDList_Skip_Proxy( 
    IEnumIDList * This,
     ULONG celt);


void __stdcall IEnumIDList_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumIDList_Reset_Proxy( 
    IEnumIDList * This);


void __stdcall IEnumIDList_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumIDList_Clone_Proxy( 
    IEnumIDList * This,
     IEnumIDList **ppenum);


void __stdcall IEnumIDList_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1123 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IEnumIDList *LPENUMIDLIST;

typedef enum tagSHGDN
{
    SHGDN_NORMAL             = 0x0000,  
    SHGDN_INFOLDER           = 0x0001,  
    SHGDN_FOREDITING         = 0x1000,  
    SHGDN_FORADDRESSBAR      = 0x4000,  
    SHGDN_FORPARSING         = 0x8000,  
} SHGNO;
typedef DWORD SHGDNF;

typedef enum tagSHCONTF
{
    SHCONTF_FOLDERS             = 0x0020,   
    SHCONTF_NONFOLDERS          = 0x0040,   
    SHCONTF_INCLUDEHIDDEN       = 0x0080,   
    SHCONTF_INIT_ON_FIRST_NEXT  = 0x0100,   
    SHCONTF_NETPRINTERSRCH      = 0x0200,   
    SHCONTF_SHAREABLE           = 0x0400,   
    SHCONTF_STORAGE             = 0x0800,   
};
typedef DWORD SHCONTF;






































typedef ULONG SFGAOF;








extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0194_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0194_v0_0_s_ifspec;





 


extern "C" const IID IID_IShellFolder;


    
    struct __declspec(uuid("000214E6-0000-0000-C000-000000000046")) __declspec(novtable)
    IShellFolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName( 
             HWND hwnd,
             LPBC pbc,
             LPOLESTR pszDisplayName,
             ULONG *pchEaten,
             LPITEMIDLIST *ppidl,
             ULONG *pdwAttributes) = 0;
        
        virtual HRESULT __stdcall EnumObjects( 
             HWND hwnd,
             SHCONTF grfFlags,
             IEnumIDList **ppenumIDList) = 0;
        
        virtual HRESULT __stdcall BindToObject( 
             LPCITEMIDLIST pidl,
             LPBC pbc,
             const IID & riid,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall BindToStorage( 
             LPCITEMIDLIST pidl,
             LPBC pbc,
             const IID & riid,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall CompareIDs( 
             LPARAM lParam,
             LPCITEMIDLIST pidl1,
             LPCITEMIDLIST pidl2) = 0;
        
        virtual HRESULT __stdcall CreateViewObject( 
             HWND hwndOwner,
             const IID & riid,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall GetAttributesOf( 
             UINT cidl,
             LPCITEMIDLIST *apidl,
             SFGAOF *rgfInOut) = 0;
        
        virtual HRESULT __stdcall GetUIObjectOf( 
             HWND hwndOwner,
             UINT cidl,
             LPCITEMIDLIST *apidl,
             const IID & riid,
             UINT *rgfReserved,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall GetDisplayNameOf( 
             LPCITEMIDLIST pidl,
             SHGDNF uFlags,
             STRRET *pName) = 0;
        
        virtual HRESULT __stdcall SetNameOf( 
             HWND hwnd,
             LPCITEMIDLIST pidl,
             LPCOLESTR pszName,
             SHGDNF uFlags,
             LPITEMIDLIST *ppidlOut) = 0;
        
    };
    















































































































































#line 1422 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellFolder_ParseDisplayName_Proxy( 
    IShellFolder * This,
     HWND hwnd,
     LPBC pbc,
     LPOLESTR pszDisplayName,
     ULONG *pchEaten,
     LPITEMIDLIST *ppidl,
     ULONG *pdwAttributes);


void __stdcall IShellFolder_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_EnumObjects_Proxy( 
    IShellFolder * This,
     HWND hwnd,
     SHCONTF grfFlags,
     IEnumIDList **ppenumIDList);


void __stdcall IShellFolder_EnumObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_BindToObject_Proxy( 
    IShellFolder * This,
     LPCITEMIDLIST pidl,
     LPBC pbc,
     const IID & riid,
     void **ppv);


void __stdcall IShellFolder_BindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_BindToStorage_Proxy( 
    IShellFolder * This,
     LPCITEMIDLIST pidl,
     LPBC pbc,
     const IID & riid,
     void **ppv);


void __stdcall IShellFolder_BindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_CompareIDs_Proxy( 
    IShellFolder * This,
     LPARAM lParam,
     LPCITEMIDLIST pidl1,
     LPCITEMIDLIST pidl2);


void __stdcall IShellFolder_CompareIDs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_CreateViewObject_Proxy( 
    IShellFolder * This,
     HWND hwndOwner,
     const IID & riid,
     void **ppv);


void __stdcall IShellFolder_CreateViewObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_GetAttributesOf_Proxy( 
    IShellFolder * This,
     UINT cidl,
     LPCITEMIDLIST *apidl,
     SFGAOF *rgfInOut);


void __stdcall IShellFolder_GetAttributesOf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_GetUIObjectOf_Proxy( 
    IShellFolder * This,
     HWND hwndOwner,
     UINT cidl,
     LPCITEMIDLIST *apidl,
     const IID & riid,
     UINT *rgfReserved,
     void **ppv);


void __stdcall IShellFolder_GetUIObjectOf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_GetDisplayNameOf_Proxy( 
    IShellFolder * This,
     LPCITEMIDLIST pidl,
     SHGDNF uFlags,
     STRRET *pName);


void __stdcall IShellFolder_GetDisplayNameOf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder_SetNameOf_Proxy( 
    IShellFolder * This,
     HWND hwnd,
     LPCITEMIDLIST pidl,
     LPCOLESTR pszName,
     SHGDNF uFlags,
     LPITEMIDLIST *ppidlOut);


void __stdcall IShellFolder_SetNameOf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1577 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IShellFolder *LPSHELLFOLDER;


typedef struct tagEXTRASEARCH
    {
    GUID guidSearch;
    WCHAR wszFriendlyName[ 80 ];
    WCHAR wszUrl[ 2084 ];
    } 	EXTRASEARCH;

typedef struct tagEXTRASEARCH *LPEXTRASEARCH;

typedef struct IEnumExtraSearch *LPENUMEXTRASEARCH;




extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0195_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0195_v0_0_s_ifspec;





 


extern "C" const IID IID_IEnumExtraSearch;


    
    struct __declspec(uuid("0E700BE1-9DB6-11d1-A1CE-00C04FD75D13")) __declspec(novtable)
    IEnumExtraSearch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next( 
             ULONG celt,
             EXTRASEARCH *rgelt,
             ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
             IEnumExtraSearch **ppenum) = 0;
        
    };
    








































































#line 1705 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IEnumExtraSearch_Next_Proxy( 
    IEnumExtraSearch * This,
     ULONG celt,
     EXTRASEARCH *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumExtraSearch_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumExtraSearch_Skip_Proxy( 
    IEnumExtraSearch * This,
     ULONG celt);


void __stdcall IEnumExtraSearch_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumExtraSearch_Reset_Proxy( 
    IEnumExtraSearch * This);


void __stdcall IEnumExtraSearch_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumExtraSearch_Clone_Proxy( 
    IEnumExtraSearch * This,
     IEnumExtraSearch **ppenum);


void __stdcall IEnumExtraSearch_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1759 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef  
enum __MIDL___MIDL_itf_shobjidl_0196_0001
    {	SHCOLSTATE_TYPE_STR	= 0x1,
	SHCOLSTATE_TYPE_INT	= 0x2,
	SHCOLSTATE_TYPE_DATE	= 0x3,
	SHCOLSTATE_TYPEMASK	= 0xf,
	SHCOLSTATE_ONBYDEFAULT	= 0x10,
	SHCOLSTATE_SLOW	= 0x20,
	SHCOLSTATE_EXTENDED	= 0x40,
	SHCOLSTATE_SECONDARYUI	= 0x80,
	SHCOLSTATE_HIDDEN	= 0x100,
	SHCOLSTATE_PREFER_VARCMP	= 0x200
    } 	SHCOLSTATE;

typedef DWORD SHCOLSTATEF;

typedef  struct __MIDL___MIDL_itf_shobjidl_0196_0002
    {
    GUID fmtid;
    DWORD pid;
    } 	SHCOLUMNID;

typedef struct __MIDL___MIDL_itf_shobjidl_0196_0002 *LPSHCOLUMNID;

typedef const SHCOLUMNID *LPCSHCOLUMNID;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0196_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0196_v0_0_s_ifspec;





 


extern "C" const IID IID_IShellFolder2;


    
    struct __declspec(uuid("93F2F68C-1D1B-11d3-A30E-00C04F79ABD1")) __declspec(novtable)
    IShellFolder2 : public IShellFolder
    {
    public:
        virtual HRESULT __stdcall GetDefaultSearchGUID( 
             GUID *pguid) = 0;
        
        virtual HRESULT __stdcall EnumSearches( 
             IEnumExtraSearch **ppenum) = 0;
        
        virtual HRESULT __stdcall GetDefaultColumn( 
             DWORD dwRes,
             ULONG *pSort,
             ULONG *pDisplay) = 0;
        
        virtual HRESULT __stdcall GetDefaultColumnState( 
             UINT iColumn,
             SHCOLSTATEF *pcsFlags) = 0;
        
        virtual HRESULT __stdcall GetDetailsEx( 
             LPCITEMIDLIST pidl,
             const SHCOLUMNID *pscid,
             VARIANT *pv) = 0;
        
        virtual HRESULT __stdcall GetDetailsOf( 
             LPCITEMIDLIST pidl,
             UINT iColumn,
             SHELLDETAILS *psd) = 0;
        
        virtual HRESULT __stdcall MapColumnToSCID( 
             UINT iColumn,
             SHCOLUMNID *pscid) = 0;
        
    };
    









































































































































































































#line 2043 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellFolder2_GetDefaultSearchGUID_Proxy( 
    IShellFolder2 * This,
     GUID *pguid);


void __stdcall IShellFolder2_GetDefaultSearchGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder2_EnumSearches_Proxy( 
    IShellFolder2 * This,
     IEnumExtraSearch **ppenum);


void __stdcall IShellFolder2_EnumSearches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder2_GetDefaultColumn_Proxy( 
    IShellFolder2 * This,
     DWORD dwRes,
     ULONG *pSort,
     ULONG *pDisplay);


void __stdcall IShellFolder2_GetDefaultColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder2_GetDefaultColumnState_Proxy( 
    IShellFolder2 * This,
     UINT iColumn,
     SHCOLSTATEF *pcsFlags);


void __stdcall IShellFolder2_GetDefaultColumnState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder2_GetDetailsEx_Proxy( 
    IShellFolder2 * This,
     LPCITEMIDLIST pidl,
     const SHCOLUMNID *pscid,
     VARIANT *pv);


void __stdcall IShellFolder2_GetDetailsEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder2_GetDetailsOf_Proxy( 
    IShellFolder2 * This,
     LPCITEMIDLIST pidl,
     UINT iColumn,
     SHELLDETAILS *psd);


void __stdcall IShellFolder2_GetDetailsOf_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellFolder2_MapColumnToSCID_Proxy( 
    IShellFolder2 * This,
     UINT iColumn,
     SHCOLUMNID *pscid);


void __stdcall IShellFolder2_MapColumnToSCID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2140 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

#line 2146 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
typedef char *LPVIEWSETTINGS;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0197_0001
    {	FWF_AUTOARRANGE	= 0x1,
	FWF_ABBREVIATEDNAMES	= 0x2,
	FWF_SNAPTOGRID	= 0x4,
	FWF_OWNERDATA	= 0x8,
	FWF_BESTFITWINDOW	= 0x10,
	FWF_DESKTOP	= 0x20,
	FWF_SINGLESEL	= 0x40,
	FWF_NOSUBFOLDERS	= 0x80,
	FWF_TRANSPARENT	= 0x100,
	FWF_NOCLIENTEDGE	= 0x200,
	FWF_NOSCROLL	= 0x400,
	FWF_ALIGNLEFT	= 0x800,
	FWF_NOICONS	= 0x1000,
	FWF_SHOWSELALWAYS	= 0x2000,
	FWF_NOVISIBLE	= 0x4000,
	FWF_SINGLECLICKACTIVATE	= 0x8000,
	FWF_NOWEBVIEW	= 0x10000,
	FWF_HIDEFILENAMES	= 0x20000,
	FWF_CHECKSELECT	= 0x40000
    } 	FOLDERFLAGS;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0197_0002
    {	FVM_FIRST	= 1,
	FVM_ICON	= 1,
	FVM_SMALLICON	= 2,
	FVM_LIST	= 3,
	FVM_DETAILS	= 4,
	FVM_THUMBNAIL	= 5,
	FVM_TILE	= 6,
	FVM_THUMBSTRIP	= 7,
	FVM_LAST	= 7
    } 	FOLDERVIEWMODE;

typedef  struct __MIDL___MIDL_itf_shobjidl_0197_0003
    {
    UINT ViewMode;
    UINT fFlags;
    } 	FOLDERSETTINGS;

typedef FOLDERSETTINGS *LPFOLDERSETTINGS;

typedef const FOLDERSETTINGS *LPCFOLDERSETTINGS;

typedef FOLDERSETTINGS *PFOLDERSETTINGS;












typedef UINT SVSIF;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0197_0004
    {	SVGIO_BACKGROUND	= 0,
	SVGIO_SELECTION	= 0x1,
	SVGIO_ALLVIEW	= 0x2,
	SVGIO_CHECKED	= 0x3,
	SVGIO_TYPE_MASK	= 0xf,
	SVGIO_FLAG_VIEWORDER	= 0x80000000
    } 	SVGIO;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0197_0005
    {	SVUIA_DEACTIVATE	= 0,
	SVUIA_ACTIVATE_NOFOCUS	= 1,
	SVUIA_ACTIVATE_FOCUS	= 2,
	SVUIA_INPLACEACTIVATE	= 3
    } 	SVUIA_STATUS;








#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2235 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
typedef LPFNADDPROPSHEETPAGE LPFNSVADDPROPSHEETPAGE;
#line 2237 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0197_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0197_v0_0_s_ifspec;





 

typedef IShellView *LPSHELLVIEW;


extern "C" const IID IID_IShellView;


    
    struct __declspec(uuid("000214E3-0000-0000-C000-000000000046")) __declspec(novtable)
    IShellView : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             MSG *pmsg) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
        virtual HRESULT __stdcall UIActivate( 
             UINT uState) = 0;
        
        virtual HRESULT __stdcall Refresh( void) = 0;
        
        virtual HRESULT __stdcall CreateViewWindow( 
             IShellView *psvPrevious,
             LPCFOLDERSETTINGS pfs,
             IShellBrowser *psb,
             RECT *prcView,
             HWND *phWnd) = 0;
        
        virtual HRESULT __stdcall DestroyViewWindow( void) = 0;
        
        virtual HRESULT __stdcall GetCurrentInfo( 
             LPFOLDERSETTINGS pfs) = 0;
        
        virtual  HRESULT __stdcall AddPropertySheetPages( 
             DWORD dwReserved,
             LPFNSVADDPROPSHEETPAGE pfn,
             LPARAM lparam) = 0;
        
        virtual HRESULT __stdcall SaveViewState( void) = 0;
        
        virtual HRESULT __stdcall SelectItem( 
             LPCITEMIDLIST pidlItem,
             SVSIF uFlags) = 0;
        
        virtual HRESULT __stdcall GetItemObject( 
             UINT uItem,
             const IID & riid,
             void **ppv) = 0;
        
    };
    













































































































































#line 2443 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellView_TranslateAccelerator_Proxy( 
    IShellView * This,
     MSG *pmsg);


void __stdcall IShellView_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_EnableModeless_Proxy( 
    IShellView * This,
     BOOL fEnable);


void __stdcall IShellView_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_UIActivate_Proxy( 
    IShellView * This,
     UINT uState);


void __stdcall IShellView_UIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_Refresh_Proxy( 
    IShellView * This);


void __stdcall IShellView_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_CreateViewWindow_Proxy( 
    IShellView * This,
     IShellView *psvPrevious,
     LPCFOLDERSETTINGS pfs,
     IShellBrowser *psb,
     RECT *prcView,
     HWND *phWnd);


void __stdcall IShellView_CreateViewWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_DestroyViewWindow_Proxy( 
    IShellView * This);


void __stdcall IShellView_DestroyViewWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_GetCurrentInfo_Proxy( 
    IShellView * This,
     LPFOLDERSETTINGS pfs);


void __stdcall IShellView_GetCurrentInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellView_AddPropertySheetPages_Proxy( 
    IShellView * This,
     DWORD dwReserved,
     LPFNSVADDPROPSHEETPAGE pfn,
     LPARAM lparam);


void __stdcall IShellView_AddPropertySheetPages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_SaveViewState_Proxy( 
    IShellView * This);


void __stdcall IShellView_SaveViewState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_SelectItem_Proxy( 
    IShellView * This,
     LPCITEMIDLIST pidlItem,
     SVSIF uFlags);


void __stdcall IShellView_SelectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView_GetItemObject_Proxy( 
    IShellView * This,
     UINT uItem,
     const IID & riid,
     void **ppv);


void __stdcall IShellView_GetItemObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2586 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 

typedef GUID SHELLVIEWID;



#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 2599 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
typedef struct _SV2CVW2_PARAMS
    {
    DWORD cbSize;
    IShellView *psvPrev;
    LPCFOLDERSETTINGS pfs;
    IShellBrowser *psbOwner;
    RECT *prcView;
    const SHELLVIEWID *pvid;
    HWND hwndView;
    } 	SV2CVW2_PARAMS;

typedef struct _SV2CVW2_PARAMS *LPSV2CVW2_PARAMS;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 2613 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const IID IID_IShellView2;


    
    struct __declspec(uuid("88E39E80-3578-11CF-AE69-08002B2E1262")) __declspec(novtable)
    IShellView2 : public IShellView
    {
    public:
        virtual HRESULT __stdcall GetView( 
             SHELLVIEWID *pvid,
             ULONG uView) = 0;
        
        virtual HRESULT __stdcall CreateViewWindow2( 
             LPSV2CVW2_PARAMS lpParams) = 0;
        
        virtual HRESULT __stdcall HandleRename( 
             LPCITEMIDLIST pidlNew) = 0;
        
        virtual HRESULT __stdcall SelectAndPositionItem( 
             LPCITEMIDLIST pidlItem,
             UINT uFlags,
             POINT *ppt) = 0;
        
    };
    













































































































































































#line 2813 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellView2_GetView_Proxy( 
    IShellView2 * This,
     SHELLVIEWID *pvid,
     ULONG uView);


void __stdcall IShellView2_GetView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView2_CreateViewWindow2_Proxy( 
    IShellView2 * This,
     LPSV2CVW2_PARAMS lpParams);


void __stdcall IShellView2_CreateViewWindow2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView2_HandleRename_Proxy( 
    IShellView2 * This,
     LPCITEMIDLIST pidlNew);


void __stdcall IShellView2_HandleRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellView2_SelectAndPositionItem_Proxy( 
    IShellView2 * This,
     LPCITEMIDLIST pidlItem,
     UINT uFlags,
     POINT *ppt);


void __stdcall IShellView2_SelectAndPositionItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2869 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IFolderView;


    
    struct __declspec(uuid("cde725b0-ccc9-4519-917e-325d72fab4ce")) __declspec(novtable)
    IFolderView : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentViewMode( 
             UINT *pViewMode) = 0;
        
        virtual HRESULT __stdcall SetCurrentViewMode( 
             UINT ViewMode) = 0;
        
        virtual HRESULT __stdcall GetFolder( 
             const IID & riid,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall Item( 
             int iItemIndex,
             LPITEMIDLIST *ppidl) = 0;
        
        virtual HRESULT __stdcall ItemCount( 
             UINT uFlags,
             int *pcItems) = 0;
        
        virtual HRESULT __stdcall Items( 
             UINT uFlags,
             const IID & riid,
             void **ppv) = 0;
        
        virtual HRESULT __stdcall GetSelectionMarkedItem( 
             int *piItem) = 0;
        
        virtual HRESULT __stdcall GetFocusedItem( 
             int *piItem) = 0;
        
        virtual HRESULT __stdcall GetItemPosition( 
             LPCITEMIDLIST pidl,
             POINT *ppt) = 0;
        
        virtual HRESULT __stdcall GetSpacing( 
             POINT *ppt) = 0;
        
        virtual HRESULT __stdcall GetDefaultSpacing( 
             POINT *ppt) = 0;
        
        virtual HRESULT __stdcall GetAutoArrange( void) = 0;
        
        virtual HRESULT __stdcall SelectItem( 
             int iItem,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall SelectAndPositionItems( 
             UINT cidl,
             LPCITEMIDLIST *apidl,
             POINT *apt,
             DWORD dwFlags) = 0;
        
    };
    






















































































































































#line 3090 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IFolderView_GetCurrentViewMode_Proxy( 
    IFolderView * This,
     UINT *pViewMode);


void __stdcall IFolderView_GetCurrentViewMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_SetCurrentViewMode_Proxy( 
    IFolderView * This,
     UINT ViewMode);


void __stdcall IFolderView_SetCurrentViewMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_GetFolder_Proxy( 
    IFolderView * This,
     const IID & riid,
     void **ppv);


void __stdcall IFolderView_GetFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_Item_Proxy( 
    IFolderView * This,
     int iItemIndex,
     LPITEMIDLIST *ppidl);


void __stdcall IFolderView_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_ItemCount_Proxy( 
    IFolderView * This,
     UINT uFlags,
     int *pcItems);


void __stdcall IFolderView_ItemCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_Items_Proxy( 
    IFolderView * This,
     UINT uFlags,
     const IID & riid,
     void **ppv);


void __stdcall IFolderView_Items_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_GetSelectionMarkedItem_Proxy( 
    IFolderView * This,
     int *piItem);


void __stdcall IFolderView_GetSelectionMarkedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_GetFocusedItem_Proxy( 
    IFolderView * This,
     int *piItem);


void __stdcall IFolderView_GetFocusedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_GetItemPosition_Proxy( 
    IFolderView * This,
     LPCITEMIDLIST pidl,
     POINT *ppt);


void __stdcall IFolderView_GetItemPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_GetSpacing_Proxy( 
    IFolderView * This,
     POINT *ppt);


void __stdcall IFolderView_GetSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_GetDefaultSpacing_Proxy( 
    IFolderView * This,
     POINT *ppt);


void __stdcall IFolderView_GetDefaultSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_GetAutoArrange_Proxy( 
    IFolderView * This);


void __stdcall IFolderView_GetAutoArrange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_SelectItem_Proxy( 
    IFolderView * This,
     int iItem,
     DWORD dwFlags);


void __stdcall IFolderView_SelectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderView_SelectAndPositionItems_Proxy( 
    IFolderView * This,
     UINT cidl,
     LPCITEMIDLIST *apidl,
     POINT *apt,
     DWORD dwFlags);


void __stdcall IFolderView_SelectAndPositionItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3272 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 







extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0200_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0200_v0_0_s_ifspec;





 


extern "C" const IID IID_IFolderFilterSite;


    
    struct __declspec(uuid("C0A651F5-B48B-11d2-B5ED-006097C686F6")) __declspec(novtable)
    IFolderFilterSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetFilter( 
             IUnknown *punk) = 0;
        
    };
    


















































#line 3357 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IFolderFilterSite_SetFilter_Proxy( 
    IFolderFilterSite * This,
     IUnknown *punk);


void __stdcall IFolderFilterSite_SetFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3374 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IFolderFilter;


    
    struct __declspec(uuid("9CC22886-DC8E-11d2-B1D0-00C04F8EEB3E")) __declspec(novtable)
    IFolderFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ShouldShow( 
             IShellFolder *psf,
             LPCITEMIDLIST pidlFolder,
             LPCITEMIDLIST pidlItem) = 0;
        
        virtual HRESULT __stdcall GetEnumFlags( 
             IShellFolder *psf,
             LPCITEMIDLIST pidlFolder,
             HWND *phwnd,
             DWORD *pgrfFlags) = 0;
        
    };
    






























































#line 3467 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IFolderFilter_ShouldShow_Proxy( 
    IFolderFilter * This,
     IShellFolder *psf,
     LPCITEMIDLIST pidlFolder,
     LPCITEMIDLIST pidlItem);


void __stdcall IFolderFilter_ShouldShow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFolderFilter_GetEnumFlags_Proxy( 
    IFolderFilter * This,
     IShellFolder *psf,
     LPCITEMIDLIST pidlFolder,
     HWND *phwnd,
     DWORD *pgrfFlags);


void __stdcall IFolderFilter_GetEnumFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3501 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commctrl.h"














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3537 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
typedef LPTBBUTTON LPTBBUTTONSB;
#line 3539 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"


extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0202_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0202_v0_0_s_ifspec;





 


extern "C" const IID IID_IShellBrowser;


    
    struct __declspec(uuid("000214E2-0000-0000-C000-000000000046")) __declspec(novtable)
    IShellBrowser : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenusSB( 
             HMENU hmenuShared,
             LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;
        
        virtual HRESULT __stdcall SetMenuSB( 
             HMENU hmenuShared,
             HOLEMENU holemenuRes,
             HWND hwndActiveObject) = 0;
        
        virtual HRESULT __stdcall RemoveMenusSB( 
             HMENU hmenuShared) = 0;
        
        virtual HRESULT __stdcall SetStatusTextSB( 
             LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall EnableModelessSB( 
             BOOL fEnable) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorSB( 
             MSG *pmsg,
             WORD wID) = 0;
        
        virtual HRESULT __stdcall BrowseObject( 
             LPCITEMIDLIST pidl,
             UINT wFlags) = 0;
        
        virtual HRESULT __stdcall GetViewStateStream( 
             DWORD grfMode,
             IStream **ppStrm) = 0;
        
        virtual HRESULT __stdcall GetControlWindow( 
             UINT id,
             HWND *phwnd) = 0;
        
        virtual  HRESULT __stdcall SendControlMsg( 
             UINT id,
             UINT uMsg,
             WPARAM wParam,
             LPARAM lParam,
             LRESULT *pret) = 0;
        
        virtual HRESULT __stdcall QueryActiveShellView( 
             IShellView **ppshv) = 0;
        
        virtual HRESULT __stdcall OnViewWindowActive( 
             IShellView *pshv) = 0;
        
        virtual  HRESULT __stdcall SetToolbarItems( 
             LPTBBUTTONSB lpButtons,
             UINT nButtons,
             UINT uFlags) = 0;
        
    };
    


































































































































































#line 3776 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellBrowser_InsertMenusSB_Proxy( 
    IShellBrowser * This,
     HMENU hmenuShared,
     LPOLEMENUGROUPWIDTHS lpMenuWidths);


void __stdcall IShellBrowser_InsertMenusSB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_SetMenuSB_Proxy( 
    IShellBrowser * This,
     HMENU hmenuShared,
     HOLEMENU holemenuRes,
     HWND hwndActiveObject);


void __stdcall IShellBrowser_SetMenuSB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_RemoveMenusSB_Proxy( 
    IShellBrowser * This,
     HMENU hmenuShared);


void __stdcall IShellBrowser_RemoveMenusSB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_SetStatusTextSB_Proxy( 
    IShellBrowser * This,
     LPCOLESTR pszStatusText);


void __stdcall IShellBrowser_SetStatusTextSB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_EnableModelessSB_Proxy( 
    IShellBrowser * This,
     BOOL fEnable);


void __stdcall IShellBrowser_EnableModelessSB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_TranslateAcceleratorSB_Proxy( 
    IShellBrowser * This,
     MSG *pmsg,
     WORD wID);


void __stdcall IShellBrowser_TranslateAcceleratorSB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_BrowseObject_Proxy( 
    IShellBrowser * This,
     LPCITEMIDLIST pidl,
     UINT wFlags);


void __stdcall IShellBrowser_BrowseObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_GetViewStateStream_Proxy( 
    IShellBrowser * This,
     DWORD grfMode,
     IStream **ppStrm);


void __stdcall IShellBrowser_GetViewStateStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_GetControlWindow_Proxy( 
    IShellBrowser * This,
     UINT id,
     HWND *phwnd);


void __stdcall IShellBrowser_GetControlWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellBrowser_SendControlMsg_Proxy( 
    IShellBrowser * This,
     UINT id,
     UINT uMsg,
     WPARAM wParam,
     LPARAM lParam,
     LRESULT *pret);


void __stdcall IShellBrowser_SendControlMsg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_QueryActiveShellView_Proxy( 
    IShellBrowser * This,
     IShellView **ppshv);


void __stdcall IShellBrowser_QueryActiveShellView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellBrowser_OnViewWindowActive_Proxy( 
    IShellBrowser * This,
     IShellView *pshv);


void __stdcall IShellBrowser_OnViewWindowActive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IShellBrowser_SetToolbarItems_Proxy( 
    IShellBrowser * This,
     LPTBBUTTONSB lpButtons,
     UINT nButtons,
     UINT uFlags);


void __stdcall IShellBrowser_SetToolbarItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3950 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IShellBrowser *LPSHELLBROWSER;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0203_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0203_v0_0_s_ifspec;





 


extern "C" const IID IID_IProfferService;


    
    struct __declspec(uuid("cb728b20-f786-11ce-92ad-00aa00a74cd0")) __declspec(novtable)
    IProfferService : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ProfferService( 
             const GUID & rguidService,
             IServiceProvider *psp,
             DWORD *pdwCookie) = 0;
        
        virtual HRESULT __stdcall RevokeService( 
             DWORD dwCookie) = 0;
        
    };
    



























































#line 4047 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IProfferService_ProfferService_Proxy( 
    IProfferService * This,
     const GUID & rguidService,
     IServiceProvider *psp,
     DWORD *pdwCookie);


void __stdcall IProfferService_ProfferService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IProfferService_RevokeService_Proxy( 
    IProfferService * This,
     DWORD dwCookie);


void __stdcall IProfferService_RevokeService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4078 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 


typedef  
enum __MIDL___MIDL_itf_shobjidl_0204_0001
    {	PUIFNF_DEFAULT	= 0,
	PUIFNF_MNEMONIC	= 0x1
    } 	PROPERTYUI_NAME_FLAGS;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0204_0002
    {	PUIF_DEFAULT	= 0,
	PUIF_RIGHTALIGN	= 0x1,
	PUIF_NOLABELININFOTIP	= 0x2
    } 	PROPERTYUI_FLAGS;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0204_0003
    {	PUIFFDF_DEFAULT	= 0,
	PUIFFDF_RIGHTTOLEFT	= 0x1,
	PUIFFDF_SHORTFORMAT	= 0x2,
	PUIFFDF_NOTIME	= 0x4,
	PUIFFDF_FRIENDLYDATE	= 0x8,
	PUIFFDF_NOUNITS	= 0x10
    } 	PROPERTYUI_FORMAT_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0204_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0204_v0_0_s_ifspec;





 


extern "C" const IID IID_IPropertyUI;


    
    struct __declspec(uuid("757a7d9f-919a-4118-99d7-dbb208c8cc66")) __declspec(novtable)
    IPropertyUI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParsePropertyName( 
             LPCWSTR pszName,
             FMTID *pfmtid,
             PROPID *ppid,
             ULONG *pchEaten) = 0;
        
        virtual HRESULT __stdcall GetCannonicalName( 
             const IID & fmtid,
             PROPID pid,
             LPWSTR pwszText,
             DWORD cchText) = 0;
        
        virtual HRESULT __stdcall GetDisplayName( 
             const IID & fmtid,
             PROPID pid,
             PROPERTYUI_NAME_FLAGS flags,
             LPWSTR pwszText,
             DWORD cchText) = 0;
        
        virtual HRESULT __stdcall GetPropertyDescription( 
             const IID & fmtid,
             PROPID pid,
             LPWSTR pwszText,
             DWORD cchText) = 0;
        
        virtual HRESULT __stdcall GetDefaultWidth( 
             const IID & fmtid,
             PROPID pid,
             ULONG *pcxChars) = 0;
        
        virtual HRESULT __stdcall GetFlags( 
             const IID & fmtid,
             PROPID pid,
             PROPERTYUI_FLAGS *pFlags) = 0;
        
        virtual HRESULT __stdcall FormatForDisplay( 
             const IID & fmtid,
             PROPID pid,
             const PROPVARIANT *pvar,
             PROPERTYUI_FORMAT_FLAGS flags,
             LPWSTR pwszText,
             DWORD cchText) = 0;
        
        virtual HRESULT __stdcall GetHelpInfo( 
             const IID & fmtid,
             PROPID pid,
             LPWSTR pwszHelpFile,
             DWORD cch,
             UINT *puHelpID) = 0;
        
    };
    





























































































































#line 4305 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IPropertyUI_ParsePropertyName_Proxy( 
    IPropertyUI * This,
     LPCWSTR pszName,
     FMTID *pfmtid,
     PROPID *ppid,
     ULONG *pchEaten);


void __stdcall IPropertyUI_ParsePropertyName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyUI_GetCannonicalName_Proxy( 
    IPropertyUI * This,
     const IID & fmtid,
     PROPID pid,
     LPWSTR pwszText,
     DWORD cchText);


void __stdcall IPropertyUI_GetCannonicalName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyUI_GetDisplayName_Proxy( 
    IPropertyUI * This,
     const IID & fmtid,
     PROPID pid,
     PROPERTYUI_NAME_FLAGS flags,
     LPWSTR pwszText,
     DWORD cchText);


void __stdcall IPropertyUI_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyUI_GetPropertyDescription_Proxy( 
    IPropertyUI * This,
     const IID & fmtid,
     PROPID pid,
     LPWSTR pwszText,
     DWORD cchText);


void __stdcall IPropertyUI_GetPropertyDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyUI_GetDefaultWidth_Proxy( 
    IPropertyUI * This,
     const IID & fmtid,
     PROPID pid,
     ULONG *pcxChars);


void __stdcall IPropertyUI_GetDefaultWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyUI_GetFlags_Proxy( 
    IPropertyUI * This,
     const IID & fmtid,
     PROPID pid,
     PROPERTYUI_FLAGS *pFlags);


void __stdcall IPropertyUI_GetFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyUI_FormatForDisplay_Proxy( 
    IPropertyUI * This,
     const IID & fmtid,
     PROPID pid,
     const PROPVARIANT *pvar,
     PROPERTYUI_FORMAT_FLAGS flags,
     LPWSTR pwszText,
     DWORD cchText);


void __stdcall IPropertyUI_FormatForDisplay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyUI_GetHelpInfo_Proxy( 
    IPropertyUI * This,
     const IID & fmtid,
     PROPID pid,
     LPWSTR pwszHelpFile,
     DWORD cch,
     UINT *puHelpID);


void __stdcall IPropertyUI_GetHelpInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4432 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 




extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0205_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0205_v0_0_s_ifspec;





 


extern "C" const IID IID_ICategoryProvider;


    
    struct __declspec(uuid("9af64809-5864-4c26-a720-c1f78c086ee3")) __declspec(novtable)
    ICategoryProvider : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall CanCategorizeOnSCID( 
            SHCOLUMNID *pscid) = 0;
        
        virtual  HRESULT __stdcall GetDefaultCategory( 
            GUID *pguid,
            SHCOLUMNID *pscid) = 0;
        
        virtual  HRESULT __stdcall GetCategoryForSCID( 
            SHCOLUMNID *pscid,
            GUID *pguid) = 0;
        
        virtual  HRESULT __stdcall EnumCategories( 
            IEnumGUID **penum) = 0;
        
        virtual  HRESULT __stdcall GetCategoryName( 
            GUID *pguid,
            LPWSTR pszName,
            UINT cch) = 0;
        
        virtual  HRESULT __stdcall CreateCategory( 
            GUID *pguid,
            const IID & riid,
             void **ppv) = 0;
        
    };
    



























































































#line 4576 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 HRESULT __stdcall ICategoryProvider_CanCategorizeOnSCID_Proxy( 
    ICategoryProvider * This,
    SHCOLUMNID *pscid);


void __stdcall ICategoryProvider_CanCategorizeOnSCID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategoryProvider_GetDefaultCategory_Proxy( 
    ICategoryProvider * This,
    GUID *pguid,
    SHCOLUMNID *pscid);


void __stdcall ICategoryProvider_GetDefaultCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategoryProvider_GetCategoryForSCID_Proxy( 
    ICategoryProvider * This,
    SHCOLUMNID *pscid,
    GUID *pguid);


void __stdcall ICategoryProvider_GetCategoryForSCID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategoryProvider_EnumCategories_Proxy( 
    ICategoryProvider * This,
    IEnumGUID **penum);


void __stdcall ICategoryProvider_EnumCategories_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategoryProvider_GetCategoryName_Proxy( 
    ICategoryProvider * This,
    GUID *pguid,
    LPWSTR pszName,
    UINT cch);


void __stdcall ICategoryProvider_GetCategoryName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategoryProvider_CreateCategory_Proxy( 
    ICategoryProvider * This,
    GUID *pguid,
    const IID & riid,
     void **ppv);


void __stdcall ICategoryProvider_CreateCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4659 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef  
enum __MIDL___MIDL_itf_shobjidl_0206_0001
    {	CATINFO_NORMAL	= 0,
	CATINFO_COLLAPSED	= 0x1,
	CATINFO_HIDDEN	= 0x2
    } 	CATEGORYINFO_FLAGS;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0206_0002
    {	CATSORT_DEFAULT	= 0,
	CATSORT_NAME	= 0x1
    } 	CATSORT_FLAGS;

typedef  struct __MIDL___MIDL_itf_shobjidl_0206_0003
    {
    CATEGORYINFO_FLAGS cif;
    WCHAR wszName[ 260 ];
    } 	CATEGORY_INFO;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0206_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0206_v0_0_s_ifspec;





 


extern "C" const IID IID_ICategorizer;


    
    struct __declspec(uuid("a3b14589-9174-49a8-89a3-06a1ae2b9ba7")) __declspec(novtable)
    ICategorizer : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetDescription( 
            LPWSTR pszDesc,
            UINT cch) = 0;
        
        virtual  HRESULT __stdcall GetCategory( 
             UINT cidl,
             LPCITEMIDLIST *apidl,
             DWORD *rgCategoryIds) = 0;
        
        virtual  HRESULT __stdcall GetCategoryInfo( 
            DWORD dwCategoryId,
            CATEGORY_INFO *pci) = 0;
        
        virtual  HRESULT __stdcall CompareCategory( 
            CATSORT_FLAGS csfFlags,
            DWORD dwCategoryId1,
            DWORD dwCategoryId2) = 0;
        
    };
    













































































#line 4801 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 HRESULT __stdcall ICategorizer_GetDescription_Proxy( 
    ICategorizer * This,
    LPWSTR pszDesc,
    UINT cch);


void __stdcall ICategorizer_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategorizer_GetCategory_Proxy( 
    ICategorizer * This,
     UINT cidl,
     LPCITEMIDLIST *apidl,
     DWORD *rgCategoryIds);


void __stdcall ICategorizer_GetCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategorizer_GetCategoryInfo_Proxy( 
    ICategorizer * This,
    DWORD dwCategoryId,
    CATEGORY_INFO *pci);


void __stdcall ICategorizer_GetCategoryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ICategorizer_CompareCategory_Proxy( 
    ICategorizer * This,
    CATSORT_FLAGS csfFlags,
    DWORD dwCategoryId1,
    DWORD dwCategoryId2);


void __stdcall ICategorizer_CompareCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4860 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

#line 4866 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"




#line 4871 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
typedef  
enum __MIDL___MIDL_itf_shobjidl_0207_0001
    {	SLR_NO_UI	= 0x1,
	SLR_ANY_MATCH	= 0x2,
	SLR_UPDATE	= 0x4,
	SLR_NOUPDATE	= 0x8,
	SLR_NOSEARCH	= 0x10,
	SLR_NOTRACK	= 0x20,
	SLR_NOLINKINFO	= 0x40,
	SLR_INVOKE_MSI	= 0x80,
	SLR_NO_UI_WITH_MSG_PUMP	= 0x101
    } 	SLR_FLAGS;

typedef  
enum __MIDL___MIDL_itf_shobjidl_0207_0002
    {	SLGP_SHORTPATH	= 0x1,
	SLGP_UNCPRIORITY	= 0x2,
	SLGP_RAWPATH	= 0x4
    } 	SLGP_FLAGS;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0207_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0207_v0_0_s_ifspec;





 


extern "C" const IID IID_IShellLinkA;


    
    struct __declspec(uuid("000214EE-0000-0000-C000-000000000046")) __declspec(novtable)
    IShellLinkA : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPath( 
             LPSTR pszFile,
             int cch,
             WIN32_FIND_DATAA *pfd,
             DWORD fFlags) = 0;
        
        virtual HRESULT __stdcall GetIDList( 
             LPITEMIDLIST *ppidl) = 0;
        
        virtual HRESULT __stdcall SetIDList( 
             LPCITEMIDLIST pidl) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
             LPSTR pszName,
             int cch) = 0;
        
        virtual HRESULT __stdcall SetDescription( 
             LPCSTR pszName) = 0;
        
        virtual HRESULT __stdcall GetWorkingDirectory( 
             LPSTR pszDir,
             int cch) = 0;
        
        virtual HRESULT __stdcall SetWorkingDirectory( 
             LPCSTR pszDir) = 0;
        
        virtual HRESULT __stdcall GetArguments( 
             LPSTR pszArgs,
             int cch) = 0;
        
        virtual HRESULT __stdcall SetArguments( 
             LPCSTR pszArgs) = 0;
        
        virtual HRESULT __stdcall GetHotkey( 
             WORD *pwHotkey) = 0;
        
        virtual HRESULT __stdcall SetHotkey( 
             WORD wHotkey) = 0;
        
        virtual HRESULT __stdcall GetShowCmd( 
             int *piShowCmd) = 0;
        
        virtual HRESULT __stdcall SetShowCmd( 
             int iShowCmd) = 0;
        
        virtual HRESULT __stdcall GetIconLocation( 
             LPSTR pszIconPath,
             int cch,
             int *piIcon) = 0;
        
        virtual HRESULT __stdcall SetIconLocation( 
             LPCSTR pszIconPath,
             int iIcon) = 0;
        
        virtual HRESULT __stdcall SetRelativePath( 
             LPCSTR pszPathRel,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall Resolve( 
             HWND hwnd,
             DWORD fFlags) = 0;
        
        virtual HRESULT __stdcall SetPath( 
             LPCSTR pszFile) = 0;
        
    };
    




















































































































































































#line 5159 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellLinkA_GetPath_Proxy( 
    IShellLinkA * This,
     LPSTR pszFile,
     int cch,
     WIN32_FIND_DATAA *pfd,
     DWORD fFlags);


void __stdcall IShellLinkA_GetPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_GetIDList_Proxy( 
    IShellLinkA * This,
     LPITEMIDLIST *ppidl);


void __stdcall IShellLinkA_GetIDList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetIDList_Proxy( 
    IShellLinkA * This,
     LPCITEMIDLIST pidl);


void __stdcall IShellLinkA_SetIDList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_GetDescription_Proxy( 
    IShellLinkA * This,
     LPSTR pszName,
     int cch);


void __stdcall IShellLinkA_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetDescription_Proxy( 
    IShellLinkA * This,
     LPCSTR pszName);


void __stdcall IShellLinkA_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_GetWorkingDirectory_Proxy( 
    IShellLinkA * This,
     LPSTR pszDir,
     int cch);


void __stdcall IShellLinkA_GetWorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetWorkingDirectory_Proxy( 
    IShellLinkA * This,
     LPCSTR pszDir);


void __stdcall IShellLinkA_SetWorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_GetArguments_Proxy( 
    IShellLinkA * This,
     LPSTR pszArgs,
     int cch);


void __stdcall IShellLinkA_GetArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetArguments_Proxy( 
    IShellLinkA * This,
     LPCSTR pszArgs);


void __stdcall IShellLinkA_SetArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_GetHotkey_Proxy( 
    IShellLinkA * This,
     WORD *pwHotkey);


void __stdcall IShellLinkA_GetHotkey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetHotkey_Proxy( 
    IShellLinkA * This,
     WORD wHotkey);


void __stdcall IShellLinkA_SetHotkey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_GetShowCmd_Proxy( 
    IShellLinkA * This,
     int *piShowCmd);


void __stdcall IShellLinkA_GetShowCmd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetShowCmd_Proxy( 
    IShellLinkA * This,
     int iShowCmd);


void __stdcall IShellLinkA_SetShowCmd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_GetIconLocation_Proxy( 
    IShellLinkA * This,
     LPSTR pszIconPath,
     int cch,
     int *piIcon);


void __stdcall IShellLinkA_GetIconLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetIconLocation_Proxy( 
    IShellLinkA * This,
     LPCSTR pszIconPath,
     int iIcon);


void __stdcall IShellLinkA_SetIconLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetRelativePath_Proxy( 
    IShellLinkA * This,
     LPCSTR pszPathRel,
     DWORD dwReserved);


void __stdcall IShellLinkA_SetRelativePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_Resolve_Proxy( 
    IShellLinkA * This,
     HWND hwnd,
     DWORD fFlags);


void __stdcall IShellLinkA_Resolve_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkA_SetPath_Proxy( 
    IShellLinkA * This,
     LPCSTR pszFile);


void __stdcall IShellLinkA_SetPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5391 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IShellLinkW;


    
    struct __declspec(uuid("000214F9-0000-0000-C000-000000000046")) __declspec(novtable)
    IShellLinkW : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPath( 
             LPWSTR pszFile,
             int cch,
             WIN32_FIND_DATAW *pfd,
             DWORD fFlags) = 0;
        
        virtual HRESULT __stdcall GetIDList( 
             LPITEMIDLIST *ppidl) = 0;
        
        virtual HRESULT __stdcall SetIDList( 
             LPCITEMIDLIST pidl) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
             LPWSTR pszName,
            int cch) = 0;
        
        virtual HRESULT __stdcall SetDescription( 
             LPCWSTR pszName) = 0;
        
        virtual HRESULT __stdcall GetWorkingDirectory( 
             LPWSTR pszDir,
            int cch) = 0;
        
        virtual HRESULT __stdcall SetWorkingDirectory( 
             LPCWSTR pszDir) = 0;
        
        virtual HRESULT __stdcall GetArguments( 
             LPWSTR pszArgs,
            int cch) = 0;
        
        virtual HRESULT __stdcall SetArguments( 
             LPCWSTR pszArgs) = 0;
        
        virtual HRESULT __stdcall GetHotkey( 
             WORD *pwHotkey) = 0;
        
        virtual HRESULT __stdcall SetHotkey( 
             WORD wHotkey) = 0;
        
        virtual HRESULT __stdcall GetShowCmd( 
             int *piShowCmd) = 0;
        
        virtual HRESULT __stdcall SetShowCmd( 
             int iShowCmd) = 0;
        
        virtual HRESULT __stdcall GetIconLocation( 
             LPWSTR pszIconPath,
             int cch,
             int *piIcon) = 0;
        
        virtual HRESULT __stdcall SetIconLocation( 
             LPCWSTR pszIconPath,
             int iIcon) = 0;
        
        virtual HRESULT __stdcall SetRelativePath( 
             LPCWSTR pszPathRel,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall Resolve( 
             HWND hwnd,
             DWORD fFlags) = 0;
        
        virtual HRESULT __stdcall SetPath( 
             LPCWSTR pszFile) = 0;
        
    };
    




















































































































































































#line 5656 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellLinkW_GetPath_Proxy( 
    IShellLinkW * This,
     LPWSTR pszFile,
     int cch,
     WIN32_FIND_DATAW *pfd,
     DWORD fFlags);


void __stdcall IShellLinkW_GetPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_GetIDList_Proxy( 
    IShellLinkW * This,
     LPITEMIDLIST *ppidl);


void __stdcall IShellLinkW_GetIDList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetIDList_Proxy( 
    IShellLinkW * This,
     LPCITEMIDLIST pidl);


void __stdcall IShellLinkW_SetIDList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_GetDescription_Proxy( 
    IShellLinkW * This,
     LPWSTR pszName,
    int cch);


void __stdcall IShellLinkW_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetDescription_Proxy( 
    IShellLinkW * This,
     LPCWSTR pszName);


void __stdcall IShellLinkW_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_GetWorkingDirectory_Proxy( 
    IShellLinkW * This,
     LPWSTR pszDir,
    int cch);


void __stdcall IShellLinkW_GetWorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetWorkingDirectory_Proxy( 
    IShellLinkW * This,
     LPCWSTR pszDir);


void __stdcall IShellLinkW_SetWorkingDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_GetArguments_Proxy( 
    IShellLinkW * This,
     LPWSTR pszArgs,
    int cch);


void __stdcall IShellLinkW_GetArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetArguments_Proxy( 
    IShellLinkW * This,
     LPCWSTR pszArgs);


void __stdcall IShellLinkW_SetArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_GetHotkey_Proxy( 
    IShellLinkW * This,
     WORD *pwHotkey);


void __stdcall IShellLinkW_GetHotkey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetHotkey_Proxy( 
    IShellLinkW * This,
     WORD wHotkey);


void __stdcall IShellLinkW_SetHotkey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_GetShowCmd_Proxy( 
    IShellLinkW * This,
     int *piShowCmd);


void __stdcall IShellLinkW_GetShowCmd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetShowCmd_Proxy( 
    IShellLinkW * This,
     int iShowCmd);


void __stdcall IShellLinkW_SetShowCmd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_GetIconLocation_Proxy( 
    IShellLinkW * This,
     LPWSTR pszIconPath,
     int cch,
     int *piIcon);


void __stdcall IShellLinkW_GetIconLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetIconLocation_Proxy( 
    IShellLinkW * This,
     LPCWSTR pszIconPath,
     int iIcon);


void __stdcall IShellLinkW_SetIconLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetRelativePath_Proxy( 
    IShellLinkW * This,
     LPCWSTR pszPathRel,
     DWORD dwReserved);


void __stdcall IShellLinkW_SetRelativePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_Resolve_Proxy( 
    IShellLinkW * This,
     HWND hwnd,
     DWORD fFlags);


void __stdcall IShellLinkW_Resolve_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellLinkW_SetPath_Proxy( 
    IShellLinkW * This,
     LPCWSTR pszFile);


void __stdcall IShellLinkW_SetPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5888 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 

 
enum __MIDL_IActionProgressDialog_0001
    {	SPINITF_NORMAL	= 0,
	SPINITF_MODAL	= 0x1,
	SPINITF_NOMINIMIZE	= 0x8
    } ;
typedef DWORD SPINITF;


extern "C" const IID IID_IActionProgressDialog;


    
    struct __declspec(uuid("49ff1172-eadc-446d-9285-156453a6431c")) __declspec(novtable)
    IActionProgressDialog : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Initialize( 
             SPINITF flags,
             LPCWSTR pszTitle,
             LPCWSTR pszCancel) = 0;
        
        virtual HRESULT __stdcall Stop( void) = 0;
        
    };
    


























































#line 5981 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IActionProgressDialog_Initialize_Proxy( 
    IActionProgressDialog * This,
     SPINITF flags,
     LPCWSTR pszTitle,
     LPCWSTR pszCancel);


void __stdcall IActionProgressDialog_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IActionProgressDialog_Stop_Proxy( 
    IActionProgressDialog * This);


void __stdcall IActionProgressDialog_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6011 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IHWEventHandler;


    
    struct __declspec(uuid("C1FB73D0-EC3A-4ba2-B512-8CDB9187B6D1")) __declspec(novtable)
    IHWEventHandler : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Initialize( 
             LPCWSTR pszParams) = 0;
        
        virtual HRESULT __stdcall HandleEvent( 
             LPCWSTR pszDeviceID,
             LPCWSTR pszAltDeviceID,
             LPCWSTR pszEventType) = 0;
        
        virtual HRESULT __stdcall HandleEventWithContent( 
             LPCWSTR pszDeviceID,
             LPCWSTR pszAltDeviceID,
             LPCWSTR pszEventType,
             LPCWSTR pszContentTypeHandler,
             IDataObject *pdataobject) = 0;
        
    };
    






































































#line 6116 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IHWEventHandler_Initialize_Proxy( 
    IHWEventHandler * This,
     LPCWSTR pszParams);


void __stdcall IHWEventHandler_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IHWEventHandler_HandleEvent_Proxy( 
    IHWEventHandler * This,
     LPCWSTR pszDeviceID,
     LPCWSTR pszAltDeviceID,
     LPCWSTR pszEventType);


void __stdcall IHWEventHandler_HandleEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IHWEventHandler_HandleEventWithContent_Proxy( 
    IHWEventHandler * This,
     LPCWSTR pszDeviceID,
     LPCWSTR pszAltDeviceID,
     LPCWSTR pszEventType,
     LPCWSTR pszContentTypeHandler,
     IDataObject *pdataobject);


void __stdcall IHWEventHandler_HandleEventWithContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 












extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0211_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0211_v0_0_s_ifspec;





 


extern "C" const IID IID_IQueryCancelAutoPlay;


    
    struct __declspec(uuid("DDEFE873-6997-4e68-BE26-39B633ADBE12")) __declspec(novtable)
    IQueryCancelAutoPlay : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AllowAutoPlay( 
             LPCWSTR pszPath,
             DWORD dwContentType,
             LPCWSTR pszLabel,
             DWORD dwSerialNumber) = 0;
        
    };
    





















































#line 6259 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IQueryCancelAutoPlay_AllowAutoPlay_Proxy( 
    IQueryCancelAutoPlay * This,
     LPCWSTR pszPath,
     DWORD dwContentType,
     LPCWSTR pszLabel,
     DWORD dwSerialNumber);


void __stdcall IQueryCancelAutoPlay_AllowAutoPlay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6279 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 

 
enum __MIDL_IActionProgress_0001
    {	SPBEGINF_NORMAL	= 0,
	SPBEGINF_AUTOTIME	= 0x2,
	SPBEGINF_NOPROGRESSBAR	= 0x10,
	SPBEGINF_MARQUEEPROGRESS	= 0x20
    } ;
typedef DWORD SPBEGINF;

typedef  
enum _SPACTION
    {	SPACTION_NONE	= 0,
	SPACTION_MOVING	= SPACTION_NONE + 1,
	SPACTION_COPYING	= SPACTION_MOVING + 1,
	SPACTION_RECYCLING	= SPACTION_COPYING + 1,
	SPACTION_APPLYINGATTRIBS	= SPACTION_RECYCLING + 1,
	SPACTION_DOWNLOADING	= SPACTION_APPLYINGATTRIBS + 1,
	SPACTION_SEARCHING_INTERNET	= SPACTION_DOWNLOADING + 1,
	SPACTION_CALCULATING	= SPACTION_SEARCHING_INTERNET + 1,
	SPACTION_UPLOADING	= SPACTION_CALCULATING + 1,
	SPACTION_SEARCHING_FILES	= SPACTION_UPLOADING + 1
    } 	SPACTION;

typedef  
enum _SPTEXT
    {	SPTEXT_ACTIONDESCRIPTION	= 1,
	SPTEXT_ACTIONDETAIL	= SPTEXT_ACTIONDESCRIPTION + 1
    } 	SPTEXT;


extern "C" const IID IID_IActionProgress;


    
    struct __declspec(uuid("49ff1173-eadc-446d-9285-156453a6431c")) __declspec(novtable)
    IActionProgress : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin( 
             SPACTION action,
             SPBEGINF flags) = 0;
        
        virtual HRESULT __stdcall UpdateProgress( 
             ULONGLONG ulCompleted,
             ULONGLONG ulTotal) = 0;
        
        virtual HRESULT __stdcall UpdateText( 
             SPTEXT sptext,
             LPCWSTR pszText,
             BOOL fMayCompact) = 0;
        
        virtual HRESULT __stdcall QueryCancel( 
             BOOL *pfCancelled) = 0;
        
        virtual HRESULT __stdcall ResetCancel( void) = 0;
        
        virtual HRESULT __stdcall End( void) = 0;
        
    };
    























































































#line 6435 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IActionProgress_Begin_Proxy( 
    IActionProgress * This,
     SPACTION action,
     SPBEGINF flags);


void __stdcall IActionProgress_Begin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IActionProgress_UpdateProgress_Proxy( 
    IActionProgress * This,
     ULONGLONG ulCompleted,
     ULONGLONG ulTotal);


void __stdcall IActionProgress_UpdateProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IActionProgress_UpdateText_Proxy( 
    IActionProgress * This,
     SPTEXT sptext,
     LPCWSTR pszText,
     BOOL fMayCompact);


void __stdcall IActionProgress_UpdateText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IActionProgress_QueryCancel_Proxy( 
    IActionProgress * This,
     BOOL *pfCancelled);


void __stdcall IActionProgress_QueryCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IActionProgress_ResetCancel_Proxy( 
    IActionProgress * This);


void __stdcall IActionProgress_ResetCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IActionProgress_End_Proxy( 
    IActionProgress * This);


void __stdcall IActionProgress_End_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6514 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IShellExtInit;


    
    struct __declspec(uuid("000214E8-0000-0000-C000-000000000046")) __declspec(novtable)
    IShellExtInit : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Initialize( 
             LPCITEMIDLIST pidlFolder,
             IDataObject *pdtobj,
             HKEY hkeyProgID) = 0;
        
    };
    




















































#line 6591 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellExtInit_Initialize_Proxy( 
    IShellExtInit * This,
     LPCITEMIDLIST pidlFolder,
     IDataObject *pdtobj,
     HKEY hkeyProgID);


void __stdcall IShellExtInit_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6610 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IShellExtInit *LPSHELLEXTINIT;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0214_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0214_v0_0_s_ifspec;





 


enum __MIDL_IShellPropSheetExt_0001
    {	EXPPS_FILETYPES	= 0x1
    } ;
typedef UINT EXPPS;


extern "C" const IID IID_IShellPropSheetExt;


    
    struct __declspec(uuid("000214E9-0000-0000-C000-000000000046")) __declspec(novtable)
    IShellPropSheetExt : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddPages( 
             LPFNSVADDPROPSHEETPAGE pfnAddPage,
             LPARAM lParam) = 0;
        
        virtual HRESULT __stdcall ReplacePage( 
             EXPPS uPageID,
             LPFNSVADDPROPSHEETPAGE pfnReplaceWith,
             LPARAM lParam) = 0;
        
    };
    




























































#line 6715 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IShellPropSheetExt_AddPages_Proxy( 
    IShellPropSheetExt * This,
     LPFNSVADDPROPSHEETPAGE pfnAddPage,
     LPARAM lParam);


void __stdcall IShellPropSheetExt_AddPages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IShellPropSheetExt_ReplacePage_Proxy( 
    IShellPropSheetExt * This,
     EXPPS uPageID,
     LPFNSVADDPROPSHEETPAGE pfnReplaceWith,
     LPARAM lParam);


void __stdcall IShellPropSheetExt_ReplacePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6747 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IShellPropSheetExt *LPSHELLPROPSHEETEXT;



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0215_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0215_v0_0_s_ifspec;





 


extern "C" const IID IID_IRemoteComputer;


    
    struct __declspec(uuid("000214FE-0000-0000-C000-000000000046")) __declspec(novtable)
    IRemoteComputer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Initialize( 
             LPCWSTR pszMachine,
             BOOL bEnumerating) = 0;
        
    };
    



















































#line 6832 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IRemoteComputer_Initialize_Proxy( 
    IRemoteComputer * This,
     LPCWSTR pszMachine,
     BOOL bEnumerating);


void __stdcall IRemoteComputer_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6850 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IQueryContinue;


    
    struct __declspec(uuid("7307055c-b24a-486b-9f25-163e597a28a9")) __declspec(novtable)
    IQueryContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinue( void) = 0;
        
    };
    

















































#line 6921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IQueryContinue_QueryContinue_Proxy( 
    IQueryContinue * This);


void __stdcall IQueryContinue_QueryContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6937 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IUserNotification;


    
    struct __declspec(uuid("ba9711ba-5893-4787-a7e1-41277151550b")) __declspec(novtable)
    IUserNotification : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetBalloonInfo( 
             LPCWSTR pszTitle,
             LPCWSTR pszText,
             DWORD dwInfoFlags) = 0;
        
        virtual HRESULT __stdcall SetBalloonRetry( 
             DWORD dwShowTime,
             DWORD dwInterval,
             UINT cRetryCount) = 0;
        
        virtual HRESULT __stdcall SetIconInfo( 
             HICON hIcon,
             LPCWSTR pszToolTip) = 0;
        
        virtual HRESULT __stdcall Show( 
             IQueryContinue *pqc,
             DWORD dwContinuePollInterval) = 0;
        
        virtual HRESULT __stdcall PlaySound( 
             LPCWSTR pszSoundName) = 0;
        
    };
    




















































































#line 7062 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IUserNotification_SetBalloonInfo_Proxy( 
    IUserNotification * This,
     LPCWSTR pszTitle,
     LPCWSTR pszText,
     DWORD dwInfoFlags);


void __stdcall IUserNotification_SetBalloonInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IUserNotification_SetBalloonRetry_Proxy( 
    IUserNotification * This,
     DWORD dwShowTime,
     DWORD dwInterval,
     UINT cRetryCount);


void __stdcall IUserNotification_SetBalloonRetry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IUserNotification_SetIconInfo_Proxy( 
    IUserNotification * This,
     HICON hIcon,
     LPCWSTR pszToolTip);


void __stdcall IUserNotification_SetIconInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IUserNotification_Show_Proxy( 
    IUserNotification * This,
     IQueryContinue *pqc,
     DWORD dwContinuePollInterval);


void __stdcall IUserNotification_Show_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IUserNotification_PlaySound_Proxy( 
    IUserNotification * This,
     LPCWSTR pszSoundName);


void __stdcall IUserNotification_PlaySound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7133 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IItemNameLimits;


    
    struct __declspec(uuid("1df0d7f1-b267-4d28-8b10-12e23202a5c4")) __declspec(novtable)
    IItemNameLimits : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetValidCharacters( 
             LPWSTR *ppwszValidChars,
             LPWSTR *ppwszInvalidChars) = 0;
        
        virtual HRESULT __stdcall GetMaxLength( 
             LPCWSTR pszName,
             int *piMaxNameLen) = 0;
        
    };
    



























































#line 7220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IItemNameLimits_GetValidCharacters_Proxy( 
    IItemNameLimits * This,
     LPWSTR *ppwszValidChars,
     LPWSTR *ppwszInvalidChars);


void __stdcall IItemNameLimits_GetValidCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IItemNameLimits_GetMaxLength_Proxy( 
    IItemNameLimits * This,
     LPCWSTR pszName,
     int *piMaxNameLen);


void __stdcall IItemNameLimits_GetMaxLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7251 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 




extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0219_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0219_v0_0_s_ifspec;





 


extern "C" const IID IID_INetCrawler;


    
    struct __declspec(uuid("49c929ee-a1b7-4c58-b539-e63be392b6f3")) __declspec(novtable)
    INetCrawler : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Update( 
             DWORD dwFlags) = 0;
        
    };
    


















































#line 7333 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall INetCrawler_Update_Proxy( 
    INetCrawler * This,
     DWORD dwFlags);


void __stdcall INetCrawler_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7350 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

















extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0220_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0220_v0_0_s_ifspec;





 


extern "C" const IID IID_IExtractImage;


    
    struct __declspec(uuid("BB2E617C-0920-11d1-9A0B-00C04FC2D6C1")) __declspec(novtable)
    IExtractImage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetLocation( 
             LPWSTR pszPathBuffer,
             DWORD cch,
             DWORD *pdwPriority,
             const SIZE *prgSize,
             DWORD dwRecClrDepth,
             DWORD *pdwFlags) = 0;
        
        virtual HRESULT __stdcall Extract( 
             HBITMAP *phBmpThumbnail) = 0;
        
    };
    






























































#line 7465 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IExtractImage_GetLocation_Proxy( 
    IExtractImage * This,
     LPWSTR pszPathBuffer,
     DWORD cch,
     DWORD *pdwPriority,
     const SIZE *prgSize,
     DWORD dwRecClrDepth,
     DWORD *pdwFlags);


void __stdcall IExtractImage_GetLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IExtractImage_Extract_Proxy( 
    IExtractImage * This,
     HBITMAP *phBmpThumbnail);


void __stdcall IExtractImage_Extract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7499 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IExtractImage *LPEXTRACTIMAGE;

#line 7507 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0221_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0221_v0_0_s_ifspec;





 


extern "C" const IID IID_IExtractImage2;


    
    struct __declspec(uuid("953BB1EE-93B4-11d1-98A3-00C04FB687DA")) __declspec(novtable)
    IExtractImage2 : public IExtractImage
    {
    public:
        virtual HRESULT __stdcall GetDateStamp( 
             FILETIME *pDateStamp) = 0;
        
    };
    






































































#line 7604 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IExtractImage2_GetDateStamp_Proxy( 
    IExtractImage2 * This,
     FILETIME *pDateStamp);


void __stdcall IExtractImage2_GetDateStamp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 

typedef IExtractImage2 *LPEXTRACTIMAGE2;

#line 7629 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0222_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0222_v0_0_s_ifspec;





 


extern "C" const IID IID_IUserEventTimerCallback;


    
    struct __declspec(uuid("e9ead8e6-2a25-410e-9b58-a9fbef1dd1a2")) __declspec(novtable)
    IUserEventTimerCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall UserEventTimerProc( 
             ULONG uUserEventTimerID,
             UINT uTimerElapse) = 0;
        
    };
    



















































#line 7708 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IUserEventTimerCallback_UserEventTimerProc_Proxy( 
    IUserEventTimerCallback * This,
     ULONG uUserEventTimerID,
     UINT uTimerElapse);


void __stdcall IUserEventTimerCallback_UserEventTimerProc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7726 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 




extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0223_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0223_v0_0_s_ifspec;





 


extern "C" const IID IID_IUserEventTimer;


    
    struct __declspec(uuid("0F504B94-6E42-42E6-99E0-E20FAFE52AB4")) __declspec(novtable)
    IUserEventTimer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUserEventTimer( 
             HWND hWnd,
             UINT uCallbackMessage,
             UINT uTimerElapse,
             IUserEventTimerCallback *pUserEventTimerCallback,
             ULONG *puUserEventTimerID) = 0;
        
        virtual HRESULT __stdcall KillUserEventTimer( 
             HWND hWnd,
             ULONG uUserEventTimerID) = 0;
        
        virtual HRESULT __stdcall GetUserEventTimerElapsed( 
             HWND hWnd,
             ULONG uUserEventTimerID,
             UINT *puTimerElapsed) = 0;
        
        virtual HRESULT __stdcall InitTimerTickInterval( 
             UINT uTimerTickIntervalMs) = 0;
        
    };
    














































































#line 7852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IUserEventTimer_SetUserEventTimer_Proxy( 
    IUserEventTimer * This,
     HWND hWnd,
     UINT uCallbackMessage,
     UINT uTimerElapse,
     IUserEventTimerCallback *pUserEventTimerCallback,
     ULONG *puUserEventTimerID);


void __stdcall IUserEventTimer_SetUserEventTimer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IUserEventTimer_KillUserEventTimer_Proxy( 
    IUserEventTimer * This,
     HWND hWnd,
     ULONG uUserEventTimerID);


void __stdcall IUserEventTimer_KillUserEventTimer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IUserEventTimer_GetUserEventTimerElapsed_Proxy( 
    IUserEventTimer * This,
     HWND hWnd,
     ULONG uUserEventTimerID,
     UINT *puTimerElapsed);


void __stdcall IUserEventTimer_GetUserEventTimerElapsed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IUserEventTimer_InitTimerTickInterval_Proxy( 
    IUserEventTimer * This,
     UINT uTimerTickIntervalMs);


void __stdcall IUserEventTimer_InitTimerTickInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7912 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IDockingWindow;


    
    struct __declspec(uuid("012dd920-7b26-11d0-8ca9-00a0c92dbfe8")) __declspec(novtable)
    IDockingWindow : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall ShowDW( 
             BOOL fShow) = 0;
        
        virtual HRESULT __stdcall CloseDW( 
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall ResizeBorderDW( 
             LPCRECT prcBorder,
             IUnknown *punkToolbarSite,
             BOOL fReserved) = 0;
        
    };
    

















































































#line 8024 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IDockingWindow_ShowDW_Proxy( 
    IDockingWindow * This,
     BOOL fShow);


void __stdcall IDockingWindow_ShowDW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDockingWindow_CloseDW_Proxy( 
    IDockingWindow * This,
     DWORD dwReserved);


void __stdcall IDockingWindow_CloseDW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDockingWindow_ResizeBorderDW_Proxy( 
    IDockingWindow * This,
     LPCRECT prcBorder,
     IUnknown *punkToolbarSite,
     BOOL fReserved);


void __stdcall IDockingWindow_ResizeBorderDW_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8067 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 








#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 8080 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
typedef  struct __MIDL___MIDL_itf_shobjidl_0225_0001
    {
    DWORD dwMask;
    POINTL ptMinSize;
    POINTL ptMaxSize;
    POINTL ptIntegral;
    POINTL ptActual;
    WCHAR wszTitle[ 256 ];
    DWORD dwModeFlags;
    COLORREF crBkgnd;
    } 	DESKBANDINFO;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 8093 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
















enum __MIDL___MIDL_itf_shobjidl_0225_0002
    {	DBID_BANDINFOCHANGED	= 0,
	DBID_SHOWONLY	= 1,
	DBID_MAXIMIZEBAND	= 2,
	DBID_PUSHCHEVRON	= 3,
	DBID_DELAYINIT	= 4,
	DBID_FINISHINIT	= 5,
	DBID_SETWINDOWTHEME	= 6,
	DBID_PERMITAUTOHIDE	= 7
    } ;





extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0225_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0225_v0_0_s_ifspec;





 


extern "C" const IID IID_IDeskBand;


    
    struct __declspec(uuid("EB0FE172-1A3A-11D0-89B3-00A0C90A90AC")) __declspec(novtable)
    IDeskBand : public IDockingWindow
    {
    public:
        virtual HRESULT __stdcall GetBandInfo( 
             DWORD dwBandID,
             DWORD dwViewMode,
             DESKBANDINFO *pdbi) = 0;
        
    };
    



























































































#line 8241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IDeskBand_GetBandInfo_Proxy( 
    IDeskBand * This,
     DWORD dwBandID,
     DWORD dwViewMode,
     DESKBANDINFO *pdbi);


void __stdcall IDeskBand_GetBandInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_ITaskbarList;


    
    struct __declspec(uuid("56FDF342-FD6D-11d0-958A-006097C9A090")) __declspec(novtable)
    ITaskbarList : public IUnknown
    {
    public:
        virtual HRESULT __stdcall HrInit( void) = 0;
        
        virtual HRESULT __stdcall AddTab( 
             HWND hwnd) = 0;
        
        virtual HRESULT __stdcall DeleteTab( 
             HWND hwnd) = 0;
        
        virtual HRESULT __stdcall ActivateTab( 
             HWND hwnd) = 0;
        
        virtual HRESULT __stdcall SetActiveAlt( 
             HWND hwnd) = 0;
        
    };
    













































































#line 8371 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall ITaskbarList_HrInit_Proxy( 
    ITaskbarList * This);


void __stdcall ITaskbarList_HrInit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITaskbarList_AddTab_Proxy( 
    ITaskbarList * This,
     HWND hwnd);


void __stdcall ITaskbarList_AddTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITaskbarList_DeleteTab_Proxy( 
    ITaskbarList * This,
     HWND hwnd);


void __stdcall ITaskbarList_DeleteTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITaskbarList_ActivateTab_Proxy( 
    ITaskbarList * This,
     HWND hwnd);


void __stdcall ITaskbarList_ActivateTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITaskbarList_SetActiveAlt_Proxy( 
    ITaskbarList * This,
     HWND hwnd);


void __stdcall ITaskbarList_SetActiveAlt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8435 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_ITaskbarList2;


    
    struct __declspec(uuid("602D4995-B13A-429b-A66E-1935E44F4317")) __declspec(novtable)
    ITaskbarList2 : public ITaskbarList
    {
    public:
        virtual HRESULT __stdcall MarkFullscreenWindow( 
             HWND hwnd,
             BOOL fFullscreen) = 0;
        
    };
    






















































































#line 8545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall ITaskbarList2_MarkFullscreenWindow_Proxy( 
    ITaskbarList2 * This,
     HWND hwnd,
     BOOL fFullscreen);


void __stdcall ITaskbarList2_MarkFullscreenWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8563 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_ICDBurn;


    
    struct __declspec(uuid("3d73a659-e5d0-4d42-afc0-5121ba425c8d")) __declspec(novtable)
    ICDBurn : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRecorderDriveLetter( 
             LPWSTR pszDrive,
             UINT cch) = 0;
        
        virtual HRESULT __stdcall Burn( 
             HWND hwnd) = 0;
        
        virtual HRESULT __stdcall HasRecordableDrive( 
             BOOL *pfHasRecorder) = 0;
        
    };
    

































































#line 8658 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall ICDBurn_GetRecorderDriveLetter_Proxy( 
    ICDBurn * This,
     LPWSTR pszDrive,
     UINT cch);


void __stdcall ICDBurn_GetRecorderDriveLetter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICDBurn_Burn_Proxy( 
    ICDBurn * This,
     HWND hwnd);


void __stdcall ICDBurn_Burn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICDBurn_HasRecordableDrive_Proxy( 
    ICDBurn * This,
     BOOL *pfHasRecorder);


void __stdcall ICDBurn_HasRecordableDrive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8700 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IAddressBarParser;


    
    struct __declspec(uuid("C9D81948-443A-40C7-945C-5E171B8C66B4")) __declspec(novtable)
    IAddressBarParser : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseFromOutsideSource( 
             LPCWSTR pcszUrlIn,
             DWORD dwParseFlags,
             BOOL *pfWasCorrected) = 0;
        
        virtual HRESULT __stdcall GetUrl( 
             LPWSTR pszUrlOut,
             DWORD cchUrlOutSize) = 0;
        
        virtual HRESULT __stdcall SetUrl( 
             LPCWSTR pcszUrlIn,
             DWORD dwGenType) = 0;
        
        virtual HRESULT __stdcall GetDisplayName( 
             LPWSTR pszUrlOut,
             DWORD cchUrlOutSize) = 0;
        
        virtual HRESULT __stdcall GetPidl( 
             LPITEMIDLIST *ppidl) = 0;
        
        virtual HRESULT __stdcall SetPidl( 
             LPCITEMIDLIST pidl) = 0;
        
        virtual HRESULT __stdcall GetArgs( 
             LPWSTR pszArgsOut,
             DWORD cchArgsOutSize) = 0;
        
        virtual HRESULT __stdcall AddPath( 
             LPCITEMIDLIST pidl) = 0;
        
    };
    









































































































#line 8855 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IAddressBarParser_ParseFromOutsideSource_Proxy( 
    IAddressBarParser * This,
     LPCWSTR pcszUrlIn,
     DWORD dwParseFlags,
     BOOL *pfWasCorrected);


void __stdcall IAddressBarParser_ParseFromOutsideSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddressBarParser_GetUrl_Proxy( 
    IAddressBarParser * This,
     LPWSTR pszUrlOut,
     DWORD cchUrlOutSize);


void __stdcall IAddressBarParser_GetUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddressBarParser_SetUrl_Proxy( 
    IAddressBarParser * This,
     LPCWSTR pcszUrlIn,
     DWORD dwGenType);


void __stdcall IAddressBarParser_SetUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddressBarParser_GetDisplayName_Proxy( 
    IAddressBarParser * This,
     LPWSTR pszUrlOut,
     DWORD cchUrlOutSize);


void __stdcall IAddressBarParser_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddressBarParser_GetPidl_Proxy( 
    IAddressBarParser * This,
     LPITEMIDLIST *ppidl);


void __stdcall IAddressBarParser_GetPidl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddressBarParser_SetPidl_Proxy( 
    IAddressBarParser * This,
     LPCITEMIDLIST pidl);


void __stdcall IAddressBarParser_SetPidl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddressBarParser_GetArgs_Proxy( 
    IAddressBarParser * This,
     LPWSTR pszArgsOut,
     DWORD cchArgsOutSize);


void __stdcall IAddressBarParser_GetArgs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddressBarParser_AddPath_Proxy( 
    IAddressBarParser * This,
     LPCITEMIDLIST pidl);


void __stdcall IAddressBarParser_AddPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8962 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 





extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0230_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0230_v0_0_s_ifspec;





 


extern "C" const IID IID_IWizardSite;


    
    struct __declspec(uuid("88960f5b-422f-4e7b-8013-73415381c3c3")) __declspec(novtable)
    IWizardSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPreviousPage( 
             HPROPSHEETPAGE *phpage) = 0;
        
        virtual HRESULT __stdcall GetNextPage( 
             HPROPSHEETPAGE *phpage) = 0;
        
        virtual HRESULT __stdcall GetCancelledPage( 
             HPROPSHEETPAGE *phpage) = 0;
        
    };
    
































































#line 9065 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IWizardSite_GetPreviousPage_Proxy( 
    IWizardSite * This,
     HPROPSHEETPAGE *phpage);


void __stdcall IWizardSite_GetPreviousPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWizardSite_GetNextPage_Proxy( 
    IWizardSite * This,
     HPROPSHEETPAGE *phpage);


void __stdcall IWizardSite_GetNextPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWizardSite_GetCancelledPage_Proxy( 
    IWizardSite * This,
     HPROPSHEETPAGE *phpage);


void __stdcall IWizardSite_GetCancelledPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9106 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IWizardExtension;


    
    struct __declspec(uuid("c02ea696-86cc-491e-9b23-74394a0444a8")) __declspec(novtable)
    IWizardExtension : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddPages( 
             HPROPSHEETPAGE *aPages,
             UINT cPages,
             UINT *pnPagesAdded) = 0;
        
        virtual HRESULT __stdcall GetFirstPage( 
             HPROPSHEETPAGE *phpage) = 0;
        
        virtual HRESULT __stdcall GetLastPage( 
             HPROPSHEETPAGE *phpage) = 0;
        
    };
    


































































#line 9203 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IWizardExtension_AddPages_Proxy( 
    IWizardExtension * This,
     HPROPSHEETPAGE *aPages,
     UINT cPages,
     UINT *pnPagesAdded);


void __stdcall IWizardExtension_AddPages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWizardExtension_GetFirstPage_Proxy( 
    IWizardExtension * This,
     HPROPSHEETPAGE *phpage);


void __stdcall IWizardExtension_GetFirstPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWizardExtension_GetLastPage_Proxy( 
    IWizardExtension * This,
     HPROPSHEETPAGE *phpage);


void __stdcall IWizardExtension_GetLastPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9246 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IWebWizardExtension;


    
    struct __declspec(uuid("0e6b3f66-98d1-48c0-a222-fbde74e2fbc5")) __declspec(novtable)
    IWebWizardExtension : public IWizardExtension
    {
    public:
        virtual HRESULT __stdcall SetInitialURL( 
             LPCWSTR pszURL) = 0;
        
        virtual HRESULT __stdcall SetErrorURL( 
             LPCWSTR pszErrorURL) = 0;
        
    };
    

















































































#line 9353 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IWebWizardExtension_SetInitialURL_Proxy( 
    IWebWizardExtension * This,
     LPCWSTR pszURL);


void __stdcall IWebWizardExtension_SetInitialURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWebWizardExtension_SetErrorURL_Proxy( 
    IWebWizardExtension * This,
     LPCWSTR pszErrorURL);


void __stdcall IWebWizardExtension_SetErrorURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9382 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 








extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0233_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0233_v0_0_s_ifspec;





 


extern "C" const IID IID_IPublishingWizard;


    
    struct __declspec(uuid("aa9198bb-ccec-472d-beed-19a4f6733f7a")) __declspec(novtable)
    IPublishingWizard : public IWizardExtension
    {
    public:
        virtual HRESULT __stdcall Initialize( 
             IDataObject *pdo,
             DWORD dwOptions,
             LPCWSTR pszServiceProvider) = 0;
        
        virtual HRESULT __stdcall GetTransferManifest( 
             HRESULT *phrFromTransfer,
             IXMLDOMDocument **pdocManifest) = 0;
        
    };
    




















































































#line 9508 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IPublishingWizard_Initialize_Proxy( 
    IPublishingWizard * This,
     IDataObject *pdo,
     DWORD dwOptions,
     LPCWSTR pszServiceProvider);


void __stdcall IPublishingWizard_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPublishingWizard_GetTransferManifest_Proxy( 
    IPublishingWizard * This,
     HRESULT *phrFromTransfer,
     IXMLDOMDocument **pdocManifest);


void __stdcall IPublishingWizard_GetTransferManifest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9540 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"






 


extern "C" const IID IID_IFolderViewHost;


    
    struct __declspec(uuid("1ea58f02-d55a-411d-b09e-9e65ac21605b")) __declspec(novtable)
    IFolderViewHost : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Initialize( 
             HWND hwndParent,
             IDataObject *pdo,
             RECT *prc) = 0;
        
    };
    




















































#line 9617 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IFolderViewHost_Initialize_Proxy( 
    IFolderViewHost * This,
     HWND hwndParent,
     IDataObject *pdo,
     RECT *prc);


void __stdcall IFolderViewHost_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9636 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



 




extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0235_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0235_v0_0_s_ifspec;





 


extern "C" const IID IID_IAutoCompleteDropDown;


    
    struct __declspec(uuid("3CD141F4-3C6A-11d2-BCAA-00C04FD929DB")) __declspec(novtable)
    IAutoCompleteDropDown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDropDownStatus( 
             DWORD *pdwFlags,
             LPWSTR *ppwszString) = 0;
        
        virtual HRESULT __stdcall ResetEnumerator( void) = 0;
        
    };
    

























































#line 9728 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



HRESULT __stdcall IAutoCompleteDropDown_GetDropDownStatus_Proxy( 
    IAutoCompleteDropDown * This,
     DWORD *pdwFlags,
     LPWSTR *ppwszString);


void __stdcall IAutoCompleteDropDown_GetDropDownStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAutoCompleteDropDown_ResetEnumerator_Proxy( 
    IAutoCompleteDropDown * This);


void __stdcall IAutoCompleteDropDown_ResetEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9757 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"







 



extern "C" const IID LIBID_ShellObjects;

extern "C" const CLSID CLSID_QueryCancelAutoPlay;



class __declspec(uuid("331F1768-05A9-4ddd-B86E-DAE34DDC998A"))
QueryCancelAutoPlay;
#line 9777 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_DriveSizeCategorizer;



class __declspec(uuid("94357B53-CA29-4b78-83AE-E8FE7409134F"))
DriveSizeCategorizer;
#line 9785 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_DriveTypeCategorizer;



class __declspec(uuid("B0A8F3CF-4333-4bab-8873-1CCB1CADA48B"))
DriveTypeCategorizer;
#line 9793 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_FreeSpaceCategorizer;



class __declspec(uuid("B5607793-24AC-44c7-82E2-831726AA6CB7"))
FreeSpaceCategorizer;
#line 9801 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_TimeCategorizer;



class __declspec(uuid("3bb4118f-ddfd-4d30-a348-9fb5d6bf1afe"))
TimeCategorizer;
#line 9809 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_SizeCategorizer;



class __declspec(uuid("55d7b852-f6d1-42f2-aa75-8728a1b2d264"))
SizeCategorizer;
#line 9817 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_AlphabeticalCategorizer;



class __declspec(uuid("3c2654c6-7372-4f6b-b310-55d6128f49d2"))
AlphabeticalCategorizer;
#line 9825 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_MergedCategorizer;



class __declspec(uuid("8e827c11-33e7-4bc1-b242-8cd9a1c2b304"))
MergedCategorizer;
#line 9833 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_ImageProperties;



class __declspec(uuid("7ab770c7-0e23-4d7a-8aa2-19bfad479829"))
ImageProperties;
#line 9841 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_PropertiesUI;



class __declspec(uuid("d912f8cf-0396-4915-884e-fb425d32943b"))
PropertiesUI;
#line 9849 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_UserNotification;



class __declspec(uuid("0010890e-8789-413c-adbc-48f5b511b3af"))
UserNotification;
#line 9857 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_UserEventTimerCallback;



class __declspec(uuid("15fffd13-5140-41b8-b89a-c8d5759cd2b2"))
UserEventTimerCallback;
#line 9865 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_UserEventTimer;



class __declspec(uuid("864A1288-354C-4D19-9D68-C2742BB14997"))
UserEventTimer;
#line 9873 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_NetCrawler;



class __declspec(uuid("601ac3dc-786a-4eb0-bf40-ee3521e70bfb"))
NetCrawler;
#line 9881 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_CDBurn;



class __declspec(uuid("fbeb8a05-beee-4442-804e-409d6c4515e9"))
CDBurn;
#line 9889 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_AddressBarParser;



class __declspec(uuid("e0e11a09-5cb8-4b6c-8332-e00720a168f2"))
AddressBarParser;
#line 9897 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_TaskbarList;



class __declspec(uuid("56FDF344-FD6D-11d0-958A-006097C9A090"))
TaskbarList;
#line 9905 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_WebWizardHost;



class __declspec(uuid("c827f149-55c1-4d28-935e-57e47caed973"))
WebWizardHost;
#line 9913 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_PublishDropTarget;



class __declspec(uuid("CC6EEFFB-43F6-46c5-9619-51D571967F7D"))
PublishDropTarget;
#line 9921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_PublishingWizard;



class __declspec(uuid("6b33163c-76a5-4b6c-bf21-45de9cd503a1"))
PublishingWizard;
#line 9929 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_InternetPrintOrdering;



class __declspec(uuid("add36aa8-751a-4579-a266-d66f5202ccbb"))
InternetPrintOrdering;
#line 9937 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

extern "C" const CLSID CLSID_FolderViewHost;



class __declspec(uuid("20b1cb23-6968-4eb9-b7d4-a66d00d07cee"))
FolderViewHost;
#line 9945 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"
#line 9946 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"


 


extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0236_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_shobjidl_0236_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __stdcall  HBITMAP_UserSize(     unsigned long *, unsigned long            , HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserMarshal(  unsigned long *, unsigned char *, HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP * ); 
void                      __stdcall  HBITMAP_UserFree(     unsigned long *, HBITMAP * ); 

unsigned long             __stdcall  HGLOBAL_UserSize(     unsigned long *, unsigned long            , HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserMarshal(  unsigned long *, unsigned char *, HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL * ); 
void                      __stdcall  HGLOBAL_UserFree(     unsigned long *, HGLOBAL * ); 

unsigned long             __stdcall  HICON_UserSize(     unsigned long *, unsigned long            , HICON * ); 
unsigned char * __stdcall  HICON_UserMarshal(  unsigned long *, unsigned char *, HICON * ); 
unsigned char * __stdcall  HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON * ); 
void                      __stdcall  HICON_UserFree(     unsigned long *, HICON * ); 

unsigned long             __stdcall  HMENU_UserSize(     unsigned long *, unsigned long            , HMENU * ); 
unsigned char * __stdcall  HMENU_UserMarshal(  unsigned long *, unsigned char *, HMENU * ); 
unsigned char * __stdcall  HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU * ); 
void                      __stdcall  HMENU_UserFree(     unsigned long *, HMENU * ); 

unsigned long             __stdcall  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __stdcall  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __stdcall  LPCITEMIDLIST_UserSize(     unsigned long *, unsigned long            , LPCITEMIDLIST * ); 
unsigned char * __stdcall  LPCITEMIDLIST_UserMarshal(  unsigned long *, unsigned char *, LPCITEMIDLIST * ); 
unsigned char * __stdcall  LPCITEMIDLIST_UserUnmarshal(unsigned long *, unsigned char *, LPCITEMIDLIST * ); 
void                      __stdcall  LPCITEMIDLIST_UserFree(     unsigned long *, LPCITEMIDLIST * ); 

unsigned long             __stdcall  LPITEMIDLIST_UserSize(     unsigned long *, unsigned long            , LPITEMIDLIST * ); 
unsigned char * __stdcall  LPITEMIDLIST_UserMarshal(  unsigned long *, unsigned char *, LPITEMIDLIST * ); 
unsigned char * __stdcall  LPITEMIDLIST_UserUnmarshal(unsigned long *, unsigned char *, LPITEMIDLIST * ); 
void                      __stdcall  LPITEMIDLIST_UserFree(     unsigned long *, LPITEMIDLIST * ); 

unsigned long             __stdcall  LPSAFEARRAY_UserSize(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserMarshal(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __stdcall  LPSAFEARRAY_UserFree(     unsigned long *, LPSAFEARRAY * ); 

unsigned long             __stdcall  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long *, VARIANT * ); 




}
#line 10011 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"

#line 10013 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shobjidl.h"



#line 116 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





























extern "C" __declspec(dllimport) HRESULT __stdcall SHGetMalloc(LPMALLOC * ppMalloc);












































































































































#line 287 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
















#line 304 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"













#line 318 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


#line 321 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




#line 326 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 329 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


typedef struct _CMINVOKECOMMANDINFO {
    DWORD cbSize;        
    DWORD fMask;         
    HWND hwnd;           
    LPCSTR lpVerb;       
    LPCSTR lpParameters; 
    LPCSTR lpDirectory;  
    int nShow;           

    DWORD dwHotKey;
    HANDLE hIcon;
} CMINVOKECOMMANDINFO,  *LPCMINVOKECOMMANDINFO;

typedef struct _CMInvokeCommandInfoEx {
    DWORD cbSize;        
    DWORD fMask;         
    HWND hwnd;           
    LPCSTR lpVerb;       
    LPCSTR lpParameters; 
    LPCSTR lpDirectory;  
    int nShow;           

    DWORD dwHotKey;

    HANDLE hIcon;
    LPCSTR lpTitle;      
    LPCWSTR lpVerbW;        
    LPCWSTR lpParametersW;  
    LPCWSTR lpDirectoryW;   
    LPCWSTR lpTitleW;       

    POINT   ptInvoke;       
#line 364 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
} CMINVOKECOMMANDINFOEX,  *LPCMINVOKECOMMANDINFOEX;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 367 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





struct __declspec(novtable) IContextMenu : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    virtual HRESULT __stdcall QueryContextMenu(
                                HMENU hmenu,
                                UINT indexMenu,
                                UINT idCmdFirst,
                                UINT idCmdLast,
                                UINT uFlags) = 0;

    virtual HRESULT __stdcall InvokeCommand(
                             LPCMINVOKECOMMANDINFO lpici) = 0;

    virtual HRESULT __stdcall GetCommandString(
                                UINT_PTR    idCmd,
                                UINT        uType,
                                UINT      * pwReserved,
                                LPSTR       pszName,
                                UINT        cchMax) = 0;
};

typedef IContextMenu *  LPCONTEXTMENU;

















struct __declspec(novtable) IContextMenu2 : public IContextMenu
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    

    virtual HRESULT __stdcall QueryContextMenu(
                                HMENU hmenu,
                                UINT indexMenu,
                                UINT idCmdFirst,
                                UINT idCmdLast,
                                UINT uFlags) = 0;

    virtual HRESULT __stdcall InvokeCommand(
                             LPCMINVOKECOMMANDINFO lpici) = 0;

    virtual HRESULT __stdcall GetCommandString(
                                UINT_PTR    idCmd,
                                UINT        uType,
                                UINT      * pwReserved,
                                LPSTR       pszName,
                                UINT        cchMax) = 0;

    

    virtual HRESULT __stdcall HandleMenuMsg(
                             UINT uMsg,
                             WPARAM wParam,
                             LPARAM lParam) = 0;
};

typedef IContextMenu2 * LPCONTEXTMENU2;














struct __declspec(novtable) IContextMenu3 : public IContextMenu2
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    

    virtual HRESULT __stdcall QueryContextMenu(
                                HMENU hmenu,
                                UINT indexMenu,
                                UINT idCmdFirst,
                                UINT idCmdLast,
                                UINT uFlags) = 0;

    virtual HRESULT __stdcall InvokeCommand(
                             LPCMINVOKECOMMANDINFO lpici) = 0;

    virtual HRESULT __stdcall GetCommandString(
                                UINT_PTR    idCmd,
                                UINT        uType,
                                UINT      * pwReserved,
                                LPSTR       pszName,
                                UINT        cchMax) = 0;

    

    virtual HRESULT __stdcall HandleMenuMsg(
                             UINT uMsg,
                             WPARAM wParam,
                             LPARAM lParam) = 0;

    

    virtual HRESULT __stdcall HandleMenuMsg2(
                             UINT uMsg,
                             WPARAM wParam,
                             LPARAM lParam,
                             LRESULT* plResult) = 0;
};

typedef IContextMenu3 * LPCONTEXTMENU3;






























#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 538 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

typedef struct
{
    LPITEMIDLIST  pidlTargetFolder;               
    WCHAR         szTargetParsingName[260];  
    WCHAR         szNetworkProvider[260];    
    DWORD         dwAttributes;                   
    int           csidl;                          
} PERSIST_FOLDER_TARGET_INFO;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 549 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"























struct __declspec(novtable) IPersistFolder3 : public IPersistFolder2
{
    
    virtual HRESULT __stdcall QueryInterface( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef(void)  = 0;
    virtual ULONG __stdcall Release(void) = 0;

    
    virtual HRESULT __stdcall GetClassID( LPCLSID lpClassID) = 0;

    
    virtual HRESULT __stdcall Initialize( LPCITEMIDLIST pidl) = 0;

    
    virtual HRESULT __stdcall GetCurFolder( LPITEMIDLIST *ppidl) = 0;

    
    virtual HRESULT __stdcall InitializeEx( IBindCtx *pbc, LPCITEMIDLIST pidlRoot, const PERSIST_FOLDER_TARGET_INFO *ppfti) = 0;
    virtual HRESULT __stdcall GetFolderTargetInfo( PERSIST_FOLDER_TARGET_INFO *ppfti) = 0;
};


#line 595 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"































































































































struct __declspec(novtable) IExtractIconA : public IUnknown     
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetIconLocation(
                         UINT   uFlags,
                         LPSTR  szIconFile,
                         UINT   cchMax,
                         int   * piIndex,
                         UINT  * pwFlags) = 0;

    virtual HRESULT __stdcall Extract(
                           LPCSTR pszFile,
                           UINT   nIconIndex,
                           HICON   *phiconLarge,
                           HICON   *phiconSmall,
                           UINT    nIconSize) = 0;
};

typedef IExtractIconA * LPEXTRACTICONA;




struct __declspec(novtable) IExtractIconW : public IUnknown     
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetIconLocation(
                         UINT   uFlags,
                         LPWSTR szIconFile,
                         UINT   cchMax,
                         int   * piIndex,
                         UINT  * pwFlags) = 0;

    virtual HRESULT __stdcall Extract(
                           LPCWSTR pszFile,
                           UINT   nIconIndex,
                           HICON   *phiconLarge,
                           HICON   *phiconSmall,
                           UINT    nIconSize) = 0;
};

typedef IExtractIconW * LPEXTRACTICONW;









#line 784 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"









































struct __declspec(novtable) IShellIcon : public IUnknown      
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetIconOf( LPCITEMIDLIST pidl, UINT flags,
                    LPINT lpIconIndex) = 0;
};

typedef IShellIcon *LPSHELLICON;






































struct __declspec(novtable) IShellIconOverlayIdentifier : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall IsMemberOf( LPCWSTR pwszPath, DWORD dwAttrib) = 0;
    virtual HRESULT __stdcall GetOverlayInfo( LPWSTR pwszIconFile, int cchMax, int * pIndex, DWORD * pdwFlags) = 0;
    virtual HRESULT __stdcall GetPriority( int * pIPriority) = 0;
};































struct __declspec(novtable) IShellIconOverlay : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetOverlayIndex( LPCITEMIDLIST pidl, int * pIndex) = 0;
    virtual HRESULT __stdcall GetOverlayIconIndex( LPCITEMIDLIST pidl, int * pIconIndex) = 0;
};




















extern "C" __declspec(dllimport) int __stdcall SHGetIconOverlayIndexA(LPCSTR pszIconPath, int iIconIndex);
extern "C" __declspec(dllimport) int __stdcall SHGetIconOverlayIndexW(LPCWSTR pszIconPath, int iIconIndex);




#line 957 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





typedef enum {
   SLDF_HAS_ID_LIST         = 0x00000001,   
   SLDF_HAS_LINK_INFO       = 0x00000002,   
   SLDF_HAS_NAME            = 0x00000004,
   SLDF_HAS_RELPATH         = 0x00000008,
   SLDF_HAS_WORKINGDIR      = 0x00000010,
   SLDF_HAS_ARGS            = 0x00000020,
   SLDF_HAS_ICONLOCATION    = 0x00000040,
   SLDF_UNICODE             = 0x00000080,   
   SLDF_FORCE_NO_LINKINFO   = 0x00000100,   
   SLDF_HAS_EXP_SZ          = 0x00000200,   
   SLDF_RUN_IN_SEPARATE     = 0x00000400,   
   SLDF_HAS_LOGO3ID         = 0x00000800,   
   SLDF_HAS_DARWINID        = 0x00001000,   
   SLDF_RUNAS_USER          = 0x00002000,   
   SLDF_HAS_EXP_ICON_SZ     = 0x00004000,   
   SLDF_NO_PIDL_ALIAS       = 0x00008000,   
   SLDF_FORCE_UNCNAME       = 0x00010000,   
   SLDF_RUN_WITH_SHIMLAYER  = 0x00020000,   
   SLDF_RESERVED            = 0x80000000,   
} SHELL_LINK_DATA_FLAGS;

typedef struct tagDATABLOCKHEADER
{
    DWORD   cbSize;             
    DWORD   dwSignature;        
} DATABLOCK_HEADER, *LPDATABLOCK_HEADER, *LPDBLIST;

typedef struct {

    DATABLOCK_HEADER dbh;


#line 996 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
    WORD     wFillAttribute;         
    WORD     wPopupFillAttribute;    
    COORD    dwScreenBufferSize;     
    COORD    dwWindowSize;           
    COORD    dwWindowOrigin;         
    DWORD    nFont;
    DWORD    nInputBufferSize;
    COORD    dwFontSize;
    UINT     uFontFamily;
    UINT     uFontWeight;
    WCHAR    FaceName[32];
    UINT     uCursorSize;
    BOOL     bFullScreen;
    BOOL     bQuickEdit;
    BOOL     bInsertMode;
    BOOL     bAutoPosition;
    UINT     uHistoryBufferSize;
    UINT     uNumberOfHistoryBuffers;
    BOOL     bHistoryNoDup;
    COLORREF ColorTable[ 16 ];
} NT_CONSOLE_PROPS, *LPNT_CONSOLE_PROPS;



typedef struct {

    DATABLOCK_HEADER dbh;


#line 1026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
    UINT     uCodePage;
} NT_FE_CONSOLE_PROPS, *LPNT_FE_CONSOLE_PROPS;



typedef struct {

    DATABLOCK_HEADER dbh;


#line 1037 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
    CHAR        szDarwinID[260];  
    WCHAR       szwDarwinID[260]; 
} EXP_DARWIN_LINK, *LPEXP_DARWIN_LINK;



#line 1044 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




typedef struct
{
    DWORD       cbSize;             
    DWORD       dwSignature;        
    DWORD       idSpecialFolder;    
    DWORD       cbOffset;           
} EXP_SPECIAL_FOLDER, *LPEXP_SPECIAL_FOLDER;



typedef struct
{
    DWORD       cbSize;             
    DWORD       dwSignature;        
    CHAR        szTarget[ 260 ];   
    WCHAR       swzTarget[ 260 ];  
} EXP_SZ_LINK, *LPEXP_SZ_LINK;






struct __declspec(novtable) IShellLinkDataList : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall AddDataBlock( void * pDataBlock) = 0;
    virtual HRESULT __stdcall CopyDataBlock( DWORD dwSig, void **ppDataBlock) = 0;
    virtual HRESULT __stdcall RemoveDataBlock( DWORD dwSig) = 0;
    virtual HRESULT __stdcall GetFlags( DWORD *pdwFlags) = 0;
    virtual HRESULT __stdcall SetFlags( DWORD dwFlags) = 0;
};

#line 1087 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





struct __declspec(novtable) IResolveShellLink : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall ResolveShellLink( IUnknown* punk, HWND hwnd, DWORD fFlags) = 0;
};
#line 1103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"












struct __declspec(novtable) IShellExecuteHookA : public IUnknown 
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall Execute( LPSHELLEXECUTEINFOA pei) = 0;
};




struct __declspec(novtable) IShellExecuteHookW : public IUnknown 
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall Execute( LPSHELLEXECUTEINFOW pei) = 0;
};







#line 1147 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 1148 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"










struct __declspec(novtable) IURLSearchHook : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall Translate( LPWSTR lpwszSearchURL, DWORD cchBufferSize) = 0;
};




struct __declspec(novtable) ISearchContext : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetSearchUrl( BSTR * pbstrSearchUrl) = 0;
    virtual HRESULT __stdcall GetSearchText( BSTR * pbstrSearchText) = 0;
    virtual HRESULT __stdcall GetSearchStyle( DWORD * pdwSearchStyle) = 0;
};




struct __declspec(novtable) IURLSearchHook2 : public IURLSearchHook
{
    
    virtual HRESULT __stdcall TranslateWithSearchContext( LPWSTR lpwszSearchURL, DWORD cchBufferSize, ISearchContext * pSearchContext) = 0;
};










struct __declspec(novtable) INewShortcutHookA : public IUnknown 
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall SetReferent( LPCSTR pcszReferent, HWND hwnd) = 0;
    virtual HRESULT __stdcall GetReferent( LPSTR pszReferent, int cchReferent) = 0;
    virtual HRESULT __stdcall SetFolder( LPCSTR pcszFolder) = 0;
    virtual HRESULT __stdcall GetFolder( LPSTR pszFolder, int cchFolder) = 0;
    virtual HRESULT __stdcall GetName( LPSTR pszName, int cchName) = 0;
    virtual HRESULT __stdcall GetExtension( LPSTR pszExtension, int cchExtension) = 0;
};




struct __declspec(novtable) INewShortcutHookW : public IUnknown 
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall SetReferent( LPCWSTR pcszReferent, HWND hwnd) = 0;
    virtual HRESULT __stdcall GetReferent( LPWSTR pszReferent, int cchReferent) = 0;
    virtual HRESULT __stdcall SetFolder( LPCWSTR pcszFolder) = 0;
    virtual HRESULT __stdcall GetFolder( LPWSTR pszFolder, int cchFolder) = 0;
    virtual HRESULT __stdcall GetName( LPWSTR pszName, int cchName) = 0;
    virtual HRESULT __stdcall GetExtension( LPWSTR pszExtension, int cchExtension) = 0;
};







#line 1245 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




















































































struct __declspec(novtable) ICopyHookA : public IUnknown        
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual UINT __stdcall CopyCallback ( HWND hwnd, UINT wFunc, UINT wFlags, LPCSTR pszSrcFile, DWORD dwSrcAttribs,
                                   LPCSTR pszDestFile, DWORD dwDestAttribs) = 0;
};

typedef ICopyHookA *    LPCOPYHOOKA;




struct __declspec(novtable) ICopyHookW : public IUnknown        
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual UINT __stdcall CopyCallback ( HWND hwnd, UINT wFunc, UINT wFlags, LPCWSTR pszSrcFile, DWORD dwSrcAttribs,
                                   LPCWSTR pszDestFile, DWORD dwDestAttribs) = 0;
};

typedef ICopyHookW *    LPCOPYHOOKW;









#line 1369 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"










struct __declspec(novtable) IFileViewerSite : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall SetPinnedWindow ( HWND hwnd) = 0;
    virtual HRESULT __stdcall GetPinnedWindow ( HWND *phwnd) = 0;
};

typedef IFileViewerSite * LPFILEVIEWERSITE;













#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 1406 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

typedef struct
{
    
    DWORD cbSize;           
    HWND hwndOwner;         
    int iShow;              

    
    DWORD dwFlags;          
    RECT rect;              
    IUnknown *punkRel;      

    
    OLECHAR strNewFile[260];   

} FVSHOWINFO, *LPFVSHOWINFO;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 1425 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

    




                                        







struct __declspec(novtable) IFileViewerA
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall ShowInitialize ( LPFILEVIEWERSITE lpfsi) = 0;
    virtual HRESULT __stdcall Show ( LPFVSHOWINFO pvsi) = 0;
    virtual HRESULT __stdcall PrintTo ( LPSTR pszDriver, BOOL fSuppressUI) = 0;
};

typedef IFileViewerA * LPFILEVIEWERA;




struct __declspec(novtable) IFileViewerW
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall ShowInitialize ( LPFILEVIEWERSITE lpfsi) = 0;
    virtual HRESULT __stdcall Show ( LPFVSHOWINFO pvsi) = 0;
    virtual HRESULT __stdcall PrintTo ( LPWSTR pszDriver, BOOL fSuppressUI) = 0;
};

typedef IFileViewerW * LPFILEVIEWERW;







#line 1479 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




































































#line 1548 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"







































struct __declspec(novtable) ICommDlgBrowser : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall OnDefaultCommand ( struct IShellView * ppshv) = 0;
    virtual HRESULT __stdcall OnStateChange ( struct IShellView * ppshv,
                ULONG uChange) = 0;
    virtual HRESULT __stdcall IncludeObject ( struct IShellView * ppshv,
                LPCITEMIDLIST pidl) = 0;
};

typedef ICommDlgBrowser * LPCOMMDLGBROWSER;







































struct __declspec(novtable) ICommDlgBrowser2 : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall OnDefaultCommand ( struct IShellView * ppshv) = 0;
    virtual HRESULT __stdcall OnStateChange ( struct IShellView * ppshv,
                ULONG uChange) = 0;
    virtual HRESULT __stdcall IncludeObject ( struct IShellView * ppshv,
                LPCITEMIDLIST pidl) = 0;

    
    virtual HRESULT __stdcall Notify ( struct IShellView * ppshv,
                DWORD dwNotifyType) = 0;
    virtual HRESULT __stdcall GetDefaultMenuText ( struct IShellView * ppshv,
                WCHAR *pszText, INT cchMax) = 0;
    virtual HRESULT __stdcall GetViewFlags( DWORD *pdwFlags) = 0;

};

typedef ICommDlgBrowser2 * LPCOMMDLGBROWSER2;







extern "C" __declspec(dllimport) BOOL __stdcall SHGetPathFromIDListA(LPCITEMIDLIST pidl, LPSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetPathFromIDListW(LPCITEMIDLIST pidl, LPWSTR pszPath);




#line 1680 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

extern "C" __declspec(dllimport) int __stdcall SHCreateDirectoryExA(HWND hwnd, LPCSTR pszPath, SECURITY_ATTRIBUTES *psa);
extern "C" __declspec(dllimport) int __stdcall SHCreateDirectoryExW(HWND hwnd, LPCWSTR pszPath, SECURITY_ATTRIBUTES *psa);




#line 1688 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

extern "C" __declspec(dllimport) HRESULT __stdcall SHOpenFolderAndSelectItems(LPCITEMIDLIST pidlFolder, UINT cidl, LPCITEMIDLIST *apidl, DWORD dwFlags);













































#line 1736 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"














#line 1751 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"







#line 1759 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"








#line 1768 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"









#line 1778 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"








#line 1787 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"







extern "C" __declspec(dllimport) HRESULT __stdcall SHGetSpecialFolderLocation(HWND hwnd, int csidl, LPITEMIDLIST *ppidl);



extern "C" __declspec(dllimport) BOOL __stdcall SHGetSpecialFolderPathA(HWND hwnd, LPSTR pszPath, int csidl, BOOL fCreate);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetSpecialFolderPathW(HWND hwnd, LPWSTR pszPath, int csidl, BOOL fCreate);




#line 1805 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"



typedef enum {
    SHGFP_TYPE_CURRENT  = 0,   
    SHGFP_TYPE_DEFAULT  = 1,   
} SHGFP_TYPE;

extern "C" __declspec(dllimport) HRESULT __stdcall SHGetFolderPathA(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPSTR pszPath);
extern "C" __declspec(dllimport) HRESULT __stdcall SHGetFolderPathW(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPWSTR pszPath);




#line 1820 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHGetFolderLocation(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPITEMIDLIST *ppidl);

extern "C" __declspec(dllimport) HRESULT __stdcall SHGetFolderPathAndSubDirA(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPCSTR pszSubDir, LPSTR pszPath);
extern "C" __declspec(dllimport) HRESULT __stdcall SHGetFolderPathAndSubDirW(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPCWSTR pszSubDir, LPWSTR pszPath);




#line 1829 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

#line 1831 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

#line 1833 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"










typedef int (__stdcall* BFFCALLBACK)(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 1846 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

typedef struct _browseinfoA {
    HWND        hwndOwner;
    LPCITEMIDLIST pidlRoot;
    LPSTR        pszDisplayName;        
    LPCSTR       lpszTitle;                     
    UINT         ulFlags;                       
    BFFCALLBACK  lpfn;
    LPARAM       lParam;                        
    int          iImage;                        
} BROWSEINFOA, *PBROWSEINFOA, *LPBROWSEINFOA;

typedef struct _browseinfoW {
    HWND        hwndOwner;
    LPCITEMIDLIST pidlRoot;
    LPWSTR       pszDisplayName;        
    LPCWSTR      lpszTitle;                     
    UINT         ulFlags;                       
    BFFCALLBACK  lpfn;
    LPARAM       lParam;                        
    int          iImage;                        
} BROWSEINFOW, *PBROWSEINFOW, *LPBROWSEINFOW;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 1870 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"









#line 1880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





                                        
                                        
                                        





                                        





























extern "C" __declspec(dllimport) LPITEMIDLIST __stdcall SHBrowseForFolderA(LPBROWSEINFOA lpbi);
extern "C" __declspec(dllimport) LPITEMIDLIST __stdcall SHBrowseForFolderW(LPBROWSEINFOW lpbi);













#line 1939 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"











extern "C" __declspec(dllimport) HRESULT __stdcall SHLoadInProc(const IID & rclsid);

















#line 1969 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"








enum {
    ISHCUTCMDID_DOWNLOADICON  = 0,
    ISHCUTCMDID_INTSHORTCUTCREATE = 1,
};











extern "C" __declspec(dllimport) HRESULT __stdcall SHGetDesktopFolder(IShellFolder **ppshf);














struct __declspec(novtable) IFileSystemBindData : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall SetFindData( const WIN32_FIND_DATAW *pfd) = 0;
    virtual HRESULT __stdcall GetFindData( WIN32_FIND_DATAW *pfd) = 0;
};




struct __declspec(novtable) IShellDetails : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetDetailsOf( LPCITEMIDLIST pidl, UINT iColumn, SHELLDETAILS *pDetails) = 0;
    virtual HRESULT __stdcall ColumnClick( UINT iColumn) = 0;
};

























struct __declspec(novtable) IObjMgr : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void) = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall Append ( IUnknown *punk) = 0;
    virtual HRESULT __stdcall Remove ( IUnknown *punk) = 0;
};






























struct __declspec(novtable) ICurrentWorkingDirectory : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void) = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetDirectory ( LPWSTR pwzPath, DWORD cchSize) = 0;
    virtual HRESULT __stdcall SetDirectory ( LPCWSTR pwzPath) = 0;
};


























struct __declspec(novtable) IACList : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void) = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall Expand ( LPCOLESTR pszExpand) = 0;
};















typedef enum _tagAUTOCOMPLETELISTOPTIONS
{
    ACLO_NONE            = 0,    
    ACLO_CURRENTDIR      = 1,    
    ACLO_MYCOMPUTER      = 2,    
    ACLO_DESKTOP         = 4,    
    ACLO_FAVORITES       = 8,    
    ACLO_FILESYSONLY     = 16,   
    ACLO_FILESYSDIRS     = 32,   
} AUTOCOMPLETELISTOPTIONS;

struct __declspec(novtable) IACList2 : public IACList
{
    
    virtual HRESULT __stdcall SetOptions( DWORD dwFlag) = 0;
    virtual HRESULT __stdcall GetOptions( DWORD* pdwFlag) = 0;
};


























































                                             





struct __declspec(novtable) IProgressDialog : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall StartProgressDialog( HWND hwndParent, IUnknown * punkEnableModless, DWORD dwFlags, LPCVOID pvResevered) = 0;
    virtual HRESULT __stdcall StopProgressDialog(void) = 0;
    virtual HRESULT __stdcall SetTitle( LPCWSTR pwzTitle) = 0;
    virtual HRESULT __stdcall SetAnimation( HINSTANCE hInstAnimation, UINT idAnimation) = 0;
    virtual BOOL __stdcall HasUserCancelled (void) = 0;
    virtual HRESULT __stdcall SetProgress( DWORD dwCompleted, DWORD dwTotal) = 0;
    virtual HRESULT __stdcall SetProgress64( ULONGLONG ullCompleted, ULONGLONG ullTotal) = 0;
    virtual HRESULT __stdcall SetLine( DWORD dwLineNum, LPCWSTR pwzString, BOOL fCompactPath, LPCVOID pvResevered) = 0;
    virtual HRESULT __stdcall SetCancelMsg( LPCWSTR pwzCancelMsg, LPCVOID pvResevered) = 0;
    virtual HRESULT __stdcall Timer( DWORD dwTimerAction, LPCVOID pvResevered) = 0;
};





























struct __declspec(novtable) IInputObjectSite : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall OnFocusChangeIS( IUnknown* punkObj, BOOL fSetFocus) = 0;
};




























struct __declspec(novtable) IInputObject : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall UIActivateIO( BOOL fActivate, LPMSG lpMsg) = 0;
    virtual HRESULT __stdcall HasFocusIO(void) = 0;
    virtual HRESULT __stdcall TranslateAcceleratorIO( LPMSG lpMsg) = 0;
};








































struct __declspec(novtable) IDockingWindowSite : public IOleWindow
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetWindow ( HWND * lphwnd) = 0;
    virtual HRESULT __stdcall ContextSensitiveHelp ( BOOL fEnterMode) = 0;

    
    virtual HRESULT __stdcall GetBorderDW ( IUnknown* punkObj, LPRECT prcBorder) = 0;
    virtual HRESULT __stdcall RequestBorderSpaceDW ( IUnknown* punkObj, LPCBORDERWIDTHS pbw) = 0;
    virtual HRESULT __stdcall SetBorderSpaceDW ( IUnknown* punkObj, LPCBORDERWIDTHS pbw) = 0;
};






























struct __declspec(novtable) IDockingWindowFrame : public IOleWindow
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetWindow ( HWND * lphwnd) = 0;
    virtual HRESULT __stdcall ContextSensitiveHelp ( BOOL fEnterMode) = 0;

    
    virtual HRESULT __stdcall AddToolbar ( IUnknown* punkSrc, LPCWSTR pwszItem, DWORD dwAddFlags) = 0;
    virtual HRESULT __stdcall RemoveToolbar ( IUnknown* punkSrc, DWORD dwRemoveFlags) = 0;
    virtual HRESULT __stdcall FindToolbar ( LPCWSTR pwszItem, const IID & riid, void **ppv) = 0;
};









































struct __declspec(novtable) IRunnableTask : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef(void) = 0;
    virtual ULONG __stdcall Release(void) = 0;

    
    virtual HRESULT __stdcall Run(void) = 0;
    virtual HRESULT __stdcall Kill( BOOL fWait ) = 0;
    virtual HRESULT __stdcall Suspend(void) = 0;
    virtual HRESULT __stdcall Resume(void) = 0;
    virtual ULONG __stdcall IsRunning(void) = 0;
};

typedef IRunnableTask * LPRUNNABLETASK;
#line 2500 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"












struct __declspec(novtable) IThumbnailCapture : public IUnknown
{
    
    virtual HRESULT __stdcall CaptureThumbnail    (  const SIZE * pMaxSize,
                                      IUnknown * pHTMLDoc2,
                                      HBITMAP * phbmThumbnail ) = 0;
};
typedef IThumbnailCapture * LPTHUMBNAILCAPTURE;

#line 2522 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

























































































































































































































































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 2772 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

typedef struct {
    SHCOLUMNID  scid;                           
    VARTYPE     vt;                             
    DWORD       fmt;                            
    UINT        cChars;                         
    DWORD       csFlags;                        
    WCHAR wszTitle[80];        
    WCHAR wszDescription[128];  
} SHCOLUMNINFO, *LPSHCOLUMNINFO;
typedef const SHCOLUMNINFO* LPCSHCOLUMNINFO;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 2785 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 2787 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

typedef struct {
    ULONG   dwFlags;              
    ULONG   dwReserved;           
    WCHAR   wszFolder[260];  
} SHCOLUMNINIT, *LPSHCOLUMNINIT;
typedef const SHCOLUMNINIT* LPCSHCOLUMNINIT;



typedef struct {
    ULONG   dwFlags;             
    DWORD   dwFileAttributes;    
    ULONG   dwReserved;          
    WCHAR*  pwszExt;             
    WCHAR   wszFile[260];   
} SHCOLUMNDATA, *LPSHCOLUMNDATA;
typedef const SHCOLUMNDATA* LPCSHCOLUMNDATA;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 2807 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"






struct __declspec(novtable) IColumnProvider : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef(void) = 0;
    virtual ULONG __stdcall Release(void) = 0;

    
    virtual HRESULT __stdcall Initialize( LPCSHCOLUMNINIT psci) = 0;
    virtual HRESULT __stdcall GetColumnInfo( DWORD dwIndex, SHCOLUMNINFO *psci) = 0;
    virtual HRESULT __stdcall GetItemData( LPCSHCOLUMNID pscid, LPCSHCOLUMNDATA pscd, VARIANT *pvarData) = 0;
};





























































#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 2887 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

typedef struct
{
    SIZE        sizeDragImage;      
                                    
    POINT       ptOffset;           
                                    
    HBITMAP     hbmpDragImage;      
                                    
    COLORREF    crColorKey;         
                                    
} SHDRAGIMAGE, *LPSHDRAGIMAGE;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 2901 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"








struct __declspec(novtable) IDropTargetHelper : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef ( void ) = 0;
    virtual ULONG __stdcall Release ( void ) = 0;

    
    virtual HRESULT __stdcall DragEnter( HWND hwndTarget, IDataObject* pDataObject,
                          POINT* ppt, DWORD dwEffect) = 0;
    virtual HRESULT __stdcall DragLeave(void) = 0;
    virtual HRESULT __stdcall DragOver( POINT* ppt, DWORD dwEffect) = 0;
    virtual HRESULT __stdcall Drop( IDataObject* pDataObject, POINT* ppt,
                     DWORD dwEffect) = 0;
    virtual HRESULT __stdcall Show( BOOL fShow) = 0;

};




struct __declspec(novtable) IDragSourceHelper : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef ( void ) = 0;
    virtual ULONG __stdcall Release ( void ) = 0;

    
    virtual HRESULT __stdcall InitializeFromBitmap( LPSHDRAGIMAGE pshdi,
                                     IDataObject* pDataObject) = 0;
    virtual HRESULT __stdcall InitializeFromWindow( HWND hwnd, POINT* ppt,
                                     IDataObject* pDataObject) = 0;
};
#line 2944 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 2945 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"









































#line 2987 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 2993 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"



typedef struct _NRESARRAY {     
    UINT cItems;
    NETRESOURCE nr[1];
} NRESARRAY, * LPNRESARRAY;
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 3001 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




typedef struct _IDA {
    UINT cidl;          
    UINT aoffset[1];    
} CIDA, * LPIDA;




typedef enum {
    FD_CLSID            = 0x0001,
    FD_SIZEPOINT        = 0x0002,
    FD_ATTRIBUTES       = 0x0004,
    FD_CREATETIME       = 0x0008,
    FD_ACCESSTIME       = 0x0010,
    FD_WRITESTIME       = 0x0020,
    FD_FILESIZE         = 0x0040,
    FD_PROGRESSUI       = 0x4000,       
    FD_LINKUI           = 0x8000,       
} FD_FLAGS;

typedef struct _FILEDESCRIPTORA { 
    DWORD dwFlags;

    CLSID clsid;
    SIZEL sizel;
    POINTL pointl;

    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    CHAR   cFileName[ 260 ];
} FILEDESCRIPTORA, *LPFILEDESCRIPTORA;

typedef struct _FILEDESCRIPTORW { 
    DWORD dwFlags;

    CLSID clsid;
    SIZEL sizel;
    POINTL pointl;

    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    WCHAR  cFileName[ 260 ];
} FILEDESCRIPTORW, *LPFILEDESCRIPTORW;







#line 3064 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




typedef struct _FILEGROUPDESCRIPTORA { 
     UINT cItems;
     FILEDESCRIPTORA fgd[1];
} FILEGROUPDESCRIPTORA, * LPFILEGROUPDESCRIPTORA;

typedef struct _FILEGROUPDESCRIPTORW { 
     UINT cItems;
     FILEDESCRIPTORW fgd[1];
} FILEGROUPDESCRIPTORW, * LPFILEGROUPDESCRIPTORW;







#line 3085 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"






typedef struct _DROPFILES {
   DWORD pFiles;                       
   POINT pt;                           
   BOOL fNC;                           
                                       
   BOOL fWide;                         
} DROPFILES, *LPDROPFILES;











































#line 3142 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"







                                            
                                            
                                            








#line 3161 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




















#line 3182 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"





extern "C" __declspec(dllimport) void __stdcall SHChangeNotify(LONG wEventId, UINT uFlags, LPCVOID dwItem1, LPCVOID dwItem2);







struct __declspec(novtable) IShellChangeNotify : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall OnChange ( LONG lEvent, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2) = 0;
} ;















struct __declspec(novtable) IQueryInfo : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef (void)  = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetInfoTip( DWORD dwFlags, WCHAR **ppwszTip) = 0;
    virtual HRESULT __stdcall GetInfoFlags( DWORD *pdwFlags) = 0;
} ;






















#line 3254 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

extern "C" __declspec(dllimport) void __stdcall SHAddToRecentDocs(UINT uFlags, LPCVOID pv);





typedef struct _SHChangeProductKeyAsIDList {
    USHORT cb;
    WCHAR wszProductKey[39];
    USHORT cbZero;
} SHChangeProductKeyAsIDList, *LPSHChangeProductKeyAsIDList;


extern "C" __declspec(dllimport) void __stdcall SHUpdateImageA(LPCSTR pszHashItem, int iIndex, UINT uFlags, int iImageIndex);
extern "C" __declspec(dllimport) void __stdcall SHUpdateImageW(LPCWSTR pszHashItem, int iIndex, UINT uFlags, int iImageIndex);




#line 3275 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 3276 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"


extern "C" __declspec(dllimport) HRESULT __stdcall SHGetInstanceExplorer(IUnknown **ppunk);






























#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 3310 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

typedef struct _SHDESCRIPTIONID {
    DWORD   dwDescriptionId;
    CLSID   clsid;
} SHDESCRIPTIONID, *LPSHDESCRIPTIONID;

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 3317 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"



extern "C" __declspec(dllimport) HRESULT __stdcall SHGetDataFromIDListA(IShellFolder *psf, LPCITEMIDLIST pidl, int nFormat, void *pv, int cb);
extern "C" __declspec(dllimport) HRESULT __stdcall SHGetDataFromIDListW(IShellFolder *psf, LPCITEMIDLIST pidl, int nFormat, void *pv, int cb);




#line 3327 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"















































































































typedef struct {
    BOOL fShowAllObjects : 1;
    BOOL fShowExtensions : 1;
    BOOL fNoConfirmRecycle : 1;
    BOOL fShowSysFiles : 1;
    BOOL fShowCompColor : 1;
    BOOL fDoubleClickInWebView : 1;
    BOOL fDesktopHTML : 1;
    BOOL fWin95Classic : 1;
    BOOL fDontPrettyPath : 1;
    BOOL fShowAttribCol : 1;
    BOOL fMapNetDrvBtn : 1;
    BOOL fShowInfoTip : 1;
    BOOL fHideIcons : 1;
    UINT fRestFlags : 3;
} SHELLFLAGSTATE, *LPSHELLFLAGSTATE;























extern "C" __declspec(dllimport) void __stdcall SHGetSettings(LPSHELLFLAGSTATE lpsfs, DWORD dwMask);






extern "C" __declspec(dllimport) HRESULT __stdcall SHBindToParent(LPCITEMIDLIST pidl, const IID & riid, void **ppv, LPCITEMIDLIST *ppidlLast);








extern "C" __declspec(dllimport) HRESULT __stdcall SHParseDisplayName(PCWSTR pszName, IBindCtx *pbc, LPITEMIDLIST *ppidl, SFGAOF sfgaoIn, SFGAOF *psfgaoOut);





























extern "C" __declspec(dllimport) HRESULT __stdcall SHPathPrepareForWriteA(HWND hwnd, IUnknown *punkEnableModless, LPCSTR pszPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall SHPathPrepareForWriteW(HWND hwnd, IUnknown *punkEnableModless, LPCWSTR pszPath, DWORD dwFlags);




#line 3530 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"













struct __declspec(novtable) INamedPropertyBag : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface   ( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef    (void) = 0;
    virtual ULONG __stdcall Release   (void) = 0;
    
    virtual HRESULT __stdcall ReadPropertyNPB (   LPCOLESTR pszBagname,
                             LPCOLESTR pszPropName,
                             PROPVARIANT *pVar) = 0;

    virtual HRESULT __stdcall WritePropertyNPB(  LPCOLESTR pszBagname,
                            LPCOLESTR pszPropName,
                            PROPVARIANT  *pVar) = 0;

    virtual HRESULT __stdcall RemovePropertyNPB(  LPCOLESTR pszBagname,
                           LPCOLESTR pszPropName) = 0;
};








































extern "C" __declspec(dllimport) DWORD __stdcall SoftwareUpdateMessageBox( HWND hWnd,
                                           LPCWSTR szDistUnit,
                                           DWORD dwFlags,
                                           LPSOFTDISTINFO psdi );
#line 3606 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"




}

#line 3613 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 3615 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"

extern "C" __declspec(dllimport) BOOL __stdcall ImportPrivacySettings( LPCWSTR szFilename,
                              BOOL* pfParsePrivacyPreferences,   BOOL* pfParsePerSiteRules);

typedef struct IEnumPrivacyRecords IEnumPrivacyRecords;
#line 3621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
extern "C" __declspec(dllimport) HRESULT __stdcall DoPrivacyDlg( HWND hwndParent, LPOLESTR pszUrl, IEnumPrivacyRecords *pPrivacyEnum, BOOL fReportAllSites);

#line 3624 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"
#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"
#line 40 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"


#pragma component(minrebuild, off)
#line 44 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"

#pragma component(mintypeinfo, on)
#line 47 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"
















#pragma comment(lib, "oledlg.lib")
#pragma comment(lib, "ole32.lib")
#pragma comment(lib, "olepro32.lib")
#pragma comment(lib, "oleaut32.lib")
#pragma comment(lib, "uuid.lib")
#pragma comment(lib, "urlmon.lib")

#line 71 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"




#pragma pack(push, 4)
#line 77 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"







	class COleException;            
	class COleDispatchException;    


	class COleObjectFactory;        
		class COleTemplateServer;   

class COleDispatchDriver;           

class COleVariant;          
class COleCurrency;         
class COleDateTime;         
class COleDateTimeSpan;     
class COleSafeArray;        








































#line 139 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"























#line 163 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"














#line 178 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"










struct CInterfacePlaceHolder
{
	DWORD m_vtbl;   
	CInterfacePlaceHolder() { m_vtbl = 0; }
};










#line 204 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"
























#line 229 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"














class COleException : public CException
{
	public: static const  CRuntimeClass classCOleException; virtual CRuntimeClass* GetRuntimeClass() const;

public:
	SCODE m_sc;
	static SCODE __stdcall Process(const CException* pAnyException);


public:
	COleException();
	virtual ~COleException();

	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);
};

void __stdcall AfxThrowOleException(SCODE sc);
void __stdcall AfxCheckError(SCODE sc);




class COleDispatchException : public CException
{
	public: static const  CRuntimeClass classCOleDispatchException; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	WORD m_wCode;   
	CString m_strDescription;   
	DWORD m_dwHelpContext;      

	
	CString m_strHelpFile;      
	CString m_strSource;        


public:
	COleDispatchException(LPCTSTR lpszDescription, UINT nHelpID, WORD wCode);
	virtual ~COleDispatchException();
	static void __stdcall Process(
		EXCEPINFO* pInfo, const CException* pAnyException);

	virtual BOOL GetErrorMessage(LPTSTR lpszError, UINT nMaxError,
		PUINT pnHelpContext = 0);

	SCODE m_scError;            
};

void __stdcall AfxThrowOleDispatchException(WORD wCode, LPCTSTR lpszDescription,
	UINT nHelpID = 0);
void __stdcall AfxThrowOleDispatchException(WORD wCode, UINT nDescriptionID,
	UINT nHelpID = (UINT)-1);






























#line 328 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"





















#line 350 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"
	
	
	
#line 354 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"

























	


#line 383 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"














































































































class COleDispatchDriver
{

public:
	COleDispatchDriver();
	COleDispatchDriver(LPDISPATCH lpDispatch, BOOL bAutoRelease = 1);
	COleDispatchDriver(const COleDispatchDriver& dispatchSrc);


	LPDISPATCH m_lpDispatch;
	BOOL m_bAutoRelease;


	BOOL CreateDispatch(const IID & clsid, COleException* pError = 0);
	BOOL CreateDispatch(LPCTSTR lpszProgID, COleException* pError = 0);

	void AttachDispatch(LPDISPATCH lpDispatch, BOOL bAutoRelease = 1);
	LPDISPATCH DetachDispatch();
		
	void ReleaseDispatch();

	
	void __cdecl InvokeHelper(DISPID dwDispID, WORD wFlags,
		VARTYPE vtRet, void* pvRet, const BYTE* pbParamInfo, ...);
	void __cdecl SetProperty(DISPID dwDispID, VARTYPE vtProp, ...);
	void GetProperty(DISPID dwDispID, VARTYPE vtProp, void* pvProp) const;

	
	operator LPDISPATCH();
	const COleDispatchDriver& operator=(const COleDispatchDriver& dispatchSrc);


public:
	~COleDispatchDriver();
	void InvokeHelperV(DISPID dwDispID, WORD wFlags, VARTYPE vtRet,
		void* pvRet, const BYTE* pbParamInfo, va_list argList);
};





class COleObjectFactory : public CCmdTarget
{
	public: static const  CRuntimeClass classCOleObjectFactory; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	COleObjectFactory(const IID & clsid, CRuntimeClass* pRuntimeClass,
		BOOL bMultiInstance, LPCTSTR lpszProgID);


	virtual BOOL IsRegistered() const;
	const IID & GetClassID() const;


	virtual BOOL Register();
	BOOL Unregister();
	void Revoke();
	void UpdateRegistry(LPCTSTR lpszProgID = 0);
		
	BOOL IsLicenseValid();

	static BOOL __stdcall UnregisterAll();
	static BOOL __stdcall RegisterAll();
	static void __stdcall RevokeAll();
	static BOOL __stdcall UpdateRegistryAll(BOOL bRegister = 1);


protected:
	virtual CCmdTarget* OnCreateObject();
	virtual BOOL UpdateRegistry(BOOL bRegister);
	virtual BOOL VerifyUserLicense();
	virtual BOOL GetLicenseKey(DWORD dwReserved, BSTR* pbstrKey);
	virtual BOOL VerifyLicenseKey(BSTR bstrKey);


public:
	virtual ~COleObjectFactory();





public:
	COleObjectFactory* m_pNextFactory;  

protected:
	DWORD m_dwRegister;             
	CLSID m_clsid;                  
	CRuntimeClass* m_pRuntimeClass; 
	BOOL m_bMultiInstance;          
	LPCTSTR m_lpszProgID;           
	BYTE m_bLicenseChecked;
	BYTE m_bLicenseValid;
	BYTE m_bRegistered;             
	BYTE m_bOAT;                          
											  


public:
	class XClassFactory : public IClassFactory2 { public: virtual ULONG __stdcall AddRef(); virtual ULONG __stdcall Release(); virtual HRESULT __stdcall QueryInterface(const IID & iid, LPVOID* ppvObj);
		
		virtual HRESULT __stdcall CreateInstance(LPUNKNOWN, const IID &, LPVOID*);
		virtual HRESULT __stdcall LockServer(BOOL);
		virtual HRESULT __stdcall GetLicInfo(LPLICINFO);
		virtual HRESULT __stdcall RequestLicKey(DWORD, BSTR*);
		virtual HRESULT __stdcall CreateInstanceLic(LPUNKNOWN, LPUNKNOWN, const IID &, BSTR,
			LPVOID*);
	} m_xClassFactory; friend class XClassFactory;

	private: static const AFX_INTERFACEMAP_ENTRY _interfaceEntries[]; protected: static  const AFX_INTERFACEMAP interfaceMap; virtual const AFX_INTERFACEMAP* GetInterfaceMap() const;

	friend SCODE __stdcall AfxDllGetClassObject(const IID &, const IID &, LPVOID*);
	friend SCODE __stdcall DllGetClassObject(const IID &, const IID &, LPVOID*);
};









enum OLE_APPTYPE
{
	OAT_UNKNOWN = -1,                
	OAT_INPLACE_SERVER = 0,     
	OAT_SERVER = 1,             
	OAT_CONTAINER = 2,          
	OAT_DISPATCH_OBJECT = 3,    
	OAT_DOC_OBJECT_SERVER = 4,  
	OAT_DOC_OBJECT_CONTAINER =5,
};

class COleTemplateServer : public COleObjectFactory
{

public:
	COleTemplateServer();


	void ConnectTemplate(const IID & clsid, CDocTemplate* pDocTemplate,
		BOOL bMultiInstance);
		
	void UpdateRegistry(OLE_APPTYPE nAppType = OAT_INPLACE_SERVER,
		LPCTSTR* rglpszRegister = 0, LPCTSTR* rglpszOverwrite = 0);
		
	BOOL Register();
	BOOL Unregister();


protected:
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
			AFX_CMDHANDLERINFO* pHandlerInfo);
	virtual CCmdTarget* OnCreateObject();
	CDocTemplate* m_pDocTemplate;

private:
	void UpdateRegistry(LPCTSTR lpszProgID);
		
};





BOOL __stdcall AfxOleRegisterServerClass(
	const IID & clsid, LPCTSTR lpszClassName,
	LPCTSTR lpszShortTypeName, LPCTSTR lpszLongTypeName,
	OLE_APPTYPE nAppType = OAT_SERVER,
	LPCTSTR* rglpszRegister = 0, LPCTSTR* rglpszOverwrite = 0,
	int nIconIndex = 0, LPCTSTR lpszLocalFilterName = 0);
BOOL __stdcall AfxOleRegisterServerClass(
	const IID & clsid, LPCTSTR lpszClassName,
	LPCTSTR lpszShortTypeName, LPCTSTR lpszLongTypeName,
	OLE_APPTYPE nAppType,
	LPCTSTR* rglpszRegister, LPCTSTR* rglpszOverwrite,
	int nIconIndex, LPCTSTR lpszLocalFilterName, LPCTSTR lpszLocalFilterExt);

BOOL __stdcall AfxOleUnregisterServerClass(
	const IID & clsid, LPCTSTR lpszClassName, LPCTSTR lpszShortTypeName,
	LPCTSTR lpszLongTypeName, OLE_APPTYPE nAppType = OAT_SERVER,
	LPCTSTR* rglpszRegister = 0, LPCTSTR* rglpszOverwrite = 0);



BOOL __stdcall AfxOleRegisterHelper(LPCTSTR const* rglpszRegister,
	LPCTSTR const* rglpszSymbols, int nSymbols, BOOL bReplace,
	HKEY hKeyRoot = ((HKEY)0x80000000)); 

BOOL __stdcall AfxOleUnregisterHelper(LPCTSTR const* rglpszRegister,
	LPCTSTR const* rglpszSymbols, int nSymbols,
	HKEY hKeyRoot = ((HKEY)0x80000000)); 






































#line 727 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"














class __declspec(novtable) CConnectionPoint : public CCmdTarget
#line 743 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"
{

public:
	CConnectionPoint();


	POSITION GetStartPosition() const;
	LPUNKNOWN GetNextConnection(POSITION& pos) const;
	const CPtrArray* GetConnections();  


	virtual LPCONNECTIONPOINTCONTAINER GetContainer();
	virtual const IID & GetIID() = 0;
	virtual void OnAdvise(BOOL bAdvise);
	virtual int GetMaxConnections();
	virtual LPUNKNOWN QuerySinkInterface(LPUNKNOWN pUnkSink);


	~CConnectionPoint();
	void CreateConnectionArray();
	int GetConnectionCount();

protected:
	size_t m_nOffset;
	LPUNKNOWN m_pUnkFirstConnection;
	CPtrArray* m_pConnections;


public:
	class XConnPt : public IConnectionPoint { public: virtual ULONG __stdcall AddRef(); virtual ULONG __stdcall Release(); virtual HRESULT __stdcall QueryInterface(const IID & iid, LPVOID* ppvObj);
		
		virtual HRESULT __stdcall GetConnectionInterface(IID* pIID);
		virtual HRESULT __stdcall GetConnectionPointContainer(
			IConnectionPointContainer** ppCPC);
		virtual HRESULT __stdcall Advise(LPUNKNOWN pUnkSink, DWORD* pdwCookie);
		virtual HRESULT __stdcall Unadvise(DWORD dwCookie);
		virtual HRESULT __stdcall EnumConnections(LPENUMCONNECTIONS* ppEnum);
	} m_xConnPt; friend class XConnPt;
};






























#line 813 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"

















































#line 863 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"




CTypeLibCache* __stdcall AfxGetTypeLibCache(const GUID* pTypeLibID);


















BOOL __stdcall AfxOleInit();
void __stdcall AfxOleTerm(BOOL bJustRevoke = 0);
void __stdcall AfxOleTermOrFreeLib(BOOL bTerm = 1, BOOL bJustRevoke = 0);







LPWSTR __stdcall AfxAllocTaskWideString(LPCWSTR lpszString);
LPWSTR __stdcall AfxAllocTaskWideString(LPCSTR lpszString);
LPSTR __stdcall AfxAllocTaskAnsiString(LPCWSTR lpszString);
LPSTR __stdcall AfxAllocTaskAnsiString(LPCSTR lpszString);




	
#line 906 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"




	
#line 912 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"

HRESULT __stdcall AfxGetClassIDFromString(LPCTSTR lpsz, LPCLSID lpClsID);




SCODE __stdcall AfxDllGetClassObject(const IID & rclsid, const IID & riid, LPVOID* ppv);
SCODE __stdcall AfxDllCanUnloadNow(void);







class CLongBinary;  




typedef const VARIANT* LPCVARIANT;

class COleVariant : public tagVARIANT
{

public:
	COleVariant();

	COleVariant(const VARIANT& varSrc);
	COleVariant(LPCVARIANT pSrc);
	COleVariant(const COleVariant& varSrc);

	COleVariant(LPCTSTR lpszSrc);
	COleVariant(LPCTSTR lpszSrc, VARTYPE vtSrc); 
	COleVariant(CString& strSrc);

	COleVariant(BYTE nSrc);
	COleVariant(short nSrc, VARTYPE vtSrc = VT_I2);
	COleVariant(long lSrc, VARTYPE vtSrc = VT_I4);
	COleVariant(const COleCurrency& curSrc);

	COleVariant(float fltSrc);
	COleVariant(double dblSrc);
	COleVariant(const COleDateTime& timeSrc);

	COleVariant(const CByteArray& arrSrc);
	COleVariant(const CLongBinary& lbSrc);

	COleVariant(LPCITEMIDLIST pidl);


public:
	void Clear();
	void ChangeType(VARTYPE vartype, LPVARIANT pSrc = 0);
	void Attach(VARIANT& varSrc);
	VARIANT Detach();

	BOOL operator==(const VARIANT& varSrc) const;
	BOOL operator==(LPCVARIANT pSrc) const;

	const COleVariant& operator=(const VARIANT& varSrc);
	const COleVariant& operator=(LPCVARIANT pSrc);
	const COleVariant& operator=(const COleVariant& varSrc);

	const COleVariant& operator=(const LPCTSTR lpszSrc);
	const COleVariant& operator=(const CString& strSrc);

	const COleVariant& operator=(BYTE nSrc);
	const COleVariant& operator=(short nSrc);
	const COleVariant& operator=(long lSrc);
	const COleVariant& operator=(const COleCurrency& curSrc);

	const COleVariant& operator=(float fltSrc);
	const COleVariant& operator=(double dblSrc);
	const COleVariant& operator=(const COleDateTime& dateSrc);

	const COleVariant& operator=(const CByteArray& arrSrc);
	const COleVariant& operator=(const CLongBinary& lbSrc);

	void SetString(LPCTSTR lpszSrc, VARTYPE vtSrc); 

	operator LPVARIANT();
	operator LPCVARIANT() const;


public:
	~COleVariant();
	void _ClearCompat();
};





CArchive& __stdcall operator<<(CArchive& ar, COleVariant varSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleVariant& varSrc);


void __stdcall AfxVariantInit(LPVARIANT pVar);




class COleCurrency
{

public:
	COleCurrency();

	COleCurrency(CURRENCY cySrc);
	COleCurrency(const COleCurrency& curSrc);
	COleCurrency(const VARIANT& varSrc);
	COleCurrency(long nUnits, long nFractionalUnits);


public:
	enum CurrencyStatus
	{
		valid = 0,
		invalid = 1,    
		null = 2,       
	};

	CURRENCY m_cur;
	CurrencyStatus m_status;

	void SetStatus(CurrencyStatus status);
	CurrencyStatus GetStatus() const;


public:
	const COleCurrency& operator=(CURRENCY cySrc);
	const COleCurrency& operator=(const COleCurrency& curSrc);
	const COleCurrency& operator=(const VARIANT& varSrc);

	BOOL operator==(const COleCurrency& cur) const;
	BOOL operator!=(const COleCurrency& cur) const;
	BOOL operator<(const COleCurrency& cur) const;
	BOOL operator>(const COleCurrency& cur) const;
	BOOL operator<=(const COleCurrency& cur) const;
	BOOL operator>=(const COleCurrency& cur) const;

	
	COleCurrency operator+(const COleCurrency& cur) const;
	COleCurrency operator-(const COleCurrency& cur) const;
	const COleCurrency& operator+=(const COleCurrency& cur);
	const COleCurrency& operator-=(const COleCurrency& cur);
	COleCurrency operator-() const;

	COleCurrency operator*(long nOperand) const;
	COleCurrency operator/(long nOperand) const;
	const COleCurrency& operator*=(long nOperand);
	const COleCurrency& operator/=(long nOperand);

	operator CURRENCY() const;

	
	void SetCurrency(long nUnits, long nFractionalUnits);
	BOOL ParseCurrency(LPCTSTR lpszCurrency, DWORD dwFlags = 0,
		LCID = (((((WORD )(0x01)) << 10) | (WORD )(0x00))));

	
	CString Format(DWORD dwFlags = 0, LCID lcid = (((((WORD )(0x01)) << 10) | (WORD )(0x00)))) const;
};





CArchive& __stdcall operator<<(CArchive& ar, COleCurrency curSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleCurrency& curSrc);










class COleDateTime
{

public:
	static COleDateTime __stdcall GetTickCount();

	COleDateTime();

	COleDateTime(const COleDateTime& dateSrc);
	COleDateTime(const VARIANT& varSrc);
	COleDateTime(DATE dtSrc);

	COleDateTime(time_t timeSrc);
	COleDateTime(const SYSTEMTIME& systimeSrc);
	COleDateTime(const FILETIME& filetimeSrc);

	COleDateTime(int nYear, int nMonth, int nDay,
		int nHour, int nMin, int nSec);
	COleDateTime(WORD wDosDate, WORD wDosTime);


public:
	enum DateTimeStatus
	{
		valid = 0,
		invalid = 1,    
		null = 2,       
	};

	DATE m_dt;
	DateTimeStatus m_status;

	void SetStatus(DateTimeStatus status);
	DateTimeStatus GetStatus() const;

	BOOL GetAsSystemTime(SYSTEMTIME& sysTime) const;

	int GetYear() const;
	int GetMonth() const;       
	int GetDay() const;         
	int GetHour() const;        
	int GetMinute() const;      
	int GetSecond() const;      
	int GetDayOfWeek() const;   
	int GetDayOfYear() const;   


public:
	const COleDateTime& operator=(const COleDateTime& dateSrc);
	const COleDateTime& operator=(const VARIANT& varSrc);
	const COleDateTime& operator=(DATE dtSrc);

	const COleDateTime& operator=(const time_t& timeSrc);
	const COleDateTime& operator=(const SYSTEMTIME& systimeSrc);
	const COleDateTime& operator=(const FILETIME& filetimeSrc);

	BOOL operator==(const COleDateTime& date) const;
	BOOL operator!=(const COleDateTime& date) const;
	BOOL operator<(const COleDateTime& date) const;
	BOOL operator>(const COleDateTime& date) const;
	BOOL operator<=(const COleDateTime& date) const;
	BOOL operator>=(const COleDateTime& date) const;

	
	COleDateTime operator+(const COleDateTimeSpan& dateSpan) const;
	COleDateTime operator-(const COleDateTimeSpan& dateSpan) const;
	const COleDateTime& operator+=(const COleDateTimeSpan dateSpan);
	const COleDateTime& operator-=(const COleDateTimeSpan dateSpan);

	
	COleDateTimeSpan operator-(const COleDateTime& date) const;

	operator DATE() const;

	int SetDateTime(int nYear, int nMonth, int nDay,
		int nHour, int nMin, int nSec);
	int SetDate(int nYear, int nMonth, int nDay);
	int SetTime(int nHour, int nMin, int nSec);
	BOOL ParseDateTime(LPCTSTR lpszDate, DWORD dwFlags = 0,
		LCID lcid = (((((WORD )(0x01)) << 10) | (WORD )(0x00))));

	
	CString Format(DWORD dwFlags = 0, LCID lcid = (((((WORD )(0x01)) << 10) | (WORD )(0x00)))) const;
	CString Format(LPCTSTR lpszFormat) const;
	CString Format(UINT nFormatID) const;


protected:
	void CheckRange();
	friend COleDateTimeSpan;
};





CArchive& __stdcall operator<<(CArchive& ar, COleDateTime dateSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleDateTime& dateSrc);



class COleDateTimeSpan
{

public:
	COleDateTimeSpan();

	COleDateTimeSpan(double dblSpanSrc);
	COleDateTimeSpan(const COleDateTimeSpan& dateSpanSrc);
	COleDateTimeSpan(long lDays, int nHours, int nMins, int nSecs);


public:
	enum DateTimeSpanStatus
	{
		valid = 0,
		invalid = 1,    
		null = 2,       
	};

	double m_span;
	DateTimeSpanStatus m_status;

	void SetStatus(DateTimeSpanStatus status);
	DateTimeSpanStatus GetStatus() const;

	double GetTotalDays() const;    
	double GetTotalHours() const;   
	double GetTotalMinutes() const; 
	double GetTotalSeconds() const; 

	long GetDays() const;       
	long GetHours() const;      
	long GetMinutes() const;    
	long GetSeconds() const;    


public:
	const COleDateTimeSpan& operator=(double dblSpanSrc);
	const COleDateTimeSpan& operator=(const COleDateTimeSpan& dateSpanSrc);

	BOOL operator==(const COleDateTimeSpan& dateSpan) const;
	BOOL operator!=(const COleDateTimeSpan& dateSpan) const;
	BOOL operator<(const COleDateTimeSpan& dateSpan) const;
	BOOL operator>(const COleDateTimeSpan& dateSpan) const;
	BOOL operator<=(const COleDateTimeSpan& dateSpan) const;
	BOOL operator>=(const COleDateTimeSpan& dateSpan) const;

	
	COleDateTimeSpan operator+(const COleDateTimeSpan& dateSpan) const;
	COleDateTimeSpan operator-(const COleDateTimeSpan& dateSpan) const;
	const COleDateTimeSpan& operator+=(const COleDateTimeSpan dateSpan);
	const COleDateTimeSpan& operator-=(const COleDateTimeSpan dateSpan);
	COleDateTimeSpan operator-() const;

	operator double() const;

	void SetDateTimeSpan(long lDays, int nHours, int nMins, int nSecs);

	
	CString Format(LPCTSTR pFormat) const;
	CString Format(UINT nID) const;


public:
	void CheckRange();
	friend COleDateTime;
};





CArchive& __stdcall operator<<(CArchive& ar, COleDateTimeSpan dateSpanSrc);
CArchive& __stdcall operator>>(CArchive& ar, COleDateTimeSpan& dateSpanSrc);



void __stdcall AfxSafeArrayInit(COleSafeArray* psa);




typedef const SAFEARRAY* LPCSAFEARRAY;

class COleSafeArray : public tagVARIANT
{

public:
	COleSafeArray();
	COleSafeArray(const SAFEARRAY& saSrc, VARTYPE vtSrc);
	COleSafeArray(LPCSAFEARRAY pSrc, VARTYPE vtSrc);
	COleSafeArray(const COleSafeArray& saSrc);
	COleSafeArray(const VARIANT& varSrc);
	COleSafeArray(LPCVARIANT pSrc);
	COleSafeArray(const COleVariant& varSrc);


public:
	void Clear();
	void Attach(VARIANT& varSrc);
	VARIANT Detach();

	COleSafeArray& operator=(const COleSafeArray& saSrc);
	COleSafeArray& operator=(const VARIANT& varSrc);
	COleSafeArray& operator=(LPCVARIANT pSrc);
	COleSafeArray& operator=(const COleVariant& varSrc);

	BOOL operator==(const SAFEARRAY& saSrc) const;
	BOOL operator==(LPCSAFEARRAY pSrc) const;
	BOOL operator==(const COleSafeArray& saSrc) const;
	BOOL operator==(const VARIANT& varSrc) const;
	BOOL operator==(LPCVARIANT pSrc) const;
	BOOL operator==(const COleVariant& varSrc) const;

	operator LPVARIANT();
	operator LPCVARIANT() const;

	
	void CreateOneDim(VARTYPE vtSrc, DWORD dwElements,
		const void* pvSrcData = 0, long nLBound = 0);
	DWORD GetOneDimSize();
	void ResizeOneDim(DWORD dwElements);

	
	void Create(VARTYPE vtSrc, DWORD dwDims, DWORD* rgElements);

	
	void Create(VARTYPE vtSrc, DWORD dwDims, SAFEARRAYBOUND* rgsabounds);
	void AccessData(void** ppvData);
	void UnaccessData();
	void AllocData();
	void AllocDescriptor(DWORD dwDims);
	void Copy(LPSAFEARRAY* ppsa);
	void GetLBound(DWORD dwDim, long* pLBound);
	void GetUBound(DWORD dwDim, long* pUBound);
	void GetElement(long* rgIndices, void* pvData);
	void PtrOfIndex(long* rgIndices, void** ppvData);
	void PutElement(long* rgIndices, void* pvData);
	void Redim(SAFEARRAYBOUND* psaboundNew);
	void Lock();
	void Unlock();
	DWORD GetDim();
	DWORD GetElemSize();
	void Destroy();
	void DestroyData();
	void DestroyDescriptor();


public:
	~COleSafeArray();

	
	DWORD m_dwElementSize;
	DWORD m_dwDims;
};











void __stdcall DDX_OCText(CDataExchange* pDX, int nIDC, DISPID dispid,
	CString& value);
void __stdcall DDX_OCTextRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	CString& value);
void __stdcall DDX_OCBool(CDataExchange* pDX, int nIDC, DISPID dispid,
	BOOL& value);
void __stdcall DDX_OCBoolRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	BOOL& value);
void __stdcall DDX_OCInt(CDataExchange* pDX, int nIDC, DISPID dispid,
	int &value);
void __stdcall DDX_OCIntRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	int &value);
void __stdcall DDX_OCInt(CDataExchange* pDX, int nIDC, DISPID dispid,
	long &value);
void __stdcall DDX_OCIntRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	long &value);
void __stdcall DDX_OCShort(CDataExchange* pDX, int nIDC, DISPID dispid,
	short& value);
void __stdcall DDX_OCShortRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	short& value);
void __stdcall DDX_OCColor(CDataExchange* pDX, int nIDC, DISPID dispid,
	OLE_COLOR& value);
void __stdcall DDX_OCColorRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	OLE_COLOR& value);
void __stdcall DDX_OCFloat(CDataExchange* pDX, int nIDC, DISPID dispid,
	float& value);
void __stdcall DDX_OCFloatRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	float& value);
void __stdcall DDX_OCFloat(CDataExchange* pDX, int nIDC, DISPID dispid,
	double& value);
void __stdcall DDX_OCFloatRO(CDataExchange* pDX, int nIDC, DISPID dispid,
	double& value);

#line 1394 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"





void __cdecl AfxEnableControlContainer(COccManager* pOccManager=0);


#line 1403 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"





#pragma pack(pop)
#line 1410 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"



#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxole.inl"



































































inline COleException::COleException()
	{ m_sc = ((HRESULT)0x00000000L); }
inline COleException::~COleException()
	{ }


inline DWORD CCmdTarget::InternalAddRef()
	{ ((void)0); return InterlockedIncrement(&m_dwRef); }


inline BOOL COleObjectFactory::IsRegistered() const
	{ ((void)0); return m_dwRegister != 0; }
inline const IID & COleObjectFactory::GetClassID() const
	{ ((void)0); return m_clsid; }


inline COleDispatchDriver::~COleDispatchDriver()
	{ ReleaseDispatch(); }
inline COleDispatchDriver::operator LPDISPATCH()
	{ return m_lpDispatch; }


inline COleVariant::COleVariant()
	{ AfxVariantInit(this); }
inline COleVariant::~COleVariant()
	{ ((void)(::VariantClear(this) == 0)); }
inline void COleVariant::Clear()
	{ ((void)(::VariantClear(this) == 0)); }
inline COleVariant::COleVariant(LPCTSTR lpszSrc)
	{ vt = VT_EMPTY; *this = lpszSrc; }
inline COleVariant::COleVariant(CString& strSrc)
	{ vt = VT_EMPTY; *this = strSrc; }
inline COleVariant::COleVariant(BYTE nSrc)
	{ vt = VT_UI1; bVal = nSrc; }
inline COleVariant::COleVariant(const COleCurrency& curSrc)
	{ vt = VT_CY; cyVal = curSrc.m_cur; }
inline COleVariant::COleVariant(float fltSrc)
	{ vt = VT_R4; fltVal = fltSrc; }
inline COleVariant::COleVariant(double dblSrc)
	{ vt = VT_R8; dblVal = dblSrc; }
inline COleVariant::COleVariant(const COleDateTime& dateSrc)
	{ vt = VT_DATE; date = dateSrc.m_dt; }
inline COleVariant::COleVariant(const CByteArray& arrSrc)
	{ vt = VT_EMPTY; *this = arrSrc; }
inline COleVariant::COleVariant(const CLongBinary& lbSrc)
	{ vt = VT_EMPTY; *this = lbSrc; }
inline BOOL COleVariant::operator==(LPCVARIANT pSrc) const
	{ return *this == *pSrc; }
inline COleVariant::operator LPVARIANT()
	{ return this; }
inline COleVariant::operator LPCVARIANT() const
	{ return this; }


inline COleCurrency::COleCurrency()
	{ m_cur.Hi = 0; m_cur.Lo = 0; SetStatus(valid); }
inline COleCurrency::COleCurrency(CURRENCY cySrc)
	{ m_cur = cySrc; SetStatus(valid); }
inline COleCurrency::COleCurrency(const COleCurrency& curSrc)
	{ m_cur = curSrc.m_cur; m_status = curSrc.m_status; }
inline COleCurrency::COleCurrency(const VARIANT& varSrc)
	{ *this = varSrc; }
inline COleCurrency::CurrencyStatus COleCurrency::GetStatus() const
	{ return m_status; }
inline void COleCurrency::SetStatus(CurrencyStatus status)
	{ m_status = status; }
inline const COleCurrency& COleCurrency::operator+=(const COleCurrency& cur)
	{ *this = *this + cur; return *this; }
inline const COleCurrency& COleCurrency::operator-=(const COleCurrency& cur)
	{ *this = *this - cur; return *this; }
inline const COleCurrency& COleCurrency::operator*=(long nOperand)
	{ *this = *this * nOperand; return *this; }
inline const COleCurrency& COleCurrency::operator/=(long nOperand)
	{ *this = *this / nOperand; return *this; }
inline BOOL COleCurrency::operator==(const COleCurrency& cur) const
	{ return(m_status == cur.m_status && m_cur.Hi == cur.m_cur.Hi &&
		m_cur.Lo == cur.m_cur.Lo); }
inline BOOL COleCurrency::operator!=(const COleCurrency& cur) const
	{ return(m_status != cur.m_status || m_cur.Hi != cur.m_cur.Hi ||
		m_cur.Lo != cur.m_cur.Lo); }
inline COleCurrency::operator CURRENCY() const
	{ return m_cur; }


inline COleDateTime::COleDateTime()
	{ m_dt = 0; SetStatus(valid); }
inline COleDateTime::COleDateTime(const COleDateTime& dateSrc)
	{ m_dt = dateSrc.m_dt; m_status = dateSrc.m_status; }
inline COleDateTime::COleDateTime(const VARIANT& varSrc)
	{ *this = varSrc; }
inline COleDateTime::COleDateTime(DATE dtSrc)
	{ m_dt = dtSrc; SetStatus(valid); }
inline COleDateTime::COleDateTime(time_t timeSrc)
	{ *this = timeSrc; }
inline COleDateTime::COleDateTime(const SYSTEMTIME& systimeSrc)
	{ *this = systimeSrc; }
inline COleDateTime::COleDateTime(const FILETIME& filetimeSrc)
	{ *this = filetimeSrc; }
inline COleDateTime::COleDateTime(int nYear, int nMonth, int nDay,
	int nHour, int nMin, int nSec)
	{ SetDateTime(nYear, nMonth, nDay, nHour, nMin, nSec); }
inline COleDateTime::COleDateTime(WORD wDosDate, WORD wDosTime)
	{ m_status = DosDateTimeToVariantTime(wDosDate, wDosTime, &m_dt) ?
		valid : invalid; }
inline const COleDateTime& COleDateTime::operator=(const COleDateTime& dateSrc)
	{ m_dt = dateSrc.m_dt; m_status = dateSrc.m_status; return *this; }
inline COleDateTime::DateTimeStatus COleDateTime::GetStatus() const
	{ return m_status; }
inline void COleDateTime::SetStatus(DateTimeStatus status)
	{ m_status = status; }
inline BOOL COleDateTime::operator==(const COleDateTime& date) const
	{ return (m_status == date.m_status && m_dt == date.m_dt); }
inline BOOL COleDateTime::operator!=(const COleDateTime& date) const
	{ return (m_status != date.m_status || m_dt != date.m_dt); }
inline const COleDateTime& COleDateTime::operator+=(
	const COleDateTimeSpan dateSpan)
	{ *this = *this + dateSpan; return *this; }
inline const COleDateTime& COleDateTime::operator-=(
	const COleDateTimeSpan dateSpan)
	{ *this = *this - dateSpan; return *this; }
inline COleDateTime::operator DATE() const
	{ return m_dt; }
inline int COleDateTime::SetDate(int nYear, int nMonth, int nDay)
	{ return SetDateTime(nYear, nMonth, nDay, 0, 0, 0); }
inline int COleDateTime::SetTime(int nHour, int nMin, int nSec)
	
	{ return SetDateTime(1899, 12, 30, nHour, nMin, nSec); }


inline COleDateTimeSpan::COleDateTimeSpan()
	{ m_span = 0; SetStatus(valid); }
inline COleDateTimeSpan::COleDateTimeSpan(double dblSpanSrc)
	{ m_span = dblSpanSrc; SetStatus(valid); }
inline COleDateTimeSpan::COleDateTimeSpan(
	const COleDateTimeSpan& dateSpanSrc)
	{ m_span = dateSpanSrc.m_span; m_status = dateSpanSrc.m_status; }
inline COleDateTimeSpan::COleDateTimeSpan(
	long lDays, int nHours, int nMins, int nSecs)
	{ SetDateTimeSpan(lDays, nHours, nMins, nSecs); }
inline COleDateTimeSpan::DateTimeSpanStatus COleDateTimeSpan::GetStatus() const
	{ return m_status; }
inline void COleDateTimeSpan::SetStatus(DateTimeSpanStatus status)
	{ m_status = status; }
inline double COleDateTimeSpan::GetTotalDays() const
	{ ((void)0); return m_span; }
inline double COleDateTimeSpan::GetTotalHours() const
	{ ((void)0);
		long lReturns = (long)(m_span * 24 + (1.0 / (2.0 * (60.0 * 60.0 * 24.0))));
		return lReturns;
	}
inline double COleDateTimeSpan::GetTotalMinutes() const
	{ ((void)0);
		long lReturns = (long)(m_span * 24 * 60 + (1.0 / (2.0 * (60.0 * 60.0 * 24.0))));
		return lReturns;
	}
inline double COleDateTimeSpan::GetTotalSeconds() const
	{ ((void)0);
		long lReturns = (long)(m_span * 24 * 60 * 60 + (1.0 / (2.0 * (60.0 * 60.0 * 24.0))));
		return lReturns;
	}

inline long COleDateTimeSpan::GetDays() const
	{ ((void)0); return (long)m_span; }
inline BOOL COleDateTimeSpan::operator==(
	const COleDateTimeSpan& dateSpan) const
	{ return (m_status == dateSpan.m_status &&
		m_span == dateSpan.m_span); }
inline BOOL COleDateTimeSpan::operator!=(
	const COleDateTimeSpan& dateSpan) const
	{ return (m_status != dateSpan.m_status ||
		m_span != dateSpan.m_span); }
inline BOOL COleDateTimeSpan::operator<(
	const COleDateTimeSpan& dateSpan) const
	{ ((void)0);
		((void)0);
		return m_span < dateSpan.m_span; }
inline BOOL COleDateTimeSpan::operator>(
	const COleDateTimeSpan& dateSpan) const
	{ ((void)0);
		((void)0);
		return m_span > dateSpan.m_span; }
inline BOOL COleDateTimeSpan::operator<=(
	const COleDateTimeSpan& dateSpan) const
	{ ((void)0);
		((void)0);
		return m_span <= dateSpan.m_span; }
inline BOOL COleDateTimeSpan::operator>=(
	const COleDateTimeSpan& dateSpan) const
	{ ((void)0);
		((void)0);
		return m_span >= dateSpan.m_span; }
inline const COleDateTimeSpan& COleDateTimeSpan::operator+=(
	const COleDateTimeSpan dateSpan)
	{ *this = *this + dateSpan; return *this; }
inline const COleDateTimeSpan& COleDateTimeSpan::operator-=(
	const COleDateTimeSpan dateSpan)
	{ *this = *this - dateSpan; return *this; }
inline COleDateTimeSpan COleDateTimeSpan::operator-() const
	{ return -this->m_span; }
inline COleDateTimeSpan::operator double() const
	{ return m_span; }


inline COleSafeArray::COleSafeArray()
	{ AfxSafeArrayInit(this);
		vt = VT_EMPTY; }
inline COleSafeArray::~COleSafeArray()
	{ Clear(); }
inline void COleSafeArray::Clear()
	{ ((void)(::VariantClear(this) == 0)); }
inline COleSafeArray::operator LPVARIANT()
	{ return this; }
inline COleSafeArray::operator LPCVARIANT() const
	{ return this; }
inline DWORD COleSafeArray::GetDim()
	{ return ::SafeArrayGetDim(parray); }
inline DWORD COleSafeArray::GetElemSize()
	{ return ::SafeArrayGetElemsize(parray); }

#line 288 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxole.inl"










































































































































#line 1414 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"

#line 1416 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"





#pragma component(minrebuild, on)
#line 1423 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"

#pragma component(mintypeinfo, off)
#line 1426 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"

#line 1428 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdisp.h"


#line 20 "stdafx.h"

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"


















#pragma warning(disable: 4201) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4505) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4514) 
#pragma warning(disable: 4103) 
#pragma warning(disable: 4702) 
#pragma warning(disable: 4237) 
#pragma warning(disable: 4710) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4097) 
#pragma warning(disable: 4786) 
#pragma warning(disable: 4268) 
#pragma warning(disable: 4291) 
#line 34 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"









































#line 43 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"























#line 67 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"


















#line 86 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"
#line 87 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"



#line 91 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"





#line 97 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"



#line 101 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"
	
	
	
#line 105 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"



#line 109 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"

#line 111 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"


















#line 130 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"

#line 132 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"


#line 36 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winnls.h"































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"












#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"















#pragma once
#line 18 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"






#line 25 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"







#pragma pack(push,8)
#line 34 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"


extern "C" {
#line 38 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"

















#line 56 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"


































typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;

#line 97 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"



extern unsigned int _amblksiz;




 void *  __cdecl calloc(size_t, size_t);
 void    __cdecl free(void *);
 void *  __cdecl malloc(size_t);
 void *  __cdecl realloc(void *, size_t);






void *          __cdecl _alloca(size_t);
 void *  __cdecl _expand(void *, size_t);
 size_t  __cdecl _get_sbh_threshold(void);
 int     __cdecl _set_sbh_threshold(size_t);
 int     __cdecl _heapadd(void *, size_t);
 int     __cdecl _heapchk(void);
 int     __cdecl _heapmin(void);
 int     __cdecl _heapset(unsigned int);
 int     __cdecl _heapwalk(_HEAPINFO *);
 size_t  __cdecl _heapused(size_t *, size_t *);
 size_t  __cdecl _msize(void *);




#line 131 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"



#line 135 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"

#line 137 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"






















}
#line 161 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"


#pragma pack(pop)
#line 165 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"

#line 167 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\malloc.h"
#line 52 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"





	
#line 59 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winreg.h"


























































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 62 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"




























#line 30 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"





extern "C"{
#line 37 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"

 



typedef struct IRegistrar IRegistrar;
#line 44 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"




typedef struct IDocHostUIHandlerDispatch IDocHostUIHandlerDispatch;
#line 50 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"




typedef struct IAxWinHostWindow IAxWinHostWindow;
#line 56 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"




typedef struct IAxWinAmbientDispatch IAxWinAmbientDispatch;
#line 62 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"




typedef struct IInternalConnection IInternalConnection;
#line 68 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"






void  * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void  * ); 






 


extern "C" const CLSID CLSID_Registrar;


extern RPC_IF_HANDLE __MIDL_itf_atliface_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_atliface_0000_v0_0_s_ifspec;









 



extern "C" const IID IID_IRegistrar;


    
    struct __declspec(uuid("44EC053B-400F-11D0-9DCD-00A0C90391D3")) __declspec(novtable)
    IRegistrar : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall AddReplacement( 
             LPCOLESTR key,
             LPCOLESTR item) = 0;
        
        virtual  HRESULT __stdcall ClearReplacements( void) = 0;
        
        virtual  HRESULT __stdcall ResourceRegisterSz( 
             LPCOLESTR resFileName,
             LPCOLESTR szID,
             LPCOLESTR szType) = 0;
        
        virtual  HRESULT __stdcall ResourceUnregisterSz( 
             LPCOLESTR resFileName,
             LPCOLESTR szID,
             LPCOLESTR szType) = 0;
        
        virtual  HRESULT __stdcall FileRegister( 
             LPCOLESTR fileName) = 0;
        
        virtual  HRESULT __stdcall FileUnregister( 
             LPCOLESTR fileName) = 0;
        
        virtual  HRESULT __stdcall StringRegister( 
             LPCOLESTR data) = 0;
        
        virtual  HRESULT __stdcall StringUnregister( 
             LPCOLESTR data) = 0;
        
        virtual  HRESULT __stdcall ResourceRegister( 
             LPCOLESTR resFileName,
             UINT nID,
             LPCOLESTR szType) = 0;
        
        virtual  HRESULT __stdcall ResourceUnregister( 
             LPCOLESTR resFileName,
             UINT nID,
             LPCOLESTR szType) = 0;
        
    };
    

























































































































#line 273 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"



 HRESULT __stdcall IRegistrar_AddReplacement_Proxy( 
    IRegistrar  * This,
     LPCOLESTR key,
     LPCOLESTR item);


void __stdcall IRegistrar_AddReplacement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_ClearReplacements_Proxy( 
    IRegistrar  * This);


void __stdcall IRegistrar_ClearReplacements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_ResourceRegisterSz_Proxy( 
    IRegistrar  * This,
     LPCOLESTR resFileName,
     LPCOLESTR szID,
     LPCOLESTR szType);


void __stdcall IRegistrar_ResourceRegisterSz_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_ResourceUnregisterSz_Proxy( 
    IRegistrar  * This,
     LPCOLESTR resFileName,
     LPCOLESTR szID,
     LPCOLESTR szType);


void __stdcall IRegistrar_ResourceUnregisterSz_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_FileRegister_Proxy( 
    IRegistrar  * This,
     LPCOLESTR fileName);


void __stdcall IRegistrar_FileRegister_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_FileUnregister_Proxy( 
    IRegistrar  * This,
     LPCOLESTR fileName);


void __stdcall IRegistrar_FileUnregister_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_StringRegister_Proxy( 
    IRegistrar  * This,
     LPCOLESTR data);


void __stdcall IRegistrar_StringRegister_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_StringUnregister_Proxy( 
    IRegistrar  * This,
     LPCOLESTR data);


void __stdcall IRegistrar_StringUnregister_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_ResourceRegister_Proxy( 
    IRegistrar  * This,
     LPCOLESTR resFileName,
     UINT nID,
     LPCOLESTR szType);


void __stdcall IRegistrar_ResourceRegister_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRegistrar_ResourceUnregister_Proxy( 
    IRegistrar  * This,
     LPCOLESTR resFileName,
     UINT nID,
     LPCOLESTR szType);


void __stdcall IRegistrar_ResourceUnregister_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 406 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"










 


typedef 
enum tagDOCHOSTUIDBLCLKDispatch
    {	docHostUIDblClkDEFAULT	= 0,
	docHostUIDblClkSHOWPROPERTIES	= 1,
	docHostUIDblClkSHOWCODE	= 2
    }	DOCHOSTUIDBLCLKDispatch;

typedef 
enum tagDocHostUIFlagDispatch
    {	docHostUIFlagDIALOG	= 1,
	docHostUIFlagDISABLE_HELP_MENU	= 2,
	docHostUIFlagNO3DBORDER	= 4,
	docHostUIFlagSCROLL_NO	= 8,
	docHostUIFlagDISABLE_SCRIPT_INACTIVE	= 16,
	docHostUIFlagOPENNEWWIN	= 32,
	docHostUIFlagDISABLE_OFFSCREEN	= 64,
	docHostUIFlagFLAT_SCROLLBAR	= 128,
	docHostUIFlagDIV_BLOCKDEFAULT	= 256,
	docHostUIFlagACTIVATE_CLIENTHIT_ONLY	= 512
    }	DocHostUIFlagDispatch;


extern "C" const IID IID_IDocHostUIHandlerDispatch;


    
    struct __declspec(uuid("425B5AF0-65F1-11d1-9611-0000F81E0D0D")) __declspec(novtable)
    IDocHostUIHandlerDispatch : public IDispatch
    {
    public:
        virtual HRESULT __stdcall ShowContextMenu( 
             DWORD dwID,
             DWORD x,
             DWORD y,
             IUnknown  *pcmdtReserved,
             IDispatch  *pdispReserved,
             HRESULT  *dwRetVal) = 0;
        
        virtual HRESULT __stdcall GetHostInfo( 
             DWORD  *pdwFlags,
             DWORD  *pdwDoubleClick) = 0;
        
        virtual HRESULT __stdcall ShowUI( 
             DWORD dwID,
             IUnknown  *pActiveObject,
             IUnknown  *pCommandTarget,
             IUnknown  *pFrame,
             IUnknown  *pDoc,
             HRESULT  *dwRetVal) = 0;
        
        virtual HRESULT __stdcall HideUI( void) = 0;
        
        virtual HRESULT __stdcall UpdateUI( void) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             VARIANT_BOOL fEnable) = 0;
        
        virtual HRESULT __stdcall OnDocWindowActivate( 
             VARIANT_BOOL fActivate) = 0;
        
        virtual HRESULT __stdcall OnFrameWindowActivate( 
             VARIANT_BOOL fActivate) = 0;
        
        virtual HRESULT __stdcall ResizeBorder( 
             long left,
             long top,
             long right,
             long bottom,
             IUnknown  *pUIWindow,
             VARIANT_BOOL fFrameWindow) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
             DWORD hWnd,
             DWORD nMessage,
             DWORD wParam,
             DWORD lParam,
             BSTR bstrGuidCmdGroup,
             DWORD nCmdID,
             HRESULT  *dwRetVal) = 0;
        
        virtual HRESULT __stdcall GetOptionKeyPath( 
             BSTR  *pbstrKey,
             DWORD dw) = 0;
        
        virtual HRESULT __stdcall GetDropTarget( 
             IUnknown  *pDropTarget,
             IUnknown  * *ppDropTarget) = 0;
        
        virtual HRESULT __stdcall GetExternal( 
             IDispatch  * *ppDispatch) = 0;
        
        virtual HRESULT __stdcall TranslateUrl( 
             DWORD dwTranslate,
             BSTR bstrURLIn,
             BSTR  *pbstrURLOut) = 0;
        
        virtual HRESULT __stdcall FilterDataObject( 
             IUnknown  *pDO,
             IUnknown  * *ppDORet) = 0;
        
    };
    























































































































































































































#line 737 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"



HRESULT __stdcall IDocHostUIHandlerDispatch_ShowContextMenu_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     DWORD dwID,
     DWORD x,
     DWORD y,
     IUnknown  *pcmdtReserved,
     IDispatch  *pdispReserved,
     HRESULT  *dwRetVal);


void __stdcall IDocHostUIHandlerDispatch_ShowContextMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_GetHostInfo_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     DWORD  *pdwFlags,
     DWORD  *pdwDoubleClick);


void __stdcall IDocHostUIHandlerDispatch_GetHostInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_ShowUI_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     DWORD dwID,
     IUnknown  *pActiveObject,
     IUnknown  *pCommandTarget,
     IUnknown  *pFrame,
     IUnknown  *pDoc,
     HRESULT  *dwRetVal);


void __stdcall IDocHostUIHandlerDispatch_ShowUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_HideUI_Proxy( 
    IDocHostUIHandlerDispatch  * This);


void __stdcall IDocHostUIHandlerDispatch_HideUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_UpdateUI_Proxy( 
    IDocHostUIHandlerDispatch  * This);


void __stdcall IDocHostUIHandlerDispatch_UpdateUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_EnableModeless_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     VARIANT_BOOL fEnable);


void __stdcall IDocHostUIHandlerDispatch_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_OnDocWindowActivate_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     VARIANT_BOOL fActivate);


void __stdcall IDocHostUIHandlerDispatch_OnDocWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_OnFrameWindowActivate_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     VARIANT_BOOL fActivate);


void __stdcall IDocHostUIHandlerDispatch_OnFrameWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_ResizeBorder_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     long left,
     long top,
     long right,
     long bottom,
     IUnknown  *pUIWindow,
     VARIANT_BOOL fFrameWindow);


void __stdcall IDocHostUIHandlerDispatch_ResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_TranslateAccelerator_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     DWORD hWnd,
     DWORD nMessage,
     DWORD wParam,
     DWORD lParam,
     BSTR bstrGuidCmdGroup,
     DWORD nCmdID,
     HRESULT  *dwRetVal);


void __stdcall IDocHostUIHandlerDispatch_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_GetOptionKeyPath_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     BSTR  *pbstrKey,
     DWORD dw);


void __stdcall IDocHostUIHandlerDispatch_GetOptionKeyPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_GetDropTarget_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     IUnknown  *pDropTarget,
     IUnknown  * *ppDropTarget);


void __stdcall IDocHostUIHandlerDispatch_GetDropTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_GetExternal_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     IDispatch  * *ppDispatch);


void __stdcall IDocHostUIHandlerDispatch_GetExternal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_TranslateUrl_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     DWORD dwTranslate,
     BSTR bstrURLIn,
     BSTR  *pbstrURLOut);


void __stdcall IDocHostUIHandlerDispatch_TranslateUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDocHostUIHandlerDispatch_FilterDataObject_Proxy( 
    IDocHostUIHandlerDispatch  * This,
     IUnknown  *pDO,
     IUnknown  * *ppDORet);


void __stdcall IDocHostUIHandlerDispatch_FilterDataObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 947 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"










 



extern "C" const IID IID_IAxWinHostWindow;


    
    struct __declspec(uuid("B6EA2050-048A-11d1-82B9-00C04FB9942E")) __declspec(novtable)
    IAxWinHostWindow : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateControl( 
             LPCOLESTR lpTricsData,
             HWND hWnd,
             IStream  *pStream) = 0;
        
        virtual HRESULT __stdcall CreateControlEx( 
             LPCOLESTR lpTricsData,
             HWND hWnd,
             IStream  *pStream,
             IUnknown  * *ppUnk,
             const IID & riidAdvise,
             IUnknown  *punkAdvise) = 0;
        
        virtual HRESULT __stdcall AttachControl( 
             IUnknown  *pUnkControl,
             HWND hWnd) = 0;
        
        virtual HRESULT __stdcall QueryControl( 
             const IID & riid,
             void  * *ppvObject) = 0;
        
        virtual HRESULT __stdcall SetExternalDispatch( 
             IDispatch  *pDisp) = 0;
        
        virtual HRESULT __stdcall SetExternalUIHandler( 
             IDocHostUIHandlerDispatch  *pDisp) = 0;
        
    };
    






























































































#line 1093 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"



HRESULT __stdcall IAxWinHostWindow_CreateControl_Proxy( 
    IAxWinHostWindow  * This,
     LPCOLESTR lpTricsData,
     HWND hWnd,
     IStream  *pStream);


void __stdcall IAxWinHostWindow_CreateControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAxWinHostWindow_CreateControlEx_Proxy( 
    IAxWinHostWindow  * This,
     LPCOLESTR lpTricsData,
     HWND hWnd,
     IStream  *pStream,
     IUnknown  * *ppUnk,
     const IID & riidAdvise,
     IUnknown  *punkAdvise);


void __stdcall IAxWinHostWindow_CreateControlEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAxWinHostWindow_AttachControl_Proxy( 
    IAxWinHostWindow  * This,
     IUnknown  *pUnkControl,
     HWND hWnd);


void __stdcall IAxWinHostWindow_AttachControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAxWinHostWindow_QueryControl_Proxy( 
    IAxWinHostWindow  * This,
     const IID & riid,
     void  * *ppvObject);


void __stdcall IAxWinHostWindow_QueryControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAxWinHostWindow_SetExternalDispatch_Proxy( 
    IAxWinHostWindow  * This,
     IDispatch  *pDisp);


void __stdcall IAxWinHostWindow_SetExternalDispatch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAxWinHostWindow_SetExternalUIHandler_Proxy( 
    IAxWinHostWindow  * This,
     IDocHostUIHandlerDispatch  *pDisp);


void __stdcall IAxWinHostWindow_SetExternalUIHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1179 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"










 



extern "C" const IID IID_IAxWinAmbientDispatch;


    
    struct __declspec(uuid("B6EA2051-048A-11d1-82B9-00C04FB9942E")) __declspec(novtable)
    IAxWinAmbientDispatch : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall put_AllowWindowlessActivation( 
             VARIANT_BOOL bCanWindowlessActivate) = 0;
        
        virtual  HRESULT __stdcall get_AllowWindowlessActivation( 
             VARIANT_BOOL  *pbCanWindowlessActivate) = 0;
        
        virtual  HRESULT __stdcall put_BackColor( 
             OLE_COLOR clrBackground) = 0;
        
        virtual  HRESULT __stdcall get_BackColor( 
             OLE_COLOR  *pclrBackground) = 0;
        
        virtual  HRESULT __stdcall put_ForeColor( 
             OLE_COLOR clrForeground) = 0;
        
        virtual  HRESULT __stdcall get_ForeColor( 
             OLE_COLOR  *pclrForeground) = 0;
        
        virtual  HRESULT __stdcall put_LocaleID( 
             LCID lcidLocaleID) = 0;
        
        virtual  HRESULT __stdcall get_LocaleID( 
             LCID  *plcidLocaleID) = 0;
        
        virtual  HRESULT __stdcall put_UserMode( 
             VARIANT_BOOL bUserMode) = 0;
        
        virtual  HRESULT __stdcall get_UserMode( 
             VARIANT_BOOL  *pbUserMode) = 0;
        
        virtual  HRESULT __stdcall put_DisplayAsDefault( 
             VARIANT_BOOL bDisplayAsDefault) = 0;
        
        virtual  HRESULT __stdcall get_DisplayAsDefault( 
             VARIANT_BOOL  *pbDisplayAsDefault) = 0;
        
        virtual  HRESULT __stdcall put_Font( 
             IFontDisp  *pFont) = 0;
        
        virtual  HRESULT __stdcall get_Font( 
             IFontDisp  * *pFont) = 0;
        
        virtual  HRESULT __stdcall put_MessageReflect( 
             VARIANT_BOOL bMsgReflect) = 0;
        
        virtual  HRESULT __stdcall get_MessageReflect( 
             VARIANT_BOOL  *pbMsgReflect) = 0;
        
        virtual  HRESULT __stdcall get_ShowGrabHandles( 
            VARIANT_BOOL  *pbShowGrabHandles) = 0;
        
        virtual  HRESULT __stdcall get_ShowHatching( 
            VARIANT_BOOL  *pbShowHatching) = 0;
        
        virtual  HRESULT __stdcall put_DocHostFlags( 
             DWORD dwDocHostFlags) = 0;
        
        virtual  HRESULT __stdcall get_DocHostFlags( 
             DWORD  *pdwDocHostFlags) = 0;
        
        virtual  HRESULT __stdcall put_DocHostDoubleClickFlags( 
             DWORD dwDocHostDoubleClickFlags) = 0;
        
        virtual  HRESULT __stdcall get_DocHostDoubleClickFlags( 
             DWORD  *pdwDocHostDoubleClickFlags) = 0;
        
        virtual  HRESULT __stdcall put_AllowContextMenu( 
             VARIANT_BOOL bAllowContextMenu) = 0;
        
        virtual  HRESULT __stdcall get_AllowContextMenu( 
             VARIANT_BOOL  *pbAllowContextMenu) = 0;
        
        virtual  HRESULT __stdcall put_AllowShowUI( 
             VARIANT_BOOL bAllowShowUI) = 0;
        
        virtual  HRESULT __stdcall get_AllowShowUI( 
             VARIANT_BOOL  *pbAllowShowUI) = 0;
        
        virtual  HRESULT __stdcall put_OptionKeyPath( 
             BSTR bstrOptionKeyPath) = 0;
        
        virtual  HRESULT __stdcall get_OptionKeyPath( 
             BSTR  *pbstrOptionKeyPath) = 0;
        
    };
    

























































































































































































































































































#line 1569 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"



 HRESULT __stdcall IAxWinAmbientDispatch_put_AllowWindowlessActivation_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL bCanWindowlessActivate);


void __stdcall IAxWinAmbientDispatch_put_AllowWindowlessActivation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_AllowWindowlessActivation_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL  *pbCanWindowlessActivate);


void __stdcall IAxWinAmbientDispatch_get_AllowWindowlessActivation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_BackColor_Proxy( 
    IAxWinAmbientDispatch  * This,
     OLE_COLOR clrBackground);


void __stdcall IAxWinAmbientDispatch_put_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_BackColor_Proxy( 
    IAxWinAmbientDispatch  * This,
     OLE_COLOR  *pclrBackground);


void __stdcall IAxWinAmbientDispatch_get_BackColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_ForeColor_Proxy( 
    IAxWinAmbientDispatch  * This,
     OLE_COLOR clrForeground);


void __stdcall IAxWinAmbientDispatch_put_ForeColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_ForeColor_Proxy( 
    IAxWinAmbientDispatch  * This,
     OLE_COLOR  *pclrForeground);


void __stdcall IAxWinAmbientDispatch_get_ForeColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_LocaleID_Proxy( 
    IAxWinAmbientDispatch  * This,
     LCID lcidLocaleID);


void __stdcall IAxWinAmbientDispatch_put_LocaleID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_LocaleID_Proxy( 
    IAxWinAmbientDispatch  * This,
     LCID  *plcidLocaleID);


void __stdcall IAxWinAmbientDispatch_get_LocaleID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_UserMode_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL bUserMode);


void __stdcall IAxWinAmbientDispatch_put_UserMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_UserMode_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL  *pbUserMode);


void __stdcall IAxWinAmbientDispatch_get_UserMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_DisplayAsDefault_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL bDisplayAsDefault);


void __stdcall IAxWinAmbientDispatch_put_DisplayAsDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_DisplayAsDefault_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL  *pbDisplayAsDefault);


void __stdcall IAxWinAmbientDispatch_get_DisplayAsDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_Font_Proxy( 
    IAxWinAmbientDispatch  * This,
     IFontDisp  *pFont);


void __stdcall IAxWinAmbientDispatch_put_Font_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_Font_Proxy( 
    IAxWinAmbientDispatch  * This,
     IFontDisp  * *pFont);


void __stdcall IAxWinAmbientDispatch_get_Font_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_MessageReflect_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL bMsgReflect);


void __stdcall IAxWinAmbientDispatch_put_MessageReflect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_MessageReflect_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL  *pbMsgReflect);


void __stdcall IAxWinAmbientDispatch_get_MessageReflect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_ShowGrabHandles_Proxy( 
    IAxWinAmbientDispatch  * This,
    VARIANT_BOOL  *pbShowGrabHandles);


void __stdcall IAxWinAmbientDispatch_get_ShowGrabHandles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_ShowHatching_Proxy( 
    IAxWinAmbientDispatch  * This,
    VARIANT_BOOL  *pbShowHatching);


void __stdcall IAxWinAmbientDispatch_get_ShowHatching_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_DocHostFlags_Proxy( 
    IAxWinAmbientDispatch  * This,
     DWORD dwDocHostFlags);


void __stdcall IAxWinAmbientDispatch_put_DocHostFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_DocHostFlags_Proxy( 
    IAxWinAmbientDispatch  * This,
     DWORD  *pdwDocHostFlags);


void __stdcall IAxWinAmbientDispatch_get_DocHostFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_DocHostDoubleClickFlags_Proxy( 
    IAxWinAmbientDispatch  * This,
     DWORD dwDocHostDoubleClickFlags);


void __stdcall IAxWinAmbientDispatch_put_DocHostDoubleClickFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_DocHostDoubleClickFlags_Proxy( 
    IAxWinAmbientDispatch  * This,
     DWORD  *pdwDocHostDoubleClickFlags);


void __stdcall IAxWinAmbientDispatch_get_DocHostDoubleClickFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_AllowContextMenu_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL bAllowContextMenu);


void __stdcall IAxWinAmbientDispatch_put_AllowContextMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_AllowContextMenu_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL  *pbAllowContextMenu);


void __stdcall IAxWinAmbientDispatch_get_AllowContextMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_AllowShowUI_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL bAllowShowUI);


void __stdcall IAxWinAmbientDispatch_put_AllowShowUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_AllowShowUI_Proxy( 
    IAxWinAmbientDispatch  * This,
     VARIANT_BOOL  *pbAllowShowUI);


void __stdcall IAxWinAmbientDispatch_get_AllowShowUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_put_OptionKeyPath_Proxy( 
    IAxWinAmbientDispatch  * This,
     BSTR bstrOptionKeyPath);


void __stdcall IAxWinAmbientDispatch_put_OptionKeyPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAxWinAmbientDispatch_get_OptionKeyPath_Proxy( 
    IAxWinAmbientDispatch  * This,
     BSTR  *pbstrOptionKeyPath);


void __stdcall IAxWinAmbientDispatch_get_OptionKeyPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1910 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"










 



extern "C" const IID IID_IInternalConnection;


    
    struct __declspec(uuid("72AD0770-6A9F-11d1-BCEC-0060088F444E")) __declspec(novtable)
    IInternalConnection : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddConnection( void) = 0;
        
        virtual HRESULT __stdcall ReleaseConnection( void) = 0;
        
    };
    























































#line 1994 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"



HRESULT __stdcall IInternalConnection_AddConnection_Proxy( 
    IInternalConnection  * This);


void __stdcall IInternalConnection_AddConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternalConnection_ReleaseConnection_Proxy( 
    IInternalConnection  * This);


void __stdcall IInternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2021 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"







 



namespace ATL
{
#line 2035 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"

int __stdcall AtlAxDialogBoxW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogProc, LPARAM dwInitParam);
int __stdcall AtlAxDialogBoxA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogProc, LPARAM dwInitParam);




#line 2043 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"

HWND __stdcall AtlAxCreateDialogW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogProc, LPARAM dwInitParam);
HWND __stdcall AtlAxCreateDialogA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogProc, LPARAM dwInitParam);




#line 2051 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"

HRESULT __stdcall AtlAxCreateControl(LPCOLESTR lpszName, HWND hWnd, IStream* pStream, IUnknown** ppUnkContainer);
HRESULT __stdcall AtlAxCreateControlEx(LPCOLESTR lpszName, HWND hWnd, IStream* pStream, 
		IUnknown** ppUnkContainer, IUnknown** ppUnkControl, 
		const IID & iidSink=GUID_NULL, IUnknown* punkSink=0);
HRESULT __stdcall AtlAxAttachControl(IUnknown* pControl, HWND hWnd, IUnknown** ppUnkContainer);
BOOL __stdcall AtlAxWinInit();

HRESULT __stdcall AtlAxGetHost(HWND h, IUnknown** pp);
HRESULT __stdcall AtlAxGetControl(HWND h, IUnknown** pp);


}; 
#line 2065 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"


extern RPC_IF_HANDLE __MIDL_itf_atliface_0213_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_atliface_0213_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(     unsigned long  *, unsigned long            , BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserMarshal(  unsigned long  *, unsigned char  *, BSTR  * ); 
unsigned char  * __stdcall  BSTR_UserUnmarshal(unsigned long  *, unsigned char  *, BSTR  * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long  *, BSTR  * ); 

unsigned long             __stdcall  HWND_UserSize(     unsigned long  *, unsigned long            , HWND  * ); 
unsigned char  * __stdcall  HWND_UserMarshal(  unsigned long  *, unsigned char  *, HWND  * ); 
unsigned char  * __stdcall  HWND_UserUnmarshal(unsigned long  *, unsigned char  *, HWND  * ); 
void                      __stdcall  HWND_UserFree(     unsigned long  *, HWND  * ); 




}
#line 2087 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"

#line 2089 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"
#line 63 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"






#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"

















#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atldef.h"





































































































































#line 19 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"





#pragma pack(push,8)








	
		
	

#line 38 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"


	LPDEVMODEA __stdcall AtlDevModeW2A(LPDEVMODEA lpDevModeA, LPDEVMODEW lpDevModeW);
#line 43 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"



inline LPWSTR __stdcall AtlA2WHelper(LPWSTR lpw, LPCSTR lpa, int nChars, UINT acp)
{
	((void)0);
	((void)0);
	
	
	
	lpw[0] = '\0';
	MultiByteToWideChar(acp, 0, lpa, -1, lpw, nChars);
	return lpw;
}

inline LPSTR __stdcall AtlW2AHelper(LPSTR lpa, LPCWSTR lpw, int nChars, UINT acp)
{
	((void)0);
	((void)0);
	
	
	
	lpa[0] = '\0';
	WideCharToMultiByte(acp, 0, lpw, -1, lpa, nChars, 0, 0);
	return lpa;
}
inline LPWSTR __stdcall AtlA2WHelper(LPWSTR lpw, LPCSTR lpa, int nChars)
{
	return AtlA2WHelper(lpw, lpa, nChars, 0);
}

inline LPSTR __stdcall AtlW2AHelper(LPSTR lpa, LPCWSTR lpw, int nChars)
{
	return AtlW2AHelper(lpa, lpw, nChars, 0);
}









	
		
		
	#line 91 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
#line 92 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"







	



#line 104 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"







	



#line 116 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"














#line 131 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"









#line 141 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
	inline size_t ocslen(LPCOLESTR x) { return lstrlenW(x); }
	
	inline OLECHAR* ocscpy(LPOLESTR dest, LPCOLESTR src)
	{return (LPOLESTR) memcpy(dest, src, (lstrlenW(src)+1)*sizeof(WCHAR));}
	inline OLECHAR* ocscat(LPOLESTR dest, LPCOLESTR src) { return ocscpy(dest+ocslen(dest), src); }
	
	
	
	
	
	inline LPOLESTR CharNextO(LPCOLESTR lp) {return (LPOLESTR) ((*lp) ? (lp+1) : lp);}
#line 153 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"











	inline LPOLESTR W2OLE(LPWSTR lp) { return lp; }
	inline LPWSTR OLE2W(LPOLESTR lp) { return lp; }
	
	
	inline LPCOLESTR W2COLE(LPCWSTR lp) { return lp; }
	inline LPCWSTR OLE2CW(LPCOLESTR lp) { return lp; }
	
	
#line 173 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"











	
	
	inline LPSTR T2A(LPTSTR lp) { return lp; }
	inline LPTSTR A2T(LPSTR lp) { return lp; }
	
	
	inline LPCSTR T2CA(LPCTSTR lp) { return lp; }
	inline LPCTSTR A2CT(LPCSTR lp) { return lp; }
#line 193 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"

inline BSTR A2WBSTR(LPCSTR lp, int nLen = -1)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	BSTR str = 0;
	int nConvertedLen = MultiByteToWideChar(_acp, 0, lp,
		nLen, 0, 0)-1;
	str = ::SysAllocStringLen(0, nConvertedLen);
	if (str != 0)
	{
		MultiByteToWideChar(_acp, 0, lp, -1,
			str, nConvertedLen);
	}
	return str;
}

inline BSTR OLE2BSTR(LPCOLESTR lp) {return ::SysAllocString(lp);}





#line 216 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"




#line 221 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
	inline BSTR T2BSTR(LPCTSTR lp) {int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa; return A2WBSTR(lp);}
	inline BSTR A2BSTR(LPCSTR lp) {int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa; return A2WBSTR(lp);}
	inline BSTR W2BSTR(LPCWSTR lp) {return ::SysAllocString(lp);}
#line 225 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"




inline LPDEVMODEW AtlDevModeA2W(LPDEVMODEW lpDevModeW, LPDEVMODEA lpDevModeA)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	if (lpDevModeA == 0)
		return 0;
	((void)0);
	AtlA2WHelper(lpDevModeW->dmDeviceName, (LPCSTR)lpDevModeA->dmDeviceName, 32*sizeof(WCHAR), _acp);
	memcpy(&lpDevModeW->dmSpecVersion, &lpDevModeA->dmSpecVersion,
		(size_t)&(((DEVMODEW *)0)->dmFormName) - (size_t)&(((DEVMODEW *)0)->dmSpecVersion));
	AtlA2WHelper(lpDevModeW->dmFormName, (LPCSTR)lpDevModeA->dmFormName, 32*sizeof(WCHAR), _acp);
	memcpy(&lpDevModeW->dmLogPixels, &lpDevModeA->dmLogPixels,
		sizeof(DEVMODEW) - (size_t)&(((DEVMODEW *)0)->dmLogPixels));
	if (lpDevModeA->dmDriverExtra != 0)
		memcpy(lpDevModeW+1, lpDevModeA+1, lpDevModeA->dmDriverExtra);
	lpDevModeW->dmSize = sizeof(DEVMODEW);
	return lpDevModeW;
}

inline LPTEXTMETRICW AtlTextMetricA2W(LPTEXTMETRICW lptmW, LPTEXTMETRICA lptmA)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	if (lptmA == 0)
		return 0;
	((void)0);
	memcpy(lptmW, lptmA, sizeof(LONG) * 11);
	memcpy(&lptmW->tmItalic, &lptmA->tmItalic, sizeof(BYTE) * 5);
	MultiByteToWideChar(_acp, 0, (LPCSTR)&lptmA->tmFirstChar, 1, &lptmW->tmFirstChar, 1);
	MultiByteToWideChar(_acp, 0, (LPCSTR)&lptmA->tmLastChar, 1, &lptmW->tmLastChar, 1);
	MultiByteToWideChar(_acp, 0, (LPCSTR)&lptmA->tmDefaultChar, 1, &lptmW->tmDefaultChar, 1);
	MultiByteToWideChar(_acp, 0, (LPCSTR)&lptmA->tmBreakChar, 1, &lptmW->tmBreakChar, 1);
	return lptmW;
}

inline LPTEXTMETRICA AtlTextMetricW2A(LPTEXTMETRICA lptmA, LPTEXTMETRICW lptmW)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	if (lptmW == 0)
		return 0;
	((void)0);
	memcpy(lptmA, lptmW, sizeof(LONG) * 11);
	memcpy(&lptmA->tmItalic, &lptmW->tmItalic, sizeof(BYTE) * 5);
	WideCharToMultiByte(_acp, 0, &lptmW->tmFirstChar, 1, (LPSTR)&lptmA->tmFirstChar, 1, 0, 0);
	WideCharToMultiByte(_acp, 0, &lptmW->tmLastChar, 1, (LPSTR)&lptmA->tmLastChar, 1, 0, 0);
	WideCharToMultiByte(_acp, 0, &lptmW->tmDefaultChar, 1, (LPSTR)&lptmA->tmDefaultChar, 1, 0, 0);
	WideCharToMultiByte(_acp, 0, &lptmW->tmBreakChar, 1, (LPSTR)&lptmA->tmBreakChar, 1, 0, 0);
	return lptmA;
}






#line 283 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
















	
	
	
	
#line 304 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"







#line 312 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"





#line 318 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
	
	
	
	
#line 323 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"

#line 325 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"

#pragma pack(pop)




#line 332 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
#line 333 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"

#line 335 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"







inline LPDEVMODEA __stdcall AtlDevModeW2A(LPDEVMODEA lpDevModeA, LPDEVMODEW lpDevModeW)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	if (lpDevModeW == 0)
		return 0;
	((void)0);
	AtlW2AHelper((LPSTR)lpDevModeA->dmDeviceName, lpDevModeW->dmDeviceName, 32*sizeof(char), _acp);
	memcpy(&lpDevModeA->dmSpecVersion, &lpDevModeW->dmSpecVersion,
		(size_t)&(((DEVMODEA *)0)->dmFormName) - (size_t)&(((DEVMODEA *)0)->dmSpecVersion));
	AtlW2AHelper((LPSTR)lpDevModeA->dmFormName, lpDevModeW->dmFormName, 32*sizeof(char), _acp);
	memcpy(&lpDevModeA->dmLogPixels, &lpDevModeW->dmLogPixels,
		sizeof(DEVMODEA) - (size_t)&(((DEVMODEA *)0)->dmLogPixels));
	if (lpDevModeW->dmDriverExtra != 0)
		memcpy(lpDevModeA+1, lpDevModeW+1, lpDevModeW->dmDriverExtra);
	lpDevModeA->dmSize = sizeof(DEVMODEA);
	return lpDevModeA;
}

#line 361 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"




#line 366 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlconv.h"
#line 70 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"



























#line 29 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
#line 31 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"






















#line 54 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
#line 55 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack8.h"
#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
#line 59 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"


extern "C" {
#line 63 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
















extern "C" __declspec(dllimport) LPSTR __stdcall    StrChrA(LPCSTR lpStart, WORD wMatch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrChrW(LPCWSTR lpStart, WCHAR wMatch);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrChrIA(LPCSTR lpStart, WORD wMatch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrChrIW(LPCWSTR lpStart, WCHAR wMatch);
extern "C" __declspec(dllimport) int __stdcall      StrCmpNA(LPCSTR lpStr1, LPCSTR lpStr2, int nChar);
extern "C" __declspec(dllimport) int __stdcall      StrCmpNW(LPCWSTR lpStr1, LPCWSTR lpStr2, int nChar);
extern "C" __declspec(dllimport) int __stdcall      StrCmpNIA(LPCSTR lpStr1, LPCSTR lpStr2, int nChar);
extern "C" __declspec(dllimport) int __stdcall      StrCmpNIW(LPCWSTR lpStr1, LPCWSTR lpStr2, int nChar);
extern "C" __declspec(dllimport) int __stdcall      StrCSpnA(LPCSTR lpStr, LPCSTR lpSet);
extern "C" __declspec(dllimport) int __stdcall      StrCSpnW(LPCWSTR lpStr, LPCWSTR lpSet);
extern "C" __declspec(dllimport) int __stdcall      StrCSpnIA(LPCSTR lpStr, LPCSTR lpSet);
extern "C" __declspec(dllimport) int __stdcall      StrCSpnIW(LPCWSTR lpStr, LPCWSTR lpSet);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrDupA(LPCSTR lpSrch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrDupW(LPCWSTR lpSrch);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrFormatByteSizeA(DWORD dw, LPSTR szBuf, UINT uiBufSize);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrFormatByteSize64A(LONGLONG qdw, LPSTR szBuf, UINT uiBufSize);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrFormatByteSizeW(LONGLONG qdw, LPWSTR szBuf, UINT uiBufSize);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrFormatKBSizeW(LONGLONG qdw, LPWSTR szBuf, UINT uiBufSize);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrFormatKBSizeA(LONGLONG qdw, LPSTR szBuf, UINT uiBufSize);
extern "C" __declspec(dllimport) int __stdcall      StrFromTimeIntervalA(LPSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits);
extern "C" __declspec(dllimport) int __stdcall      StrFromTimeIntervalW(LPWSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits);
extern "C" __declspec(dllimport) BOOL __stdcall     StrIsIntlEqualA(BOOL fCaseSens, LPCSTR lpString1, LPCSTR lpString2, int nChar);
extern "C" __declspec(dllimport) BOOL __stdcall     StrIsIntlEqualW(BOOL fCaseSens, LPCWSTR lpString1, LPCWSTR lpString2, int nChar);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrNCatA(LPSTR psz1, LPCSTR psz2, int cchMax);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrNCatW(LPWSTR psz1, LPCWSTR psz2, int cchMax);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrPBrkA(LPCSTR psz, LPCSTR pszSet);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrPBrkW(LPCWSTR psz, LPCWSTR pszSet);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrRChrA(LPCSTR lpStart, LPCSTR lpEnd, WORD wMatch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrRChrW(LPCWSTR lpStart, LPCWSTR lpEnd, WCHAR wMatch);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrRChrIA(LPCSTR lpStart, LPCSTR lpEnd, WORD wMatch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrRChrIW(LPCWSTR lpStart, LPCWSTR lpEnd, WCHAR wMatch);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrRStrIA(LPCSTR lpSource, LPCSTR lpLast, LPCSTR lpSrch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrRStrIW(LPCWSTR lpSource, LPCWSTR lpLast, LPCWSTR lpSrch);
extern "C" __declspec(dllimport) int __stdcall      StrSpnA(LPCSTR psz, LPCSTR pszSet);
extern "C" __declspec(dllimport) int __stdcall      StrSpnW(LPCWSTR psz, LPCWSTR pszSet);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrStrA(LPCSTR lpFirst, LPCSTR lpSrch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrStrW(LPCWSTR lpFirst, LPCWSTR lpSrch);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrStrIA(LPCSTR lpFirst, LPCSTR lpSrch);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrStrIW(LPCWSTR lpFirst, LPCWSTR lpSrch);
extern "C" __declspec(dllimport) int __stdcall      StrToIntA(LPCSTR lpSrc);
extern "C" __declspec(dllimport) int __stdcall      StrToIntW(LPCWSTR lpSrc);
extern "C" __declspec(dllimport) BOOL __stdcall     StrToIntExA(LPCSTR pszString, DWORD dwFlags, int * piRet);
extern "C" __declspec(dllimport) BOOL __stdcall     StrToIntExW(LPCWSTR pszString, DWORD dwFlags, int * piRet);



#line 126 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     StrTrimA(LPSTR psz, LPCSTR pszTrimChars);
extern "C" __declspec(dllimport) BOOL __stdcall     StrTrimW(LPWSTR psz, LPCWSTR pszTrimChars);

extern "C" __declspec(dllimport) LPWSTR __stdcall   StrCatW(LPWSTR psz1, LPCWSTR psz2);
extern "C" __declspec(dllimport) int __stdcall      StrCmpW(LPCWSTR psz1, LPCWSTR psz2);
extern "C" __declspec(dllimport) int __stdcall      StrCmpIW(LPCWSTR psz1, LPCWSTR psz2);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrCpyW(LPWSTR psz1, LPCWSTR psz2);
extern "C" __declspec(dllimport) LPWSTR __stdcall   StrCpyNW(LPWSTR psz1, LPCWSTR psz2, int cchMax);

extern "C" __declspec(dllimport) LPWSTR __stdcall   StrCatBuffW(LPWSTR pszDest, LPCWSTR pszSrc, int cchDestBuffSize);
extern "C" __declspec(dllimport) LPSTR __stdcall    StrCatBuffA(LPSTR pszDest, LPCSTR pszSrc, int cchDestBuffSize);

extern "C" __declspec(dllimport) BOOL __stdcall     ChrCmpIA(WORD w1, WORD w2);
extern "C" __declspec(dllimport) BOOL __stdcall     ChrCmpIW(WCHAR w1, WCHAR w2);

extern "C" __declspec(dllimport) int __stdcall      wvnsprintfA(LPSTR lpOut, int cchLimitIn, LPCSTR lpFmt, va_list arglist);
extern "C" __declspec(dllimport) int __stdcall      wvnsprintfW(LPWSTR lpOut, int cchLimitIn, LPCWSTR lpFmt, va_list arglist);
extern "C" __declspec(dllimport) int __cdecl     wnsprintfA(LPSTR lpOut, int cchLimitIn, LPCSTR lpFmt, ...);
extern "C" __declspec(dllimport) int __cdecl     wnsprintfW(LPWSTR lpOut, int cchLimitIn, LPCWSTR lpFmt, ...);






extern "C" __declspec(dllimport) HRESULT __stdcall StrRetToStrA(STRRET *pstr, LPCITEMIDLIST pidl, LPSTR *ppsz);
extern "C" __declspec(dllimport) HRESULT __stdcall StrRetToStrW(STRRET *pstr, LPCITEMIDLIST pidl, LPWSTR *ppsz);




#line 158 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall StrRetToBufA(STRRET *pstr, LPCITEMIDLIST pidl, LPSTR pszBuf, UINT cchBuf);
extern "C" __declspec(dllimport) HRESULT __stdcall StrRetToBufW(STRRET *pstr, LPCITEMIDLIST pidl, LPWSTR pszBuf, UINT cchBuf);




#line 165 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall StrRetToBSTR(STRRET *pstr, LPCITEMIDLIST pidl, BSTR *pbstr);



extern "C" __declspec(dllimport) HRESULT __stdcall SHStrDupA(LPCSTR psz, WCHAR **ppwsz);
extern "C" __declspec(dllimport) HRESULT __stdcall SHStrDupW(LPCWSTR psz, WCHAR **ppwsz);




#line 176 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

extern "C" __declspec(dllimport) int __stdcall StrCmpLogicalW(LPCWSTR psz1, LPCWSTR psz2);
extern "C" __declspec(dllimport) DWORD __stdcall StrCatChainW(LPWSTR pszDst, DWORD cchDst, DWORD ichAt, LPCWSTR pszSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall SHLoadIndirectString(LPCWSTR pszSource, LPWSTR pszOutBuf, UINT cchOutBuf, void **ppvReserved);
























































#line 238 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"













#line 252 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"





extern "C" __declspec(dllimport) BOOL __stdcall     IntlStrEqWorkerA(BOOL fCaseSens, LPCSTR lpString1, LPCSTR lpString2, int nChar);
extern "C" __declspec(dllimport) BOOL __stdcall     IntlStrEqWorkerW(BOOL fCaseSens, LPCWSTR lpString1, LPCWSTR lpString2, int nChar);












#line 272 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"












#line 285 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"




































#line 322 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"


#line 325 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"








extern "C" __declspec(dllimport) LPSTR __stdcall  PathAddBackslashA(LPSTR pszPath);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathAddBackslashW(LPWSTR pszPath);




#line 340 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathAddExtensionA(LPSTR pszPath, LPCSTR pszExt);
extern "C" __declspec(dllimport) BOOL __stdcall     PathAddExtensionW(LPWSTR pszPath, LPCWSTR pszExt);




#line 347 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathAppendA(LPSTR pszPath, LPCSTR pMore);
extern "C" __declspec(dllimport) BOOL __stdcall     PathAppendW(LPWSTR pszPath, LPCWSTR pMore);
extern "C" __declspec(dllimport) LPSTR __stdcall  PathBuildRootA(LPSTR pszRoot, int iDrive);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathBuildRootW(LPWSTR pszRoot, int iDrive);




#line 356 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathCanonicalizeA(LPSTR pszBuf, LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathCanonicalizeW(LPWSTR pszBuf, LPCWSTR pszPath);
extern "C" __declspec(dllimport) LPSTR __stdcall  PathCombineA(LPSTR pszDest, LPCSTR pszDir, LPCSTR pszFile);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathCombineW(LPWSTR pszDest, LPCWSTR pszDir, LPCWSTR pszFile);




#line 365 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathCompactPathA(HDC hDC, LPSTR pszPath, UINT dx);
extern "C" __declspec(dllimport) BOOL __stdcall     PathCompactPathW(HDC hDC, LPWSTR pszPath, UINT dx);
extern "C" __declspec(dllimport) BOOL __stdcall     PathCompactPathExA(LPSTR pszOut, LPCSTR pszSrc, UINT cchMax, DWORD dwFlags);
extern "C" __declspec(dllimport) BOOL __stdcall     PathCompactPathExW(LPWSTR pszOut, LPCWSTR pszSrc, UINT cchMax, DWORD dwFlags);
extern "C" __declspec(dllimport) int __stdcall      PathCommonPrefixA(LPCSTR pszFile1, LPCSTR pszFile2, LPSTR achPath);
extern "C" __declspec(dllimport) int __stdcall      PathCommonPrefixW(LPCWSTR pszFile1, LPCWSTR pszFile2, LPWSTR achPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathFileExistsA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathFileExistsW(LPCWSTR pszPath);




#line 378 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) LPSTR __stdcall  PathFindExtensionA(LPCSTR pszPath);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathFindExtensionW(LPCWSTR pszPath);




#line 385 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) LPSTR __stdcall  PathFindFileNameA(LPCSTR pszPath);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathFindFileNameW(LPCWSTR pszPath);




#line 392 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) LPSTR __stdcall  PathFindNextComponentA(LPCSTR pszPath);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathFindNextComponentW(LPCWSTR pszPath);




#line 399 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathFindOnPathA(LPSTR pszPath, LPCSTR * ppszOtherDirs);
extern "C" __declspec(dllimport) BOOL __stdcall     PathFindOnPathW(LPWSTR pszPath, LPCWSTR * ppszOtherDirs);
extern "C" __declspec(dllimport) LPSTR __stdcall  PathGetArgsA(LPCSTR pszPath);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathGetArgsW(LPCWSTR pszPath);




#line 408 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) LPCSTR __stdcall PathFindSuffixArrayA(LPCSTR pszPath, const LPCSTR *apszSuffix, int iArraySize);
extern "C" __declspec(dllimport) LPCWSTR __stdcall PathFindSuffixArrayW(LPCWSTR pszPath, const LPCWSTR *apszSuffix, int iArraySize);




#line 415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsLFNFileSpecA(LPCSTR lpName);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsLFNFileSpecW(LPCWSTR lpName);




#line 422 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

extern "C" __declspec(dllimport) UINT __stdcall     PathGetCharTypeA(UCHAR ch);
extern "C" __declspec(dllimport) UINT __stdcall     PathGetCharTypeW(WCHAR ch);








extern "C" __declspec(dllimport) int __stdcall      PathGetDriveNumberA(LPCSTR pszPath);
extern "C" __declspec(dllimport) int __stdcall      PathGetDriveNumberW(LPCWSTR pszPath);




#line 440 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsDirectoryA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsDirectoryW(LPCWSTR pszPath);




#line 447 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsDirectoryEmptyA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsDirectoryEmptyW(LPCWSTR pszPath);




#line 454 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsFileSpecA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsFileSpecW(LPCWSTR pszPath);




#line 461 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsPrefixA(LPCSTR pszPrefix, LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsPrefixW(LPCWSTR pszPrefix, LPCWSTR pszPath);




#line 468 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsRelativeA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsRelativeW(LPCWSTR pszPath);




#line 475 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsRootA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsRootW(LPCWSTR pszPath);




#line 482 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsSameRootA(LPCSTR pszPath1, LPCSTR pszPath2);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsSameRootW(LPCWSTR pszPath1, LPCWSTR pszPath2);




#line 489 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsUNCA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsUNCW(LPCWSTR pszPath);




#line 496 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsNetworkPathA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsNetworkPathW(LPCWSTR pszPath);




#line 503 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsUNCServerA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsUNCServerW(LPCWSTR pszPath);




#line 510 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsUNCServerShareA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsUNCServerShareW(LPCWSTR pszPath);




#line 517 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsContentTypeA(LPCSTR pszPath, LPCSTR pszContentType);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsContentTypeW(LPCWSTR pszPath, LPCWSTR pszContentType);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsURLA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsURLW(LPCWSTR pszPath);




#line 526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathMakePrettyA(LPSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathMakePrettyW(LPWSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathMatchSpecA(LPCSTR pszFile, LPCSTR pszSpec);
extern "C" __declspec(dllimport) BOOL __stdcall     PathMatchSpecW(LPCWSTR pszFile, LPCWSTR pszSpec);
extern "C" __declspec(dllimport) int __stdcall      PathParseIconLocationA(LPSTR pszIconFile);
extern "C" __declspec(dllimport) int __stdcall      PathParseIconLocationW(LPWSTR pszIconFile);
extern "C" __declspec(dllimport) void __stdcall     PathQuoteSpacesA(LPSTR lpsz);
extern "C" __declspec(dllimport) void __stdcall     PathQuoteSpacesW(LPWSTR lpsz);
extern "C" __declspec(dllimport) BOOL __stdcall     PathRelativePathToA(LPSTR pszPath, LPCSTR pszFrom, DWORD dwAttrFrom, LPCSTR pszTo, DWORD dwAttrTo);
extern "C" __declspec(dllimport) BOOL __stdcall     PathRelativePathToW(LPWSTR pszPath, LPCWSTR pszFrom, DWORD dwAttrFrom, LPCWSTR pszTo, DWORD dwAttrTo);
extern "C" __declspec(dllimport) void __stdcall     PathRemoveArgsA(LPSTR pszPath);
extern "C" __declspec(dllimport) void __stdcall     PathRemoveArgsW(LPWSTR pszPath);
extern "C" __declspec(dllimport) LPSTR __stdcall  PathRemoveBackslashA(LPSTR pszPath);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathRemoveBackslashW(LPWSTR pszPath);




#line 545 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) void __stdcall     PathRemoveBlanksA(LPSTR pszPath);
extern "C" __declspec(dllimport) void __stdcall     PathRemoveBlanksW(LPWSTR pszPath);
extern "C" __declspec(dllimport) void __stdcall     PathRemoveExtensionA(LPSTR pszPath);
extern "C" __declspec(dllimport) void __stdcall     PathRemoveExtensionW(LPWSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathRemoveFileSpecA(LPSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathRemoveFileSpecW(LPWSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathRenameExtensionA(LPSTR pszPath, LPCSTR pszExt);
extern "C" __declspec(dllimport) BOOL __stdcall     PathRenameExtensionW(LPWSTR pszPath, LPCWSTR pszExt);
extern "C" __declspec(dllimport) BOOL __stdcall     PathSearchAndQualifyA(LPCSTR pszPath, LPSTR pszBuf, UINT cchBuf);
extern "C" __declspec(dllimport) BOOL __stdcall     PathSearchAndQualifyW(LPCWSTR pszPath, LPWSTR pszBuf, UINT cchBuf);
extern "C" __declspec(dllimport) void __stdcall     PathSetDlgItemPathA(HWND hDlg, int id, LPCSTR pszPath);
extern "C" __declspec(dllimport) void __stdcall     PathSetDlgItemPathW(HWND hDlg, int id, LPCWSTR pszPath);
extern "C" __declspec(dllimport) LPSTR __stdcall  PathSkipRootA(LPCSTR pszPath);
extern "C" __declspec(dllimport) LPWSTR __stdcall  PathSkipRootW(LPCWSTR pszPath);




#line 564 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) void __stdcall     PathStripPathA(LPSTR pszPath);
extern "C" __declspec(dllimport) void __stdcall     PathStripPathW(LPWSTR pszPath);




#line 571 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathStripToRootA(LPSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathStripToRootW(LPWSTR pszPath);




#line 578 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) void __stdcall     PathUnquoteSpacesA(LPSTR lpsz);
extern "C" __declspec(dllimport) void __stdcall     PathUnquoteSpacesW(LPWSTR lpsz);
extern "C" __declspec(dllimport) BOOL __stdcall     PathMakeSystemFolderA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathMakeSystemFolderW(LPCWSTR pszPath);




#line 587 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathUnmakeSystemFolderA(LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall     PathUnmakeSystemFolderW(LPCWSTR pszPath);




#line 594 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsSystemFolderA(LPCSTR pszPath, DWORD dwAttrb);
extern "C" __declspec(dllimport) BOOL __stdcall     PathIsSystemFolderW(LPCWSTR pszPath, DWORD dwAttrb);




#line 601 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) void __stdcall     PathUndecorateA(LPSTR pszPath);
extern "C" __declspec(dllimport) void __stdcall     PathUndecorateW(LPWSTR pszPath);




#line 608 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall     PathUnExpandEnvStringsA(LPCSTR pszPath, LPSTR pszBuf, UINT cchBuf);
extern "C" __declspec(dllimport) BOOL __stdcall     PathUnExpandEnvStringsW(LPCWSTR pszPath, LPWSTR pszBuf, UINT cchBuf);




#line 615 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
















































#line 664 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

typedef enum {
    URL_SCHEME_INVALID     = -1,
    URL_SCHEME_UNKNOWN     =  0,
    URL_SCHEME_FTP,
    URL_SCHEME_HTTP,
    URL_SCHEME_GOPHER,
    URL_SCHEME_MAILTO,
    URL_SCHEME_NEWS,
    URL_SCHEME_NNTP,
    URL_SCHEME_TELNET,
    URL_SCHEME_WAIS,
    URL_SCHEME_FILE,
    URL_SCHEME_MK,
    URL_SCHEME_HTTPS,
    URL_SCHEME_SHELL,
    URL_SCHEME_SNEWS,
    URL_SCHEME_LOCAL,
    URL_SCHEME_JAVASCRIPT,
    URL_SCHEME_VBSCRIPT,
    URL_SCHEME_ABOUT,
    URL_SCHEME_RES,
    URL_SCHEME_MSSHELLROOTED,
    URL_SCHEME_MSSHELLIDLIST,
    URL_SCHEME_MSHELP,
    URL_SCHEME_MAXVALUE
} URL_SCHEME;

typedef enum {
    URL_PART_NONE       = 0,
    URL_PART_SCHEME     = 1,
    URL_PART_HOSTNAME,
    URL_PART_USERNAME,
    URL_PART_PASSWORD,
    URL_PART_PORT,
    URL_PART_QUERY,
} URL_PART;

typedef enum {
    URLIS_URL,
    URLIS_OPAQUE,
    URLIS_NOHISTORY,
    URLIS_FILEURL,
    URLIS_APPLIABLE,
    URLIS_DIRECTORY,
    URLIS_HASQUERY,
} URLIS;



























extern "C" __declspec(dllimport) int __stdcall          UrlCompareA(LPCSTR psz1, LPCSTR psz2, BOOL fIgnoreSlash);
extern "C" __declspec(dllimport) int __stdcall          UrlCompareW(LPCWSTR psz1, LPCWSTR psz2, BOOL fIgnoreSlash);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlCombineA(LPCSTR pszBase, LPCSTR pszRelative, LPSTR pszCombined, LPDWORD pcchCombined, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlCombineW(LPCWSTR pszBase, LPCWSTR pszRelative, LPWSTR pszCombined, LPDWORD pcchCombined, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlCanonicalizeA(LPCSTR pszUrl, LPSTR pszCanonicalized, LPDWORD pcchCanonicalized, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlCanonicalizeW(LPCWSTR pszUrl, LPWSTR pszCanonicalized, LPDWORD pcchCanonicalized, DWORD dwFlags);
extern "C" __declspec(dllimport) BOOL __stdcall         UrlIsOpaqueA(LPCSTR pszURL);
extern "C" __declspec(dllimport) BOOL __stdcall         UrlIsOpaqueW(LPCWSTR pszURL);
extern "C" __declspec(dllimport) BOOL __stdcall         UrlIsNoHistoryA(LPCSTR pszURL);
extern "C" __declspec(dllimport) BOOL __stdcall         UrlIsNoHistoryW(LPCWSTR pszURL);


extern "C" __declspec(dllimport) BOOL __stdcall         UrlIsA(LPCSTR pszUrl, URLIS UrlIs);
extern "C" __declspec(dllimport) BOOL __stdcall         UrlIsW(LPCWSTR pszUrl, URLIS UrlIs);
extern "C" __declspec(dllimport) LPCSTR __stdcall       UrlGetLocationA(LPCSTR psz1);
extern "C" __declspec(dllimport) LPCWSTR __stdcall      UrlGetLocationW(LPCWSTR psz1);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlUnescapeA(LPSTR pszUrl, LPSTR pszUnescaped, LPDWORD pcchUnescaped, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlUnescapeW(LPWSTR pszUrl, LPWSTR pszUnescaped, LPDWORD pcchUnescaped, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlEscapeA(LPCSTR pszUrl, LPSTR pszEscaped, LPDWORD pcchEscaped, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlEscapeW(LPCWSTR pszUrl, LPWSTR pszEscaped, LPDWORD pcchEscaped, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlCreateFromPathA(LPCSTR pszPath, LPSTR pszUrl, LPDWORD pcchUrl, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlCreateFromPathW(LPCWSTR pszPath, LPWSTR pszUrl, LPDWORD pcchUrl, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                PathCreateFromUrlA(LPCSTR pszUrl, LPSTR pszPath, LPDWORD pcchPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                PathCreateFromUrlW(LPCWSTR pszUrl, LPWSTR pszPath, LPDWORD pcchPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlHashA(LPCSTR pszUrl, LPBYTE pbHash, DWORD cbHash);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlHashW(LPCWSTR pszUrl, LPBYTE pbHash, DWORD cbHash);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlGetPartW(LPCWSTR pszIn, LPWSTR pszOut, LPDWORD pcchOut, DWORD dwPart, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlGetPartA(LPCSTR pszIn, LPSTR pszOut, LPDWORD pcchOut, DWORD dwPart, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlApplySchemeA(LPCSTR pszIn, LPSTR pszOut, LPDWORD pcchOut, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                UrlApplySchemeW(LPCWSTR pszIn, LPWSTR pszOut, LPDWORD pcchOut, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall                HashData(LPBYTE pbData, DWORD cbData, LPBYTE pbHash, DWORD cbHash);





































#line 807 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"






#line 814 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"











extern "C" __declspec(dllimport) DWORD __stdcall    SHDeleteEmptyKeyA(HKEY hkey, LPCSTR pszSubKey);
extern "C" __declspec(dllimport) DWORD __stdcall    SHDeleteEmptyKeyW(HKEY hkey, LPCWSTR pszSubKey);




#line 832 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) DWORD __stdcall    SHDeleteKeyA(HKEY hkey, LPCSTR pszSubKey);
extern "C" __declspec(dllimport) DWORD __stdcall    SHDeleteKeyW(HKEY hkey, LPCWSTR pszSubKey);




#line 839 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) HKEY __stdcall     SHRegDuplicateHKey(HKEY hkey);





extern "C" __declspec(dllimport) DWORD __stdcall    SHDeleteValueA(HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue);
extern "C" __declspec(dllimport) DWORD __stdcall    SHDeleteValueW(HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue);




#line 852 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) DWORD __stdcall    SHGetValueA(HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData);
extern "C" __declspec(dllimport) DWORD __stdcall    SHGetValueW(HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData);




#line 859 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) DWORD __stdcall    SHSetValueA(HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, DWORD dwType, LPCVOID pvData, DWORD cbData);
extern "C" __declspec(dllimport) DWORD __stdcall    SHSetValueW(HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, DWORD dwType, LPCVOID pvData, DWORD cbData);




#line 866 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"







extern "C" __declspec(dllimport) DWORD __stdcall    SHQueryValueExA(HKEY hkey, LPCSTR pszValue, DWORD *pdwReserved, DWORD *pdwType, void *pvData, DWORD *pcbData);
extern "C" __declspec(dllimport) DWORD __stdcall    SHQueryValueExW(HKEY hkey, LPCWSTR pszValue, DWORD *pdwReserved, DWORD *pdwType, void *pvData, DWORD *pcbData);




#line 880 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"



extern "C" __declspec(dllimport) LONG __stdcall     SHEnumKeyExA(HKEY hkey, DWORD dwIndex, LPSTR pszName, LPDWORD pcchName);
extern "C" __declspec(dllimport) LONG __stdcall     SHEnumKeyExW(HKEY hkey, DWORD dwIndex, LPWSTR pszName, LPDWORD pcchName);
extern "C" __declspec(dllimport) LONG __stdcall     SHEnumValueA(HKEY hkey, DWORD dwIndex, LPSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData);
extern "C" __declspec(dllimport) LONG __stdcall     SHEnumValueW(HKEY hkey, DWORD dwIndex, LPWSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData);
extern "C" __declspec(dllimport) LONG __stdcall     SHQueryInfoKeyA(HKEY hkey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen);
extern "C" __declspec(dllimport) LONG __stdcall     SHQueryInfoKeyW(HKEY hkey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen);


extern "C" __declspec(dllimport) DWORD __stdcall     SHCopyKeyA(HKEY hkeySrc, LPCSTR   szSrcSubKey, HKEY hkeyDest, DWORD fReserved);
extern "C" __declspec(dllimport) DWORD __stdcall     SHCopyKeyW(HKEY hkeySrc, LPCWSTR wszSrcSubKey, HKEY hkeyDest, DWORD fReserved);



extern "C" __declspec(dllimport) DWORD __stdcall    SHRegGetPathA(HKEY hKey, LPCSTR pcszSubKey, LPCSTR pcszValue, LPSTR pszPath, DWORD dwFlags);
extern "C" __declspec(dllimport) DWORD __stdcall    SHRegGetPathW(HKEY hKey, LPCWSTR pcszSubKey, LPCWSTR pcszValue, LPWSTR pszPath, DWORD dwFlags);
extern "C" __declspec(dllimport) DWORD __stdcall    SHRegSetPathA(HKEY hKey, LPCSTR pcszSubKey, LPCSTR pcszValue, LPCSTR pcszPath, DWORD dwFlags);
extern "C" __declspec(dllimport) DWORD __stdcall    SHRegSetPathW(HKEY hKey, LPCWSTR pcszSubKey, LPCWSTR pcszValue, LPCWSTR pcszPath, DWORD dwFlags);















#line 916 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"










typedef enum
{
    SHREGDEL_DEFAULT = 0x00000000,       
    SHREGDEL_HKCU    = 0x00000001,       
    SHREGDEL_HKLM    = 0x00000010,       
    SHREGDEL_BOTH    = 0x00000011,       
} SHREGDEL_FLAGS;

typedef enum
{
    SHREGENUM_DEFAULT = 0x00000000,       
    SHREGENUM_HKCU    = 0x00000001,       
    SHREGENUM_HKLM    = 0x00000010,       
    SHREGENUM_BOTH    = 0x00000011,       
                                          
} SHREGENUM_FLAGS;







typedef HANDLE HUSKEY;  
typedef HUSKEY *PHUSKEY;

extern "C" __declspec(dllimport) LONG __stdcall        SHRegCreateUSKeyA(LPCSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, DWORD dwFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegCreateUSKeyW(LPCWSTR pwzPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, DWORD dwFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegOpenUSKeyA(LPCSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, BOOL fIgnoreHKCU);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegOpenUSKeyW(LPCWSTR pwzPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, BOOL fIgnoreHKCU);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegQueryUSValueA(HUSKEY hUSKey, LPCSTR pszValue, LPDWORD pdwType, void *pvData, LPDWORD pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegQueryUSValueW(HUSKEY hUSKey, LPCWSTR pwzValue, LPDWORD pdwType, void *pvData, LPDWORD pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegWriteUSValueA(HUSKEY hUSKey, LPCSTR pszValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegWriteUSValueW(HUSKEY hUSKey, LPCWSTR pwzValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegDeleteUSValueA(HUSKEY hUSKey, LPCSTR pszValue, SHREGDEL_FLAGS delRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegDeleteEmptyUSKeyW(HUSKEY hUSKey, LPCWSTR pwzSubKey, SHREGDEL_FLAGS delRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegDeleteEmptyUSKeyA(HUSKEY hUSKey, LPCSTR pszSubKey, SHREGDEL_FLAGS delRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegDeleteUSValueW(HUSKEY hUSKey, LPCWSTR pwzValue, SHREGDEL_FLAGS delRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegEnumUSKeyA(HUSKEY hUSKey, DWORD dwIndex, LPSTR pszName, LPDWORD pcchName, SHREGENUM_FLAGS enumRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegEnumUSKeyW(HUSKEY hUSKey, DWORD dwIndex, LPWSTR pwzName, LPDWORD pcchName, SHREGENUM_FLAGS enumRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegEnumUSValueA(HUSKEY hUSkey, DWORD dwIndex, LPSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData, SHREGENUM_FLAGS enumRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegEnumUSValueW(HUSKEY hUSkey, DWORD dwIndex, LPWSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData, SHREGENUM_FLAGS enumRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegQueryInfoUSKeyA(HUSKEY hUSKey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegQueryInfoUSKeyW(HUSKEY hUSKey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegCloseUSKey(HUSKEY hUSKey);



extern "C" __declspec(dllimport) LONG __stdcall        SHRegGetUSValueA(LPCSTR pszSubKey, LPCSTR pszValue, LPDWORD pdwType, void * pvData, LPDWORD pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegGetUSValueW(LPCWSTR pwzSubKey, LPCWSTR pwzValue, LPDWORD pdwType, void * pvData, LPDWORD pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegSetUSValueA(LPCSTR pszSubKey, LPCSTR pszValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags);
extern "C" __declspec(dllimport) LONG __stdcall        SHRegSetUSValueW(LPCWSTR pwzSubKey, LPCWSTR pwzValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags);
extern "C" __declspec(dllimport) int __stdcall         SHRegGetIntW(HKEY hk, LPCWSTR pwzKey, int iDefault);


























#line 1006 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

extern "C" __declspec(dllimport) BOOL __stdcall SHRegGetBoolUSValueA(LPCSTR pszSubKey, LPCSTR pszValue, BOOL fIgnoreHKCU, BOOL fDefault);
extern "C" __declspec(dllimport) BOOL __stdcall SHRegGetBoolUSValueW(LPCWSTR pszSubKey, LPCWSTR pszValue, BOOL fIgnoreHKCU, BOOL fDefault);





#line 1015 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"









enum {
    ASSOCF_INIT_NOREMAPCLSID           = 0x00000001,  
    ASSOCF_INIT_BYEXENAME              = 0x00000002,  
    ASSOCF_OPEN_BYEXENAME              = 0x00000002,  
    ASSOCF_INIT_DEFAULTTOSTAR          = 0x00000004,  
    ASSOCF_INIT_DEFAULTTOFOLDER        = 0x00000008,  
    ASSOCF_NOUSERSETTINGS              = 0x00000010,  
    ASSOCF_NOTRUNCATE                  = 0x00000020,  
    ASSOCF_VERIFY                      = 0x00000040,  
    ASSOCF_REMAPRUNDLL                 = 0x00000080,  
    ASSOCF_NOFIXUPS                    = 0x00000100,  
    ASSOCF_IGNOREBASECLASS             = 0x00000200,  
};

typedef DWORD ASSOCF;


typedef enum {
    ASSOCSTR_COMMAND      = 1,  
    ASSOCSTR_EXECUTABLE,        
    ASSOCSTR_FRIENDLYDOCNAME,   
    ASSOCSTR_FRIENDLYAPPNAME,   
    ASSOCSTR_NOOPEN,            
    ASSOCSTR_SHELLNEWVALUE,     
    ASSOCSTR_DDECOMMAND,        
    ASSOCSTR_DDEIFEXEC,         
    ASSOCSTR_DDEAPPLICATION,    
    ASSOCSTR_DDETOPIC,          
    ASSOCSTR_INFOTIP,           
    ASSOCSTR_QUICKTIP,          
    ASSOCSTR_TILEINFO,          
    ASSOCSTR_CONTENTTYPE,       
    ASSOCSTR_DEFAULTICON,       
    ASSOCSTR_SHELLEXTENSION,    
    ASSOCSTR_MAX                
} ASSOCSTR;

typedef enum {
    ASSOCKEY_SHELLEXECCLASS = 1,  
    ASSOCKEY_APP,                 
    ASSOCKEY_CLASS,               
    ASSOCKEY_BASECLASS,           
    ASSOCKEY_MAX                  
} ASSOCKEY;

typedef enum {
    ASSOCDATA_MSIDESCRIPTOR = 1,  
    ASSOCDATA_NOACTIVATEHANDLER,  
    ASSOCDATA_QUERYCLASSSTORE,    
    ASSOCDATA_HASPERUSERASSOC,    
    ASSOCDATA_EDITFLAGS,          
    ASSOCDATA_VALUE,              
    ASSOCDATA_MAX
} ASSOCDATA;

typedef enum {
    ASSOCENUM_NONE
} ASSOCENUM;




struct __declspec(novtable) IQueryAssociations : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface( const IID & riid, void **ppv) = 0;
    virtual ULONG __stdcall AddRef ( void ) = 0;
    virtual ULONG __stdcall Release ( void ) = 0;

    
    virtual HRESULT __stdcall Init( ASSOCF flags, LPCWSTR pszAssoc, HKEY hkProgid, HWND hwnd) = 0;
    virtual HRESULT __stdcall GetString( ASSOCF flags, ASSOCSTR str, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut) = 0;
    virtual HRESULT __stdcall GetKey( ASSOCF flags, ASSOCKEY key, LPCWSTR pszExtra, HKEY *phkeyOut) = 0;
    virtual HRESULT __stdcall GetData( ASSOCF flags, ASSOCDATA data, LPCWSTR pszExtra, LPVOID pvOut, DWORD *pcbOut) = 0;
    virtual HRESULT __stdcall GetEnum( ASSOCF flags, ASSOCENUM assocenum, LPCWSTR pszExtra, const IID & riid, LPVOID *ppvOut) = 0;
};


extern "C" __declspec(dllimport) HRESULT __stdcall AssocCreate(CLSID clsid, const IID & riid, LPVOID *ppv);


extern "C" __declspec(dllimport) HRESULT __stdcall AssocQueryStringA(ASSOCF flags, ASSOCSTR str, LPCSTR pszAssoc, LPCSTR pszExtra, LPSTR pszOut, DWORD *pcchOut);

extern "C" __declspec(dllimport) HRESULT __stdcall AssocQueryStringW(ASSOCF flags, ASSOCSTR str, LPCWSTR pszAssoc, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut);




#line 1113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall AssocQueryStringByKeyA(ASSOCF flags, ASSOCSTR str, HKEY hkAssoc, LPCSTR pszExtra, LPSTR pszOut, DWORD *pcchOut);
extern "C" __declspec(dllimport) HRESULT __stdcall AssocQueryStringByKeyW(ASSOCF flags, ASSOCSTR str, HKEY hkAssoc, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut);




#line 1120 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall AssocQueryKeyA(ASSOCF flags, ASSOCKEY key, LPCSTR pszAssoc, LPCSTR pszExtra, HKEY *phkeyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall AssocQueryKeyW(ASSOCF flags, ASSOCKEY key, LPCWSTR pszAssoc, LPCWSTR pszExtra, HKEY *phkeyOut);




#line 1127 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"



#line 1131 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"








extern "C" __declspec(dllimport) struct IStream * __stdcall SHOpenRegStreamA(HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, DWORD grfMode);
extern "C" __declspec(dllimport) struct IStream * __stdcall SHOpenRegStreamW(HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, DWORD grfMode);




#line 1146 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
extern "C" __declspec(dllimport) struct IStream * __stdcall SHOpenRegStream2A(HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, DWORD grfMode);
extern "C" __declspec(dllimport) struct IStream * __stdcall SHOpenRegStream2W(HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, DWORD grfMode);




#line 1153 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"




extern "C" __declspec(dllimport) HRESULT __stdcall SHCreateStreamOnFileA(LPCSTR pszFile, DWORD grfMode, struct IStream **ppstm);
extern "C" __declspec(dllimport) HRESULT __stdcall SHCreateStreamOnFileW(LPCWSTR pszFile, DWORD grfMode, struct IStream **ppstm);




#line 1164 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"





#line 1170 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"



#line 1174 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

























#line 1200 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"






extern "C" __declspec(dllimport) HRESULT __stdcall SHAutoComplete(HWND hwndEdit, DWORD dwFlags);

extern "C" __declspec(dllimport) HRESULT __stdcall SHSetThreadRef(IUnknown *punk);
extern "C" __declspec(dllimport) HRESULT __stdcall SHGetThreadRef(IUnknown **ppunk);

extern "C" __declspec(dllimport) BOOL __stdcall SHSkipJunction(struct IBindCtx* pbc, const CLSID *pclsid);
#line 1213 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"









extern "C" __declspec(dllimport) BOOL __stdcall SHCreateThread(LPTHREAD_START_ROUTINE pfnThreadProc, void *pData, DWORD dwFlags, LPTHREAD_START_ROUTINE pfnCallback);

extern "C" __declspec(dllimport) HRESULT __stdcall SHReleaseThreadRef(); 






extern "C" __declspec(dllimport) HPALETTE __stdcall SHCreateShellPalette(HDC hdc);



extern "C" __declspec(dllimport) void __stdcall     ColorRGBToHLS(COLORREF clrRGB, WORD* pwHue, WORD* pwLuminance, WORD* pwSaturation);
extern "C" __declspec(dllimport) COLORREF __stdcall ColorHLSToRGB(WORD wHue, WORD wLuminance, WORD wSaturation);
extern "C" __declspec(dllimport) COLORREF __stdcall ColorAdjustLuma(COLORREF clrRGB, int n, BOOL fScale);


#line 1241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

#line 1243 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"






typedef struct _DLLVERSIONINFO
{
    DWORD cbSize;
    DWORD dwMajorVersion;                   
    DWORD dwMinorVersion;                   
    DWORD dwBuildNumber;                    
    DWORD dwPlatformID;                     
} DLLVERSIONINFO;







typedef struct _DLLVERSIONINFO2
{
    DLLVERSIONINFO info1;
    DWORD dwFlags;                          
    ULONGLONG ullVersion;                   
                                            
                                            
                                            
                                            
} DLLVERSIONINFO2;






#line 1281 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"












typedef HRESULT (__stdcall* DLLGETVERSIONPROC)(DLLVERSIONINFO *);


extern "C" HRESULT __stdcall DllInstall(BOOL bInstall, LPCWSTR pszCmdLine);




}
#line 1303 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 1306 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"
#line 1307 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

#line 1309 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"


#line 1312 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlwapi.h"

#line 72 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

#pragma pack(push, 8)



#line 78 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

extern "C" const __declspec(selectany) GUID LIBID_ATLLib = {0x44EC0535,0x400F,0x11D0,{0x9D,0xCD,0x00,0xA0,0xC9,0x03,0x91,0xD3}};
extern "C" const __declspec(selectany) CLSID CLSID_Registrar = {0x44EC053A,0x400F,0x11D0,{0x9D,0xCD,0x00,0xA0,0xC9,0x03,0x91,0xD3}};
extern "C" const __declspec(selectany) IID IID_IRegistrar = {0x44EC053B,0x400F,0x11D0,{0x9D,0xCD,0x00,0xA0,0xC9,0x03,0x91,0xD3}};
extern "C" const __declspec(selectany) IID IID_IAxWinHostWindow = {0xb6ea2050,0x48a,0x11d1,{0x82,0xb9,0x0,0xc0,0x4f,0xb9,0x94,0x2e}};
extern "C" const __declspec(selectany) IID IID_IAxWinAmbientDispatch = {0xb6ea2051,0x48a,0x11d1,{0x82,0xb9,0x0,0xc0,0x4f,0xb9,0x94,0x2e}};
extern "C" const __declspec(selectany) IID IID_IInternalConnection = {0x72AD0770,0x6A9F,0x11d1,{0xBC,0xEC,0x00,0x60,0x08,0x8F,0x44,0x4E}};
extern "C" const __declspec(selectany) IID IID_IDocHostUIHandlerDispatch = {0x425B5AF0,0x65F1,0x11d1,{0x96,0x11,0x00,0x00,0xF8,0x1E,0x0D,0x0D}};


namespace ATL
{
#line 91 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

struct _ATL_CATMAP_ENTRY
{
   int iType;
   const CATID* pcatid;
};





typedef HRESULT (__stdcall _ATL_CREATORFUNC)(void* pv, const IID & riid, LPVOID* ppv);
typedef HRESULT (__stdcall _ATL_CREATORARGFUNC)(void* pv, const IID & riid, LPVOID* ppv, DWORD dw);
typedef HRESULT (__stdcall _ATL_MODULEFUNC)(DWORD dw);
typedef LPCTSTR (__stdcall _ATL_DESCRIPTIONFUNC)();
typedef const struct _ATL_CATMAP_ENTRY* (_ATL_CATMAPFUNC)();
typedef void (__stdcall _ATL_TERMFUNC)(DWORD dw);

struct _ATL_TERMFUNC_ELEM
{
	_ATL_TERMFUNC* pFunc;
	DWORD dw;
	_ATL_TERMFUNC_ELEM* pNext;
};

struct _ATL_OBJMAP_ENTRY
{
	const CLSID* pclsid;
	HRESULT (__stdcall *pfnUpdateRegistry)(BOOL bRegister);
	_ATL_CREATORFUNC* pfnGetClassObject;
	_ATL_CREATORFUNC* pfnCreateInstance;
	IUnknown* pCF;
	DWORD dwRegister;
	_ATL_DESCRIPTIONFUNC* pfnGetObjectDescription;
	_ATL_CATMAPFUNC* pfnGetCategoryMap;
	HRESULT __stdcall RevokeClassObject()
	{
		return CoRevokeClassObject(dwRegister);
	}
	HRESULT __stdcall RegisterClassObject(DWORD dwClsContext, DWORD dwFlags)
	{
		IUnknown* p = 0;
		if (pfnGetClassObject == 0)
			return ((HRESULT)0x00000000L);
		HRESULT hRes = pfnGetClassObject(pfnCreateInstance, IID_IUnknown, (LPVOID*) &p);
		if (((HRESULT)(hRes) >= 0))
			hRes = CoRegisterClassObject(*pclsid, p, dwClsContext, dwFlags, &dwRegister);
		if (p != 0)
			p->Release();
		return hRes;
	}

	void (__stdcall *pfnObjectMain)(bool bStarting);
};

struct _ATL_REGMAP_ENTRY
{
	LPCOLESTR     szKey;
	LPCOLESTR     szData;
};

struct _AtlCreateWndData
{
	void* m_pThis;
	DWORD m_dwThreadID;
	_AtlCreateWndData* m_pNext;
};

struct _ATL_MODULE
{

public:
	UINT cbSize;
	HINSTANCE m_hInst;
	HINSTANCE m_hInstResource;
	HINSTANCE m_hInstTypeLib;
	_ATL_OBJMAP_ENTRY* m_pObjMap;
	LONG m_nLockCnt;
	HANDLE m_hHeap;
	union
	{
		CRITICAL_SECTION m_csTypeInfoHolder;
		CRITICAL_SECTION m_csStaticDataInit;
	};
	CRITICAL_SECTION m_csWindowCreate;
	CRITICAL_SECTION m_csObjMap;


	DWORD dwAtlBuildVer;
	_AtlCreateWndData* m_pCreateWndList;
	bool m_bDestroyHeap;
	GUID* pguidVer;
	DWORD m_dwHeaps;    
	HANDLE* m_phHeaps;
	int m_nHeap;        
	_ATL_TERMFUNC_ELEM* m_pTermFuncs;
};

const int _nAtlModuleVer1Size = 100;




struct _ATL_INTMAP_ENTRY
{
	const IID* piid;       
	DWORD dw;
	_ATL_CREATORARGFUNC* pFunc; 
};




HRESULT __stdcall AtlInternalQueryInterface(void* pThis,
	const _ATL_INTMAP_ENTRY* pEntries, const IID & iid, void** ppvObject);




IUnknown* __stdcall AtlComPtrAssign(IUnknown** pp, IUnknown* lp);
IUnknown* __stdcall AtlComQIPtrAssign(IUnknown** pp, IUnknown* lp, const IID & riid);




HRESULT __stdcall AtlFreeMarshalStream(IStream* pStream);
HRESULT __stdcall AtlMarshalPtrInProc(IUnknown* pUnk, const IID& iid, IStream** ppStream);
HRESULT __stdcall AtlUnmarshalPtr(IStream* pStream, const IID& iid, IUnknown** ppUnk);

BOOL __stdcall AtlWaitWithMessageLoop(HANDLE hEvent);




HRESULT __stdcall AtlAdvise(IUnknown* pUnkCP, IUnknown* pUnk, const IID& iid, LPDWORD pdw);
HRESULT __stdcall AtlUnadvise(IUnknown* pUnkCP, const IID& iid, DWORD dw);




HRESULT __stdcall AtlSetErrorInfo(const CLSID& clsid, LPCOLESTR lpszDesc,
	DWORD dwHelpID, LPCOLESTR lpszHelpFile, const IID& iid, HRESULT hRes,
	HINSTANCE hInst);




HRESULT __stdcall AtlModuleRegisterClassObjects(_ATL_MODULE* pM, DWORD dwClsContext, DWORD dwFlags);
HRESULT __stdcall AtlModuleRevokeClassObjects(_ATL_MODULE* pM);
HRESULT __stdcall AtlModuleGetClassObject(_ATL_MODULE* pM, const IID & rclsid, const IID & riid, LPVOID* ppv);
HRESULT __stdcall AtlModuleRegisterServer(_ATL_MODULE* pM, BOOL bRegTypeLib, const CLSID* pCLSID = 0);
HRESULT __stdcall AtlModuleUnregisterServer(_ATL_MODULE* pM, const CLSID* pCLSID = 0);
HRESULT __stdcall AtlModuleUnregisterServerEx(_ATL_MODULE* pM, BOOL bUnRegTypeLib, const CLSID* pCLSID = 0);
HRESULT __stdcall AtlModuleUpdateRegistryFromResourceD(_ATL_MODULE*pM, LPCOLESTR lpszRes,
	BOOL bRegister, struct _ATL_REGMAP_ENTRY* pMapEntries, IRegistrar* pReg = 0);
HRESULT __stdcall AtlModuleRegisterTypeLib(_ATL_MODULE* pM, LPCOLESTR lpszIndex);
HRESULT __stdcall AtlModuleUnRegisterTypeLib(_ATL_MODULE* pM, LPCOLESTR lpszIndex);
HRESULT __stdcall AtlModuleLoadTypeLib(_ATL_MODULE* pM, LPCOLESTR lpszIndex, BSTR* pbstrPath, ITypeLib** ppTypeLib);

HRESULT __stdcall AtlModuleInit(_ATL_MODULE* pM, _ATL_OBJMAP_ENTRY* p, HINSTANCE h);
HRESULT __stdcall AtlModuleTerm(_ATL_MODULE* pM);
DWORD __stdcall AtlGetVersion(void* pReserved);
void __stdcall AtlModuleAddCreateWndData(_ATL_MODULE* pM, _AtlCreateWndData* pData, void* pObject);
void* __stdcall AtlModuleExtractCreateWndData(_ATL_MODULE* pM);
HRESULT __stdcall AtlModuleAddTermFunc(_ATL_MODULE* pM, _ATL_TERMFUNC* pFunc, DWORD dw);



}; 
#line 261 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

namespace ATL
{

enum atlTraceFlags
{
	
	atlTraceUser        = 0x00000001,
	atlTraceUser2       = 0x00000002,
	atlTraceUser3       = 0x00000004,
	atlTraceUser4       = 0x00000008,
	
	atlTraceGeneral     = 0x00000020,
	atlTraceCOM         = 0x00000040,
	atlTraceQI      = 0x00000080,
	atlTraceRegistrar   = 0x00000100,
	atlTraceRefcount    = 0x00000200,
	atlTraceWindowing   = 0x00000400,
	atlTraceControls    = 0x00000800,
	atlTraceHosting     = 0x00001000,
	atlTraceDBClient    = 0x00002000,
	atlTraceDBProvider  = 0x00004000,
	atlTraceSnapin      = 0x00008000,
	atlTraceNotImpl     = 0x00010000,
};



#line 290 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

















































































inline void _cdecl AtlTrace(LPCSTR , ...){}
inline void _cdecl AtlTrace2(DWORD, UINT, LPCSTR , ...){}

inline void _cdecl AtlTrace(LPCWSTR , ...){}
inline void _cdecl AtlTrace2(DWORD, UINT, LPCWSTR , ...){}
#line 377 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"



#line 381 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

#line 383 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"








#pragma comment(lib, "kernel32.lib")
#pragma comment(lib, "user32.lib")
#pragma comment(lib, "olepro32.lib")
#pragma comment(lib, "advapi32.lib")
#pragma comment(lib, "ole32.lib")
#pragma comment(lib, "oleaut32.lib")
#pragma comment(lib, "uuid.lib")

static HRESULT AtlSetChildSite(IUnknown* punkChild, IUnknown* punkParent)
{
	if (punkChild == 0)
		return ((HRESULT)0x80004003L);

	HRESULT hr;
	IObjectWithSite* pChildSite = 0;
	hr = punkChild->QueryInterface(IID_IObjectWithSite, (void**)&pChildSite);
	if (((HRESULT)(hr) >= 0) && pChildSite != 0)
	{
		hr = pChildSite->SetSite(punkParent);
		pChildSite->Release();
	}
	return hr;
}

template <class T>
class _NoAddRefReleaseOnCComPtr : public T
{
	private:
		virtual ULONG __stdcall AddRef()=0;
		virtual ULONG __stdcall Release()=0;
};

template <class T>
class CComPtr
{
public:
	typedef T _PtrClass;
	CComPtr()
	{
		p=0;
	}
	CComPtr(T* lp)
	{
		if ((p = lp) != 0)
			p->AddRef();
	}
	CComPtr(const CComPtr<T>& lp)
	{
		if ((p = lp.p) != 0)
			p->AddRef();
	}
	~CComPtr()
	{
		if (p)
			p->Release();
	}
	void Release()
	{
		IUnknown* pTemp = p;
		if (pTemp)
		{
			p = 0;
			pTemp->Release();
		}
	}
	operator T*() const
	{
		return (T*)p;
	}
	T& operator*() const
	{
		((void)0);
		return *p;
	}
	
	
	T** operator&()
	{
		((void)0);
		return &p;
	}
	_NoAddRefReleaseOnCComPtr<T>* operator->() const
	{
		((void)0);
		return (_NoAddRefReleaseOnCComPtr<T>*)p;
	}
	T* operator=(T* lp)
	{
		return (T*)AtlComPtrAssign((IUnknown**)&p, lp);
	}
	T* operator=(const CComPtr<T>& lp)
	{
		return (T*)AtlComPtrAssign((IUnknown**)&p, lp.p);
	}
	bool operator!() const
	{
		return (p == 0);
	}
	bool operator<(T* pT) const
	{
		return p < pT;
	}
	bool operator==(T* pT) const
	{
		return p == pT;
	}
	
	bool IsEqualObject(IUnknown* pOther)
	{
		if (p == 0 && pOther == 0)
			return true; 

		if (p == 0 || pOther == 0)
			return false; 

		CComPtr<IUnknown> punk1;
		CComPtr<IUnknown> punk2;
		p->QueryInterface(IID_IUnknown, (void**)&punk1);
		pOther->QueryInterface(IID_IUnknown, (void**)&punk2);
		return punk1 == punk2;
	}
	void Attach(T* p2)
	{
		if (p)
			p->Release();
		p = p2;
	}
	T* Detach()
	{
		T* pt = p;
		p = 0;
		return pt;
	}
	HRESULT CopyTo(T** ppT)
	{
		((void)0);
		if (ppT == 0)
			return ((HRESULT)0x80004003L);
		*ppT = p;
		if (p)
			p->AddRef();
		return ((HRESULT)0x00000000L);
	}
	HRESULT SetSite(IUnknown* punkParent)
	{
		return AtlSetChildSite(p, punkParent);
	}
	HRESULT Advise(IUnknown* pUnk, const IID& iid, LPDWORD pdw)
	{
		return AtlAdvise(p, pUnk, iid, pdw);
	}
	HRESULT CoCreateInstance(const IID & rclsid, LPUNKNOWN pUnkOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER))
	{
		((void)0);
		return ::CoCreateInstance(rclsid, pUnkOuter, dwClsContext, __uuidof(T), (void**)&p);
	}
	HRESULT CoCreateInstance(LPCOLESTR szProgID, LPUNKNOWN pUnkOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER))
	{
		CLSID clsid;
		HRESULT hr = CLSIDFromProgID(szProgID, &clsid);
		((void)0);
		if (((HRESULT)(hr) >= 0))
			hr = ::CoCreateInstance(clsid, pUnkOuter, dwClsContext, __uuidof(T), (void**)&p);
		return hr;
	}
	template <class Q>
	HRESULT QueryInterface(Q** pp) const
	{
		((void)0);
		return p->QueryInterface(__uuidof(Q), (void**)pp);
	}
	T* p;
};


template <class T, const IID* piid = &__uuidof(T)>
class CComQIPtr
{
public:
	typedef T _PtrClass;
	CComQIPtr()
	{
		p=0;
	}
	CComQIPtr(T* lp)
	{
		if ((p = lp) != 0)
			p->AddRef();
	}
	CComQIPtr(const CComQIPtr<T,piid>& lp)
	{
		if ((p = lp.p) != 0)
			p->AddRef();
	}
	CComQIPtr(IUnknown* lp)
	{
		p=0;
		if (lp != 0)
			lp->QueryInterface(*piid, (void **)&p);
	}
	~CComQIPtr()
	{
		if (p)
			p->Release();
	}
	void Release()
	{
		IUnknown* pTemp = p;
		if (pTemp)
		{
			p = 0;
			pTemp->Release();
		}
	}
	operator T*() const
	{
		return p;
	}
	T& operator*() const
	{
		((void)0); return *p;
	}
	
	
	T** operator&()
	{
		((void)0);
		return &p;
	}
	_NoAddRefReleaseOnCComPtr<T>* operator->() const
	{
		((void)0);
		return (_NoAddRefReleaseOnCComPtr<T>*)p;
	}
	T* operator=(T* lp)
	{
		return (T*)AtlComPtrAssign((IUnknown**)&p, lp);
	}
	T* operator=(const CComQIPtr<T,piid>& lp)
	{
		return (T*)AtlComPtrAssign((IUnknown**)&p, lp.p);
	}
	T* operator=(IUnknown* lp)
	{
		return (T*)AtlComQIPtrAssign((IUnknown**)&p, lp, *piid);
	}
	bool operator!() const
	{
		return (p == 0);
	}
	bool operator<(T* pT) const
	{
		return p < pT;
	}
	bool operator==(T* pT) const
	{
		return p == pT;
	}
	
	bool IsEqualObject(IUnknown* pOther)
	{
		if (p == 0 && pOther == 0)
			return true; 

		if (p == 0 || pOther == 0)
			return false; 

		CComPtr<IUnknown> punk1;
		CComPtr<IUnknown> punk2;
		p->QueryInterface(IID_IUnknown, (void**)&punk1);
		pOther->QueryInterface(IID_IUnknown, (void**)&punk2);
		return punk1 == punk2;
	}
	void Attach(T* p2)
	{
		if (p)
			p->Release();
		p = p2;
	}
	T* Detach()
	{
		T* pt = p;
		p = 0;
		return pt;
	}
	HRESULT CopyTo(T** ppT)
	{
		((void)0);
		if (ppT == 0)
			return ((HRESULT)0x80004003L);
		*ppT = p;
		if (p)
			p->AddRef();
		return ((HRESULT)0x00000000L);
	}
	HRESULT SetSite(IUnknown* punkParent)
	{
		return AtlSetChildSite(p, punkParent);
	}
	HRESULT Advise(IUnknown* pUnk, const IID& iid, LPDWORD pdw)
	{
		return AtlAdvise(p, pUnk, iid, pdw);
	}
	HRESULT CoCreateInstance(const IID & rclsid, LPUNKNOWN pUnkOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER))
	{
		((void)0);
		return ::CoCreateInstance(rclsid, pUnkOuter, dwClsContext, __uuidof(T), (void**)&p);
	}
	HRESULT CoCreateInstance(LPCOLESTR szProgID, LPUNKNOWN pUnkOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER))
	{
		CLSID clsid;
		HRESULT hr = CLSIDFromProgID(szProgID, &clsid);
		((void)0);
		if (((HRESULT)(hr) >= 0))
			hr = ::CoCreateInstance(clsid, pUnkOuter, dwClsContext, __uuidof(T), (void**)&p);
		return hr;
	}
	template <class Q>
	HRESULT QueryInterface(Q** pp)
	{
		((void)0);
		return p->QueryInterface(__uuidof(Q), (void**)pp);
	}
	T* p;
};


template<>
class CComQIPtr<IUnknown, &IID_IUnknown>
{
public:
	typedef IUnknown _PtrClass;
	CComQIPtr()
	{
		p=0;
	}
	CComQIPtr(IUnknown* lp)
	{
		
		p=0;
		if (lp != 0)
			lp->QueryInterface(IID_IUnknown, (void **)&p);
	}
	CComQIPtr(const CComQIPtr<IUnknown,&IID_IUnknown>& lp)
	{
		if ((p = lp.p) != 0)
			p->AddRef();
	}
	~CComQIPtr()
	{
		if (p)
			p->Release();
	}
	void Release()
	{
		IUnknown* pTemp = p;
		if (pTemp)
		{
			p = 0;
			pTemp->Release();
		}
	}
	operator IUnknown*() const
	{
		return p;
	}
	IUnknown& operator*() const
	{
		((void)0);
		return *p;
	}
	
	
	IUnknown** operator&()
	{
		((void)0);
		return &p;
	}
	_NoAddRefReleaseOnCComPtr<T>* operator->() const
	{
		((void)0);
		return (_NoAddRefReleaseOnCComPtr<T>*)p;
	}
	IUnknown* operator=(IUnknown* lp)
	{
		
		return (IUnknown*)AtlComQIPtrAssign((IUnknown**)&p, lp, IID_IUnknown);
	}
	IUnknown* operator=(const CComQIPtr<IUnknown,&IID_IUnknown>& lp)
	{
		return (IUnknown*)AtlComPtrAssign((IUnknown**)&p, lp.p);
	}
	bool operator!() const
	{
		return (p == 0);
	}
	bool operator<(IUnknown* pT) const
	{
		return p < pT;
	}
	bool operator==(IUnknown* pT) const
	{
		return p == pT;
	}
	
	bool IsEqualObject(IUnknown* pOther)
	{
		if (p == 0 && pOther == 0)
			return true; 

		if (p == 0 || pOther == 0)
			return false; 

		CComPtr<IUnknown> punk1;
		CComPtr<IUnknown> punk2;
		p->QueryInterface(IID_IUnknown, (void**)&punk1);
		pOther->QueryInterface(IID_IUnknown, (void**)&punk2);
		return punk1 == punk2;
	}
	IUnknown* Detach()
	{
		IUnknown* pt = p;
		p = 0;
		return pt;
	}
	HRESULT CopyTo(T** ppT)
	{
		((void)0);
		if (ppT == 0)
			return ((HRESULT)0x80004003L);
		*ppT = p;
		if (p)
			p->AddRef();
		return ((HRESULT)0x00000000L);
	}
	HRESULT SetSite(IUnknown* punkParent)
	{
		return AtlSetChildSite(p, punkParent);
	}
	HRESULT Advise(IUnknown* pUnk, const IID& iid, LPDWORD pdw)
	{
		return AtlAdvise(p, pUnk, iid, pdw);
	}
	HRESULT CoCreateInstance(const IID & rclsid, LPUNKNOWN pUnkOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER))
	{
		((void)0);
		return ::CoCreateInstance(rclsid, pUnkOuter, dwClsContext, __uuidof(T), (void**)&p);
	}
	HRESULT CoCreateInstance(LPCOLESTR szProgID, LPUNKNOWN pUnkOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER))
	{
		CLSID clsid;
		HRESULT hr = CLSIDFromProgID(szProgID, &clsid);
		((void)0);
		if (((HRESULT)(hr) >= 0))
			hr = ::CoCreateInstance(clsid, pUnkOuter, dwClsContext, __uuidof(T), (void**)&p);
		return hr;
	}
	template <class Q>
	HRESULT QueryInterface(Q** pp)
	{
		((void)0);
		return p->QueryInterface(__uuidof(Q), (void**)pp);
	}
	IUnknown* p;
};








template <class T>
class CAdapt
{
public:
	CAdapt()
	{
	}
	CAdapt(const T& rSrc)
	{
		m_T = rSrc;
	}

	CAdapt(const CAdapt& rSrCA)
	{
		m_T = rSrCA.m_T;
	}

	CAdapt& operator=(const T& rSrc)
	{
		m_T = rSrc;
		return *this;
	}
	bool operator<(const T& rSrc) const
	{
		return m_T < rSrc;
	}
	bool operator==(const T& rSrc) const
	{
		return m_T == rSrc;
	}
	operator T&()
	{
		return m_T;
	}

	operator const T&() const
	{
		return m_T;
	}

	T m_T;
};




inline BOOL InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
	  ((PLONG) &rguid1)[0] == ((PLONG) &rguid2)[0] &&
	  ((PLONG) &rguid1)[1] == ((PLONG) &rguid2)[1] &&
	  ((PLONG) &rguid1)[2] == ((PLONG) &rguid2)[2] &&
	  ((PLONG) &rguid1)[3] == ((PLONG) &rguid2)[3]);
}

inline BOOL InlineIsEqualUnknown(const GUID & rguid1)
{
   return (
	  ((PLONG) &rguid1)[0] == 0 &&
	  ((PLONG) &rguid1)[1] == 0 &&




	  ((PLONG) &rguid1)[2] == 0x000000C0 &&
	  ((PLONG) &rguid1)[3] == 0x46000000);
#line 931 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
}




class CComCriticalSection
{
public:
	void Lock() {EnterCriticalSection(&m_sec);}
	void Unlock() {LeaveCriticalSection(&m_sec);}
	void Init() {InitializeCriticalSection(&m_sec);}
	void Term() {DeleteCriticalSection(&m_sec);}
	CRITICAL_SECTION m_sec;
};

class CComAutoCriticalSection
{
public:
	void Lock() {EnterCriticalSection(&m_sec);}
	void Unlock() {LeaveCriticalSection(&m_sec);}
	CComAutoCriticalSection() {InitializeCriticalSection(&m_sec);}
	~CComAutoCriticalSection() {DeleteCriticalSection(&m_sec);}
	CRITICAL_SECTION m_sec;
};

class CComFakeCriticalSection
{
public:
	void Lock() {}
	void Unlock() {}
	void Init() {}
	void Term() {}
};

class CComMultiThreadModelNoCS
{
public:
	static ULONG __stdcall Increment(LPLONG p) {return InterlockedIncrement(p);}
	static ULONG __stdcall Decrement(LPLONG p) {return InterlockedDecrement(p);}
	typedef CComFakeCriticalSection AutoCriticalSection;
	typedef CComFakeCriticalSection CriticalSection;
	typedef CComMultiThreadModelNoCS ThreadModelNoCS;
};

class CComMultiThreadModel
{
public:
	static ULONG __stdcall Increment(LPLONG p) {return InterlockedIncrement(p);}
	static ULONG __stdcall Decrement(LPLONG p) {return InterlockedDecrement(p);}
	typedef CComAutoCriticalSection AutoCriticalSection;
	typedef CComCriticalSection CriticalSection;
	typedef CComMultiThreadModelNoCS ThreadModelNoCS;
};

class CComSingleThreadModel
{
public:
	static ULONG __stdcall Increment(LPLONG p) {return ++(*p);}
	static ULONG __stdcall Decrement(LPLONG p) {return --(*p);}
	typedef CComFakeCriticalSection AutoCriticalSection;
	typedef CComFakeCriticalSection CriticalSection;
	typedef CComSingleThreadModel ThreadModelNoCS;
};




#line 999 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
	typedef CComSingleThreadModel CComObjectThreadModel;
	typedef CComMultiThreadModel CComGlobalsThreadModel;



#line 1005 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"








HRESULT __stdcall AtlDumpIID(const IID & iid, LPCTSTR pszClassName, HRESULT hr);





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































template <class T>
class CSimpleArray
{
public:
	T* m_aT;
	int m_nSize;
	int m_nAllocSize;


	CSimpleArray() : m_aT(0), m_nSize(0), m_nAllocSize(0)
	{ }

	~CSimpleArray()
	{
		RemoveAll();
	}


	int GetSize() const
	{
		return m_nSize;
	}
	BOOL Add(T& t)
	{
		if(m_nSize == m_nAllocSize)
		{
			T* aT;
			int nNewAllocSize = (m_nAllocSize == 0) ? 1 : (m_nSize * 2);
			aT = (T*)realloc(m_aT, nNewAllocSize * sizeof(T));
			if(aT == 0)
				return 0;
			m_nAllocSize = nNewAllocSize;
			m_aT = aT;
		}
		m_nSize++;
		SetAtIndex(m_nSize - 1, t);
		return 1;
	}
	BOOL Remove(T& t)
	{
		int nIndex = Find(t);
		if(nIndex == -1)
			return 0;
		return RemoveAt(nIndex);
	}
	BOOL RemoveAt(int nIndex)
	{
		if(nIndex != (m_nSize - 1))
		{
			m_aT[nIndex].~T();
			memmove((void*)&m_aT[nIndex], (void*)&m_aT[nIndex + 1], (m_nSize - (nIndex + 1)) * sizeof(T));
		}
		m_nSize--;
		return 1;
	}
	void RemoveAll()
	{
		if(m_aT != 0)
		{
			for(int i = 0; i < m_nSize; i++)
				m_aT[i].~T();
			free(m_aT);
			m_aT = 0;
		}
		m_nSize = 0;
		m_nAllocSize = 0;
	}
	T& operator[] (int nIndex) const
	{
		((void)0);
		return m_aT[nIndex];
	}
	T* GetData() const
	{
		return m_aT;
	}


	class Wrapper
	{
	public:
		Wrapper(T& _t) : t(_t)
		{
		}
		template <class _Ty>
		void *operator new(size_t, _Ty* p)
		{
			return p;
		}
		T t;
	};
	void SetAtIndex(int nIndex, T& t)
	{
		((void)0);
		new(&m_aT[nIndex]) Wrapper(t);
	}
	int Find(T& t) const
	{
		for(int i = 0; i < m_nSize; i++)
		{
			if(m_aT[i] == t)
				return i;
		}
		return -1;  
	}
};


template <class T>
class CSimpleValArray : public CSimpleArray< T >
{
public:
	BOOL Add(T t)
	{
		return CSimpleArray< T >::Add(t);
	}
	BOOL Remove(T t)
	{
		return CSimpleArray< T >::Remove(t);
	}
	T operator[] (int nIndex) const
	{
		return CSimpleArray< T >::operator[](nIndex);
	}
};



template <class TKey, class TVal>
class CSimpleMap
{
public:
	TKey* m_aKey;
	TVal* m_aVal;
	int m_nSize;


	CSimpleMap() : m_aKey(0), m_aVal(0), m_nSize(0)
	{ }

	~CSimpleMap()
	{
		RemoveAll();
	}


	int GetSize() const
	{
		return m_nSize;
	}
	BOOL Add(TKey key, TVal val)
	{
		TKey* pKey;
		pKey = (TKey*)realloc(m_aKey, (m_nSize + 1) * sizeof(TKey));
		if(pKey == 0)
			return 0;
		m_aKey = pKey;
		TVal* pVal;
		pVal = (TVal*)realloc(m_aVal, (m_nSize + 1) * sizeof(TVal));
		if(pVal == 0)
			return 0;
		m_aVal = pVal;
		m_nSize++;
		SetAtIndex(m_nSize - 1, key, val);
		return 1;
	}
	BOOL Remove(TKey key)
	{
		int nIndex = FindKey(key);
		if(nIndex == -1)
			return 0;
		if(nIndex != (m_nSize - 1))
		{
			m_aKey[nIndex].~TKey();
			m_aVal[nIndex].~TVal();
			memmove((void*)&m_aKey[nIndex], (void*)&m_aKey[nIndex + 1], (m_nSize - (nIndex + 1)) * sizeof(TKey));
			memmove((void*)&m_aVal[nIndex], (void*)&m_aVal[nIndex + 1], (m_nSize - (nIndex + 1)) * sizeof(TVal));
		}
		TKey* pKey;
		pKey = (TKey*)realloc(m_aKey, (m_nSize - 1) * sizeof(TKey));
		if(pKey != 0 || m_nSize == 1)
			m_aKey = pKey;
		TVal* pVal;
		pVal = (TVal*)realloc(m_aVal, (m_nSize - 1) * sizeof(TVal));
		if(pVal != 0 || m_nSize == 1)
			m_aVal = pVal;
		m_nSize--;
		return 1;
	}
	void RemoveAll()
	{
		if(m_aKey != 0)
		{
			for(int i = 0; i < m_nSize; i++)
			{
				m_aKey[i].~TKey();
				m_aVal[i].~TVal();
			}
			free(m_aKey);
			m_aKey = 0;
		}
		if(m_aVal != 0)
		{
			free(m_aVal);
			m_aVal = 0;
		}

		m_nSize = 0;
	}
	BOOL SetAt(TKey key, TVal val)
	{
		int nIndex = FindKey(key);
		if(nIndex == -1)
			return 0;
		SetAtIndex(nIndex, key, val);
		return 1;
	}
	TVal Lookup(TKey key) const
	{
		int nIndex = FindKey(key);
		if(nIndex == -1)
			return 0;    
		return GetValueAt(nIndex);
	}
	TKey ReverseLookup(TVal val) const
	{
		int nIndex = FindVal(val);
		if(nIndex == -1)
			return 0;    
		return GetKeyAt(nIndex);
	}
	TKey& GetKeyAt(int nIndex) const
	{
		((void)0);
		return m_aKey[nIndex];
	}
	TVal& GetValueAt(int nIndex) const
	{
		((void)0);
		return m_aVal[nIndex];
	}



	template <typename T>
	class Wrapper
	{
	public:
		Wrapper(T& _t) : t(_t)
		{
		}
		template <typename _Ty>
		void *operator new(size_t, _Ty* p)
		{
			return p;
		}
		T t;
	};
	void SetAtIndex(int nIndex, TKey& key, TVal& val)
	{
		((void)0);
		new(&m_aKey[nIndex]) Wrapper<TKey>(key);
		new(&m_aVal[nIndex]) Wrapper<TVal>(val);
	}
	int FindKey(TKey& key) const
	{
		for(int i = 0; i < m_nSize; i++)
		{
			if(m_aKey[i] == key)
				return i;
		}
		return -1;  
	}
	int FindVal(TVal& val) const
	{
		for(int i = 0; i < m_nSize; i++)
		{
			if(m_aVal[i] == val)
				return i;
		}
		return -1;  
	}
};


class CComModule;
__declspec(selectany) CComModule* _pModule=0;


_declspec(selectany) GUID GUID_ATLVer30 = { 0xb62f5910, 0x6528, 0x11d1, { 0x96, 0x11, 0x0, 0x0, 0xf8, 0x1e, 0xd, 0xd } };

class CComModule : public _ATL_MODULE
{

public:
	static GUID m_libid;






	void AddCreateWndData(_AtlCreateWndData* pData, void* pObject)
	{
		AtlModuleAddCreateWndData(this, pData, pObject);
	}
	void* ExtractCreateWndData()
	{
		return AtlModuleExtractCreateWndData(this);
	}

	HRESULT Init(_ATL_OBJMAP_ENTRY* p, HINSTANCE h, const GUID* plibid = 0)
	{
		pguidVer = &GUID_ATLVer30;
		_pModule = this;
		cbSize = sizeof(_ATL_MODULE);
		dwAtlBuildVer = 0x0300;
		AtlModuleInit(this, p, h);
		if (plibid != 0)
			memcpy((void*)&m_libid, plibid, sizeof(GUID));













































		return ((HRESULT)0x00000000L);
	}










































































































	void Term()
	{















		AtlModuleTerm(this);
#line 2599 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
	}

	HRESULT AddTermFunc(_ATL_TERMFUNC* pFunc, DWORD dw)
	{
		return AtlModuleAddTermFunc(this, pFunc, dw);
	}

	LONG Lock()
	{
		return CComGlobalsThreadModel::Increment(&m_nLockCnt);
	}
	LONG Unlock()
	{
		return CComGlobalsThreadModel::Decrement(&m_nLockCnt);
	}
	LONG GetLockCount()
	{
		return m_nLockCnt;
	}

	HINSTANCE GetModuleInstance() {return m_hInst;}
	HINSTANCE GetResourceInstance() {return m_hInstResource;}
	HINSTANCE GetTypeLibInstance() {return m_hInstTypeLib;}

	
	HRESULT RegisterTypeLib()
	{
		return AtlModuleRegisterTypeLib(this, 0);
	}
	HRESULT RegisterTypeLib(LPCTSTR lpszIndex)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		return AtlModuleRegisterTypeLib(this, ((LPCWSTR)( ((_lpa = lpszIndex) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))));
	}
	HRESULT UnRegisterTypeLib()
	{
		return AtlModuleUnRegisterTypeLib(this, 0);
	}
	HRESULT UnRegisterTypeLib(LPCTSTR lpszIndex)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		return AtlModuleUnRegisterTypeLib(this, ((LPCWSTR)( ((_lpa = lpszIndex) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))));
	}
	HRESULT RegisterServer(BOOL bRegTypeLib = 0, const CLSID* pCLSID = 0)
	{
		return AtlModuleRegisterServer(this, bRegTypeLib, pCLSID);
	}

	HRESULT UnregisterServer(const CLSID* pCLSID = 0)
	{
		return AtlModuleUnregisterServer(this, pCLSID);
	}
	HRESULT UnregisterServer(BOOL bUnRegTypeLib, const CLSID* pCLSID = 0)
	{
		return AtlModuleUnregisterServerEx(this, bUnRegTypeLib, pCLSID);
	}

	
	HRESULT __stdcall UpdateRegistryFromResourceD(LPCTSTR lpszRes, BOOL bRegister,
		struct _ATL_REGMAP_ENTRY* pMapEntries = 0)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		return AtlModuleUpdateRegistryFromResourceD(this, ((LPCWSTR)( ((_lpa = lpszRes) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))), bRegister,
			pMapEntries);
	}
	HRESULT __stdcall UpdateRegistryFromResourceD(UINT nResID, BOOL bRegister,
		struct _ATL_REGMAP_ENTRY* pMapEntries = 0)
	{
		return AtlModuleUpdateRegistryFromResourceD(this,
			(LPCOLESTR)(LPSTR)((ULONG_PTR)((WORD)(nResID))), bRegister, pMapEntries);
	}









	
	HRESULT __stdcall UpdateRegistryClass(const CLSID& clsid, LPCTSTR lpszProgID,
		LPCTSTR lpszVerIndProgID, UINT nDescID, DWORD dwFlags, BOOL bRegister);
	HRESULT __stdcall RegisterClassHelper(const CLSID& clsid, LPCTSTR lpszProgID,
		LPCTSTR lpszVerIndProgID, UINT nDescID, DWORD dwFlags);
	HRESULT __stdcall UnregisterClassHelper(const CLSID& clsid, LPCTSTR lpszProgID,
		LPCTSTR lpszVerIndProgID);

	
	HRESULT RegisterClassObjects(DWORD dwClsContext, DWORD dwFlags)
	{
		return AtlModuleRegisterClassObjects(this, dwClsContext, dwFlags);
	}
	HRESULT RevokeClassObjects()
	{
		return AtlModuleRevokeClassObjects(this);
	}

	
	HRESULT GetClassObject(const IID & rclsid, const IID & riid, LPVOID* ppv)
	{
		return AtlModuleGetClassObject(this, rclsid, riid, ppv);
	}

	
	HRESULT CreateInstance(void* , const IID & , void** )
	{
		((void)0);
		return ((HRESULT)0x80004001L);
	}
	static HRESULT RegisterProgID(LPCTSTR lpszCLSID, LPCTSTR lpszProgID, LPCTSTR lpszUserDesc);

	static void ReplaceSingleQuote(LPOLESTR lpDest, LPCOLESTR lp)
	{
		while (*lp)
		{
			*lpDest++ = *lp;
			if (*lp == L'\'')
				*lpDest++ = *lp;
			lp++;
		}
		*lpDest = 0;
	}
};




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































__declspec(selectany) GUID CComModule::m_libid = {0x0,0x0,0x0,{0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}};





#line 3790 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"




class _AtlAptCreateObjData
{
public:
	_ATL_CREATORFUNC* pfnCreateInstance;
	const IID* piid;
	HANDLE hEvent;
	LPSTREAM pStream;
	HRESULT hRes;
};

class CComApartment
{
public:
	CComApartment()
	{
		m_nLockCnt = 0;
	}
	static UINT ATL_CREATE_OBJECT;
	static DWORD __stdcall _Apartment(void* pv)
	{
		return ((CComApartment*)pv)->Apartment();
	}
	DWORD Apartment()
	{
		CoInitialize(0);
		MSG msg;
		while(GetMessageA(&msg, 0, 0, 0))
		{
			if (msg.message == ATL_CREATE_OBJECT)
			{
				_AtlAptCreateObjData* pdata = (_AtlAptCreateObjData*)msg.lParam;
				IUnknown* pUnk = 0;
				pdata->hRes = pdata->pfnCreateInstance(0, IID_IUnknown, (void**)&pUnk);
				if (((HRESULT)(pdata->hRes) >= 0))
					pdata->hRes = CoMarshalInterThreadInterfaceInStream(*pdata->piid, pUnk, &pdata->pStream);
				if (((HRESULT)(pdata->hRes) >= 0))
				{
					pUnk->Release();
					1 ? (void)0 : AtlTrace2(atlTraceCOM, 2, "Object created on thread = %d\n", GetCurrentThreadId());
				}
				SetEvent(pdata->hEvent);
			}
			DispatchMessageA(&msg);
		}
		CoUninitialize();
		return 0;
	}
	LONG Lock() {return CComGlobalsThreadModel::Increment(&m_nLockCnt);}
	LONG Unlock(){return CComGlobalsThreadModel::Decrement(&m_nLockCnt);
	}
	LONG GetLockCount() {return m_nLockCnt;}

	DWORD m_dwThreadID;
	HANDLE m_hThread;
	LONG m_nLockCnt;
};

__declspec(selectany) UINT CComApartment::ATL_CREATE_OBJECT = 0;

class CComSimpleThreadAllocator
{
public:
	CComSimpleThreadAllocator()
	{
		m_nThread = 0;
	}
	int GetThread(CComApartment* , int nThreads)
	{
		if (++m_nThread == nThreads)
			m_nThread = 0;
		return m_nThread;
	}
	int m_nThread;
};

template <class ThreadAllocator = CComSimpleThreadAllocator>
class CComAutoThreadModule : public CComModule
{
public:
	HRESULT Init(_ATL_OBJMAP_ENTRY* p, HINSTANCE h, const GUID* plibid = 0, int nThreads = GetDefaultThreads());
	~CComAutoThreadModule();
	HRESULT CreateInstance(void* pfnCreateInstance, const IID & riid, void** ppvObj);
	LONG Lock();
	LONG Unlock();
	DWORD dwThreadID;
	int m_nThreads;
	CComApartment* m_pApartments;
	ThreadAllocator m_Allocator;
	static int GetDefaultThreads()
	{
		SYSTEM_INFO si;
		GetSystemInfo(&si);
		return si.dwNumberOfProcessors * 4;
	}
};




class CComBSTR
{
public:
	BSTR m_str;
	CComBSTR()
	{
		m_str = 0;
	}
	 CComBSTR(int nSize)
	{
		m_str = ::SysAllocStringLen(0, nSize);
	}
	 CComBSTR(int nSize, LPCOLESTR sz)
	{
		m_str = ::SysAllocStringLen(sz, nSize);
	}
	 CComBSTR(LPCOLESTR pSrc)
	{
		m_str = ::SysAllocString(pSrc);
	}
	 CComBSTR(const CComBSTR& src)
	{
		m_str = src.Copy();
	}
	 CComBSTR(const GUID & src)
	{
		LPOLESTR szGuid;
		StringFromCLSID(src, &szGuid);
		m_str = ::SysAllocString(szGuid);
		CoTaskMemFree(szGuid);
	}
	CComBSTR& operator=(const CComBSTR& src)
	{
		if (m_str != src.m_str)
		{
			if (m_str)
				::SysFreeString(m_str);
			m_str = src.Copy();
		}
		return *this;
	}

	CComBSTR& operator=(LPCOLESTR pSrc)
	{
		::SysFreeString(m_str);
		m_str = ::SysAllocString(pSrc);
		return *this;
	}

	~CComBSTR()
	{
		::SysFreeString(m_str);
	}
	unsigned int Length() const
	{
		return (m_str == 0)? 0 : SysStringLen(m_str);
	}
	operator BSTR() const
	{
		return m_str;
	}
	BSTR* operator&()
	{
		return &m_str;
	}
	BSTR Copy() const
	{
		return ::SysAllocStringLen(m_str, ::SysStringLen(m_str));
	}
	HRESULT CopyTo(BSTR* pbstr)
	{
		((void)0);
		if (pbstr == 0)
			return ((HRESULT)0x80004003L);
		*pbstr = ::SysAllocStringLen(m_str, ::SysStringLen(m_str));
		if (*pbstr == 0)
			return ((HRESULT)0x8007000EL);
		return ((HRESULT)0x00000000L);
	}
	void Attach(BSTR src)
	{
		((void)0);
		m_str = src;
	}
	BSTR Detach()
	{
		BSTR s = m_str;
		m_str = 0;
		return s;
	}
	void Empty()
	{
		::SysFreeString(m_str);
		m_str = 0;
	}
	bool operator!() const
	{
		return (m_str == 0);
	}
	HRESULT Append(const CComBSTR& bstrSrc)
	{
		return Append(bstrSrc.m_str, SysStringLen(bstrSrc.m_str));
	}
	HRESULT Append(LPCOLESTR lpsz)
	{
		return Append(lpsz, ocslen(lpsz));
	}
	
	
	HRESULT AppendBSTR(BSTR p)
	{
		return Append(p, SysStringLen(p));
	}
	HRESULT Append(LPCOLESTR lpsz, int nLen)
	{
		int n1 = Length();
		BSTR b;
		b = ::SysAllocStringLen(0, n1+nLen);
		if (b == 0)
			return ((HRESULT)0x8007000EL);
		memcpy(b, m_str, n1*sizeof(OLECHAR));
		memcpy(b+n1, lpsz, nLen*sizeof(OLECHAR));
		b[n1+nLen] = 0;
		SysFreeString(m_str);
		m_str = b;
		return ((HRESULT)0x00000000L);
	}
	HRESULT ToLower()
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		if (m_str != 0)
		{
			LPTSTR psz = CharLowerA(( ((_lpw = m_str) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert))));
			if (psz == 0)
				return ((HRESULT)0x8007000EL);
			BSTR b = T2BSTR(psz);
			if (psz == 0)
				return ((HRESULT)0x8007000EL);
			SysFreeString(m_str);
			m_str = b;
		}
		return ((HRESULT)0x00000000L);
	}
	HRESULT ToUpper()
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		if (m_str != 0)
		{
			LPTSTR psz = CharUpperA(( ((_lpw = m_str) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert))));
			if (psz == 0)
				return ((HRESULT)0x8007000EL);
			BSTR b = T2BSTR(psz);
			if (psz == 0)
				return ((HRESULT)0x8007000EL);
			SysFreeString(m_str);
			m_str = b;
		}
		return ((HRESULT)0x00000000L);
	}
	bool LoadStringA(HINSTANCE hInst, UINT nID)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		TCHAR sz[512];
		UINT nLen = ::LoadStringA(hInst, nID, sz, 512);
		((void)0);
		SysFreeString(m_str);
		m_str = (nLen != 0) ? SysAllocString(( ((_lpa = sz) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))) : 0;
		return (nLen != 0);
	}
	bool LoadStringA(UINT nID)
	{
		return LoadStringA(_pModule->m_hInstResource, nID);
	}

	CComBSTR& operator+=(const CComBSTR& bstrSrc)
	{
		AppendBSTR(bstrSrc.m_str);
		return *this;
	}
	bool operator<(BSTR bstrSrc) const
	{
		if (bstrSrc == 0 && m_str == 0)
			return false;
		if (bstrSrc != 0 && m_str != 0)
			return wcscmp(m_str, bstrSrc) < 0;
		return m_str == 0;
	}
	bool operator==(BSTR bstrSrc) const
	{
		if (bstrSrc == 0 && m_str == 0)
			return true;
		if (bstrSrc != 0 && m_str != 0)
			return wcscmp(m_str, bstrSrc) == 0;
		return false;
	}
	bool operator<(LPCSTR pszSrc) const
	{
		if (pszSrc == 0 && m_str == 0)
			return false;
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		if (pszSrc != 0 && m_str != 0)
			return wcscmp(m_str, ( ((_lpa = pszSrc) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))) < 0;
		return m_str == 0;
	}
	bool operator==(LPCSTR pszSrc) const
	{
		if (pszSrc == 0 && m_str == 0)
			return true;
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		if (pszSrc != 0 && m_str != 0)
			return wcscmp(m_str, ( ((_lpa = pszSrc) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))) == 0;
		return false;
	}

	CComBSTR(LPCSTR pSrc)
	{
		m_str = A2WBSTR(pSrc);
	}

	CComBSTR(int nSize, LPCSTR sz)
	{
		m_str = A2WBSTR(sz, nSize);
	}

	void Append(LPCSTR lpsz)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		LPCOLESTR lpo = ((LPCWSTR)( ((_lpa = lpsz) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert))));
		Append(lpo, ocslen(lpo));
	}

	CComBSTR& operator=(LPCSTR pSrc)
	{
		::SysFreeString(m_str);
		m_str = A2WBSTR(pSrc);
		return *this;
	}
#line 4131 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
	HRESULT WriteToStream(IStream* pStream)
	{
		((void)0);
		ULONG cb;
		ULONG cbStrLen = m_str ? SysStringByteLen(m_str)+sizeof(OLECHAR) : 0;
		HRESULT hr = pStream->Write((void*) &cbStrLen, sizeof(cbStrLen), &cb);
		if (((HRESULT)(hr)<0))
			return hr;
		return cbStrLen ? pStream->Write((void*) m_str, cbStrLen, &cb) : ((HRESULT)0x00000000L);
	}
	HRESULT ReadFromStream(IStream* pStream)
	{
		((void)0);
		((void)0); 
		ULONG cbStrLen = 0;
		HRESULT hr = pStream->Read((void*) &cbStrLen, sizeof(cbStrLen), 0);
		if ((hr == ((HRESULT)0x00000000L)) && (cbStrLen != 0))
		{
			
			
			m_str = SysAllocStringByteLen(0, cbStrLen-sizeof(OLECHAR));
			if (m_str == 0)
				hr = ((HRESULT)0x8007000EL);
			else
				hr = pStream->Read((void*) m_str, cbStrLen, 0);
		}
		if (hr == ((HRESULT)0x00000001L))
			hr = ((HRESULT)0x80004005L);
		return hr;
	}
};




class CComVariant : public tagVARIANT
{

public:
	CComVariant()
	{
		vt = VT_EMPTY;
	}
	~CComVariant()
	{
		Clear();
	}

	CComVariant(const VARIANT& varSrc)
	{
		vt = VT_EMPTY;
		InternalCopy(&varSrc);
	}

	CComVariant(const CComVariant& varSrc)
	{
		vt = VT_EMPTY;
		InternalCopy(&varSrc);
	}

	CComVariant(BSTR bstrSrc)
	{
		vt = VT_EMPTY;
		*this = bstrSrc;
	}
	CComVariant(LPCOLESTR lpszSrc)
	{
		vt = VT_EMPTY;
		*this = lpszSrc;
	}


	CComVariant(LPCSTR lpszSrc)
	{
		vt = VT_EMPTY;
		*this = lpszSrc;
	}
#line 4209 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

	CComVariant(bool bSrc)
	{
		vt = VT_BOOL;
#pragma warning(disable: 4310) 
		boolVal = bSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0);
#pragma warning(default: 4310) 
	}

	CComVariant(int nSrc)
	{
		vt = VT_I4;
		lVal = nSrc;
	}
	CComVariant(BYTE nSrc)
	{
		vt = VT_UI1;
		bVal = nSrc;
	}
	CComVariant(short nSrc)
	{
		vt = VT_I2;
		iVal = nSrc;
	}
	CComVariant(long nSrc, VARTYPE vtSrc = VT_I4)
	{
		((void)0);
		vt = vtSrc;
		lVal = nSrc;
	}
	CComVariant(float fltSrc)
	{
		vt = VT_R4;
		fltVal = fltSrc;
	}
	CComVariant(double dblSrc)
	{
		vt = VT_R8;
		dblVal = dblSrc;
	}
	CComVariant(CY cySrc)
	{
		vt = VT_CY;
		cyVal.Hi = cySrc.Hi;
		cyVal.Lo = cySrc.Lo;
	}
	CComVariant(IDispatch* pSrc)
	{
		vt = VT_DISPATCH;
		pdispVal = pSrc;
		
		if (pdispVal != 0)
			pdispVal->AddRef();
	}
	CComVariant(IUnknown* pSrc)
	{
		vt = VT_UNKNOWN;
		punkVal = pSrc;
		
		if (punkVal != 0)
			punkVal->AddRef();
	}


public:
	CComVariant& operator=(const CComVariant& varSrc)
	{
		InternalCopy(&varSrc);
		return *this;
	}
	CComVariant& operator=(const VARIANT& varSrc)
	{
		InternalCopy(&varSrc);
		return *this;
	}

	CComVariant& operator=(BSTR bstrSrc)
	{
		InternalClear();
		vt = VT_BSTR;
		bstrVal = ::SysAllocString(bstrSrc);
		if (bstrVal == 0 && bstrSrc != 0)
		{
			vt = VT_ERROR;
			scode = ((HRESULT)0x8007000EL);
		}
		return *this;
	}

	CComVariant& operator=(LPCOLESTR lpszSrc)
	{
		InternalClear();
		vt = VT_BSTR;
		bstrVal = ::SysAllocString(lpszSrc);

		if (bstrVal == 0 && lpszSrc != 0)
		{
			vt = VT_ERROR;
			scode = ((HRESULT)0x8007000EL);
		}
		return *this;
	}

	
	CComVariant& operator=(LPCSTR lpszSrc)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		InternalClear();
		vt = VT_BSTR;
		bstrVal = ::SysAllocString(((LPCWSTR)( ((_lpa = lpszSrc) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))));

		if (bstrVal == 0 && lpszSrc != 0)
		{
			vt = VT_ERROR;
			scode = ((HRESULT)0x8007000EL);
		}
		return *this;
	}
	#line 4328 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"

	CComVariant& operator=(bool bSrc)
	{
		if (vt != VT_BOOL)
		{
			InternalClear();
			vt = VT_BOOL;
		}
	#pragma warning(disable: 4310) 
		boolVal = bSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0);
	#pragma warning(default: 4310) 
		return *this;
	}

	CComVariant& operator=(int nSrc)
	{
		if (vt != VT_I4)
		{
			InternalClear();
			vt = VT_I4;
		}
		lVal = nSrc;

		return *this;
	}

	CComVariant& operator=(BYTE nSrc)
	{
		if (vt != VT_UI1)
		{
			InternalClear();
			vt = VT_UI1;
		}
		bVal = nSrc;
		return *this;
	}

	CComVariant& operator=(short nSrc)
	{
		if (vt != VT_I2)
		{
			InternalClear();
			vt = VT_I2;
		}
		iVal = nSrc;
		return *this;
	}

	CComVariant& operator=(long nSrc)
	{
		if (vt != VT_I4)
		{
			InternalClear();
			vt = VT_I4;
		}
		lVal = nSrc;
		return *this;
	}

	CComVariant& operator=(float fltSrc)
	{
		if (vt != VT_R4)
		{
			InternalClear();
			vt = VT_R4;
		}
		fltVal = fltSrc;
		return *this;
	}

	CComVariant& operator=(double dblSrc)
	{
		if (vt != VT_R8)
		{
			InternalClear();
			vt = VT_R8;
		}
		dblVal = dblSrc;
		return *this;
	}

	CComVariant& operator=(CY cySrc)
	{
		if (vt != VT_CY)
		{
			InternalClear();
			vt = VT_CY;
		}
		cyVal.Hi = cySrc.Hi;
		cyVal.Lo = cySrc.Lo;
		return *this;
	}

	CComVariant& operator=(IDispatch* pSrc)
	{
		InternalClear();
		vt = VT_DISPATCH;
		pdispVal = pSrc;
		
		if (pdispVal != 0)
			pdispVal->AddRef();
		return *this;
	}

	CComVariant& operator=(IUnknown* pSrc)
	{
		InternalClear();
		vt = VT_UNKNOWN;
		punkVal = pSrc;

		
		if (punkVal != 0)
			punkVal->AddRef();
		return *this;
	}



public:
	bool operator==(const VARIANT& varSrc) const
	{
		if (this == &varSrc)
			return true;

		
		if (vt != varSrc.vt)
			return false;

		
		switch (vt)
		{
			case VT_EMPTY:
			case VT_NULL:
				return true;

			case VT_BOOL:
				return boolVal == varSrc.boolVal;

			case VT_UI1:
				return bVal == varSrc.bVal;

			case VT_I2:
				return iVal == varSrc.iVal;

			case VT_I4:
				return lVal == varSrc.lVal;

			case VT_R4:
				return fltVal == varSrc.fltVal;

			case VT_R8:
				return dblVal == varSrc.dblVal;

			case VT_BSTR:
				return (::SysStringByteLen(bstrVal) == ::SysStringByteLen(varSrc.bstrVal)) &&
						(::memcmp(bstrVal, varSrc.bstrVal, ::SysStringByteLen(bstrVal)) == 0);

			case VT_ERROR:
				return scode == varSrc.scode;

			case VT_DISPATCH:
				return pdispVal == varSrc.pdispVal;

			case VT_UNKNOWN:
				return punkVal == varSrc.punkVal;

			default:
				((void)0);
				
		}

		return false;
	}
	bool operator!=(const VARIANT& varSrc) const {return !operator==(varSrc);}
	bool operator<(const VARIANT& varSrc) const {return VarCmp((VARIANT*)this, (VARIANT*)&varSrc, (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0)==0;}
	bool operator>(const VARIANT& varSrc) const {return VarCmp((VARIANT*)this, (VARIANT*)&varSrc, (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0)==2;}


public:
	HRESULT Clear() { return ::VariantClear(this); }
	HRESULT Copy(const VARIANT* pSrc) { return ::VariantCopy(this, const_cast<VARIANT*>(pSrc)); }
	HRESULT Attach(VARIANT* pSrc)
	{
		
		HRESULT hr = Clear();
		if (!((HRESULT)(hr)<0))
		{
			
			memcpy(this, pSrc, sizeof(VARIANT));
			pSrc->vt = VT_EMPTY;
			hr = ((HRESULT)0x00000000L);
		}
		return hr;
	}

	HRESULT Detach(VARIANT* pDest)
	{
		
		HRESULT hr = ::VariantClear(pDest);
		if (!((HRESULT)(hr)<0))
		{
			
			memcpy(pDest, this, sizeof(VARIANT));
			vt = VT_EMPTY;
			hr = ((HRESULT)0x00000000L);
		}
		return hr;
	}

	HRESULT ChangeType(VARTYPE vtNew, const VARIANT* pSrc = 0)
	{
		VARIANT* pVar = const_cast<VARIANT*>(pSrc);
		
		if (pVar == 0)
			pVar = this;
		
		return ::VariantChangeType(this, pVar, 0, vtNew);
	}

	HRESULT WriteToStream(IStream* pStream);
	HRESULT ReadFromStream(IStream* pStream);


public:
	HRESULT InternalClear()
	{
		HRESULT hr = Clear();
		((void)0);
		if (((HRESULT)(hr)<0))
		{
			vt = VT_ERROR;
			scode = hr;
		}
		return hr;
	}

	void InternalCopy(const VARIANT* pSrc)
	{
		HRESULT hr = Copy(pSrc);
		if (((HRESULT)(hr)<0))
		{
			vt = VT_ERROR;
			scode = hr;
		}
	}
};

inline HRESULT CComVariant::WriteToStream(IStream* pStream)
{
	HRESULT hr = pStream->Write(&vt, sizeof(VARTYPE), 0);
	if (((HRESULT)(hr)<0))
		return hr;

	int cbWrite = 0;
	switch (vt)
	{
	case VT_UNKNOWN:
	case VT_DISPATCH:
		{
			CComPtr<IPersistStream> spStream;
			if (punkVal != 0)
			{
				hr = punkVal->QueryInterface(IID_IPersistStream, (void**)&spStream);
				if (((HRESULT)(hr)<0))
					return hr;
			}
			if (spStream != 0)
				return OleSaveToStream(spStream, pStream);
			else
				return WriteClassStm(pStream, GUID_NULL);
		}
	case VT_UI1:
	case VT_I1:
		cbWrite = sizeof(BYTE);
		break;
	case VT_I2:
	case VT_UI2:
	case VT_BOOL:
		cbWrite = sizeof(short);
		break;
	case VT_I4:
	case VT_UI4:
	case VT_R4:
	case VT_INT:
	case VT_UINT:
	case VT_ERROR:
		cbWrite = sizeof(long);
		break;
	case VT_R8:
	case VT_CY:
	case VT_DATE:
		cbWrite = sizeof(double);
		break;
	default:
		break;
	}
	if (cbWrite != 0)
		return pStream->Write((void*) &bVal, cbWrite, 0);

	CComBSTR bstrWrite;
	CComVariant varBSTR;
	if (vt != VT_BSTR)
	{
		hr = VariantChangeType(&varBSTR, this, 0x01, VT_BSTR);
		if (((HRESULT)(hr)<0))
			return hr;
		bstrWrite = varBSTR.bstrVal;
	}
	else
		bstrWrite = bstrVal;

	return bstrWrite.WriteToStream(pStream);
}

inline HRESULT CComVariant::ReadFromStream(IStream* pStream)
{
	((void)0);
	HRESULT hr;
	hr = VariantClear(this);
	if (((HRESULT)(hr)<0))
		return hr;
	VARTYPE vtRead;
	hr = pStream->Read(&vtRead, sizeof(VARTYPE), 0);
	if (hr == ((HRESULT)0x00000001L))
		hr = ((HRESULT)0x80004005L);
	if (((HRESULT)(hr)<0))
		return hr;

	vt = vtRead;
	int cbRead = 0;
	switch (vtRead)
	{
	case VT_UNKNOWN:
	case VT_DISPATCH:
		{
			punkVal = 0;
			hr = OleLoadFromStream(pStream,
				(vtRead == VT_UNKNOWN) ? IID_IUnknown : IID_IDispatch,
				(void**)&punkVal);
			if (hr == ((HRESULT)0x80040154L))
				hr = ((HRESULT)0x00000000L);
			return ((HRESULT)0x00000000L);
		}
	case VT_UI1:
	case VT_I1:
		cbRead = sizeof(BYTE);
		break;
	case VT_I2:
	case VT_UI2:
	case VT_BOOL:
		cbRead = sizeof(short);
		break;
	case VT_I4:
	case VT_UI4:
	case VT_R4:
	case VT_INT:
	case VT_UINT:
	case VT_ERROR:
		cbRead = sizeof(long);
		break;
	case VT_R8:
	case VT_CY:
	case VT_DATE:
		cbRead = sizeof(double);
		break;
	default:
		break;
	}
	if (cbRead != 0)
	{
		hr = pStream->Read((void*) &bVal, cbRead, 0);
		if (hr == ((HRESULT)0x00000001L))
			hr = ((HRESULT)0x80004005L);
		return hr;
	}
	CComBSTR bstrRead;

	hr = bstrRead.ReadFromStream(pStream);
	if (((HRESULT)(hr)<0))
		return hr;
	vt = VT_BSTR;
	bstrVal = bstrRead.Detach();
	if (vtRead != VT_BSTR)
		hr = ChangeType(vtRead);
	return hr;
}




class CRegKey
{
public:
	CRegKey();
	~CRegKey();


public:
	operator HKEY() const;
	HKEY m_hKey;


public:
	LONG SetValue(DWORD dwValue, LPCTSTR lpszValueName);
	LONG QueryValue(DWORD& dwValue, LPCTSTR lpszValueName);
	LONG QueryValue(LPTSTR szValue, LPCTSTR lpszValueName, DWORD* pdwCount);
	LONG SetValue(LPCTSTR lpszValue, LPCTSTR lpszValueName = 0);

	LONG SetKeyValue(LPCTSTR lpszKeyName, LPCTSTR lpszValue, LPCTSTR lpszValueName = 0);
	static LONG __stdcall SetValue(HKEY hKeyParent, LPCTSTR lpszKeyName,
		LPCTSTR lpszValue, LPCTSTR lpszValueName = 0);

	LONG Create(HKEY hKeyParent, LPCTSTR lpszKeyName,
		LPTSTR lpszClass = ( 0 ), DWORD dwOptions = (0x00000000L),
		REGSAM samDesired = (((0x001F0000L) | (0x0001) | (0x0002) | (0x0004) | (0x0008) | (0x0010) | (0x0020)) & (~(0x00100000L))),
		LPSECURITY_ATTRIBUTES lpSecAttr = 0,
		LPDWORD lpdwDisposition = 0);
	LONG Open(HKEY hKeyParent, LPCTSTR lpszKeyName,
		REGSAM samDesired = (((0x001F0000L) | (0x0001) | (0x0002) | (0x0004) | (0x0008) | (0x0010) | (0x0020)) & (~(0x00100000L))));
	LONG Close();
	HKEY Detach();
	void Attach(HKEY hKey);
	LONG DeleteSubKey(LPCTSTR lpszSubKey);
	LONG RecurseDeleteKey(LPCTSTR lpszKey);
	LONG DeleteValue(LPCTSTR lpszValue);
};

inline CRegKey::CRegKey()
{m_hKey = 0;}

inline CRegKey::~CRegKey()
{Close();}

inline CRegKey::operator HKEY() const
{return m_hKey;}

inline HKEY CRegKey::Detach()
{
	HKEY hKey = m_hKey;
	m_hKey = 0;
	return hKey;
}

inline void CRegKey::Attach(HKEY hKey)
{
	((void)0);
	m_hKey = hKey;
}

inline LONG CRegKey::DeleteSubKey(LPCTSTR lpszSubKey)
{
	((void)0);
	return RegDeleteKeyA(m_hKey, lpszSubKey);
}

inline LONG CRegKey::DeleteValue(LPCTSTR lpszValue)
{
	((void)0);
	return RegDeleteValueA(m_hKey, (LPTSTR)lpszValue);
}

inline LONG CRegKey::Close()
{
	LONG lRes = 0L;
	if (m_hKey != 0)
	{
		lRes = RegCloseKey(m_hKey);
		m_hKey = 0;
	}
	return lRes;
}

inline LONG CRegKey::Create(HKEY hKeyParent, LPCTSTR lpszKeyName,
	LPTSTR lpszClass, DWORD dwOptions, REGSAM samDesired,
	LPSECURITY_ATTRIBUTES lpSecAttr, LPDWORD lpdwDisposition)
{
	((void)0);
	DWORD dw;
	HKEY hKey = 0;
	LONG lRes = RegCreateKeyExA(hKeyParent, lpszKeyName, 0,
		lpszClass, dwOptions, samDesired, lpSecAttr, &hKey, &dw);
	if (lpdwDisposition != 0)
		*lpdwDisposition = dw;
	if (lRes == 0L)
	{
		lRes = Close();
		m_hKey = hKey;
	}
	return lRes;
}

inline LONG CRegKey::Open(HKEY hKeyParent, LPCTSTR lpszKeyName, REGSAM samDesired)
{
	((void)0);
	HKEY hKey = 0;
	LONG lRes = RegOpenKeyExA(hKeyParent, lpszKeyName, 0, samDesired, &hKey);
	if (lRes == 0L)
	{
		lRes = Close();
		((void)0);
		m_hKey = hKey;
	}
	return lRes;
}

inline LONG CRegKey::QueryValue(DWORD& dwValue, LPCTSTR lpszValueName)
{
	DWORD dwType = 0;
	DWORD dwCount = sizeof(DWORD);
	LONG lRes = RegQueryValueExA(m_hKey, (LPTSTR)lpszValueName, 0, &dwType,
		(LPBYTE)&dwValue, &dwCount);
	((void)0);
	((void)0);
	return lRes;
}

inline LONG CRegKey::QueryValue(LPTSTR szValue, LPCTSTR lpszValueName, DWORD* pdwCount)
{
	((void)0);
	DWORD dwType = 0;
	LONG lRes = RegQueryValueExA(m_hKey, (LPTSTR)lpszValueName, 0, &dwType,
		(LPBYTE)szValue, pdwCount);
	
((void)0);
	return lRes;
}

inline LONG __stdcall CRegKey::SetValue(HKEY hKeyParent, LPCTSTR lpszKeyName, LPCTSTR lpszValue, LPCTSTR lpszValueName)
{
	((void)0);
	CRegKey key;
	LONG lRes = key.Create(hKeyParent, lpszKeyName);
	if (lRes == 0L)
		lRes = key.SetValue(lpszValue, lpszValueName);
	return lRes;
}

inline LONG CRegKey::SetKeyValue(LPCTSTR lpszKeyName, LPCTSTR lpszValue, LPCTSTR lpszValueName)
{
	((void)0);
	CRegKey key;
	LONG lRes = key.Create(m_hKey, lpszKeyName);
	if (lRes == 0L)
		lRes = key.SetValue(lpszValue, lpszValueName);
	return lRes;
}

inline LONG CRegKey::SetValue(DWORD dwValue, LPCTSTR lpszValueName)
{
	((void)0);
	return RegSetValueExA(m_hKey, lpszValueName, 0, ( 4 ),
		(BYTE * const)&dwValue, sizeof(DWORD));
}

inline LONG CRegKey::SetValue(LPCTSTR lpszValue, LPCTSTR lpszValueName)
{
	((void)0);
	((void)0);
	return RegSetValueExA(m_hKey, lpszValueName, 0, ( 1 ),
		(BYTE * const)lpszValue, (lstrlenA(lpszValue)+1)*sizeof(TCHAR));
}

inline LONG CRegKey::RecurseDeleteKey(LPCTSTR lpszKey)
{
	CRegKey key;
	LONG lRes = key.Open(m_hKey, lpszKey, ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))) | ((((0x00020000L)) | (0x0002) | (0x0004)) & (~(0x00100000L))));
	if (lRes != 0L)
		return lRes;
	FILETIME time;
	DWORD dwSize = 256;
	TCHAR szBuffer[256];
	while (RegEnumKeyExA(key.m_hKey, 0, szBuffer, &dwSize, 0, 0, 0,
		&time)==0L)
	{
		lRes = key.RecurseDeleteKey(szBuffer);
		if (lRes != 0L)
			return lRes;
		dwSize = 256;
	}
	key.Close();
	return DeleteSubKey(lpszKey);
}

inline HRESULT CComModule::RegisterProgID(LPCTSTR lpszCLSID, LPCTSTR lpszProgID, LPCTSTR lpszUserDesc)
{
	CRegKey keyProgID;
	LONG lRes = keyProgID.Create((( HKEY ) (ULONG_PTR)((LONG)0x80000000) ), lpszProgID, ( 0 ), (0x00000000L), (0x0002));
	if (lRes == 0L)
	{
		keyProgID.SetValue(lpszUserDesc);
		keyProgID.SetKeyValue("CLSID", lpszCLSID);
		return ((HRESULT)0x00000000L);
	}
	return ((HRESULT)(lRes) <= 0 ? ((HRESULT)(lRes)) : ((HRESULT) (((lRes) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
}



























































































inline HRESULT __stdcall CComModule::UpdateRegistryClass(const CLSID& clsid, LPCTSTR lpszProgID,
	LPCTSTR lpszVerIndProgID, UINT nDescID, DWORD dwFlags, BOOL bRegister)
{
	if (bRegister)
	{
		return RegisterClassHelper(clsid, lpszProgID, lpszVerIndProgID, nDescID,
			dwFlags);
	}
	else
		return UnregisterClassHelper(clsid, lpszProgID, lpszVerIndProgID);
}

inline HRESULT __stdcall CComModule::RegisterClassHelper(const CLSID& clsid, LPCTSTR lpszProgID,
	LPCTSTR lpszVerIndProgID, UINT nDescID, DWORD dwFlags)
{
	static const TCHAR szProgID[] = "ProgID";
	static const TCHAR szVIProgID[] = "VersionIndependentProgID";
	static const TCHAR szLS32[] = "LocalServer32";
	static const TCHAR szIPS32[] = "InprocServer32";
	static const TCHAR szThreadingModel[] = "ThreadingModel";
	static const TCHAR szAUTPRX32[] = "AUTPRX32.DLL";
	static const TCHAR szApartment[] = "Apartment";
	static const TCHAR szBoth[] = "both";
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	HRESULT hRes = ((HRESULT)0x00000000L);
	TCHAR szDesc[256];
	LoadStringA(m_hInst, nDescID, szDesc, 256);
	TCHAR szModule[260];
	GetModuleFileNameA(m_hInst, szModule, 260);

	LPOLESTR lpOleStr;
	StringFromCLSID(clsid, &lpOleStr);
	LPTSTR lpsz = ( ((_lpw = lpOleStr) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)));

	hRes = RegisterProgID(lpsz, lpszProgID, szDesc);
	if (hRes == ((HRESULT)0x00000000L))
		hRes = RegisterProgID(lpsz, lpszVerIndProgID, szDesc);
	LONG lRes = 0L;
	if (hRes == ((HRESULT)0x00000000L))
	{
		CRegKey key;
		lRes = key.Open((( HKEY ) (ULONG_PTR)((LONG)0x80000000) ), "CLSID", ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))) | ((((0x00020000L)) | (0x0002) | (0x0004)) & (~(0x00100000L))));
		if (lRes == 0L)
		{
			lRes = key.Create(key, lpsz, ( 0 ), (0x00000000L), ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))) | ((((0x00020000L)) | (0x0002) | (0x0004)) & (~(0x00100000L))));
			if (lRes == 0L)
			{
				key.SetValue(szDesc);
				key.SetKeyValue(szProgID, lpszProgID);
				key.SetKeyValue(szVIProgID, lpszVerIndProgID);

				if ((m_hInst == 0) || (m_hInst == GetModuleHandleA(0))) 
				{
					
					TCHAR szModuleShort[260];
					int cbShortName = GetShortPathNameA(szModule, szModuleShort, 260);
					TCHAR* pszModule;

					if (cbShortName == 260)
						return ((HRESULT)0x8007000EL);

					pszModule = (cbShortName == 0 || cbShortName == 87L) ? szModule : szModuleShort;

					key.SetKeyValue(szLS32, pszModule);
				}
				else
				{
					key.SetKeyValue(szIPS32, (dwFlags & 0x4) ? szAUTPRX32 : szModule);
					LPCTSTR lpszModel = (dwFlags & 0x2) ? szBoth :
						(dwFlags & 0x1) ? szApartment : 0;
					if (lpszModel != 0)
						key.SetKeyValue(szIPS32, lpszModel, szThreadingModel);
				}
			}
		}
	}
	CoTaskMemFree(lpOleStr);
	if (lRes != 0L)
		hRes = ((HRESULT)(lRes) <= 0 ? ((HRESULT)(lRes)) : ((HRESULT) (((lRes) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
	return hRes;
}

inline HRESULT __stdcall CComModule::UnregisterClassHelper(const CLSID& clsid, LPCTSTR lpszProgID,
	LPCTSTR lpszVerIndProgID)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	CRegKey key;

	key.Attach((( HKEY ) (ULONG_PTR)((LONG)0x80000000) ));
	if (lpszProgID != 0 && lstrcmpiA(lpszProgID, ""))
		key.RecurseDeleteKey(lpszProgID);
	if (lpszVerIndProgID != 0 && lstrcmpiA(lpszVerIndProgID, ""))
		key.RecurseDeleteKey(lpszVerIndProgID);
	LPOLESTR lpOleStr;
	StringFromCLSID(clsid, &lpOleStr);
	LPTSTR lpsz = ( ((_lpw = lpOleStr) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)));
	if (key.Open(key, "CLSID", ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))) | ((((0x00020000L)) | (0x0002) | (0x0004)) & (~(0x00100000L)))) == 0L)
		key.RecurseDeleteKey(lpsz);
	CoTaskMemFree(lpOleStr);
	return ((HRESULT)0x00000000L);
}





template <class T>
class CVBufHelper
{
public:
	virtual T* operator()(T* pCurrent) {return pCurrent;}
};

template <class T>
class CVirtualBuffer
{
protected:
	CVirtualBuffer() {}
	T* m_pBase;
	T* m_pCurrent;
	T* m_pTop;
	int m_nMaxElements;
public:
	CVirtualBuffer(int nMaxElements)
	{
		m_nMaxElements = nMaxElements;
		m_pBase = (T*) VirtualAlloc(0, sizeof(T) * nMaxElements,
			0x2000, 0x04);
		m_pTop = m_pCurrent = m_pBase;
		
		VirtualAlloc(m_pBase, sizeof(T), 0x1000, 0x04);
	}
	~CVirtualBuffer()
	{
		VirtualFree(m_pBase, 0, 0x8000);
	}
	int Except(LPEXCEPTION_POINTERS lpEP)
	{
		EXCEPTION_RECORD* pExcept = lpEP->ExceptionRecord;
		if (pExcept->ExceptionCode != ((DWORD )0xC0000005L))
			return 0;
		BYTE* pAddress = (LPBYTE) pExcept->ExceptionInformation[1];
		VirtualAlloc(pAddress, sizeof(T), 0x1000, 0x04);
		return -1;
	}
	void Seek(int nElement)
	{
		m_pCurrent = &m_pBase[nElement];
	}
	void SetAt(int nElement, const T& Element)
	{
		__try
		{
			T* p = &m_pBase[nElement]
			*p = Element;
			m_pTop = p > m_pTop ? p : m_pTop;
		}
		__except(Except((struct _EXCEPTION_POINTERS *)_exception_info()))
		{
		}

	}
	template <class Q>
	void WriteBulk(Q& helper)
	{
		__try
		{
			m_pCurrent = helper(m_pBase);
			m_pTop = m_pCurrent > m_pTop ? m_pCurrent : m_pTop;
		}
		__except(Except((struct _EXCEPTION_POINTERS *)_exception_info()))
		{
		}
	}
	void Write(const T& Element)
	{
		__try
		{
			*m_pCurrent = Element;
			m_pCurrent++;
			m_pTop = m_pCurrent > m_pTop ? m_pCurrent : m_pTop;
		}
		__except(Except((struct _EXCEPTION_POINTERS *)_exception_info()))
		{
		}
	}
	T& Read()
	{
		return *m_pCurrent;
	}
	operator BSTR()
	{
		BSTR bstrTemp;
		__try
		{
			bstrTemp = SysAllocStringByteLen((char*) m_pBase,
				(UINT) ((BYTE*)m_pTop - (BYTE*)m_pBase));
		}
		__except(Except((struct _EXCEPTION_POINTERS *)_exception_info()))
		{
		}
		return bstrTemp;
	}
	const T& operator[](int nElement) const
	{
		return m_pBase[nElement];
	}
	operator T*()
	{
		return m_pBase;
	}
};

typedef CVirtualBuffer<BYTE> CVirtualBytes;


inline HRESULT __stdcall AtlDumpIID(const IID & iid, LPCTSTR pszClassName, HRESULT hr)
{
	if (atlTraceQI & 0xFFFFFFFF)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		CRegKey key;
		TCHAR szName[100];
		DWORD dwType,dw = sizeof(szName);

		LPOLESTR pszGUID = 0;
		StringFromCLSID(iid, &pszGUID);
		OutputDebugStringA(pszClassName);
		OutputDebugStringA(" - ");

		
		key.Open((( HKEY ) (ULONG_PTR)((LONG)0x80000000) ), "Interface", ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))));
		if (key.Open(key, ( ((_lpw = pszGUID) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert))), ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L)))) == ((HRESULT)0x00000000L))
		{
			*szName = 0;
			RegQueryValueExA(key.m_hKey, (LPTSTR)0, 0, &dwType, (LPBYTE)szName, &dw);
			OutputDebugStringA(szName);
			goto cleanup;
		}
		
		key.Open((( HKEY ) (ULONG_PTR)((LONG)0x80000000) ), "CLSID", ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L))));
		if (key.Open(key, ( ((_lpw = pszGUID) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert))), ((((0x00020000L)) | (0x0001) | (0x0008) | (0x0010)) & (~(0x00100000L)))) == ((HRESULT)0x00000000L))
		{
			*szName = 0;
			RegQueryValueExA(key.m_hKey, (LPTSTR)0, 0, &dwType, (LPBYTE)szName, &dw);
			OutputDebugStringA("(CLSID\?\?\?) ");
			OutputDebugStringA(szName);
			goto cleanup;
		}
		OutputDebugStringA(( ((_lpw = pszGUID) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert))));
	cleanup:
		if (hr != ((HRESULT)0x00000000L))
			OutputDebugStringA(" - failed");
		OutputDebugStringA("\n");
		CoTaskMemFree(pszGUID);
	}
	return hr;
}

#pragma pack(pop)







}; 
using namespace ATL;





#line 5289 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
#line 5290 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"






#line 5297 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"





namespace ATL
{
#line 5305 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"




static UINT __stdcall AtlGetDirLen(LPCOLESTR lpszPathName)
{
	((void)0);

	
	LPCOLESTR lpszTemp = lpszPathName;
	for (LPCOLESTR lpsz = lpszPathName; *lpsz != 0; )
	{
		LPCOLESTR lp = CharNextO(lpsz);
		
		if (*lpsz == L'\\' || *lpsz == L'/' || *lpsz == L':')
			lpszTemp = lp;
		lpsz = lp;
	}

	return lpszTemp-lpszPathName;
}




inline HRESULT __stdcall AtlInternalQueryInterface(void* pThis,
	const _ATL_INTMAP_ENTRY* pEntries, const IID & iid, void** ppvObject)
{
	((void)0);
	
	((void)0);
	if (ppvObject == 0)
		return ((HRESULT)0x80004003L);
	*ppvObject = 0;
	if (InlineIsEqualUnknown(iid)) 
	{
			IUnknown* pUnk = (IUnknown*)((int)pThis+pEntries->dw);
			pUnk->AddRef();
			*ppvObject = pUnk;
			return ((HRESULT)0x00000000L);
	}
	while (pEntries->pFunc != 0)
	{
		BOOL bBlind = (pEntries->piid == 0);
		if (bBlind || InlineIsEqualGUID(*(pEntries->piid), iid))
		{
			if (pEntries->pFunc == ((_ATL_CREATORARGFUNC*)1)) 
			{
				((void)0);
				IUnknown* pUnk = (IUnknown*)((int)pThis+pEntries->dw);
				pUnk->AddRef();
				*ppvObject = pUnk;
				return ((HRESULT)0x00000000L);
			}
			else 
			{
				HRESULT hRes = pEntries->pFunc(pThis,
					iid, ppvObject, pEntries->dw);
				if (hRes == ((HRESULT)0x00000000L) || (!bBlind && ((HRESULT)(hRes)<0)))
					return hRes;
			}
		}
		pEntries++;
	}
	return ((HRESULT)0x80004002L);
}




inline IUnknown* __stdcall AtlComPtrAssign(IUnknown** pp, IUnknown* lp)
{
	if (lp != 0)
		lp->AddRef();
	if (*pp)
		(*pp)->Release();
	*pp = lp;
	return lp;
}

inline IUnknown* __stdcall AtlComQIPtrAssign(IUnknown** pp, IUnknown* lp, const IID & riid)
{
	IUnknown* pTemp = *pp;
	*pp = 0;
	if (lp != 0)
		lp->QueryInterface(riid, (void**)pp);
	if (pTemp)
		pTemp->Release();
	return *pp;
}






inline HRESULT __stdcall AtlFreeMarshalStream(IStream* pStream)
{
	if (pStream != 0)
	{
		LARGE_INTEGER l;
		l.QuadPart = 0;
		pStream->Seek(l, STREAM_SEEK_SET, 0);
		CoReleaseMarshalData(pStream);
		pStream->Release();
	}
	return ((HRESULT)0x00000000L);
}

inline HRESULT __stdcall AtlMarshalPtrInProc(IUnknown* pUnk, const IID& iid, IStream** ppStream)
{
	HRESULT hRes = CreateStreamOnHGlobal(0, 1, ppStream);
	if (((HRESULT)(hRes) >= 0))
	{
		hRes = CoMarshalInterface(*ppStream, iid,
			pUnk, MSHCTX_INPROC, 0, MSHLFLAGS_TABLESTRONG);
		if (((HRESULT)(hRes)<0))
		{
			(*ppStream)->Release();
			*ppStream = 0;
		}
	}
	return hRes;
}

inline HRESULT __stdcall AtlUnmarshalPtr(IStream* pStream, const IID& iid, IUnknown** ppUnk)
{
	*ppUnk = 0;
	HRESULT hRes = ((HRESULT)0x80070057L);
	if (pStream != 0)
	{
		LARGE_INTEGER l;
		l.QuadPart = 0;
		pStream->Seek(l, STREAM_SEEK_SET, 0);
		hRes = CoUnmarshalInterface(pStream, iid, (void**)ppUnk);
	}
	return hRes;
}

inline BOOL __stdcall AtlWaitWithMessageLoop(HANDLE hEvent)
{
	DWORD dwRet;
	MSG msg;

	while(1)
	{
		dwRet = MsgWaitForMultipleObjects(1, &hEvent, 0, 0xFFFFFFFF, (((0x0002 | 0x0004) | 0x0001) | 0x0008 | 0x0010 | 0x0020 | 0x0080 | 0x0040));

		if (dwRet == ((((DWORD )0x00000000L) ) + 0 ))
			return 1;    

		if (dwRet != ((((DWORD )0x00000000L) ) + 0 ) + 1)
			break;          

		
		while(PeekMessageA(&msg,0,0,0,0x0001))
		{
			TranslateMessage(&msg);
			DispatchMessageA(&msg);
			if (WaitForSingleObject(hEvent, 0) == ((((DWORD )0x00000000L) ) + 0 ))
				return 1; 
		}
	}
	return 0;
}




inline HRESULT __stdcall AtlAdvise(IUnknown* pUnkCP, IUnknown* pUnk, const IID& iid, LPDWORD pdw)
{
	CComPtr<IConnectionPointContainer> pCPC;
	CComPtr<IConnectionPoint> pCP;
	HRESULT hRes = pUnkCP->QueryInterface(IID_IConnectionPointContainer, (void**)&pCPC);
	if (((HRESULT)(hRes) >= 0))
		hRes = pCPC->FindConnectionPoint(iid, &pCP);
	if (((HRESULT)(hRes) >= 0))
		hRes = pCP->Advise(pUnk, pdw);
	return hRes;
}

inline HRESULT __stdcall AtlUnadvise(IUnknown* pUnkCP, const IID& iid, DWORD dw)
{
	CComPtr<IConnectionPointContainer> pCPC;
	CComPtr<IConnectionPoint> pCP;
	HRESULT hRes = pUnkCP->QueryInterface(IID_IConnectionPointContainer, (void**)&pCPC);
	if (((HRESULT)(hRes) >= 0))
		hRes = pCPC->FindConnectionPoint(iid, &pCP);
	if (((HRESULT)(hRes) >= 0))
		hRes = pCP->Unadvise(dw);
	return hRes;
}




inline HRESULT __stdcall AtlSetErrorInfo(const CLSID& clsid, LPCOLESTR lpszDesc, DWORD dwHelpID,
	LPCOLESTR lpszHelpFile, const IID& iid, HRESULT hRes, HINSTANCE hInst)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	TCHAR szDesc[1024];
	szDesc[0] = 0;
	
	if (((WORD)((DWORD_PTR)(lpszDesc) >> 16)) == 0) 
	{
		UINT nID = ((WORD)((DWORD_PTR)((DWORD)lpszDesc) & 0xffff));
		((void)0);
		if (LoadStringA(hInst, nID, szDesc, 1024) == 0)
		{
			((void)0);
			lstrcpyA(szDesc, "Unknown Error");
		}
		lpszDesc = ( ((_lpa = szDesc) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)));
		if (hRes == 0)
			hRes = ((HRESULT) (((unsigned long)(3)<<31) | ((unsigned long)(4)<<16) | ((unsigned long)(nID))) );
	}

	CComPtr<ICreateErrorInfo> pICEI;
	if (((HRESULT)(CreateErrorInfo(&pICEI)) >= 0))
	{
		CComPtr<IErrorInfo> pErrorInfo;
		pICEI->SetGUID(iid);
		LPOLESTR lpsz;
		ProgIDFromCLSID(clsid, &lpsz);
		if (lpsz != 0)
			pICEI->SetSource(lpsz);
		if (dwHelpID != 0 && lpszHelpFile != 0)
		{
			pICEI->SetHelpContext(dwHelpID);
			pICEI->SetHelpFile(const_cast<LPOLESTR>(lpszHelpFile));
		}
		CoTaskMemFree(lpsz);
		pICEI->SetDescription((LPOLESTR)lpszDesc);
		if (((HRESULT)(pICEI->QueryInterface(IID_IErrorInfo, (void**)&pErrorInfo)) >= 0))
			SetErrorInfo(0, pErrorInfo);
	}
	return (hRes == 0) ? ((HRESULT)0x80020009L) : hRes;
}




struct _ATL_MODULE20
{

public:
	UINT cbSize;
	HINSTANCE m_hInst;
	HINSTANCE m_hInstResource;
	HINSTANCE m_hInstTypeLib;
	_ATL_OBJMAP_ENTRY* m_pObjMap;
	LONG m_nLockCnt;
	HANDLE m_hHeap;
	CRITICAL_SECTION m_csTypeInfoHolder;
	CRITICAL_SECTION m_csWindowCreate;
	CRITICAL_SECTION m_csObjMap;
};

typedef _ATL_MODULE _ATL_MODULE30;

struct _ATL_OBJMAP_ENTRY20
{
	const CLSID* pclsid;
	HRESULT (__stdcall *pfnUpdateRegistry)(BOOL bRegister);
	_ATL_CREATORFUNC* pfnGetClassObject;
	_ATL_CREATORFUNC* pfnCreateInstance;
	IUnknown* pCF;
	DWORD dwRegister;
	_ATL_DESCRIPTIONFUNC* pfnGetObjectDescription;
};

typedef _ATL_OBJMAP_ENTRY _ATL_OBJMAP_ENTRY30;

inline _ATL_OBJMAP_ENTRY* _NextObjectMapEntry(_ATL_MODULE* pM, _ATL_OBJMAP_ENTRY* pEntry)
{
	if (pM->cbSize == sizeof(_ATL_MODULE20))
		return (_ATL_OBJMAP_ENTRY*)(((BYTE*)pEntry) + sizeof(_ATL_OBJMAP_ENTRY20));
	return pEntry+1;
}




inline HRESULT __stdcall AtlModuleInit(_ATL_MODULE* pM, _ATL_OBJMAP_ENTRY* p, HINSTANCE h)
{
	((void)0);
	if (pM == 0)
		return ((HRESULT)0x80070057L);




	((void)0);
#line 5599 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
	pM->m_pObjMap = p;
	pM->m_hInst = pM->m_hInstTypeLib = pM->m_hInstResource = h;
	pM->m_nLockCnt=0L;
	pM->m_hHeap = 0;
	InitializeCriticalSection(&pM->m_csTypeInfoHolder);
	InitializeCriticalSection(&pM->m_csWindowCreate);
	InitializeCriticalSection(&pM->m_csObjMap);



	{
		pM->m_pCreateWndList = 0;
		pM->m_bDestroyHeap = true;
		pM->m_dwHeaps = 0;
		pM->m_nHeap = 0;
		pM->m_phHeaps = 0;
		pM->m_pTermFuncs = 0;
		if (pM->m_pObjMap != 0)
		{
			_ATL_OBJMAP_ENTRY* pEntry = pM->m_pObjMap;
			while (pEntry->pclsid != 0)
			{
				pEntry->pfnObjectMain(true); 
				pEntry = _NextObjectMapEntry(pM, pEntry);
			}
		}
	}

	return ((HRESULT)0x00000000L);
}

inline HRESULT __stdcall AtlModuleRegisterClassObjects(_ATL_MODULE* pM, DWORD dwClsContext, DWORD dwFlags)
{
	((void)0);
	if (pM == 0)
		return ((HRESULT)0x80070057L);
	((void)0);
	_ATL_OBJMAP_ENTRY* pEntry = pM->m_pObjMap;
	HRESULT hRes = ((HRESULT)0x00000000L);
	while (pEntry->pclsid != 0 && hRes == ((HRESULT)0x00000000L))
	{
		hRes = pEntry->RegisterClassObject(dwClsContext, dwFlags);
		pEntry = _NextObjectMapEntry(pM, pEntry);
	}
	return hRes;
}

inline HRESULT __stdcall AtlModuleRevokeClassObjects(_ATL_MODULE* pM)
{
	((void)0);
	if (pM == 0)
		return ((HRESULT)0x80070057L);
	((void)0);
	_ATL_OBJMAP_ENTRY* pEntry = pM->m_pObjMap;
	HRESULT hRes = ((HRESULT)0x00000000L);
	while (pEntry->pclsid != 0 && hRes == ((HRESULT)0x00000000L))
	{
		hRes = pEntry->RevokeClassObject();
		pEntry = _NextObjectMapEntry(pM, pEntry);
	}
	return hRes;
}

inline HRESULT __stdcall AtlModuleGetClassObject(_ATL_MODULE* pM, const IID & rclsid, const IID & riid, LPVOID* ppv)
{
	((void)0);
	if (pM == 0)
		return ((HRESULT)0x80070057L);
	((void)0);
	_ATL_OBJMAP_ENTRY* pEntry = pM->m_pObjMap;
	HRESULT hRes = ((HRESULT)0x00000000L);
	if (ppv == 0)
		return ((HRESULT)0x80004003L);
	*ppv = 0;
	while (pEntry->pclsid != 0)
	{
		if ((pEntry->pfnGetClassObject != 0) && InlineIsEqualGUID(rclsid, *pEntry->pclsid))
		{
			if (pEntry->pCF == 0)
			{
				EnterCriticalSection(&pM->m_csObjMap);
				if (pEntry->pCF == 0)
					hRes = pEntry->pfnGetClassObject(pEntry->pfnCreateInstance, IID_IUnknown, (LPVOID*)&pEntry->pCF);
				LeaveCriticalSection(&pM->m_csObjMap);
			}
			if (pEntry->pCF != 0)
				hRes = pEntry->pCF->QueryInterface(riid, ppv);
			break;
		}
		pEntry = _NextObjectMapEntry(pM, pEntry);
	}
	if (*ppv == 0 && hRes == ((HRESULT)0x00000000L))
		hRes = ((HRESULT)0x80040111L);
	return hRes;
}

inline HRESULT __stdcall AtlModuleTerm(_ATL_MODULE* pM)
{
	((void)0);
	if (pM == 0)
		return ((HRESULT)0x80070057L);
	((void)0);
	if (pM->m_pObjMap != 0)
	{
		_ATL_OBJMAP_ENTRY* pEntry = pM->m_pObjMap;
		while (pEntry->pclsid != 0)
		{
			if (pEntry->pCF != 0)
				pEntry->pCF->Release();
			pEntry->pCF = 0;



				pEntry->pfnObjectMain(false); 
			pEntry = _NextObjectMapEntry(pM, pEntry);
		}
	}
	DeleteCriticalSection(&pM->m_csTypeInfoHolder);
	DeleteCriticalSection(&pM->m_csWindowCreate);
	DeleteCriticalSection(&pM->m_csObjMap);




	{
		_ATL_TERMFUNC_ELEM* pElem = pM->m_pTermFuncs;
		_ATL_TERMFUNC_ELEM* pNext = 0;
		while (pElem != 0)
		{
			pElem->pFunc(pElem->dw);
			pNext = pElem->pNext;
			delete pElem;
			pElem = pNext;
		}
		if (pM->m_hHeap != 0 && pM->m_bDestroyHeap)
		{

			if (pM->m_phHeaps != 0)
			{
				for (DWORD i = 0; i <= pM->m_dwHeaps; i++)
					HeapDestroy(pM->m_phHeaps[i]);
			}
#line 5742 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"
			HeapDestroy(pM->m_hHeap);
		}
	}
	return ((HRESULT)0x00000000L);
}

inline HRESULT __stdcall AtlModuleAddTermFunc(_ATL_MODULE* pM, _ATL_TERMFUNC* pFunc, DWORD dw)
{
	HRESULT hr = ((HRESULT)0x00000000L);
	_ATL_TERMFUNC_ELEM* pNew = 0;
	pNew = new _ATL_TERMFUNC_ELEM;;
	if (pNew == 0)
		hr = ((HRESULT)0x8007000EL);
	else
	{
		pNew->pFunc = pFunc;
		pNew->dw = dw;
		EnterCriticalSection(&pM->m_csStaticDataInit);
		pNew->pNext = pM->m_pTermFuncs;
		pM->m_pTermFuncs = pNew;
		LeaveCriticalSection(&pM->m_csStaticDataInit);
	}
	return hr;
}

inline HRESULT __stdcall AtlRegisterClassCategoriesHelper( const IID & clsid,
   const struct _ATL_CATMAP_ENTRY* pCatMap, BOOL bRegister )
{
   CComPtr< ICatRegister > pCatRegister;
   HRESULT hResult;
   const struct _ATL_CATMAP_ENTRY* pEntry;
   CATID catid;

   if( pCatMap == 0 )
   {
	  return( ((HRESULT)0x00000000L) );
   }

   hResult = CoCreateInstance( CLSID_StdComponentCategoriesMgr, 0,
	  CLSCTX_INPROC_SERVER, IID_ICatRegister, (void**)&pCatRegister );
   if( ((HRESULT)(hResult)<0) )
   {
	  
	  
	  
	  
	  
	  
	  return( ((HRESULT)0x00000000L) );
   }

   hResult = ((HRESULT)0x00000000L);
   pEntry = pCatMap;
   while( pEntry->iType != 0 )
   {
	  catid = *pEntry->pcatid;
	  if( bRegister )
	  {
		 if( pEntry->iType == 1 )
		 {
			hResult = pCatRegister->RegisterClassImplCategories( clsid, 1,
			   &catid );
		 }
		 else
		 {
			((void)0);
			hResult = pCatRegister->RegisterClassReqCategories( clsid, 1,
			   &catid );
		 }
		 if( ((HRESULT)(hResult)<0) )
		 {
			return( hResult );
		 }
	  }
	  else
	  {
		 if( pEntry->iType == 1 )
		 {
			pCatRegister->UnRegisterClassImplCategories( clsid, 1, &catid );
		 }
		 else
		 {
			((void)0);
			pCatRegister->UnRegisterClassReqCategories( clsid, 1, &catid );
		 }
	  }
	  pEntry++;
   }

   return( ((HRESULT)0x00000000L) );
}

inline HRESULT __stdcall AtlModuleRegisterServer(_ATL_MODULE* pM, BOOL bRegTypeLib, const CLSID* pCLSID)
{
	((void)0);
	if (pM == 0)
		return ((HRESULT)0x80070057L);
	((void)0);
	((void)0);
	_ATL_OBJMAP_ENTRY* pEntry = pM->m_pObjMap;
	HRESULT hRes = ((HRESULT)0x00000000L);
	for (;pEntry->pclsid != 0; pEntry = _NextObjectMapEntry(pM, pEntry))
	{
		if (pCLSID == 0)
		{
			if (pEntry->pfnGetObjectDescription != 0 &&
				pEntry->pfnGetObjectDescription() != 0)
					continue;
		}
		else
		{
			if (!IsEqualGUID(*pCLSID, *pEntry->pclsid))
				continue;
		}
		hRes = pEntry->pfnUpdateRegistry(1);
		if (((HRESULT)(hRes)<0))
			break;
		if (pM->cbSize == sizeof(_ATL_MODULE))
		{
			hRes = AtlRegisterClassCategoriesHelper( *pEntry->pclsid,
				pEntry->pfnGetCategoryMap(), 1 );
			if (((HRESULT)(hRes)<0))
				break;
		}
	}
	if (((HRESULT)(hRes) >= 0) && bRegTypeLib)
		hRes = AtlModuleRegisterTypeLib(pM, 0);
	return hRes;
}

inline HRESULT __stdcall AtlModuleUnregisterServerEx(_ATL_MODULE* pM, BOOL bUnRegTypeLib, const CLSID* pCLSID)
{
	((void)0);
	if (pM == 0)
		return ((HRESULT)0x80070057L);
	((void)0);
	((void)0);
	_ATL_OBJMAP_ENTRY* pEntry = pM->m_pObjMap;
	for (;pEntry->pclsid != 0; pEntry = _NextObjectMapEntry(pM, pEntry))
	{
		if (pCLSID == 0)
		{
			if (pEntry->pfnGetObjectDescription != 0
				&& pEntry->pfnGetObjectDescription() != 0)
				continue;
		}
		else
		{
			if (!IsEqualGUID(*pCLSID, *pEntry->pclsid))
				continue;
		}
		pEntry->pfnUpdateRegistry(0); 
		if (pM->cbSize == sizeof(_ATL_MODULE) && pEntry->pfnGetCategoryMap != 0)
			AtlRegisterClassCategoriesHelper( *pEntry->pclsid,
				pEntry->pfnGetCategoryMap(), 0 );
	}
	if (bUnRegTypeLib)
		AtlModuleUnRegisterTypeLib(pM, 0);
	return ((HRESULT)0x00000000L);
}

inline HRESULT __stdcall AtlModuleUnregisterServer(_ATL_MODULE* pM, const CLSID* pCLSID)
{
	return AtlModuleUnregisterServerEx(pM, 0, pCLSID);
}

inline HRESULT __stdcall AtlModuleUpdateRegistryFromResourceD(_ATL_MODULE* pM, LPCOLESTR lpszRes,
	BOOL bRegister, struct _ATL_REGMAP_ENTRY* pMapEntries, IRegistrar* pReg)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	((void)0);
	HRESULT hRes = ((HRESULT)0x00000000L);
	CComPtr<IRegistrar> p;
	if (pReg != 0)
		p = pReg;
	else
	{
		hRes = CoCreateInstance(CLSID_Registrar, 0,
			CLSCTX_INPROC_SERVER, IID_IRegistrar, (void**)&p);
	}
	if (((HRESULT)(hRes) >= 0))
	{
		TCHAR szModule[260];
		GetModuleFileNameA(pM->m_hInst, szModule, 260);

		LPOLESTR pszModule;
		if ((pM->m_hInst == 0) || (pM->m_hInst == GetModuleHandleA(0))) 
		{
			
			TCHAR szModuleShort[260];
			int cbShortName = GetShortPathNameA(szModule, szModuleShort, 260);

			if (cbShortName == 260)
				return ((HRESULT)0x8007000EL);

			pszModule = (cbShortName == 0 || cbShortName == 87L) ? ( ((_lpa = szModule) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert))) : ( ((_lpa = szModuleShort) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)));
		}
		else
			pszModule = ( ((_lpa = szModule) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)));

		int nLen = ocslen(pszModule);
		LPOLESTR pszModuleQuote = (LPOLESTR)_alloca((nLen*2+1)*sizeof(OLECHAR));
		CComModule::ReplaceSingleQuote(pszModuleQuote, pszModule);
		p->AddReplacement(L"Module", pszModuleQuote);

		if (0 != pMapEntries)
		{
			while (0 != pMapEntries->szKey)
			{
				((void)0);
				p->AddReplacement((LPOLESTR)pMapEntries->szKey, (LPOLESTR)pMapEntries->szData);
				pMapEntries++;
			}
		}
		LPCOLESTR szType = L"REGISTRY";
		if (((WORD)((DWORD_PTR)(lpszRes) >> 16))==0)
		{
			if (bRegister)
				hRes = p->ResourceRegister(pszModule, ((UINT)((WORD)((DWORD_PTR)((DWORD)lpszRes) & 0xffff))), szType);
			else
				hRes = p->ResourceUnregister(pszModule, ((UINT)((WORD)((DWORD_PTR)((DWORD)lpszRes) & 0xffff))), szType);
		}
		else
		{
			if (bRegister)
				hRes = p->ResourceRegisterSz(pszModule, lpszRes, szType);
			else
				hRes = p->ResourceUnregisterSz(pszModule, lpszRes, szType);
		}

	}
	return hRes;
}




inline HRESULT __stdcall AtlModuleLoadTypeLib(_ATL_MODULE* pM, LPCOLESTR lpszIndex, BSTR* pbstrPath, ITypeLib** ppTypeLib)
{
	*pbstrPath = 0;
	*ppTypeLib = 0;
	((void)0);
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	((void)0);
	TCHAR szModule[260+10];
	GetModuleFileNameA(pM->m_hInstTypeLib, szModule, 260);
	if (lpszIndex != 0)
		lstrcatA(szModule, ((LPCSTR)( ((_lpw = lpszIndex) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)))));
	LPOLESTR lpszModule = ( ((_lpa = szModule) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)));
	HRESULT hr = LoadTypeLib(lpszModule, ppTypeLib);
	if (!((HRESULT)(hr) >= 0))
	{
		
		LPTSTR lpszExt = 0;
		LPTSTR lpsz;
		for (lpsz = szModule; *lpsz != 0; lpsz = CharNextA(lpsz))
		{
			if (*lpsz == '.')
				lpszExt = lpsz;
		}
		if (lpszExt == 0)
			lpszExt = lpsz;
		lstrcpyA(lpszExt, ".tlb");
		lpszModule = ( ((_lpa = szModule) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)));
		hr = LoadTypeLib(lpszModule, ppTypeLib);
	}
	if (((HRESULT)(hr) >= 0))
		*pbstrPath = OLE2BSTR(lpszModule);
	return hr;
}

inline HRESULT __stdcall AtlModuleUnRegisterTypeLib(_ATL_MODULE* pM, LPCOLESTR lpszIndex)
{
	typedef HRESULT (__stdcall *PFNRTL)(const GUID &, WORD, WORD, LCID, SYSKIND);
	CComBSTR bstrPath;
	CComPtr<ITypeLib> pTypeLib;
	HRESULT hr = AtlModuleLoadTypeLib(pM, lpszIndex, &bstrPath, &pTypeLib);
	if (((HRESULT)(hr) >= 0))
	{
		TLIBATTR* ptla;
		HRESULT hr = pTypeLib->GetLibAttr(&ptla);
		if (((HRESULT)(hr) >= 0))
		{
			HINSTANCE h = LoadLibraryA("oleaut32.dll");
			if (h != 0)
			{
				PFNRTL pfn = (PFNRTL) GetProcAddress(h, "UnRegisterTypeLib");
				if (pfn != 0)
					hr = pfn(ptla->guid, ptla->wMajorVerNum, ptla->wMinorVerNum, ptla->lcid, ptla->syskind);
				FreeLibrary(h);
			}
			pTypeLib->ReleaseTLibAttr(ptla);
		}
	}
	return hr;
}

inline HRESULT __stdcall AtlModuleRegisterTypeLib(_ATL_MODULE* pM, LPCOLESTR lpszIndex)
{
	CComBSTR bstrPath;
	CComPtr<ITypeLib> pTypeLib;
	HRESULT hr = AtlModuleLoadTypeLib(pM, lpszIndex, &bstrPath, &pTypeLib);
	if (((HRESULT)(hr) >= 0))
	{
		OLECHAR szDir[260];
		ocscpy(szDir, bstrPath);
		szDir[AtlGetDirLen(szDir)] = 0;
		hr = ::RegisterTypeLib(pTypeLib, bstrPath, szDir);
	}
	return hr;
}

inline DWORD __stdcall AtlGetVersion(void* )
{
	return 0x0300;
}

inline void __stdcall AtlModuleAddCreateWndData(_ATL_MODULE* pM, _AtlCreateWndData* pData, void* pObject)
{
	pData->m_pThis = pObject;
	pData->m_dwThreadID = ::GetCurrentThreadId();
	::EnterCriticalSection(&pM->m_csWindowCreate);
	pData->m_pNext = pM->m_pCreateWndList;
	pM->m_pCreateWndList = pData;
	::LeaveCriticalSection(&pM->m_csWindowCreate);
}

inline void* __stdcall AtlModuleExtractCreateWndData(_ATL_MODULE* pM)
{
	void* pv = 0;
	::EnterCriticalSection(&pM->m_csWindowCreate);
	_AtlCreateWndData* pEntry = pM->m_pCreateWndList;
	if(pEntry != 0)
	{
		DWORD dwThreadID = ::GetCurrentThreadId();
		_AtlCreateWndData* pPrev = 0;
		while(pEntry != 0)
		{
			if(pEntry->m_dwThreadID == dwThreadID)
			{
				if(pPrev == 0)
					pM->m_pCreateWndList = pEntry->m_pNext;
				else
					pPrev->m_pNext = pEntry->m_pNext;
				pv = pEntry->m_pThis;
				break;
			}
			pPrev = pEntry;
			pEntry = pEntry->m_pNext;
		}
	}
	::LeaveCriticalSection(&pM->m_csWindowCreate);
	return pv;
}




inline HRESULT AtlGetDllVersion(HINSTANCE hInstDLL, DLLVERSIONINFO* pDllVersionInfo)
{
	((void)0);
	if(::IsBadWritePtr(pDllVersionInfo, sizeof(DWORD)))
		return ((HRESULT)0x80070057L);

	
	DLLGETVERSIONPROC pfnDllGetVersion = (DLLGETVERSIONPROC)::GetProcAddress(hInstDLL, "DllGetVersion");
	if(pfnDllGetVersion == 0)
		return ((HRESULT)0x80004001L);

	return (*pfnDllGetVersion)(pDllVersionInfo);
}

inline HRESULT AtlGetDllVersion(LPCTSTR lpstrDllName, DLLVERSIONINFO* pDllVersionInfo)
{
	HINSTANCE hInstDLL = ::LoadLibraryA(lpstrDllName);
	if(hInstDLL == 0)
		return ((HRESULT)0x80004005L);
	HRESULT hRet = AtlGetDllVersion(hInstDLL, pDllVersionInfo);
	::FreeLibrary(hInstDLL);
	return hRet;
}





inline HRESULT AtlGetCommCtrlVersion(LPDWORD pdwMajor, LPDWORD pdwMinor)
{
	((void)0);
	if(::IsBadWritePtr(pdwMajor, sizeof(DWORD)) || ::IsBadWritePtr(pdwMinor, sizeof(DWORD)))
		return ((HRESULT)0x80070057L);

	DLLVERSIONINFO dvi;
	::memset((&dvi),0,(sizeof(dvi)));
	dvi.cbSize = sizeof(dvi);
	HRESULT hRet = AtlGetDllVersion("comctl32.dll", &dvi);

	if(((HRESULT)(hRet) >= 0))
	{
		*pdwMajor = dvi.dwMajorVersion;
		*pdwMinor = dvi.dwMinorVersion;
	}
	else if(hRet == ((HRESULT)0x80004001L))
	{
		
		
		*pdwMajor = 4;
		*pdwMinor = 0;
		hRet = ((HRESULT)0x00000000L);
	}

	return hRet;
}






inline HRESULT AtlGetShellVersion(LPDWORD pdwMajor, LPDWORD pdwMinor)
{
	((void)0);
	if(::IsBadWritePtr(pdwMajor, sizeof(DWORD)) || ::IsBadWritePtr(pdwMinor, sizeof(DWORD)))
		return ((HRESULT)0x80070057L);

	DLLVERSIONINFO dvi;
	::memset((&dvi),0,(sizeof(dvi)));
	dvi.cbSize = sizeof(dvi);
	HRESULT hRet = AtlGetDllVersion("shell32.dll", &dvi);

	if(((HRESULT)(hRet) >= 0))
	{
		*pdwMajor = dvi.dwMajorVersion;
		*pdwMinor = dvi.dwMinorVersion;
	}
	else if(hRet == ((HRESULT)0x80004001L))
	{
		
		
		*pdwMajor = 4;
		*pdwMinor = 0;
		hRet = ((HRESULT)0x00000000L);
	}

	return hRet;
}


}; 
#line 6192 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"




#line 6197 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"


#line 22 "stdafx.h"


extern CComModule _Module;
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"





















#pragma pack(push, 8)

extern "C" const IID IID_ITargetFrame;

namespace ATL
{
















#line 45 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"








inline HRESULT __stdcall AtlReportError(const CLSID& clsid, UINT nID, const IID& iid,
	HRESULT hRes, HINSTANCE hInst)
{
	return AtlSetErrorInfo(clsid, (LPCOLESTR)(LPSTR)((ULONG_PTR)((WORD)(nID))), 0, 0, iid, hRes, hInst);
}

inline HRESULT __stdcall AtlReportError(const CLSID& clsid, UINT nID, DWORD dwHelpID,
	LPCOLESTR lpszHelpFile, const IID& iid, HRESULT hRes, HINSTANCE hInst)
{
	return AtlSetErrorInfo(clsid, (LPCOLESTR)(LPSTR)((ULONG_PTR)((WORD)(nID))), dwHelpID,
		lpszHelpFile, iid, hRes, hInst);
}


inline HRESULT __stdcall AtlReportError(const CLSID& clsid, LPCSTR lpszDesc,
	DWORD dwHelpID, LPCSTR lpszHelpFile, const IID& iid, HRESULT hRes)
{
	((void)0);
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	return AtlSetErrorInfo(clsid, ((LPCWSTR)( ((_lpa = lpszDesc) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))), dwHelpID, ((LPCWSTR)( ((_lpa = lpszHelpFile) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))),
		iid, hRes, 0);
}

inline HRESULT __stdcall AtlReportError(const CLSID& clsid, LPCSTR lpszDesc,
	const IID& iid, HRESULT hRes)
{
	((void)0);
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	return AtlSetErrorInfo(clsid, ((LPCWSTR)( ((_lpa = lpszDesc) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert)))), 0, 0, iid, hRes, 0);
}
#line 84 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"

inline HRESULT __stdcall AtlReportError(const CLSID& clsid, LPCOLESTR lpszDesc,
	const IID& iid, HRESULT hRes)
{
	return AtlSetErrorInfo(clsid, lpszDesc, 0, 0, iid, hRes, 0);
}

inline HRESULT __stdcall AtlReportError(const CLSID& clsid, LPCOLESTR lpszDesc, DWORD dwHelpID,
	LPCOLESTR lpszHelpFile, const IID& iid, HRESULT hRes)
{
	return AtlSetErrorInfo(clsid, lpszDesc, dwHelpID, lpszHelpFile, iid, hRes, 0);
}



template <class T>
class __declspec(novtable) IPersistImpl : public IPersist
{
public:
	virtual HRESULT __stdcall GetClassID(CLSID *pClassID)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistImpl::GetClassID\n");
		if (pClassID == 0)
			return ((HRESULT)0x80004005L);
		*pClassID = T::GetObjectCLSID();
		return ((HRESULT)0x00000000L);
	}
};




class CComDispatchDriver
{
public:
	CComDispatchDriver()
	{
		p = 0;
	}
	CComDispatchDriver(IDispatch* lp)
	{
		if ((p = lp) != 0)
			p->AddRef();
	}
	CComDispatchDriver(IUnknown* lp)
	{
		p=0;
		if (lp != 0)
			lp->QueryInterface(IID_IDispatch, (void **)&p);
	}
	~CComDispatchDriver() { if (p) p->Release(); }
	void Release() {if (p) p->Release(); p=0;}
	operator IDispatch*() {return p;}
	IDispatch& operator*() {((void)0); return *p; }
	IDispatch** operator&() {((void)0); return &p; }
	IDispatch* operator->() {((void)0); return p; }
	IDispatch* operator=(IDispatch* lp){return (IDispatch*)AtlComPtrAssign((IUnknown**)&p, lp);}
	IDispatch* operator=(IUnknown* lp)
	{
		return (IDispatch*)AtlComQIPtrAssign((IUnknown**)&p, lp, IID_IDispatch);
	}
	BOOL operator!(){return (p == 0) ? 1 : 0;}

	HRESULT GetPropertyByName(LPCOLESTR lpsz, VARIANT* pVar)
	{
		((void)0);
		((void)0);
		DISPID dwDispID;
		HRESULT hr = GetIDOfName(lpsz, &dwDispID);
		if (((HRESULT)(hr) >= 0))
			hr = GetProperty(p, dwDispID, pVar);
		return hr;
	}
	HRESULT GetProperty(DISPID dwDispID, VARIANT* pVar)
	{
		((void)0);
		return GetProperty(p, dwDispID, pVar);
	}
	HRESULT PutPropertyByName(LPCOLESTR lpsz, VARIANT* pVar)
	{
		((void)0);
		((void)0);
		DISPID dwDispID;
		HRESULT hr = GetIDOfName(lpsz, &dwDispID);
		if (((HRESULT)(hr) >= 0))
			hr = PutProperty(p, dwDispID, pVar);
		return hr;
	}
	HRESULT PutProperty(DISPID dwDispID, VARIANT* pVar)
	{
		((void)0);
		return PutProperty(p, dwDispID, pVar);
	}
	HRESULT GetIDOfName(LPCOLESTR lpsz, DISPID* pdispid)
	{
		return p->GetIDsOfNames(GUID_NULL, (LPOLESTR*)&lpsz, 1, (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), pdispid);
	}
	
	HRESULT Invoke0(DISPID dispid, VARIANT* pvarRet = 0)
	{
		DISPPARAMS dispparams = { 0, 0, 0, 0};
		return p->Invoke(dispid, GUID_NULL, (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0x1, &dispparams, pvarRet, 0, 0);
	}
	
	HRESULT Invoke0(LPCOLESTR lpszName, VARIANT* pvarRet = 0)
	{
		HRESULT hr;
		DISPID dispid;
		hr = GetIDOfName(lpszName, &dispid);
		if (((HRESULT)(hr) >= 0))
			hr = Invoke0(dispid, pvarRet);
		return hr;
	}
	
	HRESULT Invoke1(DISPID dispid, VARIANT* pvarParam1, VARIANT* pvarRet = 0)
	{
		DISPPARAMS dispparams = { pvarParam1, 0, 1, 0};
		return p->Invoke(dispid, GUID_NULL, (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0x1, &dispparams, pvarRet, 0, 0);
	}
	
	HRESULT Invoke1(LPCOLESTR lpszName, VARIANT* pvarParam1, VARIANT* pvarRet = 0)
	{
		HRESULT hr;
		DISPID dispid;
		hr = GetIDOfName(lpszName, &dispid);
		if (((HRESULT)(hr) >= 0))
			hr = Invoke1(dispid, pvarParam1, pvarRet);
		return hr;
	}
	
	HRESULT Invoke2(DISPID dispid, VARIANT* pvarParam1, VARIANT* pvarParam2, VARIANT* pvarRet = 0)
	{
		CComVariant varArgs[2] = { *pvarParam2, *pvarParam1 };
		DISPPARAMS dispparams = { &varArgs[0], 0, 2, 0};
		return p->Invoke(dispid, GUID_NULL, (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0x1, &dispparams, pvarRet, 0, 0);
	}
	
	HRESULT Invoke2(LPCOLESTR lpszName, VARIANT* pvarParam1, VARIANT* pvarParam2, VARIANT* pvarRet = 0)
	{
		HRESULT hr;
		DISPID dispid;
		hr = GetIDOfName(lpszName, &dispid);
		if (((HRESULT)(hr) >= 0))
			hr = Invoke2(dispid, pvarParam1, pvarParam2, pvarRet);
		return hr;
	}
	
	HRESULT InvokeN(DISPID dispid, VARIANT* pvarParams, int nParams, VARIANT* pvarRet = 0)
	{
		DISPPARAMS dispparams = { pvarParams, 0, nParams, 0};
		return p->Invoke(dispid, GUID_NULL, (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0x1, &dispparams, pvarRet, 0, 0);
	}
	
	HRESULT InvokeN(LPCOLESTR lpszName, VARIANT* pvarParams, int nParams, VARIANT* pvarRet = 0)
	{
		HRESULT hr;
		DISPID dispid;
		hr = GetIDOfName(lpszName, &dispid);
		if (((HRESULT)(hr) >= 0))
			hr = InvokeN(dispid, pvarParams, nParams, pvarRet);
		return hr;
	}
	static HRESULT GetProperty(IDispatch* pDisp, DISPID dwDispID,
		VARIANT* pVar)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "CPropertyHelper::GetProperty\n");
		DISPPARAMS dispparamsNoArgs = {0, 0, 0, 0};
		return pDisp->Invoke(dwDispID, GUID_NULL,
				(((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0x2,
				&dispparamsNoArgs, pVar, 0, 0);
	}

	static HRESULT PutProperty(IDispatch* pDisp, DISPID dwDispID,
		VARIANT* pVar)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "CPropertyHelper::PutProperty\n");
		DISPPARAMS dispparams = {0, 0, 1, 1};
		dispparams.rgvarg = pVar;
		DISPID dispidPut = ( -3 );
		dispparams.rgdispidNamedArgs = &dispidPut;

		if (pVar->vt == VT_UNKNOWN || pVar->vt == VT_DISPATCH || 
			(pVar->vt & VT_ARRAY) || (pVar->vt & VT_BYREF))
		{
			HRESULT hr = pDisp->Invoke(dwDispID, GUID_NULL,
				(((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0x8,
				&dispparams, 0, 0, 0);
			if (((HRESULT)(hr) >= 0))
				return hr;
		}

		return pDisp->Invoke(dwDispID, GUID_NULL,
				(((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00))))))))), 0x4,
				&dispparams, 0, 0, 0);
	}

	IDispatch* p;
};



class CFakeFirePropNotifyEvent
{
public:
	static HRESULT FireOnRequestEdit(IUnknown* , DISPID )
	{
		return ((HRESULT)0x00000000L);
	}
	static HRESULT FireOnChanged(IUnknown* , DISPID )
	{
		return ((HRESULT)0x00000000L);
	}
};
typedef CFakeFirePropNotifyEvent _ATL_PROP_NOTIFY_EVENT_CLASS;




struct ATL_PROPMAP_ENTRY
{
	LPCOLESTR szDesc;
	DISPID dispid;
	const CLSID* pclsidPropPage;
	const IID* piidDispatch;
	DWORD dwOffsetData;
	DWORD dwSizeData;
	VARTYPE vt;
};



















































inline HRESULT __stdcall AtlIPersistStreamInit_Load(LPSTREAM pStm, ATL_PROPMAP_ENTRY* pMap, void* pThis, IUnknown* pUnk)
{
	((void)0);
	HRESULT hr = ((HRESULT)0x00000000L);
	DWORD dwVer;
	hr = pStm->Read(&dwVer, sizeof(DWORD), 0);
	if (((HRESULT)(hr)<0))
		return hr;
	if (dwVer > 0x0300)
		return ((HRESULT)0x80004005L);

	CComPtr<IDispatch> pDispatch;
	const IID* piidOld = 0;
	for (int i = 0; pMap[i].pclsidPropPage != 0; i++)
	{
		if (pMap[i].szDesc == 0)
			continue;

		
		if (pMap[i].dwSizeData != 0)
		{
			void* pData = (void*) (pMap[i].dwOffsetData + (DWORD)pThis);
			hr = pStm->Read(pData, pMap[i].dwSizeData, 0);
			if (((HRESULT)(hr)<0))
				return hr;
			continue;
		}

		CComVariant var;

		hr = var.ReadFromStream(pStm);
		if (((HRESULT)(hr)<0))
			break;

		if (pMap[i].piidDispatch != piidOld)
		{
			pDispatch.Release();
			if (((HRESULT)(pUnk->QueryInterface(*pMap[i].piidDispatch, (void**)&pDispatch))<0))
			{
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Failed to get a dispatch pointer for property #%i\n", i);
				hr = ((HRESULT)0x80004005L);
				break;
			}
			piidOld = pMap[i].piidDispatch;
		}

		if (((HRESULT)(CComDispatchDriver::PutProperty(pDispatch, pMap[i].dispid, &var))<0))
		{
			1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Invoked failed on DISPID %x\n", pMap[i].dispid);
			hr = ((HRESULT)0x80004005L);
			break;
		}
	}
	return hr;
}
#line 419 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"




inline HRESULT __stdcall AtlIPersistStreamInit_Save(LPSTREAM pStm,
	BOOL , ATL_PROPMAP_ENTRY* pMap,
	void* pThis, IUnknown* pUnk)
{
	((void)0);
	DWORD dw = 0x0300;
	HRESULT hr = pStm->Write(&dw, sizeof(DWORD), 0);
	if (((HRESULT)(hr)<0))
		return hr;

	CComPtr<IDispatch> pDispatch;
	const IID* piidOld = 0;
	for (int i = 0; pMap[i].pclsidPropPage != 0; i++)
	{
		if (pMap[i].szDesc == 0)
			continue;

		
		if (pMap[i].dwSizeData != 0)
		{
			void* pData = (void*) (pMap[i].dwOffsetData + (DWORD)pThis);
			hr = pStm->Write(pData, pMap[i].dwSizeData, 0);
			if (((HRESULT)(hr)<0))
				return hr;
			continue;
		}

		CComVariant var;
		if (pMap[i].piidDispatch != piidOld)
		{
			pDispatch.Release();
			if (((HRESULT)(pUnk->QueryInterface(*pMap[i].piidDispatch, (void**)&pDispatch))<0))
			{
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Failed to get a dispatch pointer for property #%i\n", i);
				hr = ((HRESULT)0x80004005L);
				break;
			}
			piidOld = pMap[i].piidDispatch;
		}

		if (((HRESULT)(CComDispatchDriver::GetProperty(pDispatch, pMap[i].dispid, &var))<0))
		{
			1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Invoked failed on DISPID %x\n", pMap[i].dispid);
			hr = ((HRESULT)0x80004005L);
			break;
		}

		hr = var.WriteToStream(pStm);
		if (((HRESULT)(hr)<0))
			break;
	}
	return hr;
}
#line 477 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"





inline HRESULT __stdcall AtlIPersistPropertyBag_Load(LPPROPERTYBAG pPropBag, LPERRORLOG pErrorLog, ATL_PROPMAP_ENTRY* pMap, void* pThis, IUnknown* pUnk)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
	CComPtr<IDispatch> pDispatch;
	const IID* piidOld = 0;
	for (int i = 0; pMap[i].pclsidPropPage != 0; i++)
	{
		if (pMap[i].szDesc == 0)
			continue;

		CComVariant var;
		var.vt = pMap[i].vt;
		
		if (pMap[i].dwSizeData != 0)
		{
			void* pData = (void*) (pMap[i].dwOffsetData + (DWORD)pThis);
			HRESULT hr = pPropBag->Read(pMap[i].szDesc, &var, pErrorLog);
			if (((HRESULT)(hr) >= 0))
			{
				
				switch (pMap[i].vt)
				{
				case VT_UI1:
				case VT_I1:
					*((BYTE*)pData) = var.bVal;
					break;
				case VT_BOOL:
					*((VARIANT_BOOL*)pData) = var.boolVal;
					break;
				case VT_UI2:
					*((short*)pData) = var.iVal;
					break;
				case VT_UI4:
				case VT_INT:
				case VT_UINT:
					*((long*)pData) = var.lVal;
					break;
				}
			}
			continue;
		}

		if (pMap[i].piidDispatch != piidOld)
		{
			pDispatch.Release();
			if (((HRESULT)(pUnk->QueryInterface(*pMap[i].piidDispatch, (void**)&pDispatch))<0))
			{
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Failed to get a dispatch pointer for property #%i\n", i);
				return ((HRESULT)0x80004005L);
			}
			piidOld = pMap[i].piidDispatch;
		}

		if (((HRESULT)(CComDispatchDriver::GetProperty(pDispatch, pMap[i].dispid, &var))<0))
		{
			1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Invoked failed on DISPID %x\n", pMap[i].dispid);
			return ((HRESULT)0x80004005L);
		}

		HRESULT hr = pPropBag->Read(pMap[i].szDesc, &var, pErrorLog);
		if (((HRESULT)(hr)<0))
		{
			if (hr == ((HRESULT)0x80070057L))
			{
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Property %s not in Bag\n", ((LPCSTR)( ((_lpw = pMap[i].szDesc) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)))));
			}
			else
			{
				
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Error attempting to read Property %s from PropertyBag \n", ((LPCSTR)( ((_lpw = pMap[i].szDesc) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)))));
			}
			continue;
		}

		if (((HRESULT)(CComDispatchDriver::PutProperty(pDispatch, pMap[i].dispid, &var))<0))
		{
			1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Invoked failed on DISPID %x\n", pMap[i].dispid);
			return ((HRESULT)0x80004005L);
		}
	}
	return ((HRESULT)0x00000000L);
}
#line 565 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"




inline HRESULT __stdcall AtlIPersistPropertyBag_Save(LPPROPERTYBAG pPropBag,
	BOOL , BOOL ,
	ATL_PROPMAP_ENTRY* pMap, void* pThis, IUnknown* pUnk)
{
	if (pPropBag == 0)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "PropBag pointer passed in was invalid\n");
		return ((HRESULT)0x80004003L);
	}

	CComPtr<IDispatch> pDispatch;
	const IID* piidOld = 0;
	for (int i = 0; pMap[i].pclsidPropPage != 0; i++)
	{
		if (pMap[i].szDesc == 0)
			continue;

		CComVariant var;

		
		if (pMap[i].dwSizeData != 0)
		{
			void* pData = (void*) (pMap[i].dwOffsetData + (DWORD)pThis);
			
			bool bTypeOK = false;
			switch (pMap[i].vt)
			{
			case VT_UI1:
			case VT_I1:
				var.bVal = *((BYTE*)pData);
				bTypeOK = true;
				break;
			case VT_BOOL:
				var.boolVal = *((VARIANT_BOOL*)pData);
				bTypeOK = true;
				break;
			case VT_UI2:
				var.iVal = *((short*)pData);
				bTypeOK = true;
				break;
			case VT_UI4:
			case VT_INT:
			case VT_UINT:
				var.lVal = *((long*)pData);
				bTypeOK = true;
				break;
			}
			if (bTypeOK)
			{
				var.vt = pMap[i].vt;
				HRESULT hr = pPropBag->Write(pMap[i].szDesc, &var);
				if (((HRESULT)(hr)<0))
					return hr;
			}
			continue;
		}

		if (pMap[i].piidDispatch != piidOld)
		{
			pDispatch.Release();
			if (((HRESULT)(pUnk->QueryInterface(*pMap[i].piidDispatch, (void**)&pDispatch))<0))
			{
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Failed to get a dispatch pointer for property #%i\n", i);
				return ((HRESULT)0x80004005L);
			}
			piidOld = pMap[i].piidDispatch;
		}

		if (((HRESULT)(CComDispatchDriver::GetProperty(pDispatch, pMap[i].dispid, &var))<0))
		{
			1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Invoked failed on DISPID %x\n", pMap[i].dispid);
			return ((HRESULT)0x80004005L);
		}

		if (var.vt == VT_UNKNOWN || var.vt == VT_DISPATCH)
		{
			if (var.punkVal == 0)
			{
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "Warning skipping empty IUnknown in Save\n");
				continue;
			}
		}

		HRESULT hr = pPropBag->Write(pMap[i].szDesc, &var);
		if (((HRESULT)(hr)<0))
			return hr;
	}
	return ((HRESULT)0x00000000L);
}
#line 659 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"




template <class T>
class __declspec(novtable) IPersistStreamInitImpl : public IPersistStreamInit
{
public:
	
	virtual HRESULT __stdcall GetClassID(CLSID *pClassID)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStreamInitImpl::GetClassID\n");
		*pClassID = T::GetObjectCLSID();
		return ((HRESULT)0x00000000L);
	}

	
	virtual HRESULT __stdcall IsDirty()
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStreamInitImpl::IsDirty\n");
		T* pT = static_cast<T*>(this);
		return (pT->m_bRequiresSave) ? ((HRESULT)0x00000000L) : ((HRESULT)0x00000001L);
	}
	virtual HRESULT __stdcall Load(LPSTREAM pStm)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStreamInitImpl::Load\n");
		T* pT = static_cast<T*>(this);
		return pT->IPersistStreamInit_Load(pStm, T::GetPropertyMap());
	}
	virtual HRESULT __stdcall Save(LPSTREAM pStm, BOOL fClearDirty)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStreamInitImpl::Save\n");
		return pT->IPersistStreamInit_Save(pStm, fClearDirty, T::GetPropertyMap());
	}
	virtual HRESULT __stdcall GetSizeMax(ULARGE_INTEGER * )
	{
		return ((HRESULT)0x80004001L);
	}

	
	virtual HRESULT __stdcall InitNew()
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStreamInitImpl::InitNew\n");
		return ((HRESULT)0x00000000L);
	}

	HRESULT IPersistStreamInit_Load(LPSTREAM pStm, ATL_PROPMAP_ENTRY* pMap)
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr = AtlIPersistStreamInit_Load(pStm, pMap, pT, pT->GetUnknown());
		if (((HRESULT)(hr) >= 0))
			pT->m_bRequiresSave = 0;
		return hr;

	}
	HRESULT IPersistStreamInit_Save(LPSTREAM pStm, BOOL fClearDirty, ATL_PROPMAP_ENTRY* pMap)
	{
		T* pT = static_cast<T*>(this);
		return AtlIPersistStreamInit_Save(pStm, fClearDirty, pMap, pT, pT->GetUnknown());
	}
};



template <class T>
class __declspec(novtable) IPersistStorageImpl : public IPersistStorage
{
public:
	
	virtual HRESULT __stdcall GetClassID(CLSID *pClassID)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStorageImpl::GetClassID\n");
		*pClassID = T::GetObjectCLSID();
		return ((HRESULT)0x00000000L);
	}

	
	virtual HRESULT __stdcall IsDirty(void)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStorageImpl::IsDirty\n");
		CComPtr<IPersistStreamInit> p;
		p.p = IPSI_GetIPersistStreamInit();
		return (p != 0) ? p->IsDirty() : ((HRESULT)0x80004005L);
	}
	virtual HRESULT __stdcall InitNew(IStorage*)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStorageImpl::InitNew\n");
		CComPtr<IPersistStreamInit> p;
		p.p = IPSI_GetIPersistStreamInit();
		return (p != 0) ? p->InitNew() : ((HRESULT)0x80004005L);
	}
	virtual HRESULT __stdcall Load(IStorage* pStorage)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStorageImpl::Load\n");
		CComPtr<IPersistStreamInit> p;
		p.p = IPSI_GetIPersistStreamInit();
		HRESULT hr = ((HRESULT)0x80004005L);
		if (p != 0)
		{
			CComPtr<IStream> spStream;
			hr = pStorage->OpenStream(L"Contents", 0,
				0x00000000L | 0x00000010L, 0, &spStream);
			if (((HRESULT)(hr) >= 0))
				hr = p->Load(spStream);
		}
		return hr;
	}
	virtual HRESULT __stdcall Save(IStorage* pStorage, BOOL fSameAsLoad)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStorageImpl::Save\n");
		CComPtr<IPersistStreamInit> p;
		p.p = IPSI_GetIPersistStreamInit();
		HRESULT hr = ((HRESULT)0x80004005L);
		if (p != 0)
		{
			CComPtr<IStream> spStream;
			static LPCOLESTR vszContents = L"Contents";
			hr = pStorage->CreateStream(vszContents,
				0x00000002L | 0x00000010L | 0x00001000L,
				0, 0, &spStream);
			if (((HRESULT)(hr) >= 0))
				hr = p->Save(spStream, fSameAsLoad);
		}
		return hr;
	}
	virtual HRESULT __stdcall SaveCompleted(IStorage* )
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStorageImpl::SaveCompleted\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall HandsOffStorage(void)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistStorageImpl::HandsOffStorage\n");
		return ((HRESULT)0x00000000L);
	}
private:
	IPersistStreamInit* IPSI_GetIPersistStreamInit();
};

template <class T>
IPersistStreamInit* IPersistStorageImpl<T>::IPSI_GetIPersistStreamInit()
{
	T* pT = static_cast<T*>(this);
	IPersistStreamInit* p;
	if (((HRESULT)(pT->GetUnknown()->QueryInterface(IID_IPersistStreamInit, (void**)&p))<0))
		pT->_InternalQueryInterface(IID_IPersistStreamInit, (void**)&p);
	return p;
}




template <class T>
class __declspec(novtable) IPersistPropertyBagImpl : public IPersistPropertyBag
{
public:
	
	virtual HRESULT __stdcall GetClassID(CLSID *pClassID)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistPropertyBagImpl::GetClassID\n");
		*pClassID = T::GetObjectCLSID();
		return ((HRESULT)0x00000000L);
	}

	
	
	virtual HRESULT __stdcall InitNew()
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistPropertyBagImpl::InitNew\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Load(LPPROPERTYBAG pPropBag, LPERRORLOG pErrorLog)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistPropertyBagImpl::Load\n");
		T* pT = static_cast<T*>(this);
		ATL_PROPMAP_ENTRY* pMap = T::GetPropertyMap();
		((void)0);
		return pT->IPersistPropertyBag_Load(pPropBag, pErrorLog, pMap);
	}
	virtual HRESULT __stdcall Save(LPPROPERTYBAG pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IPersistPropertyBagImpl::Save\n");
		T* pT = static_cast<T*>(this);
		ATL_PROPMAP_ENTRY* pMap = T::GetPropertyMap();
		((void)0);
		return pT->IPersistPropertyBag_Save(pPropBag, fClearDirty, fSaveAllProperties, pMap);
	}
	HRESULT IPersistPropertyBag_Load(LPPROPERTYBAG pPropBag, LPERRORLOG pErrorLog, ATL_PROPMAP_ENTRY* pMap)
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr = AtlIPersistPropertyBag_Load(pPropBag, pErrorLog, pMap, pT, pT->GetUnknown());
		if (((HRESULT)(hr) >= 0))
			pT->m_bRequiresSave = 0;
		return hr;
	}
	HRESULT IPersistPropertyBag_Save(LPPROPERTYBAG pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties, ATL_PROPMAP_ENTRY* pMap)
	{
		T* pT = static_cast<T*>(this);
		return AtlIPersistPropertyBag_Save(pPropBag, fClearDirty, fSaveAllProperties, pMap, pT, pT->GetUnknown());
	}
};



class CSecurityDescriptor
{
public:
	CSecurityDescriptor();
	~CSecurityDescriptor();

public:
	HRESULT Attach(PSECURITY_DESCRIPTOR pSelfRelativeSD);
	HRESULT AttachObject(HANDLE hObject);
	HRESULT Initialize();
	HRESULT InitializeFromProcessToken(BOOL bDefaulted = 0);
	HRESULT InitializeFromThreadToken(BOOL bDefaulted = 0, BOOL bRevertToProcessToken = 1);
	HRESULT SetOwner(PSID pOwnerSid, BOOL bDefaulted = 0);
	HRESULT SetGroup(PSID pGroupSid, BOOL bDefaulted = 0);
	HRESULT Allow(LPCTSTR pszPrincipal, DWORD dwAccessMask);
	HRESULT Deny(LPCTSTR pszPrincipal, DWORD dwAccessMask);
	HRESULT Revoke(LPCTSTR pszPrincipal);

	
	
	static HRESULT SetPrivilege(LPCTSTR Privilege, BOOL bEnable = 1, HANDLE hToken = 0);
	static HRESULT GetTokenSids(HANDLE hToken, PSID* ppUserSid, PSID* ppGroupSid);
	static HRESULT GetProcessSids(PSID* ppUserSid, PSID* ppGroupSid = 0);
	static HRESULT GetThreadSids(PSID* ppUserSid, PSID* ppGroupSid = 0, BOOL bOpenAsSelf = 0);
	static HRESULT CopyACL(PACL pDest, PACL pSrc);
	static HRESULT GetCurrentUserSID(PSID *ppSid);
	static HRESULT GetPrincipalSID(LPCTSTR pszPrincipal, PSID *ppSid);
	static HRESULT AddAccessAllowedACEToACL(PACL *Acl, LPCTSTR pszPrincipal, DWORD dwAccessMask);
	static HRESULT AddAccessDeniedACEToACL(PACL *Acl, LPCTSTR pszPrincipal, DWORD dwAccessMask);
	static HRESULT RemovePrincipalFromACL(PACL Acl, LPCTSTR pszPrincipal);

	operator PSECURITY_DESCRIPTOR()
	{
		return m_pSD;
	}

public:
	PSECURITY_DESCRIPTOR m_pSD;
	PSID m_pOwner;
	PSID m_pGroup;
	PACL m_pDACL;
	PACL m_pSACL;
};

inline CSecurityDescriptor::CSecurityDescriptor()
{
	m_pSD = 0;
	m_pOwner = 0;
	m_pGroup = 0;
	m_pDACL = 0;
	m_pSACL= 0;
}

inline CSecurityDescriptor::~CSecurityDescriptor()
{
	if (m_pSD)
		delete m_pSD;
	if (m_pOwner)
		free(m_pOwner);
	if (m_pGroup)
		free(m_pGroup);
	if (m_pDACL)
		free(m_pDACL);
	if (m_pSACL)
		free(m_pSACL);
}

inline HRESULT CSecurityDescriptor::Initialize()
{
	if (m_pSD)
	{
		delete m_pSD;
		m_pSD = 0;
	}
	if (m_pOwner)
	{
		free(m_pOwner);
		m_pOwner = 0;
	}
	if (m_pGroup)
	{
		free(m_pGroup);
		m_pGroup = 0;
	}
	if (m_pDACL)
	{
		free(m_pDACL);
		m_pDACL = 0;
	}
	if (m_pSACL)
	{
		free(m_pSACL);
		m_pSACL = 0;
	}

	m_pSD = new SECURITY_DESCRIPTOR;;
	if (m_pSD == 0)
		return ((HRESULT)0x8007000EL);

	if (!InitializeSecurityDescriptor(m_pSD, (1)))
	{
		HRESULT hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		delete m_pSD;
		m_pSD = 0;
		((void)0);
		return hr;
	}
	
	SetSecurityDescriptorDacl(m_pSD, 1, 0, 0);
	return ((HRESULT)0x00000000L);
}

inline HRESULT CSecurityDescriptor::InitializeFromProcessToken(BOOL bDefaulted)
{
	PSID pUserSid = 0;
	PSID pGroupSid = 0;
	HRESULT hr;

	Initialize();
	hr = GetProcessSids(&pUserSid, &pGroupSid);
	if (((HRESULT)(hr) >= 0))
	{
		hr = SetOwner(pUserSid, bDefaulted);
		if (((HRESULT)(hr) >= 0))
			hr = SetGroup(pGroupSid, bDefaulted);
	}
	if (pUserSid != 0)
		free(pUserSid);
	if (pGroupSid != 0)
		free(pGroupSid);
	return hr;
}

inline HRESULT CSecurityDescriptor::InitializeFromThreadToken(BOOL bDefaulted, BOOL bRevertToProcessToken)
{
	PSID pUserSid = 0;
	PSID pGroupSid = 0;
	HRESULT hr;

	Initialize();
	hr = GetThreadSids(&pUserSid, &pGroupSid);
	if (((hr) & 0xFFFF) == 1008L && bRevertToProcessToken)
		hr = GetProcessSids(&pUserSid, &pGroupSid);
	if (((HRESULT)(hr) >= 0))
	{
		hr = SetOwner(pUserSid, bDefaulted);
		if (((HRESULT)(hr) >= 0))
			hr = SetGroup(pGroupSid, bDefaulted);
	}
	if (pUserSid != 0)
		free(pUserSid);
	if (pGroupSid != 0)
		free(pGroupSid);
	return hr;
}

inline HRESULT CSecurityDescriptor::SetOwner(PSID pOwnerSid, BOOL bDefaulted)
{
	((void)0);

	
	if (!SetSecurityDescriptorOwner(m_pSD, 0, bDefaulted))
	{
		HRESULT hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		return hr;
	}

	if (m_pOwner)
	{
		free(m_pOwner);
		m_pOwner = 0;
	}

	
	if (pOwnerSid == 0)
		return ((HRESULT)0x00000000L);

	
	DWORD dwSize = GetLengthSid(pOwnerSid);

	m_pOwner = (PSID) malloc(dwSize);
	if (m_pOwner == 0)
		return ((HRESULT)0x8007000EL);
	if (!CopySid(dwSize, m_pOwner, pOwnerSid))
	{
		HRESULT hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		free(m_pOwner);
		m_pOwner = 0;
		return hr;
	}

	((void)0);

	if (!SetSecurityDescriptorOwner(m_pSD, m_pOwner, bDefaulted))
	{
		HRESULT hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		free(m_pOwner);
		m_pOwner = 0;
		return hr;
	}

	return ((HRESULT)0x00000000L);
}

inline HRESULT CSecurityDescriptor::SetGroup(PSID pGroupSid, BOOL bDefaulted)
{
	((void)0);

	
	if (!SetSecurityDescriptorGroup(m_pSD, 0, bDefaulted))
	{
		HRESULT hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		return hr;
	}

	if (m_pGroup)
	{
		free(m_pGroup);
		m_pGroup = 0;
	}

	
	if (pGroupSid == 0)
		return ((HRESULT)0x00000000L);

	
	DWORD dwSize = GetLengthSid(pGroupSid);

	m_pGroup = (PSID) malloc(dwSize);
	if (m_pGroup == 0)
		return ((HRESULT)0x8007000EL);
	if (!CopySid(dwSize, m_pGroup, pGroupSid))
	{
		HRESULT hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		free(m_pGroup);
		m_pGroup = 0;
		return hr;
	}

	((void)0);

	if (!SetSecurityDescriptorGroup(m_pSD, m_pGroup, bDefaulted))
	{
		HRESULT hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		free(m_pGroup);
		m_pGroup = 0;
		return hr;
	}

	return ((HRESULT)0x00000000L);
}

inline HRESULT CSecurityDescriptor::Allow(LPCTSTR pszPrincipal, DWORD dwAccessMask)
{
	HRESULT hr = AddAccessAllowedACEToACL(&m_pDACL, pszPrincipal, dwAccessMask);
	if (((HRESULT)(hr) >= 0))
		SetSecurityDescriptorDacl(m_pSD, 1, m_pDACL, 0);
	return hr;
}

inline HRESULT CSecurityDescriptor::Deny(LPCTSTR pszPrincipal, DWORD dwAccessMask)
{
	HRESULT hr = AddAccessDeniedACEToACL(&m_pDACL, pszPrincipal, dwAccessMask);
	if (((HRESULT)(hr) >= 0))
		SetSecurityDescriptorDacl(m_pSD, 1, m_pDACL, 0);
	return hr;
}

inline HRESULT CSecurityDescriptor::Revoke(LPCTSTR pszPrincipal)
{
	HRESULT hr = RemovePrincipalFromACL(m_pDACL, pszPrincipal);
	if (((HRESULT)(hr) >= 0))
		SetSecurityDescriptorDacl(m_pSD, 1, m_pDACL, 0);
	return hr;
}

inline HRESULT CSecurityDescriptor::GetProcessSids(PSID* ppUserSid, PSID* ppGroupSid)
{
	BOOL bRes;
	HRESULT hr;
	HANDLE hToken = 0;
	if (ppUserSid)
		*ppUserSid = 0;
	if (ppGroupSid)
		*ppGroupSid = 0;
	bRes = OpenProcessToken(GetCurrentProcess(), (0x0008), &hToken);
	if (!bRes)
	{
		
		hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		return hr;
	}
	hr = GetTokenSids(hToken, ppUserSid, ppGroupSid);
	CloseHandle(hToken);
	return hr;
}

inline HRESULT CSecurityDescriptor::GetThreadSids(PSID* ppUserSid, PSID* ppGroupSid, BOOL bOpenAsSelf)
{
	BOOL bRes;
	HRESULT hr;
	HANDLE hToken = 0;
	if (ppUserSid)
		*ppUserSid = 0;
	if (ppGroupSid)
		*ppGroupSid = 0;
	bRes = OpenThreadToken(GetCurrentThread(), (0x0008), bOpenAsSelf, &hToken);
	if (!bRes)
	{
		
		hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		return hr;
	}
	hr = GetTokenSids(hToken, ppUserSid, ppGroupSid);
	CloseHandle(hToken);
	return hr;
}

inline HRESULT CSecurityDescriptor::GetTokenSids(HANDLE hToken, PSID* ppUserSid, PSID* ppGroupSid)
{
	DWORD dwSize;
	HRESULT hr;
	PTOKEN_USER ptkUser = 0;
	PTOKEN_PRIMARY_GROUP ptkGroup = 0;

	if (ppUserSid)
		*ppUserSid = 0;
	if (ppGroupSid)
		*ppGroupSid = 0;

	if (ppUserSid)
	{
		
		GetTokenInformation(hToken, TokenUser, 0, 0, &dwSize);
		hr = GetLastError();
		if (hr != 122L)
		{
			
			((void)0);
			hr = ((HRESULT)(hr) <= 0 ? ((HRESULT)(hr)) : ((HRESULT) (((hr) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
			goto failed;
		}

		ptkUser = (TOKEN_USER*) malloc(dwSize);
		if (ptkUser == 0)
		{
			hr = ((HRESULT)0x8007000EL);
			goto failed;
		}
		
		if (!GetTokenInformation(hToken, TokenUser, ptkUser, dwSize, &dwSize))
		{
			
			hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
			((void)0);
			goto failed;
		}

		
		dwSize = GetLengthSid(ptkUser->User.Sid);

		PSID pSid;
		pSid = (PSID) malloc(dwSize);
		if (pSid == 0)
		{
			hr = ((HRESULT)0x8007000EL);
			goto failed;
		}
		if (!CopySid(dwSize, pSid, ptkUser->User.Sid))
		{
			hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
			((void)0);
			goto failed;
		}

		((void)0);
		*ppUserSid = pSid;
		free(ptkUser);
	}
	if (ppGroupSid)
	{
		
		GetTokenInformation(hToken, TokenPrimaryGroup, 0, 0, &dwSize);
		hr = GetLastError();
		if (hr != 122L)
		{
			
			((void)0);
			hr = ((HRESULT)(hr) <= 0 ? ((HRESULT)(hr)) : ((HRESULT) (((hr) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
			goto failed;
		}

		ptkGroup = (TOKEN_PRIMARY_GROUP*) malloc(dwSize);
		if (ptkGroup == 0)
		{
			hr = ((HRESULT)0x8007000EL);
			goto failed;
		}
		
		if (!GetTokenInformation(hToken, TokenPrimaryGroup, ptkGroup, dwSize, &dwSize))
		{
			
			hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
			((void)0);
			goto failed;
		}

		
		dwSize = GetLengthSid(ptkGroup->PrimaryGroup);

		PSID pSid;
		pSid = (PSID) malloc(dwSize);
		if (pSid == 0)
		{
			hr = ((HRESULT)0x8007000EL);
			goto failed;
		}
		if (!CopySid(dwSize, pSid, ptkGroup->PrimaryGroup))
		{
			hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
			((void)0);
			goto failed;
		}

		((void)0);

		*ppGroupSid = pSid;
		free(ptkGroup);
	}

	return ((HRESULT)0x00000000L);

failed:
	if (ptkUser)
		free(ptkUser);
	if (ptkGroup)
		free (ptkGroup);
	return hr;
}


inline HRESULT CSecurityDescriptor::GetCurrentUserSID(PSID *ppSid)
{
	HANDLE tkHandle;

	if (OpenProcessToken(GetCurrentProcess(), (0x0008), &tkHandle))
	{
		TOKEN_USER *tkUser;
		DWORD tkSize;
		DWORD sidLength;

		
		GetTokenInformation(tkHandle, TokenUser, 0, 0, &tkSize);
		tkUser = (TOKEN_USER *) malloc(tkSize);
		if (tkUser == 0)
			return ((HRESULT)0x8007000EL);

		
		if (GetTokenInformation(tkHandle, TokenUser, tkUser, tkSize, &tkSize))
		{
			sidLength = GetLengthSid(tkUser->User.Sid);
			*ppSid = (PSID) malloc(sidLength);
			if (*ppSid == 0)
				return ((HRESULT)0x8007000EL);

			memcpy(*ppSid, tkUser->User.Sid, sidLength);
			CloseHandle(tkHandle);

			free(tkUser);
			return ((HRESULT)0x00000000L);
		}
		else
		{
			free(tkUser);
			return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		}
	}
	return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
}


inline HRESULT CSecurityDescriptor::GetPrincipalSID(LPCTSTR pszPrincipal, PSID *ppSid)
{
	HRESULT hr;
	LPTSTR pszRefDomain = 0;
	DWORD dwDomainSize = 0;
	DWORD dwSidSize = 0;
	SID_NAME_USE snu;

	
	LookupAccountNameA(0, pszPrincipal, *ppSid, &dwSidSize, pszRefDomain, &dwDomainSize, &snu);

	hr = GetLastError();
	if (hr != 122L)
		return ((HRESULT)(hr) <= 0 ? ((HRESULT)(hr)) : ((HRESULT) (((hr) & 0x0000FFFF) | (7 << 16) | 0x80000000)));

	pszRefDomain = new TCHAR[dwDomainSize];;
	if (pszRefDomain == 0)
		return ((HRESULT)0x8007000EL);

	*ppSid = (PSID) malloc(dwSidSize);
	if (*ppSid != 0)
	{
		if (!LookupAccountNameA(0, pszPrincipal, *ppSid, &dwSidSize, pszRefDomain, &dwDomainSize, &snu))
		{
			free(*ppSid);
			*ppSid = 0;
			delete[] pszRefDomain;
			return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		}
		delete[] pszRefDomain;
		return ((HRESULT)0x00000000L);
	}
	delete[] pszRefDomain;
	return ((HRESULT)0x8007000EL);
}


inline HRESULT CSecurityDescriptor::Attach(PSECURITY_DESCRIPTOR pSelfRelativeSD)
{
	PACL    pDACL = 0;
	PACL    pSACL = 0;
	BOOL    bDACLPresent, bSACLPresent;
	BOOL    bDefaulted;
	PACL    m_pDACL = 0;
	ACCESS_ALLOWED_ACE* pACE;
	HRESULT hr;
	PSID    pUserSid;
	PSID    pGroupSid;

	hr = Initialize();
	if(((HRESULT)(hr)<0))
		return hr;

	
	if (!GetSecurityDescriptorDacl(pSelfRelativeSD, &bDACLPresent, &pDACL, &bDefaulted))
		goto failed;

	if (bDACLPresent)
	{
		if (pDACL)
		{
			
			m_pDACL = (PACL) malloc(pDACL->AclSize);
			if (m_pDACL == 0)
			{
				hr = ((HRESULT)0x8007000EL);
				goto failedMemory;
			}

			
			if (!InitializeAcl(m_pDACL, pDACL->AclSize, (2)))
				goto failed;

			
			for (int i = 0; i < pDACL->AceCount; i++)
			{
				if (!GetAce(pDACL, i, (void **)&pACE))
					goto failed;

				if (!AddAccessAllowedAce(m_pDACL, (2), pACE->Mask, (PSID)&(pACE->SidStart)))
					goto failed;
			}

			if (!IsValidAcl(m_pDACL))
				goto failed;
		}

		
		if (!SetSecurityDescriptorDacl(m_pSD, m_pDACL ? 1 : 0, m_pDACL, bDefaulted))
			goto failed;
	}

	
	if (!GetSecurityDescriptorSacl(pSelfRelativeSD, &bSACLPresent, &pSACL, &bDefaulted))
		goto failed;

	if (bSACLPresent)
	{
		if (pSACL)
		{
			
			m_pSACL = (PACL) malloc(pSACL->AclSize);
			if (m_pSACL == 0)
			{
				hr = ((HRESULT)0x8007000EL);
				goto failedMemory;
			}

			
			if (!InitializeAcl(m_pSACL, pSACL->AclSize, (2)))
				goto failed;

			
			for (int i = 0; i < pSACL->AceCount; i++)
			{
				if (!GetAce(pSACL, i, (void **)&pACE))
					goto failed;

				if (!AddAccessAllowedAce(m_pSACL, (2), pACE->Mask, (PSID)&(pACE->SidStart)))
					goto failed;
			}

			if (!IsValidAcl(m_pSACL))
				goto failed;
		}

		
		if (!SetSecurityDescriptorSacl(m_pSD, m_pSACL ? 1 : 0, m_pSACL, bDefaulted))
			goto failed;
	}

	if (!GetSecurityDescriptorOwner(m_pSD, &pUserSid, &bDefaulted))
		goto failed;

	if (((HRESULT)(SetOwner(pUserSid, bDefaulted))<0))
		goto failed;

	if (!GetSecurityDescriptorGroup(m_pSD, &pGroupSid, &bDefaulted))
		goto failed;

	if (((HRESULT)(SetGroup(pGroupSid, bDefaulted))<0))
		goto failed;

	if (!IsValidSecurityDescriptor(m_pSD))
		goto failed;

	return hr;

failed:
	hr = ((HRESULT)(hr) <= 0 ? ((HRESULT)(hr)) : ((HRESULT) (((hr) & 0x0000FFFF) | (7 << 16) | 0x80000000)));

failedMemory:
	if (m_pDACL)
	{
		free(m_pDACL);
		m_pDACL = 0;
	}
	if (m_pSD)
	{
		free(m_pSD);
		m_pSD = 0;
	}
	return hr;
}

inline HRESULT CSecurityDescriptor::AttachObject(HANDLE hObject)
{
	HRESULT hr;
	DWORD dwSize = 0;
	PSECURITY_DESCRIPTOR pSD = 0;

	GetKernelObjectSecurity(hObject, (0x00000001L) | (0x00000002L) |
		(0x00000004L), pSD, 0, &dwSize);

	hr = GetLastError();
	if (hr != 122L)
		return ((HRESULT)(hr) <= 0 ? ((HRESULT)(hr)) : ((HRESULT) (((hr) & 0x0000FFFF) | (7 << 16) | 0x80000000)));

	pSD = (PSECURITY_DESCRIPTOR) malloc(dwSize);
	if (pSD == 0)
		return ((HRESULT)0x8007000EL);

	if (!GetKernelObjectSecurity(hObject, (0x00000001L) | (0x00000002L) |
		(0x00000004L), pSD, dwSize, &dwSize))
	{
		hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		free(pSD);
		return hr;
	}

	hr = Attach(pSD);
	free(pSD);
	return hr;
}


inline HRESULT CSecurityDescriptor::CopyACL(PACL pDest, PACL pSrc)
{
	ACL_SIZE_INFORMATION aclSizeInfo;
	LPVOID pAce;
	ACE_HEADER *aceHeader;

	if (pSrc == 0)
		return ((HRESULT)0x00000000L);

	if (!GetAclInformation(pSrc, (LPVOID) &aclSizeInfo, sizeof(ACL_SIZE_INFORMATION), AclSizeInformation))
		return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));

	
	for (UINT i = 0; i < aclSizeInfo.AceCount; i++)
	{
		if (!GetAce(pSrc, i, &pAce))
			return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));

		aceHeader = (ACE_HEADER *) pAce;

		if (!AddAce(pDest, (2), 0xffffffff, pAce, aceHeader->AceSize))
			return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
	}

	return ((HRESULT)0x00000000L);
}

inline HRESULT CSecurityDescriptor::AddAccessDeniedACEToACL(PACL *ppAcl, LPCTSTR pszPrincipal, DWORD dwAccessMask)
{
	ACL_SIZE_INFORMATION aclSizeInfo;
	int aclSize;
	DWORD returnValue;
	PSID principalSID;
	PACL oldACL, newACL = 0;

	oldACL = *ppAcl;

	returnValue = GetPrincipalSID(pszPrincipal, &principalSID);
	if (((HRESULT)(returnValue)<0))
		return returnValue;

	aclSizeInfo.AclBytesInUse = 0;
	if (*ppAcl != 0)
		GetAclInformation(oldACL, (LPVOID) &aclSizeInfo, sizeof(ACL_SIZE_INFORMATION), AclSizeInformation);

	aclSize = aclSizeInfo.AclBytesInUse + sizeof(ACL) + sizeof(ACCESS_DENIED_ACE) + GetLengthSid(principalSID) - sizeof(DWORD);

	newACL = (PACL) new BYTE[aclSize];;
	if (newACL == 0)
		return ((HRESULT)0x8007000EL);

	if (!InitializeAcl(newACL, aclSize, (2)))
	{
		free(principalSID);
		return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
	}

	if (!AddAccessDeniedAce(newACL, (2), dwAccessMask, principalSID))
	{
		free(principalSID);
		return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
	}

	returnValue = CopyACL(newACL, oldACL);
	if (((HRESULT)(returnValue)<0))
	{
		free(principalSID);
		return returnValue;
	}

	*ppAcl = newACL;

	if (oldACL != 0)
		free(oldACL);
	free(principalSID);
	return ((HRESULT)0x00000000L);
}


inline HRESULT CSecurityDescriptor::AddAccessAllowedACEToACL(PACL *ppAcl, LPCTSTR pszPrincipal, DWORD dwAccessMask)
{
	ACL_SIZE_INFORMATION aclSizeInfo;
	int aclSize;
	DWORD returnValue;
	PSID principalSID;
	PACL oldACL, newACL = 0;

	oldACL = *ppAcl;

	returnValue = GetPrincipalSID(pszPrincipal, &principalSID);
	if (((HRESULT)(returnValue)<0))
		return returnValue;

	aclSizeInfo.AclBytesInUse = 0;
	if (*ppAcl != 0)
		GetAclInformation(oldACL, (LPVOID) &aclSizeInfo, (DWORD) sizeof(ACL_SIZE_INFORMATION), AclSizeInformation);

	aclSize = aclSizeInfo.AclBytesInUse + sizeof(ACL) + sizeof(ACCESS_ALLOWED_ACE) + GetLengthSid(principalSID) - sizeof(DWORD);

	newACL = (PACL) new BYTE[aclSize];;
	if (newACL == 0)
		return ((HRESULT)0x8007000EL);

	if (!InitializeAcl(newACL, aclSize, (2)))
	{
		free(principalSID);
		return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
	}

	returnValue = CopyACL(newACL, oldACL);
	if (((HRESULT)(returnValue)<0))
	{
		free(principalSID);
		return returnValue;
	}

	if (!AddAccessAllowedAce(newACL, (2), dwAccessMask, principalSID))
	{
		free(principalSID);
		return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
	}

	*ppAcl = newACL;

	if (oldACL != 0)
		free(oldACL);
	free(principalSID);
	return ((HRESULT)0x00000000L);
}


inline HRESULT CSecurityDescriptor::RemovePrincipalFromACL(PACL pAcl, LPCTSTR pszPrincipal)
{
	ACL_SIZE_INFORMATION aclSizeInfo;
	ULONG i;
	LPVOID ace;
	ACCESS_ALLOWED_ACE *accessAllowedAce;
	ACCESS_DENIED_ACE *accessDeniedAce;
	SYSTEM_AUDIT_ACE *systemAuditAce;
	PSID principalSID;
	DWORD returnValue;
	ACE_HEADER *aceHeader;

	returnValue = GetPrincipalSID(pszPrincipal, &principalSID);
	if (((HRESULT)(returnValue)<0))
		return returnValue;

	GetAclInformation(pAcl, (LPVOID) &aclSizeInfo, (DWORD) sizeof(ACL_SIZE_INFORMATION), AclSizeInformation);

	for (i = 0; i < aclSizeInfo.AceCount; i++)
	{
		if (!GetAce(pAcl, i, &ace))
		{
			free(principalSID);
			return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		}

		aceHeader = (ACE_HEADER *) ace;

		if (aceHeader->AceType == (0x0))
		{
			accessAllowedAce = (ACCESS_ALLOWED_ACE *) ace;

			if (EqualSid(principalSID, (PSID) &accessAllowedAce->SidStart))
			{
				DeleteAce(pAcl, i);
				free(principalSID);
				return ((HRESULT)0x00000000L);
			}
		} else

		if (aceHeader->AceType == (0x1))
		{
			accessDeniedAce = (ACCESS_DENIED_ACE *) ace;

			if (EqualSid(principalSID, (PSID) &accessDeniedAce->SidStart))
			{
				DeleteAce(pAcl, i);
				free(principalSID);
				return ((HRESULT)0x00000000L);
			}
		} else

		if (aceHeader->AceType == (0x2))
		{
			systemAuditAce = (SYSTEM_AUDIT_ACE *) ace;

			if (EqualSid(principalSID, (PSID) &systemAuditAce->SidStart))
			{
				DeleteAce(pAcl, i);
				free(principalSID);
				return ((HRESULT)0x00000000L);
			}
		}
	}
	free(principalSID);
	return ((HRESULT)0x00000000L);
}


inline HRESULT CSecurityDescriptor::SetPrivilege(LPCTSTR privilege, BOOL bEnable, HANDLE hToken)
{
	HRESULT hr;
	TOKEN_PRIVILEGES tpPrevious;
	TOKEN_PRIVILEGES tp;
	DWORD  cbPrevious = sizeof(TOKEN_PRIVILEGES);
	LUID   luid;
	HANDLE hTokenUsed;

	
	if (hToken == 0)
	{
		if (!OpenProcessToken(GetCurrentProcess(), (0x0020) | (0x0008), &hTokenUsed))
		{
			hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
			((void)0);
			return hr;
		}
	}
	else
		hTokenUsed = hToken;

	if (!LookupPrivilegeValueA(0, privilege, &luid ))
	{
		hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		if (hToken == 0)
			CloseHandle(hTokenUsed);
		return hr;
	}

	tp.PrivilegeCount = 1;
	tp.Privileges[0].Luid = luid;
	tp.Privileges[0].Attributes = 0;

	if (!AdjustTokenPrivileges(hTokenUsed, 0, &tp, sizeof(TOKEN_PRIVILEGES), &tpPrevious, &cbPrevious))
	{
		hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		if (hToken == 0)
			CloseHandle(hTokenUsed);
		return hr;
	}

	tpPrevious.PrivilegeCount = 1;
	tpPrevious.Privileges[0].Luid = luid;

	if (bEnable)
		tpPrevious.Privileges[0].Attributes |= ((0x00000002L));
	else
		tpPrevious.Privileges[0].Attributes ^= ((0x00000002L) & tpPrevious.Privileges[0].Attributes);

	if (!AdjustTokenPrivileges(hTokenUsed, 0, &tpPrevious, cbPrevious, 0, 0))
	{
		hr = ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		((void)0);
		if (hToken == 0)
			CloseHandle(hTokenUsed);
		return hr;
	}
	return ((HRESULT)0x00000000L);
}








template <class T1>
class CComCreator
{
public:
	static HRESULT __stdcall CreateInstance(void* pv, const IID & riid, LPVOID* ppv)
	{
		((void)0);
		HRESULT hRes = ((HRESULT)0x8007000EL);
		T1* p = 0;
		p = new T1(pv);
		if (p != 0)
		{
			p->SetVoid(pv);
			p->InternalFinalConstructAddRef();
			hRes = p->FinalConstruct();
			p->InternalFinalConstructRelease();
			if (hRes == ((HRESULT)0x00000000L))
				hRes = p->QueryInterface(riid, ppv);
			if (hRes != ((HRESULT)0x00000000L))
				delete p;
		}
		return hRes;
	}
};

template <class T1>
class CComInternalCreator
{
public:
	static HRESULT __stdcall CreateInstance(void* pv, const IID & riid, LPVOID* ppv)
	{
		((void)0);
		HRESULT hRes = ((HRESULT)0x8007000EL);
		T1* p = 0;
		p = new T1(pv);
		if (p != 0)
		{
			p->SetVoid(pv);
			p->InternalFinalConstructAddRef();
			hRes = p->FinalConstruct();
			p->InternalFinalConstructRelease();
			if (hRes == ((HRESULT)0x00000000L))
				hRes = p->_InternalQueryInterface(riid, ppv);
			if (hRes != ((HRESULT)0x00000000L))
				delete p;
		}
		return hRes;
	}
};

template <HRESULT hr>
class CComFailCreator
{
public:
	static HRESULT __stdcall CreateInstance(void*, const IID &, LPVOID*)
	{
		return hr;
	}
};

template <class T1, class T2>
class CComCreator2
{
public:
	static HRESULT __stdcall CreateInstance(void* pv, const IID & riid, LPVOID* ppv)
	{
		((void)0);
		return (pv == 0) ? 
			T1::CreateInstance(0, riid, ppv) : 
			T2::CreateInstance(pv, riid, ppv);
	}
};










struct _ATL_CREATORDATA
{
	_ATL_CREATORFUNC* pFunc;
};

template <class Creator>
class _CComCreatorData
{
public:
	static _ATL_CREATORDATA data;
};

template <class Creator>
_ATL_CREATORDATA _CComCreatorData<Creator>::data = {Creator::CreateInstance};

struct _ATL_CACHEDATA
{
	DWORD dwOffsetVar;
	_ATL_CREATORFUNC* pFunc;
};

template <class Creator, DWORD dwVar>
class _CComCacheData
{
public:
	static _ATL_CACHEDATA data;
};

template <class Creator, DWORD dwVar>
_ATL_CACHEDATA _CComCacheData<Creator, dwVar>::data = {dwVar, Creator::CreateInstance};

struct _ATL_CHAINDATA
{
	DWORD dwOffset;
	const _ATL_INTMAP_ENTRY* (__stdcall *pFunc)();
};

template <class base, class derived>
class _CComChainData
{
public:
	static _ATL_CHAINDATA data;
};

template <class base, class derived>
_ATL_CHAINDATA _CComChainData<base, derived>::data =
	{((DWORD)(static_cast<base*>((derived*)8))-8), base::_GetEntries};

template <class T, const CLSID* pclsid>
class CComAggregateCreator
{
public:
	static HRESULT __stdcall CreateInstance(void* pv, const IID &, LPVOID* ppv)
	{
		((void)0);
		((void)0);
		T* p = (T*) pv;
		
		
		
		return CoCreateInstance(*pclsid, p->GetControllingUnknown(), (CLSCTX_INPROC_SERVER|CLSCTX_INPROC_HANDLER), IID_IUnknown, ppv);
	}
};








#line 1972 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"











#line 1984 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"




























#line 2013 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"









































































































#line 2119 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"






















class CComObjectRootBase
{
public:
	CComObjectRootBase()
	{
		m_dwRef = 0L;
	}
	HRESULT FinalConstruct()
	{
		return ((HRESULT)0x00000000L);
	}
	
	HRESULT _AtlFinalConstruct()
	{
		return ((HRESULT)0x00000000L);
	}
	void FinalRelease() {}
	void _AtlFinalRelease() {}

	
	static void __stdcall ObjectMain(bool ) {}

	static HRESULT __stdcall InternalQueryInterface(void* pThis,
		const _ATL_INTMAP_ENTRY* pEntries, const IID & iid, void** ppvObject)
	{
		((void)0);
		
		((void)0);
	

#line 2172 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"
		HRESULT hRes = AtlInternalQueryInterface(pThis, pEntries, iid, ppvObject);
	


		return hRes;
	}


	ULONG OuterAddRef()
	{
		return m_pOuterUnknown->AddRef();
	}
	ULONG OuterRelease()
	{
		return m_pOuterUnknown->Release();
	}
	HRESULT OuterQueryInterface(const IID & iid, void ** ppvObject)
	{
		return m_pOuterUnknown->QueryInterface(iid, ppvObject);
	}

	void SetVoid(void*) {}
	void InternalFinalConstructAddRef() {}
	void InternalFinalConstructRelease()
	{
		((void)0);
	}
	
	


	static HRESULT __stdcall _Break(void* , const IID & iid, void** , DWORD )
	{
		iid;
		((HRESULT)0x00000000L);
		DebugBreak();
		return ((HRESULT)0x00000001L);
	}
	static HRESULT __stdcall _NoInterface(void* , const IID & , void** , DWORD )
	{
		return ((HRESULT)0x80004002L);
	}
	static HRESULT __stdcall _Creator(void* pv, const IID & iid, void** ppvObject, DWORD dw)
	{
		_ATL_CREATORDATA* pcd = (_ATL_CREATORDATA*)dw;
		return pcd->pFunc(pv, iid, ppvObject);
	}
	static HRESULT __stdcall _Delegate(void* pv, const IID & iid, void** ppvObject, DWORD dw)
	{
		HRESULT hRes = ((HRESULT)0x80004002L);
		IUnknown* p = *(IUnknown**)((DWORD)pv + dw);
		if (p != 0)
			hRes = p->QueryInterface(iid, ppvObject);
		return hRes;
	}
	static HRESULT __stdcall _Chain(void* pv, const IID & iid, void** ppvObject, DWORD dw)
	{
		_ATL_CHAINDATA* pcd = (_ATL_CHAINDATA*)dw;
		void* p = (void*)((DWORD)pv + pcd->dwOffset);
		return InternalQueryInterface(p, pcd->pFunc(), iid, ppvObject);
	}
	static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw)
	{
		HRESULT hRes = ((HRESULT)0x80004002L);
		_ATL_CACHEDATA* pcd = (_ATL_CACHEDATA*)dw;
		IUnknown** pp = (IUnknown**)((DWORD)pv + pcd->dwOffsetVar);
		if (*pp == 0)
			hRes = pcd->pFunc(pv, IID_IUnknown, (void**)pp);
		if (*pp != 0)
			hRes = (*pp)->QueryInterface(iid, ppvObject);
		return hRes;
	}

	union
	{
		long m_dwRef;
		IUnknown* m_pOuterUnknown;
	};
};


template <class ThreadModel>
class CComObjectRootEx;

template <class ThreadModel>
class CComObjectLockT
{
public:
	CComObjectLockT(CComObjectRootEx<ThreadModel>* p)
	{
		if (p)
			p->Lock();
		m_p = p;
	}

	~CComObjectLockT()
	{
		if (m_p)
			m_p->Unlock();
	}
	CComObjectRootEx<ThreadModel>* m_p;
};

template <> class CComObjectLockT<CComSingleThreadModel>;

template <class ThreadModel>
class CComObjectRootEx : public CComObjectRootBase
{
public:
	typedef ThreadModel _ThreadModel;
	typedef _ThreadModel::AutoCriticalSection _CritSec;
	typedef CComObjectLockT<_ThreadModel> ObjectLock;

	ULONG InternalAddRef()
	{
		((void)0);
		return _ThreadModel::Increment(&m_dwRef);
	}
	ULONG InternalRelease()
	{
		((void)0);
		return _ThreadModel::Decrement(&m_dwRef);
	}

	void Lock() {m_critsec.Lock();}
	void Unlock() {m_critsec.Unlock();}
private:
	_CritSec m_critsec;
};

template <>
class CComObjectRootEx<CComSingleThreadModel> : public CComObjectRootBase
{
public:
	typedef CComSingleThreadModel _ThreadModel;
	typedef _ThreadModel::AutoCriticalSection _CritSec;
	typedef CComObjectLockT<_ThreadModel> ObjectLock;

	ULONG InternalAddRef()
	{
		((void)0);
		return _ThreadModel::Increment(&m_dwRef);
	}
	ULONG InternalRelease()
	{
		return _ThreadModel::Decrement(&m_dwRef);
	}

	void Lock() {}
	void Unlock() {}
};

template <>
class CComObjectLockT<CComSingleThreadModel>
{
public:
	CComObjectLockT(CComObjectRootEx<CComSingleThreadModel>*) {}
	~CComObjectLockT() {}
};

typedef CComObjectRootEx<CComObjectThreadModel> CComObjectRoot;



#line 2337 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"


#line 2340 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"








































template<class Base> class CComObject; 

template <class Owner, class ThreadModel = CComObjectThreadModel>
class CComTearOffObjectBase : public CComObjectRootEx<ThreadModel>
{
public:
	typedef Owner _OwnerClass;
	CComObject<Owner>* m_pOwner;
	CComTearOffObjectBase() {m_pOwner = 0;}
};



template <class Base>
class CComObject : public Base
{
public:
	typedef Base _BaseClass;
	CComObject(void* = 0)
	{
		_Module.Lock();
	}
	
	~CComObject()
	{
		m_dwRef = 1L;
		FinalRelease();



		_Module.Unlock();
	}
	
	
	virtual ULONG __stdcall AddRef() {return InternalAddRef();}
	virtual ULONG __stdcall Release()
	{
		ULONG l = InternalRelease();
		if (l == 0)
			delete this;
		return l;
	}
	
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{return _InternalQueryInterface(iid, ppvObject);}
	template <class Q>
	HRESULT __stdcall QueryInterface(Q** pp)
	{
		return QueryInterface(__uuidof(Q), (void**)pp);
	}

	static HRESULT __stdcall CreateInstance(CComObject<Base>** pp);
};

template <class Base>
HRESULT __stdcall CComObject<Base>::CreateInstance(CComObject<Base>** pp)
{
	((void)0);
	HRESULT hRes = ((HRESULT)0x8007000EL);
	CComObject<Base>* p = 0;
	p = new CComObject<Base>();
	if (p != 0)
	{
		p->SetVoid(0);
		p->InternalFinalConstructAddRef();
		hRes = p->FinalConstruct();
		p->InternalFinalConstructRelease();
		if (hRes != ((HRESULT)0x00000000L))
		{
			delete p;
			p = 0;
		}
	}
	*pp = p;
	return hRes;
}





template <class Base>
class CComObjectCached : public Base
{
public:
	typedef Base _BaseClass;
	CComObjectCached(void* = 0){}
	
	~CComObjectCached()
	{
		m_dwRef = 1L;
		FinalRelease();



	}
	
	
	virtual ULONG __stdcall AddRef()
	{
		m_csCached.Lock();
		ULONG l = InternalAddRef();
		if (m_dwRef == 2)
			_Module.Lock();
		m_csCached.Unlock();
		return l;
	}
	virtual ULONG __stdcall Release()
	{
		m_csCached.Lock();
		InternalRelease();
		ULONG l = m_dwRef;
		m_csCached.Unlock();
		if (l == 0)
			delete this;
		else if (l == 1)
			_Module.Unlock();
		return l;
	}
	
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{return _InternalQueryInterface(iid, ppvObject);}
	CComGlobalsThreadModel::AutoCriticalSection m_csCached;
};



template <class Base>
class CComObjectNoLock : public Base
{
public:
	typedef Base _BaseClass;
	CComObjectNoLock(void* = 0){}
	
	~CComObjectNoLock()
	{
		m_dwRef = 1L;
		FinalRelease();



	}

	
	
	virtual ULONG __stdcall AddRef() {return InternalAddRef();}
	virtual ULONG __stdcall Release()
	{
		ULONG l = InternalRelease();
		if (l == 0)
			delete this;
		return l;
	}
	
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{return _InternalQueryInterface(iid, ppvObject);}
};



template <class Base>
class CComObjectGlobal : public Base
{
public:
	typedef Base _BaseClass;
	CComObjectGlobal(void* = 0){m_hResFinalConstruct = FinalConstruct();}
	~CComObjectGlobal()
	{
		FinalRelease();



	}

	virtual ULONG __stdcall AddRef() {return _Module.Lock();}
	virtual ULONG __stdcall Release(){return _Module.Unlock();}
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{return _InternalQueryInterface(iid, ppvObject);}
	HRESULT m_hResFinalConstruct;
};



template <class Base>
class CComObjectStack : public Base
{
public:
	typedef Base _BaseClass;
	CComObjectStack(void* = 0){m_hResFinalConstruct = FinalConstruct();}
	~CComObjectStack()
	{
		FinalRelease();



	}


	virtual ULONG __stdcall AddRef() {((void)0);return 0;}
	virtual ULONG __stdcall Release(){((void)0);return 0;}
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{((void)0);return ((HRESULT)0x80004002L);}
	HRESULT m_hResFinalConstruct;
};

template <class Base> 
class CComContainedObject : public Base
{
public:
	typedef Base _BaseClass;
	CComContainedObject(void* pv) {m_pOuterUnknown = (IUnknown*)pv;}








	virtual ULONG __stdcall AddRef() {return OuterAddRef();}
	virtual ULONG __stdcall Release() {return OuterRelease();}
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{
		HRESULT hr = OuterQueryInterface(iid, ppvObject);
		if (((HRESULT)(hr)<0) && _GetRawUnknown() != m_pOuterUnknown)
			hr = _InternalQueryInterface(iid, ppvObject);
		return hr;
	}
	template <class Q>
	HRESULT __stdcall QueryInterface(Q** pp)
	{
		return QueryInterface(__uuidof(Q), (void**)pp);
	}
	
	
	IUnknown* GetControllingUnknown()
	{





		return m_pOuterUnknown;
#line 2624 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"
	}
};



template <class contained>
class CComAggObject :
	public IUnknown,
	public CComObjectRootEx< contained::_ThreadModel::ThreadModelNoCS >
{
public:
	typedef contained _BaseClass;
	CComAggObject(void* pv) : m_contained(pv)
	{
		_Module.Lock();
	}
	
	
	HRESULT FinalConstruct()
	{
		CComObjectRootEx<contained::_ThreadModel::ThreadModelNoCS>::FinalConstruct();
		return m_contained.FinalConstruct();
	}
	void FinalRelease()
	{
		CComObjectRootEx<contained::_ThreadModel::ThreadModelNoCS>::FinalRelease();
		m_contained.FinalRelease();
	}
	
	~CComAggObject()
	{
		m_dwRef = 1L;
		FinalRelease();



		_Module.Unlock();
	}

	virtual ULONG __stdcall AddRef() {return InternalAddRef();}
	virtual ULONG __stdcall Release()
	{
		ULONG l = InternalRelease();
		if (l == 0)
			delete this;
		return l;
	}
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{
		HRESULT hRes = ((HRESULT)0x00000000L);
		if (InlineIsEqualUnknown(iid))
		{
			if (ppvObject == 0)
				return ((HRESULT)0x80004003L);
			*ppvObject = (void*)(IUnknown*)this;
			AddRef();



		}
		else
			hRes = m_contained._InternalQueryInterface(iid, ppvObject);
		return hRes;
	}
	template <class Q>
	HRESULT __stdcall QueryInterface(Q** pp)
	{
		return QueryInterface(__uuidof(Q), (void**)pp);
	}
	static HRESULT __stdcall CreateInstance(LPUNKNOWN pUnkOuter, CComAggObject<contained>** pp)
	{
		((void)0);
		HRESULT hRes = ((HRESULT)0x8007000EL);
		CComAggObject<contained>* p = 0;
		p = new CComAggObject<contained>(pUnkOuter);
		if (p != 0)
		{
			p->SetVoid(0);
			p->InternalFinalConstructAddRef();
			hRes = p->FinalConstruct();
			p->InternalFinalConstructRelease();
			if (hRes != ((HRESULT)0x00000000L))
			{
				delete p;
				p = 0;
			}
		}
		*pp = p;
		return hRes;
	}

	CComContainedObject<contained> m_contained;
};




template <class contained>
class CComPolyObject :
	public IUnknown,
	public CComObjectRootEx< contained::_ThreadModel::ThreadModelNoCS >
{
public:
	typedef contained _BaseClass;
	CComPolyObject(void* pv) : m_contained(pv ? pv : this)
	{
		_Module.Lock();
	}
	
	
	HRESULT FinalConstruct()
	{
		InternalAddRef();
		CComObjectRootEx<contained::_ThreadModel::ThreadModelNoCS>::FinalConstruct();
		HRESULT hr = m_contained.FinalConstruct();
		InternalRelease();
		return hr;
	}
	void FinalRelease()
	{
		CComObjectRootEx<contained::_ThreadModel::ThreadModelNoCS>::FinalRelease();
		m_contained.FinalRelease();
	}
	
	~CComPolyObject()
	{
		m_dwRef = 1L;
		FinalRelease();



		_Module.Unlock();
	}

	virtual ULONG __stdcall AddRef() {return InternalAddRef();}
	virtual ULONG __stdcall Release()
	{
		ULONG l = InternalRelease();
		if (l == 0)
			delete this;
		return l;
	}
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{
		HRESULT hRes = ((HRESULT)0x00000000L);
		if (InlineIsEqualUnknown(iid))
		{
			if (ppvObject == 0)
				return ((HRESULT)0x80004003L);
			*ppvObject = (void*)(IUnknown*)this;
			AddRef();



		}
		else
			hRes = m_contained._InternalQueryInterface(iid, ppvObject);
		return hRes;
	}
	template <class Q>
	HRESULT __stdcall QueryInterface(Q** pp)
	{
		return QueryInterface(__uuidof(Q), (void**)pp);
	}
	static HRESULT __stdcall CreateInstance(LPUNKNOWN pUnkOuter, CComPolyObject<contained>** pp)
	{
		((void)0);
		HRESULT hRes = ((HRESULT)0x8007000EL);
		CComPolyObject<contained>* p = 0;
		p = new CComPolyObject<contained>(pUnkOuter);
		if (p != 0)
		{
			p->SetVoid(0);
			p->InternalFinalConstructAddRef();
			hRes = p->FinalConstruct();
			p->InternalFinalConstructRelease();
			if (hRes != ((HRESULT)0x00000000L))
			{
				delete p;
				p = 0;
			}
		}
		*pp = p;
		return hRes;
	}

	CComContainedObject<contained> m_contained;
};

template <class Base>
class CComTearOffObject : public Base
{
public:
	CComTearOffObject(void* pv)
	{
		((void)0);
		m_pOwner = reinterpret_cast<CComObject<Base::_OwnerClass>*>(pv);
		m_pOwner->AddRef();
	}
	
	~CComTearOffObject()
	{
		m_dwRef = 1L;
		FinalRelease();



		m_pOwner->Release();
	}

	virtual ULONG __stdcall AddRef() {return InternalAddRef();}
	virtual ULONG __stdcall Release()
	{
		ULONG l = InternalRelease();
		if (l == 0)
			delete this;
		return l;
	}
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{
		return m_pOwner->QueryInterface(iid, ppvObject);
	}
};

template <class contained>
class CComCachedTearOffObject :
	public IUnknown,
	public CComObjectRootEx<contained::_ThreadModel::ThreadModelNoCS>
{
public:
	typedef contained _BaseClass;
	CComCachedTearOffObject(void* pv) :
		m_contained(((contained::_OwnerClass*)pv)->GetControllingUnknown())
	{
		((void)0);
		m_contained.m_pOwner = reinterpret_cast<CComObject<contained::_OwnerClass>*>(pv);
	}
	
	
	HRESULT FinalConstruct()
	{
		CComObjectRootEx<contained::_ThreadModel::ThreadModelNoCS>::FinalConstruct();
		return m_contained.FinalConstruct();
	}
	void FinalRelease()
	{
		CComObjectRootEx<contained::_ThreadModel::ThreadModelNoCS>::FinalRelease();
		m_contained.FinalRelease();
	}
	
	~CComCachedTearOffObject()
	{
		m_dwRef = 1L;
		FinalRelease();



	}


	virtual ULONG __stdcall AddRef() {return InternalAddRef();}
	virtual ULONG __stdcall Release()
	{
		ULONG l = InternalRelease();
		if (l == 0)
			delete this;
		return l;
	}
	virtual HRESULT __stdcall QueryInterface(const IID & iid, void ** ppvObject)
	{
		HRESULT hRes = ((HRESULT)0x00000000L);
		if (InlineIsEqualUnknown(iid))
		{
			if (ppvObject == 0)
				return ((HRESULT)0x80004003L);
			*ppvObject = (void*)(IUnknown*)this;
			AddRef();



		}
		else
			hRes = m_contained._InternalQueryInterface(iid, ppvObject);
		return hRes;
	}
	CComContainedObject<contained> m_contained;
};

class CComClassFactory :
	public IClassFactory,
	public CComObjectRootEx<CComGlobalsThreadModel>
{
public:
	public: typedef CComClassFactory _ComMapClass; static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw) { _ComMapClass* p = (_ComMapClass*)pv; p->Lock(); HRESULT hRes = CComObjectRootBase::_Cache(pv, iid, ppvObject, dw); p->Unlock(); return hRes; } IUnknown* _GetRawUnknown() { ((void)0); return (IUnknown*)((int)this+_GetEntries()->dw); } IUnknown* GetUnknown() {return _GetRawUnknown();} HRESULT _InternalQueryInterface(const IID & iid, void** ppvObject) { return InternalQueryInterface(this, _GetEntries(), iid, ppvObject); } const static _ATL_INTMAP_ENTRY* __stdcall _GetEntries() { static const _ATL_INTMAP_ENTRY _entries[] = { 
		{&__uuidof(IClassFactory), ((DWORD)(static_cast<IClassFactory*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{0, 0, 0}}; return _entries;} virtual ULONG __stdcall AddRef( void) = 0; virtual ULONG __stdcall Release( void) = 0; virtual HRESULT __stdcall QueryInterface(const IID &, void**) = 0;

	
	virtual HRESULT __stdcall CreateInstance(LPUNKNOWN pUnkOuter, const IID & riid, void** ppvObj)
	{
		((void)0);
		HRESULT hRes = ((HRESULT)0x80004003L);
		if (ppvObj != 0)
		{
			*ppvObj = 0;
			
			
			if ((pUnkOuter != 0) && !InlineIsEqualUnknown(riid))
			{
				1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "CComClassFactory: asked for non IUnknown interface while creating an aggregated object");
				hRes = ((HRESULT)0x80040110L);
			}
			else
				hRes = m_pfnCreateInstance(pUnkOuter, riid, ppvObj);
		}
		return hRes;
	}

	virtual HRESULT __stdcall LockServer(BOOL fLock)
	{
		if (fLock)
			_Module.Lock();
		else
			_Module.Unlock();
		return ((HRESULT)0x00000000L);
	}
	
	void SetVoid(void* pv)
	{
		m_pfnCreateInstance = (_ATL_CREATORFUNC*)pv;
	}
	_ATL_CREATORFUNC* m_pfnCreateInstance;
};

template <class license>
class CComClassFactory2 : 
	public IClassFactory2,
	public CComObjectRootEx<CComGlobalsThreadModel>,
	public license
{
public:
	typedef license _LicenseClass;
	typedef CComClassFactory2<license> _ComMapClass;
public: typedef CComClassFactory2<license> _ComMapClass; static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw) { _ComMapClass* p = (_ComMapClass*)pv; p->Lock(); HRESULT hRes = CComObjectRootBase::_Cache(pv, iid, ppvObject, dw); p->Unlock(); return hRes; } IUnknown* _GetRawUnknown() { ((void)0); return (IUnknown*)((int)this+_GetEntries()->dw); } IUnknown* GetUnknown() {return _GetRawUnknown();} HRESULT _InternalQueryInterface(const IID & iid, void** ppvObject) { return InternalQueryInterface(this, _GetEntries(), iid, ppvObject); } const static _ATL_INTMAP_ENTRY* __stdcall _GetEntries() { static const _ATL_INTMAP_ENTRY _entries[] = { 
	{&__uuidof(IClassFactory), ((DWORD)(static_cast<IClassFactory*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IClassFactory2), ((DWORD)(static_cast<IClassFactory2*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
{0, 0, 0}}; return _entries;} virtual ULONG __stdcall AddRef( void) = 0; virtual ULONG __stdcall Release( void) = 0; virtual HRESULT __stdcall QueryInterface(const IID &, void**) = 0;
	
	virtual HRESULT __stdcall LockServer(BOOL fLock)
	{
		if (fLock)
			_Module.Lock();
		else
			_Module.Unlock();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall CreateInstance(LPUNKNOWN pUnkOuter,
		const IID & riid, void** ppvObj)
	{
		((void)0);
		if (ppvObj == 0)
			return ((HRESULT)0x80004003L);
		*ppvObj = 0;
		if (!IsLicenseValid())
			return ((HRESULT)0x80040112L);

		if ((pUnkOuter != 0) && !InlineIsEqualUnknown(riid))
			return ((HRESULT)0x80040110L);
		else
			return m_pfnCreateInstance(pUnkOuter, riid, ppvObj);
	}
	
	virtual HRESULT __stdcall CreateInstanceLic(IUnknown* pUnkOuter, IUnknown* pUnkReserved,
				const IID & riid, BSTR bstrKey, void** ppvObject)
	{
		((void)0);
		if (ppvObject == 0)
			return ((HRESULT)0x80004003L);
		*ppvObject = 0;
		if ( ((bstrKey != 0) && !VerifyLicenseKey(bstrKey)) ||
			 ((bstrKey == 0) && !IsLicenseValid()) )
			return ((HRESULT)0x80040112L);
		if ((pUnkOuter != 0) && !InlineIsEqualUnknown(riid))
			return ((HRESULT)0x80040110L);
		else
			return m_pfnCreateInstance(pUnkOuter, riid, ppvObject);
	}
	virtual HRESULT __stdcall RequestLicKey(DWORD dwReserved, BSTR* pbstrKey)
	{
		if (pbstrKey == 0)
			return ((HRESULT)0x80004003L);
		*pbstrKey = 0;

		if (!IsLicenseValid())
			return ((HRESULT)0x80040112L);
		return GetLicenseKey(dwReserved,pbstrKey) ? ((HRESULT)0x00000000L) : ((HRESULT)0x80004005L);
	}
	virtual HRESULT __stdcall GetLicInfo(LICINFO* pLicInfo)
	{
		if (pLicInfo == 0)
			return ((HRESULT)0x80004003L);
		pLicInfo->cbLicInfo = sizeof(LICINFO);
		pLicInfo->fLicVerified = IsLicenseValid();
		BSTR bstr = 0;
		pLicInfo->fRuntimeKeyAvail = GetLicenseKey(0,&bstr);
		::SysFreeString(bstr);
		return ((HRESULT)0x00000000L);
	}
	void SetVoid(void* pv)
	{
		m_pfnCreateInstance = (_ATL_CREATORFUNC*)pv;
	}
	_ATL_CREATORFUNC* m_pfnCreateInstance;
};




class CComClassFactoryAutoThread :
	public IClassFactory,
	public CComObjectRootEx<CComGlobalsThreadModel>
{
public:
	public: typedef CComClassFactoryAutoThread _ComMapClass; static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw) { _ComMapClass* p = (_ComMapClass*)pv; p->Lock(); HRESULT hRes = CComObjectRootBase::_Cache(pv, iid, ppvObject, dw); p->Unlock(); return hRes; } IUnknown* _GetRawUnknown() { ((void)0); return (IUnknown*)((int)this+_GetEntries()->dw); } IUnknown* GetUnknown() {return _GetRawUnknown();} HRESULT _InternalQueryInterface(const IID & iid, void** ppvObject) { return InternalQueryInterface(this, _GetEntries(), iid, ppvObject); } const static _ATL_INTMAP_ENTRY* __stdcall _GetEntries() { static const _ATL_INTMAP_ENTRY _entries[] = { 
		{&__uuidof(IClassFactory), ((DWORD)(static_cast<IClassFactory*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{0, 0, 0}}; return _entries;} virtual ULONG __stdcall AddRef( void) = 0; virtual ULONG __stdcall Release( void) = 0; virtual HRESULT __stdcall QueryInterface(const IID &, void**) = 0;

	
	void SetVoid(void* pv)
	{
		m_pfnCreateInstance = (_ATL_CREATORFUNC*)pv;
	}
	HRESULT __stdcall CreateInstance(LPUNKNOWN pUnkOuter,
		const IID & riid, void** ppvObj)
	{
		((void)0);
		HRESULT hRes = ((HRESULT)0x80004003L);
		if (ppvObj != 0)
		{
			*ppvObj = 0;
			
			((void)0);
			if (pUnkOuter != 0)
				hRes = ((HRESULT)0x80040110L);
			else
				hRes = _Module.CreateInstance(m_pfnCreateInstance, riid, ppvObj);
		}
		return hRes;
	}
	HRESULT __stdcall LockServer(BOOL fLock)
	{
		if (fLock)
			_Module.Lock();
		else
			_Module.Unlock();
		return ((HRESULT)0x00000000L);
	}
	_ATL_CREATORFUNC* m_pfnCreateInstance;
};



template <class T>
class CComClassFactorySingleton : public CComClassFactory
{
public:
	void FinalRelease()
	{
		CoDisconnectObject(m_Obj.GetUnknown(), 0);
	}

	
	virtual HRESULT __stdcall CreateInstance(LPUNKNOWN pUnkOuter, const IID & riid, void** ppvObj)
	{
		HRESULT hRes = ((HRESULT)0x80004003L);
		if (ppvObj != 0)
		{
			*ppvObj = 0;
			
			((void)0);
			if (pUnkOuter != 0)
				hRes = ((HRESULT)0x80040110L);
			else
			{
				if (m_Obj.m_hResFinalConstruct != ((HRESULT)0x00000000L))
					hRes = m_Obj.m_hResFinalConstruct;
				else
					hRes = m_Obj.QueryInterface(riid, ppvObj);
			}
		}
		return hRes;
	}
	CComObjectGlobal<T> m_Obj;
};

template <class T, const CLSID* pclsid = &GUID_NULL>
class CComCoClass
{
public:
	typedef CComCreator< CComObjectNoLock< CComClassFactory > > _ClassFactoryCreatorClass;
	public: typedef CComCreator2< CComCreator< CComObject< T > >, CComCreator< CComAggObject< T > > > _CreatorClass;
	typedef T _CoClass;
	static const CLSID& __stdcall GetObjectCLSID() {return *pclsid;}
	static LPCTSTR __stdcall GetObjectDescription() {return 0;}
	static const struct _ATL_CATMAP_ENTRY* GetCategoryMap() {return 0;};
	static HRESULT __stdcall Error(LPCOLESTR lpszDesc,
		const IID& iid = GUID_NULL, HRESULT hRes = 0)
	{
		return AtlReportError(GetObjectCLSID(), lpszDesc, iid, hRes);
	}
	static HRESULT __stdcall Error(LPCOLESTR lpszDesc, DWORD dwHelpID,
		LPCOLESTR lpszHelpFile, const IID& iid = GUID_NULL, HRESULT hRes = 0)
	{
		return AtlReportError(GetObjectCLSID(), lpszDesc, dwHelpID, lpszHelpFile,
			iid, hRes);
	}
	static HRESULT __stdcall Error(UINT nID, const IID& iid = GUID_NULL,
		HRESULT hRes = 0, HINSTANCE hInst = _Module.GetResourceInstance())
	{
		return AtlReportError(GetObjectCLSID(), nID, iid, hRes, hInst);
	}
	static HRESULT __stdcall Error(UINT nID, DWORD dwHelpID,
		LPCOLESTR lpszHelpFile, const IID& iid = GUID_NULL,
		HRESULT hRes = 0, HINSTANCE hInst = _Module.GetResourceInstance())
	{
		return AtlReportError(GetObjectCLSID(), nID, dwHelpID, lpszHelpFile,
			iid, hRes, hInst);
	}

	static HRESULT __stdcall Error(LPCSTR lpszDesc,
		const IID& iid = GUID_NULL, HRESULT hRes = 0)
	{
		return AtlReportError(GetObjectCLSID(), lpszDesc, iid, hRes);
	}
	static HRESULT __stdcall Error(LPCSTR lpszDesc, DWORD dwHelpID,
		LPCSTR lpszHelpFile, const IID& iid = GUID_NULL, HRESULT hRes = 0)
	{
		return AtlReportError(GetObjectCLSID(), lpszDesc, dwHelpID,
			lpszHelpFile, iid, hRes);
	}
#line 3165 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"
	template <class Q>
	static HRESULT CreateInstance(IUnknown* punkOuter, Q** pp)
	{
		return T::_CreatorClass::CreateInstance(punkOuter, __uuidof(Q), (void**) pp);
	}
	template <class Q>
	static HRESULT CreateInstance(Q** pp)
	{
		return T::_CreatorClass::CreateInstance(0, __uuidof(Q), (void**) pp);
	}
};



class CComTypeInfoHolder
{

public:
	const GUID* m_pguid;
	const GUID* m_plibid;
	WORD m_wMajor;
	WORD m_wMinor;

	ITypeInfo* m_pInfo;
	long m_dwRef;
	struct stringdispid
	{
		CComBSTR bstr;
		int nLen;
		DISPID id;
	};
	stringdispid* m_pMap;
	int m_nCount;

public:
	HRESULT GetTI(LCID lcid, ITypeInfo** ppInfo)
	{
		HRESULT hr = ((HRESULT)0x00000000L);
		if (m_pInfo == 0)
			hr = GetTI(lcid);
		*ppInfo = m_pInfo;
		if (m_pInfo != 0)
		{
			m_pInfo->AddRef();
			hr = ((HRESULT)0x00000000L);
		}
		return hr;
	}
	HRESULT GetTI(LCID lcid);
	HRESULT EnsureTI(LCID lcid)
	{
		HRESULT hr = ((HRESULT)0x00000000L);
		if (m_pInfo == 0)
			hr = GetTI(lcid);
		return hr;
	}

	
	
	static void __stdcall Cleanup(DWORD dw)
	{
		CComTypeInfoHolder* p = (CComTypeInfoHolder*) dw;
		if (p->m_pInfo != 0)
			p->m_pInfo->Release();
		p->m_pInfo = 0;
		delete [] p->m_pMap;
		p->m_pMap = 0;
	}

	HRESULT GetTypeInfo(UINT , LCID lcid, ITypeInfo** pptinfo)
	{
		HRESULT hRes = ((HRESULT)0x80004003L);
		if (pptinfo != 0)
			hRes = GetTI(lcid, pptinfo);
		return hRes;
	}
	HRESULT GetIDsOfNames(const IID & , LPOLESTR* rgszNames, UINT cNames,
		LCID lcid, DISPID* rgdispid)
	{
		HRESULT hRes = EnsureTI(lcid);
		if (m_pInfo != 0)
		{
			for (int i=0; i<(int)cNames; i++)
			{
				int n = ocslen(rgszNames[i]);
				for (int j=m_nCount-1; j>=0; j--)
				{
					if ((n == m_pMap[j].nLen) &&
						(memcmp(m_pMap[j].bstr, rgszNames[i], m_pMap[j].nLen * sizeof(OLECHAR)) == 0))
					{
						rgdispid[i] = m_pMap[j].id;
						break;
					}
				}
				if (j < 0)
				{
					hRes = m_pInfo->GetIDsOfNames(rgszNames, cNames, rgdispid);
					if (((HRESULT)(hRes)<0))
						break;
				}
			}
		}
		return hRes;
	}

	HRESULT Invoke(IDispatch* p, DISPID dispidMember, const IID & ,
		LCID lcid, WORD wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult,
		EXCEPINFO* pexcepinfo, UINT* puArgErr)
	{
		HRESULT hRes = EnsureTI(lcid);
		if (m_pInfo != 0)
			hRes = m_pInfo->Invoke(p, dispidMember, wFlags, pdispparams, pvarResult, pexcepinfo, puArgErr);
		return hRes;
	}
	HRESULT LoadNameCache(ITypeInfo* pTypeInfo)
	{
		TYPEATTR* pta;
		HRESULT hr = pTypeInfo->GetTypeAttr(&pta);
		if (((HRESULT)(hr) >= 0))
		{
			m_nCount = pta->cFuncs;
			m_pMap = m_nCount == 0 ? 0 : new stringdispid[m_nCount];
			for (int i=0; i<m_nCount; i++)
			{
				FUNCDESC* pfd;
				if (((HRESULT)(pTypeInfo->GetFuncDesc(i, &pfd)) >= 0))
				{
					CComBSTR bstrName;
					if (((HRESULT)(pTypeInfo->GetDocumentation(pfd->memid, &bstrName, 0, 0, 0)) >= 0))
					{
						m_pMap[i].bstr.Attach(bstrName.Detach());
						m_pMap[i].nLen = SysStringLen(m_pMap[i].bstr);
						m_pMap[i].id = pfd->memid;
					}
					pTypeInfo->ReleaseFuncDesc(pfd);
				}
			}
			pTypeInfo->ReleaseTypeAttr(pta);
		}
		return ((HRESULT)0x00000000L);
	}
};


inline HRESULT CComTypeInfoHolder::GetTI(LCID lcid)
{
	
	((void)0);
	((void)0);

	if (m_pInfo != 0)
		return ((HRESULT)0x00000000L);
	HRESULT hRes = ((HRESULT)0x80004005L);
	EnterCriticalSection(&_Module.m_csTypeInfoHolder);
	if (m_pInfo == 0)
	{
		ITypeLib* pTypeLib;
		hRes = LoadRegTypeLib(*m_plibid, m_wMajor, m_wMinor, lcid, &pTypeLib);
		if (((HRESULT)(hRes) >= 0))
		{
			CComPtr<ITypeInfo> spTypeInfo;
			hRes = pTypeLib->GetTypeInfoOfGuid(*m_pguid, &spTypeInfo);
			if (((HRESULT)(hRes) >= 0))
			{
				CComPtr<ITypeInfo> spInfo(spTypeInfo);
				CComPtr<ITypeInfo2> spTypeInfo2;
				if (((HRESULT)(spTypeInfo->QueryInterface(&spTypeInfo2)) >= 0))
					spInfo = spTypeInfo2;

				LoadNameCache(spInfo);
				m_pInfo = spInfo.Detach();
			}
			pTypeLib->Release();
		}
	}
	LeaveCriticalSection(&_Module.m_csTypeInfoHolder);
	_Module.AddTermFunc(Cleanup, (DWORD)this);
	return hRes;
}




template <class T>
class __declspec(novtable) IObjectWithSiteImpl : public IObjectWithSite
{
public:
	virtual HRESULT __stdcall SetSite(IUnknown *pUnkSite)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IObjectWithSiteImpl::SetSite\n");
		T* pT = static_cast<T*>(this);
		pT->m_spUnkSite = pUnkSite;
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall GetSite(const IID & riid, void **ppvSite)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IObjectWithSiteImpl::GetSite\n");
		T* pT = static_cast<T*>(this);
		((void)0);
		HRESULT hRes = ((HRESULT)0x80004003L);
		if (ppvSite != 0)
		{
			if (pT->m_spUnkSite)
				hRes = pT->m_spUnkSite->QueryInterface(riid, ppvSite);
			else
			{
				*ppvSite = 0;
				hRes = ((HRESULT)0x80004005L);
			}
		}
		return hRes;
	}

	HRESULT SetChildSite(IUnknown* punkChild)
	{
		if (punkChild == 0)
			return ((HRESULT)0x80004003L);

		HRESULT hr;
		CComPtr<IObjectWithSite> spChildSite;
		hr = punkChild->QueryInterface(IID_IObjectWithSite, (void**)&spChildSite);
		if (((HRESULT)(hr) >= 0))
			hr = spChildSite->SetSite((IUnknown*)this);

		return hr;
	}

	static HRESULT SetChildSite(IUnknown* punkChild, IUnknown* punkParent)
	{
		return AtlSetChildSite(punkChild, punkParent);
	}

	CComPtr<IUnknown> m_spUnkSite;
};




template <class T>
class __declspec(novtable) IServiceProviderImpl : public IServiceProvider
{
public:
	virtual HRESULT __stdcall QueryService(const GUID & guidService, const IID & riid, void** ppvObject)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "IServiceProviderImpl::QueryService\n");
		T* pT = static_cast<T*>(this);
		return pT->_InternalQueryService(guidService, riid, ppvObject);
	}
};

























inline HRESULT __stdcall AtlGetObjectSourceInterface(IUnknown* punkObj, GUID* plibid, IID* piid, unsigned short* pdwMajor, unsigned short* pdwMinor)
{
	HRESULT hr = ((HRESULT)0x80004005L);
	if (punkObj != 0)
	{
		CComPtr<IDispatch> spDispatch;
		hr = punkObj->QueryInterface(IID_IDispatch, (void**)&spDispatch);
		if (((HRESULT)(hr) >= 0))
		{
			CComPtr<ITypeInfo> spTypeInfo;
			hr = spDispatch->GetTypeInfo(0, 0, &spTypeInfo);
			if (((HRESULT)(hr) >= 0))
			{
				CComPtr<ITypeLib> spTypeLib;
				hr = spTypeInfo->GetContainingTypeLib(&spTypeLib, 0);
				if (((HRESULT)(hr) >= 0))
				{
					TLIBATTR* plibAttr;
					hr = spTypeLib->GetLibAttr(&plibAttr);
					if (((HRESULT)(hr) >= 0))
					{
						memcpy(plibid, &plibAttr->guid, sizeof(GUID));
						*pdwMajor = plibAttr->wMajorVerNum;
						*pdwMinor = plibAttr->wMinorVerNum;
						spTypeLib->ReleaseTLibAttr(plibAttr);
						
						
						CComPtr<IProvideClassInfo2> spInfo;
						hr = punkObj->QueryInterface(IID_IProvideClassInfo2, (void**)&spInfo);
						if (((HRESULT)(hr) >= 0) && spInfo != 0)
							hr = spInfo->GetGUID(GUIDKIND_DEFAULT_SOURCE_DISP_IID, piid);
						else
						{
							
							CComPtr<ITypeInfo> spInfoCoClass;
							
							
							CComPtr<IPersist> spPersist;
							CLSID clsid;
							hr = punkObj->QueryInterface(IID_IPersist, (void**)&spPersist);
							if (((HRESULT)(hr) >= 0))
							{
								hr = spPersist->GetClassID(&clsid);
								if (((HRESULT)(hr) >= 0))
								{
									hr = spTypeLib->GetTypeInfoOfGuid(clsid, &spInfoCoClass);
									if (((HRESULT)(hr) >= 0))
									{
										TYPEATTR* pAttr=0;
										spInfoCoClass->GetTypeAttr(&pAttr);
										if (pAttr != 0)
										{
											HREFTYPE hRef;
											for (int i = 0; i < pAttr->cImplTypes; i++)
											{
												int nType;
												hr = spInfoCoClass->GetImplTypeFlags(i, &nType);
												if (((HRESULT)(hr) >= 0))
												{
													if (nType == (( 0x1 ) | ( 0x2 )))
													{
														
														hr = spInfoCoClass->GetRefTypeOfImplType(i, &hRef);
														if (((HRESULT)(hr) >= 0))
														{
															CComPtr<ITypeInfo> spInfo;
															hr = spInfoCoClass->GetRefTypeInfo(hRef, &spInfo);
															if (((HRESULT)(hr) >= 0))
															{
																TYPEATTR* pAttrIF;
																spInfo->GetTypeAttr(&pAttrIF);
																if (pAttrIF != 0)
																{
																	memcpy(piid, &pAttrIF->guid, sizeof(GUID));
																}
																spInfo->ReleaseTypeAttr(pAttrIF);
															}
														}
														break;
													}
												}
											}
											spInfoCoClass->ReleaseTypeAttr(pAttr);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return hr;
}
#line 3535 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"




































#line 3572 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"
	#pragma pack(push,1)
	template <class T>
	class CComStdCallThunk
	{
	public:
		typedef void (__stdcall T::*TMFP)();

		void* pVtable;
		void* pFunc;
		DWORD	m_mov;          
		DWORD   m_this;         
		BYTE    m_jmp;          
		DWORD   m_relproc;      
		void Init(TMFP dw, void* pThis)
		{
			union {
				DWORD dwFunc;
				TMFP pfn;
			} pfn;
			pfn.pfn = dw;
			pVtable = &pFunc;
			pFunc = &m_mov;
			m_mov = 0x042444C7;
			m_this = (DWORD)pThis;
			m_jmp = 0xE9;
			m_relproc = (int)pfn.dwFunc - ((int)this+sizeof(CComStdCallThunk));
			FlushInstructionCache(GetCurrentProcess(), this, sizeof(CComStdCallThunk));
		}
	};
	#pragma pack(pop)


#line 3605 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"



#line 3609 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"

struct _ATL_FUNC_INFO
{
	CALLCONV cc;
	VARTYPE vtReturn;
	SHORT nParams;
	VARTYPE pVarTypes[8];
};

class __declspec(novtable) _IDispEvent
{
public:
	_IDispEvent() {m_dwEventCookie = 0xFEFEFEFE;}
	
	virtual HRESULT __stdcall _LocDEQueryInterface(const IID & riid, void ** ppvObject) = 0;
	virtual ULONG __stdcall AddRef(void) = 0;
	virtual ULONG __stdcall Release(void) = 0;
	GUID m_libid; 
	IID m_iid; 
    unsigned short m_wMajorVerNum;    
    unsigned short m_wMinorVerNum;    
	DWORD m_dwEventCookie;
	HRESULT DispEventAdvise(IUnknown* pUnk, const IID* piid)
	{
		((void)0);
		return AtlAdvise(pUnk, (IUnknown*)this, *piid, &m_dwEventCookie);
	}
	HRESULT DispEventUnadvise(IUnknown* pUnk, const IID* piid)
	{
		HRESULT hr = AtlUnadvise(pUnk, *piid, m_dwEventCookie);
		m_dwEventCookie = 0xFEFEFEFE;
		return hr;
	}
};

template <UINT nID, const IID* piid>
class __declspec(novtable) _IDispEventLocator : public _IDispEvent
{
public:
};

template <UINT nID, class T, const IID* pdiid>
class __declspec(novtable) IDispEventSimpleImpl : public _IDispEventLocator<nID, pdiid>
{
public:
	virtual HRESULT __stdcall _LocDEQueryInterface(const IID & riid, void ** ppvObject)
	{
		if (InlineIsEqualGUID(riid, *pdiid) || 
			InlineIsEqualUnknown(riid) ||
			InlineIsEqualGUID(riid, IID_IDispatch) ||
			InlineIsEqualGUID(riid, m_iid))
		{
			if (ppvObject == 0)
				return ((HRESULT)0x80004003L);
			*ppvObject = this;
			AddRef();



			return ((HRESULT)0x00000000L);
		}
		else
			return ((HRESULT)0x80004002L);
	}

	
	virtual ULONG __stdcall AddRef()
	{
		return 1;
	}
	virtual ULONG __stdcall Release()
	{
		return 1;
	}

	virtual HRESULT __stdcall GetTypeInfoCount(UINT* pctinfo)
	{return ((HRESULT)0x80004001L);}

	virtual HRESULT __stdcall GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo** pptinfo)
	{return ((HRESULT)0x80004001L);}

	virtual HRESULT __stdcall GetIDsOfNames(const IID & riid, LPOLESTR* rgszNames, UINT cNames,
		LCID lcid, DISPID* rgdispid)
	{return ((HRESULT)0x80004001L);}

	virtual HRESULT __stdcall Invoke(DISPID dispidMember, const IID & riid,
		LCID lcid, WORD , DISPPARAMS* pdispparams, VARIANT* pvarResult,
		EXCEPINFO* , UINT* )
	{
		T* pT = static_cast<T*>(this);
		const _ATL_EVENT_ENTRY<T>* pMap = T::_GetSinkMap();
		const _ATL_EVENT_ENTRY<T>* pFound = 0;
		void (__stdcall T::*pEvent)() = 0;
		while (pMap->piid != 0)
		{
			if ((pMap->nControlID == nID) && (pMap->dispid == dispidMember) && 
				(pMap->piid == pdiid)) 
			{
				pFound = pMap;
				break;
			}
			pMap++;
		}
		if (pFound == 0)
			return ((HRESULT)0x00000000L);
		

		_ATL_FUNC_INFO info;
		_ATL_FUNC_INFO* pInfo;
		if (pFound->pInfo != 0)
			pInfo = pFound->pInfo;
		else
		{
			pInfo = &info;
			HRESULT hr = GetFuncInfoFromId(*pdiid, dispidMember, lcid, info);
			if (((HRESULT)(hr)<0))
				return ((HRESULT)0x00000000L);
		}
		InvokeFromFuncInfo(pFound->pfn, *pInfo, pdispparams, pvarResult);
		return ((HRESULT)0x00000000L);
	}

	
	HRESULT InvokeFromFuncInfo(void (__stdcall T::*pEvent)(), _ATL_FUNC_INFO& info, DISPPARAMS* pdispparams, VARIANT* pvarResult)
	{
		T* pT = static_cast<T*>(this);
		VARIANTARG** pVarArgs = info.nParams ? (VARIANTARG**)_alloca(sizeof(VARIANTARG*)*info.nParams) : 0;
		for (int i=0; i<info.nParams; i++)
			pVarArgs[i] = &pdispparams->rgvarg[info.nParams - i - 1];

		CComStdCallThunk<T> thunk;
		thunk.Init(pEvent, pT);
		CComVariant tmpResult;
		if (pvarResult == 0)
			pvarResult = &tmpResult;

		HRESULT hr = DispCallFunc(
			&thunk,
			0,
			info.cc,
			info.vtReturn,
			info.nParams,
			info.pVarTypes,
			pVarArgs,
			pvarResult);
		((void)0);
		return hr;
	}

	
	virtual HRESULT GetFuncInfoFromId(const IID& iid, DISPID dispidMember, LCID lcid, _ATL_FUNC_INFO& info)
	{
		return ((HRESULT)0x80004001L);
	}
	
	HRESULT DispEventAdvise(IUnknown* pUnk, const IID* piid)
	{
		((void)0);
		return AtlAdvise(pUnk, (IUnknown*)this, *piid, &m_dwEventCookie);
	}
	HRESULT DispEventUnadvise(IUnknown* pUnk, const IID* piid)
	{
		HRESULT hr = AtlUnadvise(pUnk, *piid, m_dwEventCookie);
		m_dwEventCookie = 0xFEFEFEFE;
		return hr;
	}
	HRESULT DispEventAdvise(IUnknown* pUnk)
	{
		return _IDispEvent::DispEventAdvise(pUnk, pdiid);
	}
	HRESULT DispEventUnadvise(IUnknown* pUnk)
	{
		return _IDispEvent::DispEventUnadvise(pUnk, pdiid);
	}
};


template <class T>
inline HRESULT AtlAdviseSinkMap(T* pT, bool bAdvise)
{
	((void)0);
	const _ATL_EVENT_ENTRY<T>* pEntries = T::_GetSinkMap();
	if (pEntries == 0)
		return ((HRESULT)0x00000000L);
	HRESULT hr = ((HRESULT)0x00000000L);
	while (pEntries->piid != 0)
	{
		_IDispEvent* pDE = (_IDispEvent*)((DWORD)pT+pEntries->nOffset);
		bool bNotAdvised = pDE->m_dwEventCookie == 0xFEFEFEFE;
		if (bAdvise ^ bNotAdvised)
		{
			pEntries++;
			continue;
		}
		hr = ((HRESULT)0x80004005L);
		HWND h = pT->GetDlgItem(pEntries->nControlID);
		((void)0);
		if (h != 0)
		{
			CComPtr<IUnknown> spUnk;
			AtlAxGetControl(h, &spUnk);
			((void)0);
			if (spUnk != 0)
			{
				if (bAdvise)
				{
					if (!InlineIsEqualGUID(GUID_NULL, *pEntries->piid))
						hr = pDE->DispEventAdvise(spUnk, pEntries->piid);
					else
					{
						AtlGetObjectSourceInterface(spUnk, &pDE->m_libid, &pDE->m_iid, &pDE->m_wMajorVerNum, &pDE->m_wMinorVerNum);
						hr = pDE->DispEventAdvise(spUnk, &pDE->m_iid);
					}
				}
				else
				{
					if (!InlineIsEqualGUID(GUID_NULL, *pEntries->piid))
						hr = pDE->DispEventUnadvise(spUnk, pEntries->piid);
					else
						hr = pDE->DispEventUnadvise(spUnk, &pDE->m_iid);
				}
				((void)0);
			}
		}
		if (((HRESULT)(hr)<0))
			break;
		pEntries++;
	}
	return hr;
}

template <UINT nID, class T, const IID* pdiid = &GUID_NULL, const GUID* plibid = &GUID_NULL, 
	WORD wMajor = 0, WORD wMinor = 0, class tihclass = CComTypeInfoHolder>
class __declspec(novtable) IDispEventImpl : public IDispEventSimpleImpl<nID, T, pdiid>
{
public:
	typedef tihclass _tihclass;

	IDispEventImpl()
	{
		m_libid = *plibid;
		m_iid = *pdiid;
		m_wMajorVerNum = wMajor;
		m_wMinorVerNum = wMinor;
	}

	virtual HRESULT __stdcall GetTypeInfoCount(UINT* pctinfo)
	{*pctinfo = 1; return ((HRESULT)0x00000000L);}

	virtual HRESULT __stdcall GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo** pptinfo)
	{return _tih.GetTypeInfo(itinfo, lcid, pptinfo);}

	virtual HRESULT __stdcall GetIDsOfNames(const IID & riid, LPOLESTR* rgszNames, UINT cNames,
		LCID lcid, DISPID* rgdispid)
	{return _tih.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);}

	
	HRESULT GetFuncInfoFromId(const IID& , DISPID dispidMember, LCID lcid, _ATL_FUNC_INFO& info)
	{
		CComPtr<ITypeInfo> spTypeInfo;
		if (InlineIsEqualGUID(*_tih.m_plibid, GUID_NULL))
		{
			_tih.m_plibid = &m_libid;
			_tih.m_pguid = &m_iid;
			_tih.m_wMajor = m_wMajorVerNum;
			_tih.m_wMinor = m_wMinorVerNum;
		}
		HRESULT hr = _tih.GetTI(lcid, &spTypeInfo);
		if (((HRESULT)(hr)<0))
			return hr;
		CComQIPtr<ITypeInfo2, &IID_ITypeInfo2> spTypeInfo2 = spTypeInfo;
		FUNCDESC* pFuncDesc = 0;
		if (spTypeInfo2 != 0)
		{
			UINT nIndex;
			hr = spTypeInfo2->GetFuncIndexOfMemId(dispidMember, INVOKE_FUNC, &nIndex);
			if (((HRESULT)(hr)<0))
				return hr;
			hr = spTypeInfo->GetFuncDesc(nIndex, &pFuncDesc);
			if (((HRESULT)(hr)<0))
				return hr;
		}
		else 
		{
			TYPEATTR* pAttr;
			hr = spTypeInfo->GetTypeAttr(&pAttr);
			if (((HRESULT)(hr)<0))
				return hr;
			for (int i=0;i<pAttr->cFuncs;i++)
			{
				hr = spTypeInfo->GetFuncDesc(i, &pFuncDesc);
				if (((HRESULT)(hr)<0))
					return hr;
				if (pFuncDesc->memid == dispidMember)
					break;
				spTypeInfo->ReleaseFuncDesc(pFuncDesc);
				pFuncDesc = 0;
			}
			spTypeInfo->ReleaseTypeAttr(pAttr);
			if (pFuncDesc == 0)
				return ((HRESULT)0x80004005L);
		}

		
		
		((void)0);
		if (pFuncDesc->cParams > 8)
			return ((HRESULT)0x80004005L);

		for (int i=0; i<pFuncDesc->cParams; i++)
		{
			info.pVarTypes[i] = pFuncDesc->lprgelemdescParam[pFuncDesc->cParams - i - 1].tdesc.vt;
			if (info.pVarTypes[i] == VT_PTR)
				info.pVarTypes[i] = pFuncDesc->lprgelemdescParam[pFuncDesc->cParams - i - 1].tdesc.lptdesc->vt | VT_BYREF;
			if (info.pVarTypes[i] == VT_USERDEFINED)
				info.pVarTypes[i] = GetUserDefinedType(spTypeInfo,pFuncDesc->lprgelemdescParam[pFuncDesc->cParams-i-1].tdesc.hreftype);
		}

		VARTYPE vtReturn = pFuncDesc->elemdescFunc.tdesc.vt;
		switch(vtReturn)
		{
		case VT_INT:
			vtReturn = VT_I4;
			break;
		case VT_UINT:
			vtReturn = VT_UI4;
			break;
		case VT_VOID:
			vtReturn = VT_EMPTY; 
			break;
		case VT_HRESULT:
			vtReturn = VT_ERROR;
			break;
		}
		info.vtReturn = vtReturn;
		info.cc = pFuncDesc->callconv;
		info.nParams = pFuncDesc->cParams;
		spTypeInfo->ReleaseFuncDesc(pFuncDesc);
		return ((HRESULT)0x00000000L);
	}
	VARTYPE GetUserDefinedType(ITypeInfo *pTI, HREFTYPE hrt)
	{
		CComPtr<ITypeInfo> spTypeInfo;
		VARTYPE vt = VT_USERDEFINED;
		HRESULT hr = ((HRESULT)0x80004005L);
		hr = pTI->GetRefTypeInfo(hrt, &spTypeInfo);
		if(((HRESULT)(hr)<0))
			return vt;
		TYPEATTR *pta=0;

		spTypeInfo->GetTypeAttr(&pta);
		if(pta && pta->typekind == TKIND_ALIAS)
		{
			if (pta->tdescAlias.vt == VT_USERDEFINED)
				GetUserDefinedType(spTypeInfo,pta->tdescAlias.hreftype);
			else
				vt = pta->tdescAlias.vt;
		}
	
		if(pta)
			spTypeInfo->ReleaseTypeAttr(pta);
		return vt;

	}
protected:
	static _tihclass _tih;
	static HRESULT GetTI(LCID lcid, ITypeInfo** ppInfo)
	{return _tih.GetTI(lcid, ppInfo);}
};


template <UINT nID, class T, const IID* piid, const GUID* plibid, WORD wMajor, WORD wMinor, class tihclass>
IDispEventImpl<nID, T, piid, plibid, wMajor, wMinor, tihclass>::_tihclass
IDispEventImpl<nID, T, piid, plibid, wMajor, wMinor, tihclass>::_tih =
	{piid, plibid, wMajor, wMinor, 0, 0, 0, 0};

template <class T>
struct _ATL_EVENT_ENTRY
{
	UINT nControlID;			
	const IID* piid;			
	int nOffset;				
	DISPID dispid;				
	void (__stdcall T::*pfn)();	
	_ATL_FUNC_INFO* pInfo;
};



















template <class T, const IID* piid, const GUID* plibid = &CComModule::m_libid, WORD wMajor = 1,
WORD wMinor = 0, class tihclass = CComTypeInfoHolder>
class __declspec(novtable) IDispatchImpl : public T
{
public:
	typedef tihclass _tihclass;

	virtual HRESULT __stdcall GetTypeInfoCount(UINT* pctinfo)
	{
		*pctinfo = 1;
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo** pptinfo)
	{
		return _tih.GetTypeInfo(itinfo, lcid, pptinfo);
	}
	virtual HRESULT __stdcall GetIDsOfNames(const IID & riid, LPOLESTR* rgszNames, UINT cNames,
		LCID lcid, DISPID* rgdispid)
	{
		return _tih.GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
	}
	virtual HRESULT __stdcall Invoke(DISPID dispidMember, const IID & riid,
		LCID lcid, WORD wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult,
		EXCEPINFO* pexcepinfo, UINT* puArgErr)
	{
		return _tih.Invoke((IDispatch*)this, dispidMember, riid, lcid,
		wFlags, pdispparams, pvarResult, pexcepinfo, puArgErr);
	}
protected:
	static _tihclass _tih;
	static HRESULT GetTI(LCID lcid, ITypeInfo** ppInfo)
	{
		return _tih.GetTI(lcid, ppInfo);
	}
};

template <class T, const IID* piid, const GUID* plibid, WORD wMajor, WORD wMinor, class tihclass>
IDispatchImpl<T, piid, plibid, wMajor, wMinor, tihclass>::_tihclass
IDispatchImpl<T, piid, plibid, wMajor, wMinor, tihclass>::_tih =
{piid, plibid, wMajor, wMinor, 0, 0, 0, 0};




template <const CLSID* pcoclsid, const GUID* plibid = &CComModule::m_libid,
WORD wMajor = 1, WORD wMinor = 0, class tihclass = CComTypeInfoHolder>
class __declspec(novtable) IProvideClassInfoImpl : public IProvideClassInfo
{
public:
	typedef tihclass _tihclass;

	virtual HRESULT __stdcall GetClassInfoA(ITypeInfo** pptinfo)
	{
		return _tih.GetTypeInfo(0, 0x00, pptinfo);
	}

protected:
	static _tihclass _tih;
};

template <const CLSID* pcoclsid, const GUID* plibid, WORD wMajor, WORD wMinor, class tihclass>
IProvideClassInfoImpl<pcoclsid, plibid, wMajor, wMinor, tihclass>::_tihclass
IProvideClassInfoImpl<pcoclsid, plibid, wMajor, wMinor, tihclass>::_tih =
{pcoclsid,plibid, wMajor, wMinor, 0, 0, 0, 0};



template <const CLSID* pcoclsid, const IID* psrcid, const GUID* plibid = &CComModule::m_libid,
WORD wMajor = 1, WORD wMinor = 0, class tihclass = CComTypeInfoHolder>
class __declspec(novtable) IProvideClassInfo2Impl : public IProvideClassInfo2
{
public:
	typedef tihclass _tihclass;

	virtual HRESULT __stdcall GetClassInfoA(ITypeInfo** pptinfo)
	{
		return _tih.GetTypeInfo(0, 0x00, pptinfo);
	}
	virtual HRESULT __stdcall GetGUID(DWORD dwGuidKind, GUID* pGUID)
	{
		if (pGUID == 0)
			return ((HRESULT)0x80004003L);

		if (dwGuidKind == GUIDKIND_DEFAULT_SOURCE_DISP_IID && psrcid)
		{
			*pGUID = *psrcid;
			return ((HRESULT)0x00000000L);
		}
		*pGUID = GUID_NULL;
		return ((HRESULT)0x80004005L);
	}

protected:
	static _tihclass _tih;
};


template <const CLSID* pcoclsid, const IID* psrcid, const GUID* plibid, WORD wMajor, WORD wMinor, class tihclass>
IProvideClassInfo2Impl<pcoclsid, psrcid, plibid, wMajor, wMinor, tihclass>::_tihclass
IProvideClassInfo2Impl<pcoclsid, psrcid, plibid, wMajor, wMinor, tihclass>::_tih =
{pcoclsid,plibid, wMajor, wMinor, 0, 0, 0, 0};





template <const IID* piid>
class __declspec(novtable) ISupportErrorInfoImpl : public ISupportErrorInfo
{
public:
	virtual HRESULT __stdcall InterfaceSupportsErrorInfo(const IID & riid)
	{
		return (InlineIsEqualGUID(riid,*piid)) ? ((HRESULT)0x00000000L) : ((HRESULT)0x00000001L);
	}
};









template <class T>
class _Copy
{
public:
	static HRESULT copy(T* p1, T* p2) {memcpy(p1, p2, sizeof(T)); return ((HRESULT)0x00000000L);}
	static void init(T*) {}
	static void destroy(T*) {}
};

template<>
class _Copy<VARIANT>
{
public:
	static HRESULT copy(VARIANT* p1, VARIANT* p2) {return VariantCopy(p1, p2);}
	static void init(VARIANT* p) {p->vt = VT_EMPTY;}
	static void destroy(VARIANT* p) {VariantClear(p);}
};

template<>
class _Copy<LPOLESTR>
{
public:
	static HRESULT copy(LPOLESTR* p1, LPOLESTR* p2)
	{
		HRESULT hr = ((HRESULT)0x00000000L);
		(*p1) = (LPOLESTR)CoTaskMemAlloc(sizeof(OLECHAR)*(ocslen(*p2)+1));
		if (*p1 == 0)
			hr = ((HRESULT)0x8007000EL);
		else
			ocscpy(*p1,*p2);
		return hr;
	}
	static void init(LPOLESTR* p) {*p = 0;}
	static void destroy(LPOLESTR* p) { CoTaskMemFree(*p);}
};

template<>
class _Copy<OLEVERB>
{
public:
	static HRESULT copy(OLEVERB* p1, OLEVERB* p2)
	{
		HRESULT hr = ((HRESULT)0x00000000L);
		*p1 = *p2;
		if (p2->lpszVerbName == 0)
			return ((HRESULT)0x00000000L);
		p1->lpszVerbName = (LPOLESTR)CoTaskMemAlloc(sizeof(OLECHAR)*(ocslen(p2->lpszVerbName)+1));
		if (p1->lpszVerbName == 0)
			hr = ((HRESULT)0x8007000EL);
		else
			ocscpy(p1->lpszVerbName,p2->lpszVerbName);
		return hr;
	}
	static void init(OLEVERB* p) { p->lpszVerbName = 0;}
	static void destroy(OLEVERB* p) { if (p->lpszVerbName) CoTaskMemFree(p->lpszVerbName);}
};

template<>
class _Copy<CONNECTDATA>
{
public:
	static HRESULT copy(CONNECTDATA* p1, CONNECTDATA* p2)
	{
		*p1 = *p2;
		if (p1->pUnk)
			p1->pUnk->AddRef();
		return ((HRESULT)0x00000000L);
	}
	static void init(CONNECTDATA* ) {}
	static void destroy(CONNECTDATA* p) {if (p->pUnk) p->pUnk->Release();}
};

template <class T>
class _CopyInterface
{
public:
	static HRESULT copy(T** p1, T** p2)
	{
		*p1 = *p2;
		if (*p1)
			(*p1)->AddRef();
		return ((HRESULT)0x00000000L);
	}
	static void init(T** ) {}
	static void destroy(T** p) {if (*p) (*p)->Release();}
};

template<class T>
class __declspec(novtable) CComIEnum : public IUnknown
{
public:
	virtual HRESULT __stdcall Next(ULONG celt, T* rgelt, ULONG* pceltFetched) = 0;
	virtual HRESULT __stdcall Skip(ULONG celt) = 0;
	virtual HRESULT __stdcall Reset(void) = 0;
	virtual HRESULT __stdcall Clone(CComIEnum<T>** ppEnum) = 0;
};


enum CComEnumFlags
{
	
	AtlFlagNoCopy = 0,
	AtlFlagTakeOwnership = 2,
	AtlFlagCopy = 3 
};

template <class Base, const IID* piid, class T, class Copy>
class __declspec(novtable) CComEnumImpl : public Base
{
public:
	CComEnumImpl() {m_begin = m_end = m_iter = 0; m_dwFlags = 0;}
	~CComEnumImpl();
	virtual HRESULT __stdcall Next(ULONG celt, T* rgelt, ULONG* pceltFetched);
	virtual HRESULT __stdcall Skip(ULONG celt);
	virtual HRESULT __stdcall Reset(void){m_iter = m_begin;return ((HRESULT)0x00000000L);}
	virtual HRESULT __stdcall Clone(Base** ppEnum);
	HRESULT Init(T* begin, T* end, IUnknown* pUnk,
		CComEnumFlags flags = AtlFlagNoCopy);
	CComPtr<IUnknown> m_spUnk;
	T* m_begin;
	T* m_end;
	T* m_iter;
	DWORD m_dwFlags;
protected:
	enum FlagBits
	{
		BitCopy=1,
		BitOwn=2
	};
};

template <class Base, const IID* piid, class T, class Copy>
CComEnumImpl<Base, piid, T, Copy>::~CComEnumImpl()
{
	if (m_dwFlags & BitOwn)
	{
		for (T* p = m_begin; p != m_end; p++)
			Copy::destroy(p);
		delete [] m_begin;
	}
}

template <class Base, const IID* piid, class T, class Copy>
HRESULT __stdcall CComEnumImpl<Base, piid, T, Copy>::Next(ULONG celt, T* rgelt,
	ULONG* pceltFetched)
{
	if (rgelt == 0 || (celt != 1 && pceltFetched == 0))
		return ((HRESULT)0x80004003L);
	if (m_begin == 0 || m_end == 0 || m_iter == 0)
		return ((HRESULT)0x80004005L);
	ULONG nRem = (ULONG)(m_end - m_iter);
	HRESULT hRes = ((HRESULT)0x00000000L);
	if (nRem < celt)
		hRes = ((HRESULT)0x00000001L);
	ULONG nMin = (((celt) < (nRem)) ? (celt) : (nRem));
	if (pceltFetched != 0)
		*pceltFetched = nMin;
	T* pelt = rgelt;
	while(nMin--)
	{
		HRESULT hr = Copy::copy(pelt, m_iter);
		if (((HRESULT)(hr)<0))
		{
			while (rgelt < pelt)
				Copy::destroy(rgelt++);
			if (pceltFetched != 0)
				*pceltFetched = 0;
			return hr;
		}
		pelt++;
		m_iter++;
	}
	return hRes;
}

template <class Base, const IID* piid, class T, class Copy>
HRESULT __stdcall CComEnumImpl<Base, piid, T, Copy>::Skip(ULONG celt)
{
    m_iter += celt;
    if (m_iter >= m_end)
	{
        m_iter = m_end;
        return ((HRESULT)0x00000001L);
    }
    if (m_iter < m_begin)
	{	
        m_iter = m_begin;
        return ((HRESULT)0x00000001L);
    }
    return ((HRESULT)0x00000000L);
}

template <class Base, const IID* piid, class T, class Copy>
HRESULT __stdcall CComEnumImpl<Base, piid, T, Copy>::Clone(Base** ppEnum)
{
	typedef CComObject<CComEnum<Base, piid, T, Copy> > _class;
	HRESULT hRes = ((HRESULT)0x80004003L);
	if (ppEnum != 0)
	{
		*ppEnum = 0;
		_class* p;
		hRes = _class::CreateInstance(&p);
		if (((HRESULT)(hRes) >= 0))
		{
			
			hRes = p->Init(m_begin, m_end, (m_dwFlags & BitCopy) ? this : m_spUnk);
			if (((HRESULT)(hRes) >= 0))
			{
				p->m_iter = m_iter;
				hRes = p->_InternalQueryInterface(*piid, (void**)ppEnum);
			}
			if (((HRESULT)(hRes)<0))
				delete p;
		}
	}
	return hRes;
}

template <class Base, const IID* piid, class T, class Copy>
HRESULT CComEnumImpl<Base, piid, T, Copy>::Init(T* begin, T* end, IUnknown* pUnk,
	CComEnumFlags flags)
{
	if (flags == AtlFlagCopy)
	{
		((void)0); 
		m_begin = new T[end-begin];
		m_iter = m_begin;
		if (m_begin == 0)
			return ((HRESULT)0x8007000EL);
		for (T* i=begin; i != end; i++)
		{
			Copy::init(m_iter);
			HRESULT hr = Copy::copy(m_iter, i);
			if (((HRESULT)(hr)<0))
			{
				T* p = m_begin;
				while (p < m_iter)
					Copy::destroy(p++);
				delete [] m_begin;
				m_begin = m_end = m_iter = 0;
				return hr;
			}
			m_iter++;
		}
		m_end = m_begin + (end-begin);
	}
	else
	{
		m_begin = begin;
		m_end = end;
	}
	m_spUnk = pUnk;
	m_iter = m_begin;
	m_dwFlags = flags;
	return ((HRESULT)0x00000000L);
}

template <class Base, const IID* piid, class T, class Copy, class ThreadModel = CComObjectThreadModel>
class __declspec(novtable) CComEnum :
	public CComEnumImpl<Base, piid, T, Copy>,
	public CComObjectRootEx< ThreadModel >
{
public:
	typedef CComEnum<Base, piid, T, Copy > _CComEnum;
	typedef CComEnumImpl<Base, piid, T, Copy > _CComEnumBase;
	public: typedef _CComEnum _ComMapClass; static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw) { _ComMapClass* p = (_ComMapClass*)pv; p->Lock(); HRESULT hRes = CComObjectRootBase::_Cache(pv, iid, ppvObject, dw); p->Unlock(); return hRes; } IUnknown* _GetRawUnknown() { ((void)0); return (IUnknown*)((int)this+_GetEntries()->dw); } IUnknown* GetUnknown() {return _GetRawUnknown();} HRESULT _InternalQueryInterface(const IID & iid, void** ppvObject) { return InternalQueryInterface(this, _GetEntries(), iid, ppvObject); } const static _ATL_INTMAP_ENTRY* __stdcall _GetEntries() { static const _ATL_INTMAP_ENTRY _entries[] = { 
		{&*piid, ((DWORD)(static_cast<_CComEnumBase*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{0, 0, 0}}; return _entries;} virtual ULONG __stdcall AddRef( void) = 0; virtual ULONG __stdcall Release( void) = 0; virtual HRESULT __stdcall QueryInterface(const IID &, void**) = 0;
};

template <class Base, const IID* piid, class T, class Copy, class CollType>
class __declspec(novtable) IEnumOnSTLImpl : public Base
{
public:
	HRESULT Init(IUnknown *pUnkForRelease, CollType& collection)
	{
		m_spUnk = pUnkForRelease;
		m_pcollection = &collection;
		m_iter = m_pcollection->begin();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Next(ULONG celt, T* rgelt, ULONG* pceltFetched);
	virtual HRESULT __stdcall Skip(ULONG celt);
	virtual HRESULT __stdcall Reset(void)
	{
		if (m_pcollection == 0)
			return ((HRESULT)0x80004005L);
		m_iter = m_pcollection->begin();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Clone(Base** ppEnum);

	CComPtr<IUnknown> m_spUnk;
	CollType* m_pcollection;
	CollType::iterator m_iter;
};

template <class Base, const IID* piid, class T, class Copy, class CollType>
HRESULT __stdcall IEnumOnSTLImpl<Base, piid, T, Copy, CollType>::Next(ULONG celt, T* rgelt,
	ULONG* pceltFetched)
{
	if (rgelt == 0 || (celt != 1 && pceltFetched == 0))
		return ((HRESULT)0x80004003L);
	if (m_pcollection == 0)
		return ((HRESULT)0x80004005L);

	ULONG nActual = 0;
	HRESULT hr = ((HRESULT)0x00000000L);
	T* pelt = rgelt;
	while (((HRESULT)(hr) >= 0) && m_iter != m_pcollection->end() && nActual < celt)
	{
		hr = Copy::copy(pelt, &*m_iter);
		if (((HRESULT)(hr)<0))
		{
			while (rgelt < pelt)
				Copy::destroy(rgelt++);
			nActual = 0;
		}
		else
		{
			pelt++;
			m_iter++;
			nActual++;
		}
	}
	if (pceltFetched)
		*pceltFetched = nActual;
	if (((HRESULT)(hr) >= 0) && (nActual < celt))
		hr = ((HRESULT)0x00000001L);
	return hr;
}

template <class Base, const IID* piid, class T, class Copy, class CollType>
HRESULT __stdcall IEnumOnSTLImpl<Base, piid, T, Copy, CollType>::Skip(ULONG celt)
{
	HRESULT hr = ((HRESULT)0x00000000L);
	while (celt--)
	{
		if (m_iter != m_pcollection->end())
			m_iter++;
		else
		{
			hr = ((HRESULT)0x00000001L);
			break;
		}
	}
	return hr;
}

template <class Base, const IID* piid, class T, class Copy, class CollType>
HRESULT __stdcall IEnumOnSTLImpl<Base, piid, T, Copy, CollType>::Clone(Base** ppEnum)
{
	typedef CComObject<CComEnumOnSTL<Base, piid, T, Copy, CollType> > _class;
	HRESULT hRes = ((HRESULT)0x80004003L);
	if (ppEnum != 0)
	{
		*ppEnum = 0;
		_class* p;
		hRes = _class::CreateInstance(&p);
		if (((HRESULT)(hRes) >= 0))
		{
			hRes = p->Init(m_spUnk, *m_pcollection);
			if (((HRESULT)(hRes) >= 0))
			{
				p->m_iter = m_iter;
				hRes = p->_InternalQueryInterface(*piid, (void**)ppEnum);
			}
			if (((HRESULT)(hRes)<0))
				delete p;
		}
	}
	return hRes;
}

template <class Base, const IID* piid, class T, class Copy, class CollType, class ThreadModel = CComObjectThreadModel>
class __declspec(novtable) CComEnumOnSTL :
	public IEnumOnSTLImpl<Base, piid, T, Copy, CollType>,
	public CComObjectRootEx< ThreadModel >
{
public:
	typedef CComEnumOnSTL<Base, piid, T, Copy, CollType, ThreadModel > _CComEnum;
	typedef IEnumOnSTLImpl<Base, piid, T, Copy, CollType > _CComEnumBase;
	public: typedef _CComEnum _ComMapClass; static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw) { _ComMapClass* p = (_ComMapClass*)pv; p->Lock(); HRESULT hRes = CComObjectRootBase::_Cache(pv, iid, ppvObject, dw); p->Unlock(); return hRes; } IUnknown* _GetRawUnknown() { ((void)0); return (IUnknown*)((int)this+_GetEntries()->dw); } IUnknown* GetUnknown() {return _GetRawUnknown();} HRESULT _InternalQueryInterface(const IID & iid, void** ppvObject) { return InternalQueryInterface(this, _GetEntries(), iid, ppvObject); } const static _ATL_INTMAP_ENTRY* __stdcall _GetEntries() { static const _ATL_INTMAP_ENTRY _entries[] = { 
		{&*piid, ((DWORD)(static_cast<_CComEnumBase*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{0, 0, 0}}; return _entries;} virtual ULONG __stdcall AddRef( void) = 0; virtual ULONG __stdcall Release( void) = 0; virtual HRESULT __stdcall QueryInterface(const IID &, void**) = 0;
};

template <class T, class CollType, class ItemType, class CopyItem, class EnumType>
class ICollectionOnSTLImpl : public T
{
public:
	virtual HRESULT __stdcall get_Count(long* pcount)
	{
		if (pcount == 0)
			return ((HRESULT)0x80004003L);
		*pcount = m_coll.size();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall get_Item(long Index, ItemType* pvar)
	{
		
		if (pvar == 0)
			return ((HRESULT)0x80004003L);
		HRESULT hr = ((HRESULT)0x80004005L);
		Index--;
		CollType::iterator iter = m_coll.begin();
		while (iter != m_coll.end() && Index > 0)
		{
			iter++;
			Index--;
		}
		if (iter != m_coll.end())
			hr = CopyItem::copy(pvar, &*iter);
		return hr;
	}
	virtual HRESULT __stdcall get__NewEnum(IUnknown** ppUnk)
	{
		if (ppUnk == 0)
			return ((HRESULT)0x80004003L);
		*ppUnk = 0;
		HRESULT hRes = ((HRESULT)0x00000000L);
		CComObject<EnumType>* p;
		hRes = CComObject<EnumType>::CreateInstance(&p);
		if (((HRESULT)(hRes) >= 0))
		{
			hRes = p->Init(this, m_coll);
			if (hRes == ((HRESULT)0x00000000L))
				hRes = p->QueryInterface(IID_IUnknown, (void**)ppUnk);
		}
		if (hRes != ((HRESULT)0x00000000L))
			delete p;
		return hRes;
	}
	CollType m_coll;
};



template <class T>
class __declspec(novtable) ISpecifyPropertyPagesImpl : public ISpecifyPropertyPages
{
public:
	
	
	virtual HRESULT __stdcall GetPages(CAUUID* pPages)
	{
		1 ? (void)0 : AtlTrace2(atlTraceCOM, 0, "ISpecifyPropertyPagesImpl::GetPages\n");
		ATL_PROPMAP_ENTRY* pMap = T::GetPropertyMap();
		return GetPagesHelper(pPages, pMap);
	}
protected:
	HRESULT GetPagesHelper(CAUUID* pPages, ATL_PROPMAP_ENTRY* pMap)
	{
		((void)0);
		if (pMap == 0)
			return ((HRESULT)0x80004003L);

		int nCnt = 0;
		
		for (int i = 0; pMap[i].pclsidPropPage != 0; i++)
		{
			
			if (pMap[i].vt == 0)
			{
				
				if (!InlineIsEqualGUID(*pMap[i].pclsidPropPage, GUID_NULL))
					nCnt++;
			}
		}
		pPages->pElems = (GUID*) CoTaskMemAlloc(sizeof(CLSID)*nCnt);
		if (pPages->pElems == 0)
			return ((HRESULT)0x8007000EL);
		
		nCnt = 0;
		for (i = 0; pMap[i].pclsidPropPage != 0; i++)
		{
			
			if (pMap[i].vt == 0)
			{
				
				if (!InlineIsEqualGUID(*pMap[i].pclsidPropPage, GUID_NULL))
				{
					BOOL bFound = 0;
					
					
					for (int j=0; j<nCnt; j++)
					{
						if (InlineIsEqualGUID(*(pMap[i].pclsidPropPage), pPages->pElems[j]))
						{
							
							bFound = 1;
							break;
						}
					}
					
					if (!bFound)
						pPages->pElems[nCnt++] = *pMap[i].pclsidPropPage;
				}
			}
		}
		pPages->cElems = nCnt;
		return ((HRESULT)0x00000000L);
	}

};





struct _ATL_CONNMAP_ENTRY
{
	DWORD dwOffset;
};



















#line 4672 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"

template <unsigned int nMaxSize>
class CComUnkArray
{
public:
	CComUnkArray()
	{
		memset(m_arr, 0, sizeof(IUnknown*)*nMaxSize);
	}
	DWORD Add(IUnknown* pUnk);
	BOOL Remove(DWORD dwCookie);
	static DWORD __stdcall GetCookie(IUnknown** pp)
	{
		return (DWORD)pp;
	}
	static IUnknown* __stdcall GetUnknown(DWORD dwCookie)
	{
		return dwCookie ? *(IUnknown**)dwCookie : 0;
	}
	IUnknown** begin()
	{
		return &m_arr[0];
	}
	IUnknown** end()
	{
		return &m_arr[nMaxSize];
	}
protected:
	IUnknown* m_arr[nMaxSize];
};

template <unsigned int nMaxSize>
inline DWORD CComUnkArray<nMaxSize>::Add(IUnknown* pUnk)
{
	for (IUnknown** pp = begin();pp<end();pp++)
	{
		if (*pp == 0)
		{
			*pp = pUnk;
			return (DWORD)pp; 
		}
	}
	
	((void)0);
	return 0;
}

template <unsigned int nMaxSize>
inline BOOL CComUnkArray<nMaxSize>::Remove(DWORD dwCookie)
{
	IUnknown** pp = (IUnknown**)dwCookie;
	BOOL b = ((pp >= begin()) && (pp < end()));
	if (b)
		*pp = 0;
	return b;
}

template<>
class CComUnkArray<1>
{
public:
	CComUnkArray()
	{
		m_arr[0] = 0;
	}
	DWORD Add(IUnknown* pUnk)
	{
		if (m_arr[0] != 0)
		{
			
			((void)0);
			return 0;
		}
		m_arr[0] = pUnk;
		return (DWORD)&m_arr[0];
	}
	BOOL Remove(DWORD dwCookie)
	{
		if (dwCookie != (DWORD)&m_arr[0])
			return 0;
		m_arr[0] = 0;
		return 1;
	}
	static DWORD __stdcall GetCookie(IUnknown** pp)
	{
		return (DWORD)pp;
	}
	static IUnknown* __stdcall GetUnknown(DWORD dwCookie)
	{
		return dwCookie ? *(IUnknown**)dwCookie : 0;
	}
	IUnknown** begin()
	{
		return &m_arr[0];
	}
	IUnknown** end()
	{
		return (&m_arr[0])+1;
	}
protected:
	IUnknown* m_arr[1];
};

class CComDynamicUnkArray
{
public:
	CComDynamicUnkArray()
	{
		m_nSize = 0;
		m_ppUnk = 0;
	}

	~CComDynamicUnkArray()
	{
		if (m_nSize > 1)
			free(m_ppUnk);
	}
	DWORD Add(IUnknown* pUnk);
	BOOL Remove(DWORD dwCookie);
	static DWORD __stdcall GetCookie(IUnknown** pp)
	{
		return (DWORD)*pp;
	}
	static IUnknown* __stdcall GetUnknown(DWORD dwCookie)
	{
		return (IUnknown*)dwCookie;
	}
	IUnknown** begin()
	{
		return (m_nSize < 2) ? &m_pUnk : m_ppUnk;
	}
	IUnknown** end()
	{
		return (m_nSize < 2) ? (&m_pUnk)+m_nSize : &m_ppUnk[m_nSize];
	}

	IUnknown* GetAt(int nIndex)
	{
		if (nIndex < 0 || nIndex >= m_nSize)
			return 0;

		return (m_nSize < 2) ? m_pUnk : m_ppUnk[nIndex];
	}
	int GetSize() const
	{
		return m_nSize;
	}

	void clear()
	{
		if (m_nSize > 1)
			free(m_ppUnk);
		m_nSize = 0;
	}
protected:
	union
	{
		IUnknown** m_ppUnk;
		IUnknown* m_pUnk;
	};
	int m_nSize;
};

inline DWORD CComDynamicUnkArray::Add(IUnknown* pUnk)
{
	IUnknown** pp = 0;
	if (m_nSize == 0) 
	{
		m_pUnk = pUnk;
		m_nSize = 1;
		return (DWORD)m_pUnk;
	}
	else if (m_nSize == 1)
	{
		
		pp = (IUnknown**)malloc(sizeof(IUnknown*)*4);
		if (pp == 0)
			return 0;
		memset(pp, 0, sizeof(IUnknown*)*4);
		*pp = m_pUnk;
		m_ppUnk = pp;
		m_nSize = 4;
	}
	for (pp = begin();pp<end();pp++)
	{
		if (*pp == 0)
		{
			*pp = pUnk;
			return (DWORD)pUnk;
		}
	}
	int nAlloc = m_nSize*2;
	pp = (IUnknown**)realloc(m_ppUnk, sizeof(IUnknown*)*nAlloc);
	if (pp == 0)
		return 0;
	m_ppUnk = pp;
	memset(&m_ppUnk[m_nSize], 0, sizeof(IUnknown*)*m_nSize);
	m_ppUnk[m_nSize] = pUnk;
	m_nSize = nAlloc;
	return (DWORD)pUnk;
}

inline BOOL CComDynamicUnkArray::Remove(DWORD dwCookie)
{
	IUnknown** pp;
	if (dwCookie == 0)
		return 0;
	if (m_nSize == 0)
		return 0;
	if (m_nSize == 1)
	{
		if ((DWORD)m_pUnk == dwCookie)
		{
			m_nSize = 0;
			return 1;
		}
		return 0;
	}
	for (pp=begin();pp<end();pp++)
	{
		if ((DWORD)*pp == dwCookie)
		{
			*pp = 0;
			return 1;
		}
	}
	return 0;
}

template <const IID* piid>
class __declspec(novtable) _ICPLocator
{
public:
	
	virtual HRESULT __stdcall _LocCPQueryInterface(const IID & riid, void ** ppvObject) = 0;
	virtual ULONG __stdcall AddRef(void) = 0;\
	virtual ULONG __stdcall Release(void) = 0;
};

template <class T, const IID* piid, class CDV = CComDynamicUnkArray >
class __declspec(novtable) IConnectionPointImpl : public _ICPLocator<piid>
{
	typedef CComEnum<IEnumConnections, &IID_IEnumConnections, CONNECTDATA,
		_Copy<CONNECTDATA> > CComEnumConnections;
	typedef CDV _CDV;
public:
	~IConnectionPointImpl();
	virtual HRESULT __stdcall _LocCPQueryInterface(const IID & riid, void ** ppvObject)
	{
		if (InlineIsEqualGUID(riid, IID_IConnectionPoint) || InlineIsEqualUnknown(riid))
		{
			if (ppvObject == 0)
				return ((HRESULT)0x80004003L);
			*ppvObject = this;
			AddRef();



			return ((HRESULT)0x00000000L);
		}
		else
			return ((HRESULT)0x80004002L);
	}

	virtual HRESULT __stdcall GetConnectionInterface(IID* piid2)
	{
		if (piid2 == 0)
			return ((HRESULT)0x80004003L);
		*piid2 = *piid;
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall GetConnectionPointContainer(IConnectionPointContainer** ppCPC)
	{
		T* pT = static_cast<T*>(this);
		
		return pT->QueryInterface(IID_IConnectionPointContainer, (void**)ppCPC);
	}
	virtual HRESULT __stdcall Advise(IUnknown* pUnkSink, DWORD* pdwCookie);
	virtual HRESULT __stdcall Unadvise(DWORD dwCookie);
	virtual HRESULT __stdcall EnumConnections(IEnumConnections** ppEnum);
	CDV m_vec;
};

template <class T, const IID* piid, class CDV>
IConnectionPointImpl<T, piid, CDV>::~IConnectionPointImpl()
{
	IUnknown** pp = m_vec.begin();
	while (pp < m_vec.end())
	{
		if (*pp != 0)
			(*pp)->Release();
		pp++;
	}
}

template <class T, const IID* piid, class CDV>
HRESULT __stdcall IConnectionPointImpl<T, piid, CDV>::Advise(IUnknown* pUnkSink,
	DWORD* pdwCookie)
{
	T* pT = static_cast<T*>(this);
	IUnknown* p;
	HRESULT hRes = ((HRESULT)0x00000000L);
	if (pUnkSink == 0 || pdwCookie == 0)
		return ((HRESULT)0x80004003L);
	IID iid;
	GetConnectionInterface(&iid);
	hRes = pUnkSink->QueryInterface(iid, (void**)&p);
	if (((HRESULT)(hRes) >= 0))
	{
		pT->Lock();
		*pdwCookie = m_vec.Add(p);
		hRes = (*pdwCookie != 0) ? ((HRESULT)0x00000000L) : (((SCODE) (((unsigned long)(1)<<31) | ((unsigned long)(4)<<16) | ((unsigned long)(0x0200))) )+1);
		pT->Unlock();
		if (hRes != ((HRESULT)0x00000000L))
			p->Release();
	}
	else if (hRes == ((HRESULT)0x80004002L))
		hRes = (((SCODE) (((unsigned long)(1)<<31) | ((unsigned long)(4)<<16) | ((unsigned long)(0x0200))) )+2);
	if (((HRESULT)(hRes)<0))
		*pdwCookie = 0;
	return hRes;
}

template <class T, const IID* piid, class CDV>
HRESULT __stdcall IConnectionPointImpl<T, piid, CDV>::Unadvise(DWORD dwCookie)
{
	T* pT = static_cast<T*>(this);
	pT->Lock();
	IUnknown* p = _CDV::GetUnknown(dwCookie);
	HRESULT hRes = m_vec.Remove(dwCookie) ? ((HRESULT)0x00000000L) : (((SCODE) (((unsigned long)(1)<<31) | ((unsigned long)(4)<<16) | ((unsigned long)(0x0200))) )+0);
	pT->Unlock();
	if (hRes == ((HRESULT)0x00000000L) && p != 0)
		p->Release();
	return hRes;
}

template <class T, const IID* piid, class CDV>
HRESULT __stdcall IConnectionPointImpl<T, piid, CDV>::EnumConnections(
	IEnumConnections** ppEnum)
{
	if (ppEnum == 0)
		return ((HRESULT)0x80004003L);
	*ppEnum = 0;
	CComObject<CComEnumConnections>* pEnum = 0;
	pEnum = new CComObject<CComEnumConnections>;
	if (pEnum == 0)
		return ((HRESULT)0x8007000EL);
	T* pT = static_cast<T*>(this);
	pT->Lock();
	CONNECTDATA* pcd = 0;
	pcd = new CONNECTDATA[m_vec.end()-m_vec.begin()];
	if (pcd == 0)
	{
		delete pEnum;
		pT->Unlock();
		return ((HRESULT)0x8007000EL);
	}
	CONNECTDATA* pend = pcd;
	
	for (IUnknown** pp = m_vec.begin();pp<m_vec.end();pp++)
	{
		if (*pp != 0)
		{
			(*pp)->AddRef();
			pend->pUnk = *pp;
			pend->dwCookie = _CDV::GetCookie(pp);
			pend++;
		}
	}
	
	pEnum->Init(pcd, pend, 0, AtlFlagTakeOwnership);
	pT->Unlock();
	HRESULT hRes = pEnum->_InternalQueryInterface(IID_IEnumConnections, (void**)ppEnum);
	if (((HRESULT)(hRes)<0))
		delete pEnum;
	return hRes;
}




template <class T>
class __declspec(novtable) IConnectionPointContainerImpl : public IConnectionPointContainer
{
	typedef CComEnum<IEnumConnectionPoints,
		&IID_IEnumConnectionPoints, IConnectionPoint*,
		_CopyInterface<IConnectionPoint> >
		CComEnumConnectionPoints;
public:
	virtual HRESULT __stdcall EnumConnectionPoints(IEnumConnectionPoints** ppEnum)
	{
		if (ppEnum == 0)
			return ((HRESULT)0x80004003L);
		*ppEnum = 0;
		CComEnumConnectionPoints* pEnum = 0;
		pEnum = new CComObject<CComEnumConnectionPoints>;
		if (pEnum == 0)
			return ((HRESULT)0x8007000EL);

		int nCPCount;
		const _ATL_CONNMAP_ENTRY* pEntry = T::GetConnMap(&nCPCount);

		
		IConnectionPoint** ppCP = (IConnectionPoint**)_alloca(sizeof(IConnectionPoint*)*nCPCount);

		int i = 0;
		while (pEntry->dwOffset != (DWORD)-1)
		{
			ppCP[i++] = (IConnectionPoint*)((int)this+pEntry->dwOffset);
			pEntry++;
		}

		
		HRESULT hRes = pEnum->Init((IConnectionPoint**)&ppCP[0],
			(IConnectionPoint**)&ppCP[nCPCount],
			reinterpret_cast<IConnectionPointContainer*>(this), AtlFlagCopy);
		if (((HRESULT)(hRes)<0))
		{
			delete pEnum;
			return hRes;
		}
		hRes = pEnum->QueryInterface(IID_IEnumConnectionPoints, (void**)ppEnum);
		if (((HRESULT)(hRes)<0))
			delete pEnum;
		return hRes;
	}
	virtual HRESULT __stdcall FindConnectionPoint(const IID & riid, IConnectionPoint** ppCP)
	{
		if (ppCP == 0)
			return ((HRESULT)0x80004003L);
		*ppCP = 0;
		HRESULT hRes = (((SCODE) (((unsigned long)(1)<<31) | ((unsigned long)(4)<<16) | ((unsigned long)(0x0200))) )+0);
		const _ATL_CONNMAP_ENTRY* pEntry = T::GetConnMap(0);
		IID iid;
		while (pEntry->dwOffset != (DWORD)-1)
		{
			IConnectionPoint* pCP =
				(IConnectionPoint*)((int)this+pEntry->dwOffset);
			if (((HRESULT)(pCP->GetConnectionInterface(&iid)) >= 0) &&
				InlineIsEqualGUID(riid, iid))
			{
				*ppCP = pCP;
				pCP->AddRef();
				hRes = ((HRESULT)0x00000000L);
				break;
			}
			pEntry++;
		}
		return hRes;
	}
};


#line 5126 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"

#pragma pack(pop)




template <class ThreadAllocator>
inline HRESULT CComAutoThreadModule<ThreadAllocator>::Init(_ATL_OBJMAP_ENTRY* p, HINSTANCE h, const GUID* plibid, int nThreads)
{
	m_nThreads = nThreads;
	m_pApartments = 0;
	m_pApartments = new CComApartment[m_nThreads];;
	((void)0);
	if(m_pApartments == 0)
		return ((HRESULT)0x8007000EL);
	for (int i = 0; i < nThreads; i++)
		m_pApartments[i].m_hThread = CreateThread(0, 0, CComApartment::_Apartment, (void*)&m_pApartments[i], 0, &m_pApartments[i].m_dwThreadID);
	CComApartment::ATL_CREATE_OBJECT = RegisterWindowMessageA("ATL_CREATE_OBJECT");
	return CComModule::Init(p, h, plibid);
}

template <class ThreadAllocator>
inline LONG CComAutoThreadModule<ThreadAllocator>::Lock()
{
	LONG l = CComModule::Lock();
	DWORD dwThreadID = GetCurrentThreadId();
	for (int i=0; i < m_nThreads; i++)
	{
		if (m_pApartments[i].m_dwThreadID == dwThreadID)
		{
			m_pApartments[i].Lock();
			break;
		}
	}
	return l;
}

template <class ThreadAllocator>
inline LONG CComAutoThreadModule<ThreadAllocator>::Unlock()
{
	LONG l = CComModule::Unlock();
	DWORD dwThreadID = GetCurrentThreadId();
	for (int i=0; i < m_nThreads; i++)
	{
		if (m_pApartments[i].m_dwThreadID == dwThreadID)
		{
			m_pApartments[i].Unlock();
			break;
		}
	}
	return l;
}

template <class ThreadAllocator>
HRESULT CComAutoThreadModule<ThreadAllocator>::CreateInstance(void* pfnCreateInstance, const IID & riid, void** ppvObj)
{
	_ATL_CREATORFUNC* pFunc = (_ATL_CREATORFUNC*) pfnCreateInstance;
	_AtlAptCreateObjData data;
	data.pfnCreateInstance = pFunc;
	data.piid = &riid;
	data.hEvent = CreateEventA(0, 0, 0, 0);
	data.hRes = ((HRESULT)0x00000000L);
	int nThread = m_Allocator.GetThread(m_pApartments, m_nThreads);
	::PostThreadMessageA(m_pApartments[nThread].m_dwThreadID, CComApartment::ATL_CREATE_OBJECT, 0, (LPARAM)&data);
	AtlWaitWithMessageLoop(data.hEvent);
	CloseHandle(data.hEvent);
	if (((HRESULT)(data.hRes) >= 0))
		data.hRes = CoGetInterfaceAndReleaseStream(data.pStream, riid, ppvObj);
	return data.hRes;
}

template <class ThreadAllocator>
CComAutoThreadModule<ThreadAllocator>::~CComAutoThreadModule()
{
	for (int i=0; i < m_nThreads; i++)
	{
		::PostThreadMessageA(m_pApartments[i].m_dwThreadID, 0x0012, 0, 0);
		::WaitForSingleObject(m_pApartments[i].m_hThread, 0xFFFFFFFF);
	}
	delete[] m_pApartments;
}


}; 

#line 5212 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlcom.h"


#line 26 "stdafx.h"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"

#pragma warning( disable: 4049 )  




 


























#line 35 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"





#pragma once
#line 42 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"

 



typedef struct IObjectSafety IObjectSafety;
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"






extern "C"{
#line 57 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 












#pragma comment(lib,"uuid.lib")





























extern "C" const GUID  IID_IObjectSafety;
extern "C" GUID CATID_SafeForScripting;
extern "C" GUID CATID_SafeForInitializing;



extern RPC_IF_HANDLE __MIDL_itf_objsafe_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objsafe_0000_v0_0_s_ifspec;





 


extern "C" const IID IID_IObjectSafety;


    
    struct __declspec(uuid("CB5BDC81-93C1-11cf-8F20-00805F2CD064")) __declspec(novtable)
    IObjectSafety : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetInterfaceSafetyOptions( 
             const IID & riid,
             DWORD *pdwSupportedOptions,
             DWORD *pdwEnabledOptions) = 0;
        
        virtual HRESULT __stdcall SetInterfaceSafetyOptions( 
             const IID & riid,
             DWORD dwOptionSetMask,
             DWORD dwEnabledOptions) = 0;
        
    };
    





























































#line 203 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"



HRESULT __stdcall IObjectSafety_GetInterfaceSafetyOptions_Proxy( 
    IObjectSafety * This,
     const IID & riid,
     DWORD *pdwSupportedOptions,
     DWORD *pdwEnabledOptions);


void __stdcall IObjectSafety_GetInterfaceSafetyOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IObjectSafety_SetInterfaceSafetyOptions_Proxy( 
    IObjectSafety * This,
     const IID & riid,
     DWORD dwOptionSetMask,
     DWORD dwEnabledOptions);


void __stdcall IObjectSafety_SetInterfaceSafetyOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 236 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"



 

typedef  IObjectSafety *LPOBJECTSAFETY;

#line 244 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"


extern RPC_IF_HANDLE __MIDL_itf_objsafe_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objsafe_0009_v0_0_s_ifspec;






}
#line 256 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"

#line 258 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\objsafe.h"


#line 28 "stdafx.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"

















#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"





















struct _ATL_WNDCLASSINFOA;
struct _ATL_WNDCLASSINFOW;



namespace ATL
{
#line 30 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"

ATOM __stdcall AtlModuleRegisterWndClassInfoA(_ATL_MODULE* pM, _ATL_WNDCLASSINFOA* p, WNDPROC* pProc);
ATOM __stdcall AtlModuleRegisterWndClassInfoW(_ATL_MODULE* pM, _ATL_WNDCLASSINFOW* p, WNDPROC* pProc);





#line 39 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"






HDC __stdcall AtlCreateTargetDC(HDC hdc, DVTARGETDEVICE* ptd);
void __stdcall AtlHiMetricToPixel(const SIZEL * lpSizeInHiMetric, LPSIZEL lpSizeInPix);
void __stdcall AtlPixelToHiMetric(const SIZEL * lpSizeInPix, LPSIZEL lpSizeInHiMetric);



}; 
#line 53 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"

struct _ATL_WNDCLASSINFOA
{
	WNDCLASSEXA m_wc;
	LPCSTR m_lpszOrigName;
	WNDPROC pWndProc;
	LPCSTR m_lpszCursorID;
	BOOL m_bSystemCursor;
	ATOM m_atom;
	CHAR m_szAutoName[13];
	ATOM Register(WNDPROC* p)
	{
		return AtlModuleRegisterWndClassInfoA(&_Module, this, p);
	}
};
struct _ATL_WNDCLASSINFOW
{
	WNDCLASSEXW m_wc;
	LPCWSTR m_lpszOrigName;
	WNDPROC pWndProc;
	LPCWSTR m_lpszCursorID;
	BOOL m_bSystemCursor;
	ATOM m_atom;
	WCHAR m_szAutoName[13];
	ATOM Register(WNDPROC* p)
	{
		return AtlModuleRegisterWndClassInfoW(&_Module, this, p);
	}
};

namespace ATL
{




class CWindow;

template <class TBase = CWindow> class CAxWindowT;
#line 93 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
class CMessageMap;
class CDynamicChain;
typedef _ATL_WNDCLASSINFOA CWndClassInfoA;
typedef _ATL_WNDCLASSINFOW CWndClassInfoW;




#line 102 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
template <class T, class TBase = CWindow, class TWinTraits = CControlWinTraits> class CWindowImpl;
template <class T, class TBase = CWindow> class CDialogImpl;

template <class T, class TBase = CWindow> class CAxDialogImpl;
#line 107 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
template <WORD t_wDlgTemplateID, BOOL t_bCenter = 1> class CSimpleDialog;
template <class TBase = CWindow, class TWinTraits = CControlWinTraits> class CContainedWindowT;




class CWindow
{
public:
	static RECT rcDefault;
	HWND m_hWnd;

	CWindow(HWND hWnd = 0)
	{
		m_hWnd = hWnd;
	}

	CWindow& operator=(HWND hWnd)
	{
		m_hWnd = hWnd;
		return *this;
	}

	static LPCTSTR GetWndClassName()
	{
		return 0;
	}

	void Attach(HWND hWndNew)
	{
		((void)0);
		m_hWnd = hWndNew;
	}

	HWND Detach()
	{
		HWND hWnd = m_hWnd;
		m_hWnd = 0;
		return hWnd;
	}

	HWND Create(LPCTSTR lpstrWndClass, HWND hWndParent, RECT& rcPos, LPCTSTR szWindowName = 0,
			DWORD dwStyle = 0, DWORD dwExStyle = 0,
			UINT nID = 0, LPVOID lpCreateParam = 0)
	{
		m_hWnd = ::CreateWindowExA(dwExStyle, lpstrWndClass, szWindowName,
			dwStyle, rcPos.left, rcPos.top, rcPos.right - rcPos.left,
			rcPos.bottom - rcPos.top, hWndParent, (HMENU)nID,
			_Module.GetModuleInstance(), lpCreateParam);
		return m_hWnd;
	}

	HWND Create(LPCTSTR lpstrWndClass, HWND hWndParent, LPRECT lpRect = 0, LPCTSTR szWindowName = 0,
			DWORD dwStyle = 0, DWORD dwExStyle = 0,
			HMENU hMenu = 0, LPVOID lpCreateParam = 0)
	{
		if(lpRect == 0)
			lpRect = &rcDefault;
		m_hWnd = ::CreateWindowExA(dwExStyle, lpstrWndClass, szWindowName,
			dwStyle, lpRect->left, lpRect->top, lpRect->right - lpRect->left,
			lpRect->bottom - lpRect->top, hWndParent, hMenu,
			_Module.GetModuleInstance(), lpCreateParam);
		return m_hWnd;
	}

	BOOL DestroyWindow()
	{
		((void)0);

		if(!::DestroyWindow(m_hWnd))
			return 0;

		m_hWnd = 0;
		return 1;
	}



	operator HWND() const { return m_hWnd; }

	DWORD GetStyle() const
	{
		((void)0);
		return (DWORD)::GetWindowLongA(m_hWnd, (-16));
	}

	DWORD GetExStyle() const
	{
		((void)0);
		return (DWORD)::GetWindowLongA(m_hWnd, (-20));
	}

	LONG GetWindowLongA(int nIndex) const
	{
		((void)0);
		return ::GetWindowLongA(m_hWnd, nIndex);
	}

	LONG SetWindowLongA(int nIndex, LONG dwNewLong)
	{
		((void)0);
		return ::SetWindowLongA(m_hWnd, nIndex, dwNewLong);
	}

	WORD GetWindowWord(int nIndex) const
	{
		((void)0);
		return ::GetWindowWord(m_hWnd, nIndex);
	}

	WORD SetWindowWord(int nIndex, WORD wNewWord)
	{
		((void)0);
		return ::SetWindowWord(m_hWnd, nIndex, wNewWord);
	}



	LRESULT SendMessageA(UINT message, WPARAM wParam = 0, LPARAM lParam = 0)
	{
		((void)0);
		return ::SendMessageA(m_hWnd,message,wParam,lParam);
	}

	BOOL PostMessageA(UINT message, WPARAM wParam = 0, LPARAM lParam = 0)
	{
		((void)0);
		return ::PostMessageA(m_hWnd,message,wParam,lParam);
	}

	BOOL SendNotifyMessageA(UINT message, WPARAM wParam = 0, LPARAM lParam = 0)
	{
		((void)0);
		return ::SendNotifyMessageA(m_hWnd, message, wParam, lParam);
	}

	
	static LRESULT SendMessageA(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
	{
		((void)0);
		return ::SendMessageA(hWnd, message, wParam, lParam);
	}



	BOOL SetWindowTextA(LPCTSTR lpszString)
	{
		((void)0);
		return ::SetWindowTextA(m_hWnd, lpszString);
	}

	int GetWindowTextA(LPTSTR lpszStringBuf, int nMaxCount) const
	{
		((void)0);
		return ::GetWindowTextA(m_hWnd, lpszStringBuf, nMaxCount);
	}

	int GetWindowTextLengthA() const
	{
		((void)0);
		return ::GetWindowTextLengthA(m_hWnd);
	}



	void SetFont(HFONT hFont, BOOL bRedraw = 1)
	{
		((void)0);
		::SendMessageA(m_hWnd, 0x0030, (WPARAM)hFont, ((LPARAM)(DWORD)((LONG)(((WORD)((DWORD_PTR)(bRedraw) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(0) & 0xffff))) << 16))));
	}

	HFONT GetFont() const
	{
		((void)0);
		return (HFONT)::SendMessageA(m_hWnd, 0x0031, 0, 0);
	}



	HMENU GetMenu() const
	{
		((void)0);
		return ::GetMenu(m_hWnd);
	}

	BOOL SetMenu(HMENU hMenu)
	{
		((void)0);
		return ::SetMenu(m_hWnd, hMenu);
	}

	BOOL DrawMenuBar()
	{
		((void)0);
		return ::DrawMenuBar(m_hWnd);
	}

	HMENU GetSystemMenu(BOOL bRevert) const
	{
		((void)0);
		return ::GetSystemMenu(m_hWnd, bRevert);
	}

	BOOL HiliteMenuItem(HMENU hMenu, UINT uItemHilite, UINT uHilite)
	{
		((void)0);
		return ::HiliteMenuItem(m_hWnd, hMenu, uItemHilite, uHilite);
	}



	BOOL IsIconic() const
	{
		((void)0);
		return ::IsIconic(m_hWnd);
	}

	BOOL IsZoomed() const
	{
		((void)0);
		return ::IsZoomed(m_hWnd);
	}

	BOOL MoveWindow(int x, int y, int nWidth, int nHeight, BOOL bRepaint = 1)
	{
		((void)0);
		return ::MoveWindow(m_hWnd, x, y, nWidth, nHeight, bRepaint);
	}

	BOOL MoveWindow(LPCRECT lpRect, BOOL bRepaint = 1)
	{
		((void)0);
		return ::MoveWindow(m_hWnd, lpRect->left, lpRect->top, lpRect->right - lpRect->left, lpRect->bottom - lpRect->top, bRepaint);
	}

	BOOL SetWindowPos(HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT nFlags)
	{
		((void)0);
		return ::SetWindowPos(m_hWnd, hWndInsertAfter, x, y, cx, cy, nFlags);
	}

	BOOL SetWindowPos(HWND hWndInsertAfter, LPCRECT lpRect, UINT nFlags)
	{
		((void)0);
		return ::SetWindowPos(m_hWnd, hWndInsertAfter, lpRect->left, lpRect->top, lpRect->right - lpRect->left, lpRect->bottom - lpRect->top, nFlags);
	}

	UINT ArrangeIconicWindows()
	{
		((void)0);
		return ::ArrangeIconicWindows(m_hWnd);
	}

	BOOL BringWindowToTop()
	{
		((void)0);
		return ::BringWindowToTop(m_hWnd);
	}

	BOOL GetWindowRect(LPRECT lpRect) const
	{
		((void)0);
		return ::GetWindowRect(m_hWnd, lpRect);
	}

	BOOL GetClientRect(LPRECT lpRect) const
	{
		((void)0);
		return ::GetClientRect(m_hWnd, lpRect);
	}

	BOOL GetWindowPlacement(WINDOWPLACEMENT * lpwndpl) const
	{
		((void)0);
		return ::GetWindowPlacement(m_hWnd, lpwndpl);
	}

	BOOL SetWindowPlacement(const WINDOWPLACEMENT * lpwndpl)
	{
		((void)0);
		return ::SetWindowPlacement(m_hWnd, lpwndpl);
	}



	BOOL ClientToScreen(LPPOINT lpPoint) const
	{
		((void)0);
		return ::ClientToScreen(m_hWnd, lpPoint);
	}

	BOOL ClientToScreen(LPRECT lpRect) const
	{
		((void)0);
		if(!::ClientToScreen(m_hWnd, (LPPOINT)lpRect))
			return 0;
		return ::ClientToScreen(m_hWnd, ((LPPOINT)lpRect)+1);
	}

	BOOL ScreenToClient(LPPOINT lpPoint) const
	{
		((void)0);
		return ::ScreenToClient(m_hWnd, lpPoint);
	}

	BOOL ScreenToClient(LPRECT lpRect) const
	{
		((void)0);
		if(!::ScreenToClient(m_hWnd, (LPPOINT)lpRect))
			return 0;
		return ::ScreenToClient(m_hWnd, ((LPPOINT)lpRect)+1);
	}

	int MapWindowPoints(HWND hWndTo, LPPOINT lpPoint, UINT nCount) const
	{
		((void)0);
		return ::MapWindowPoints(m_hWnd, hWndTo, lpPoint, nCount);
	}

	int MapWindowPoints(HWND hWndTo, LPRECT lpRect) const
	{
		((void)0);
		return ::MapWindowPoints(m_hWnd, hWndTo, (LPPOINT)lpRect, 2);
	}



	HDC BeginPaint(LPPAINTSTRUCT lpPaint)
	{
		((void)0);
		return ::BeginPaint(m_hWnd, lpPaint);
	}

	void EndPaint(LPPAINTSTRUCT lpPaint)
	{
		((void)0);
		::EndPaint(m_hWnd, lpPaint);
	}

	HDC GetDC()
	{
		((void)0);
		return ::GetDC(m_hWnd);
	}

	HDC GetWindowDC()
	{
		((void)0);
		return ::GetWindowDC(m_hWnd);
	}

	int ReleaseDC(HDC hDC)
	{
		((void)0);
		return ::ReleaseDC(m_hWnd, hDC);
	}

	void Print(HDC hDC, DWORD dwFlags) const
	{
		((void)0);
		::SendMessageA(m_hWnd, 0x0317, (WPARAM)hDC, dwFlags);
	}

	void PrintClient(HDC hDC, DWORD dwFlags) const
	{
		((void)0);
		::SendMessageA(m_hWnd, 0x0318, (WPARAM)hDC, dwFlags);
	}

	BOOL UpdateWindow()
	{
		((void)0);
		return ::UpdateWindow(m_hWnd);
	}

	void SetRedraw(BOOL bRedraw = 1)
	{
		((void)0);
		::SendMessageA(m_hWnd, 0x000B, (WPARAM)bRedraw, 0);
	}

	BOOL GetUpdateRect(LPRECT lpRect, BOOL bErase = 0)
	{
		((void)0);
		return ::GetUpdateRect(m_hWnd, lpRect, bErase);
	}

	int GetUpdateRgn(HRGN hRgn, BOOL bErase = 0)
	{
		((void)0);
		return ::GetUpdateRgn(m_hWnd, hRgn, bErase);
	}

	BOOL Invalidate(BOOL bErase = 1)
	{
		((void)0);
		return ::InvalidateRect(m_hWnd, 0, bErase);
	}

	BOOL InvalidateRect(LPCRECT lpRect, BOOL bErase = 1)
	{
		((void)0);
		return ::InvalidateRect(m_hWnd, lpRect, bErase);
	}

	BOOL ValidateRect(LPCRECT lpRect)
	{
		((void)0);
		return ::ValidateRect(m_hWnd, lpRect);
	}

	void InvalidateRgn(HRGN hRgn, BOOL bErase = 1)
	{
		((void)0);
		::InvalidateRgn(m_hWnd, hRgn, bErase);
	}

	BOOL ValidateRgn(HRGN hRgn)
	{
		((void)0);
		return ::ValidateRgn(m_hWnd, hRgn);
	}

	BOOL ShowWindow(int nCmdShow)
	{
		((void)0);
		return ::ShowWindow(m_hWnd, nCmdShow);
	}

	BOOL IsWindowVisible() const
	{
		((void)0);
		return ::IsWindowVisible(m_hWnd);
	}

	BOOL ShowOwnedPopups(BOOL bShow = 1)
	{
		((void)0);
		return ::ShowOwnedPopups(m_hWnd, bShow);
	}

	HDC GetDCEx(HRGN hRgnClip, DWORD flags)
	{
		((void)0);
		return ::GetDCEx(m_hWnd, hRgnClip, flags);
	}

	BOOL LockWindowUpdate(BOOL bLock = 1)
	{
		((void)0);
		return ::LockWindowUpdate(bLock ? m_hWnd : 0);
	}

	BOOL RedrawWindow(LPCRECT lpRectUpdate = 0, HRGN hRgnUpdate = 0, UINT flags = 0x0001 | 0x0100 | 0x0004)
	{
		((void)0);
		return ::RedrawWindow(m_hWnd, lpRectUpdate, hRgnUpdate, flags);
	}



	UINT SetTimer(UINT nIDEvent, UINT nElapse)
	{
		((void)0);
		return ::SetTimer(m_hWnd, nIDEvent, nElapse, 0);
	}

	BOOL KillTimer(UINT nIDEvent)
	{
		((void)0);
		return ::KillTimer(m_hWnd, nIDEvent);
	}



	BOOL IsWindowEnabled() const
	{
		((void)0);
		return ::IsWindowEnabled(m_hWnd);
	}

	BOOL EnableWindow(BOOL bEnable = 1)
	{
		((void)0);
		return ::EnableWindow(m_hWnd, bEnable);
	}

	HWND SetActiveWindow()
	{
		((void)0);
		return ::SetActiveWindow(m_hWnd);
	}

	HWND SetCapture()
	{
		((void)0);
		return ::SetCapture(m_hWnd);
	}

	HWND SetFocus()
	{
		((void)0);
		return ::SetFocus(m_hWnd);
	}



	BOOL CheckDlgButton(int nIDButton, UINT nCheck)
	{
		((void)0);
		return ::CheckDlgButton(m_hWnd, nIDButton, nCheck);
	}

	BOOL CheckRadioButton(int nIDFirstButton, int nIDLastButton, int nIDCheckButton)
	{
		((void)0);
		return ::CheckRadioButton(m_hWnd, nIDFirstButton, nIDLastButton, nIDCheckButton);
	}

	int DlgDirListA(LPTSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT nFileType)
	{
		((void)0);
		return ::DlgDirListA(m_hWnd, lpPathSpec, nIDListBox, nIDStaticPath, nFileType);
	}

	int DlgDirListComboBoxA(LPTSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT nFileType)
	{
		((void)0);
		return ::DlgDirListComboBoxA(m_hWnd, lpPathSpec, nIDComboBox, nIDStaticPath, nFileType);
	}

	BOOL DlgDirSelect(LPTSTR lpString, int nCount, int nIDListBox)
	{
		((void)0);
		return ::DlgDirSelectExA(m_hWnd, lpString, nCount, nIDListBox);
	}

	BOOL DlgDirSelectComboBox(LPTSTR lpString, int nCount, int nIDComboBox)
	{
		((void)0);
		return ::DlgDirSelectComboBoxExA(m_hWnd, lpString, nCount, nIDComboBox);
	}

	UINT GetDlgItemInt(int nID, BOOL* lpTrans = 0, BOOL bSigned = 1) const
	{
		((void)0);
		return ::GetDlgItemInt(m_hWnd, nID, lpTrans, bSigned);
	}

	UINT GetDlgItemTextA(int nID, LPTSTR lpStr, int nMaxCount) const
	{
		((void)0);
		return ::GetDlgItemTextA(m_hWnd, nID, lpStr, nMaxCount);
	}
	BOOL GetDlgItemTextA(int nID, BSTR& bstrText) const
	{
		((void)0);

		HWND hWndCtl = GetDlgItem(nID);
		if(hWndCtl == 0)
			return 0;

		return CWindow(hWndCtl).GetWindowTextA(bstrText);
	}
	HWND GetNextDlgGroupItem(HWND hWndCtl, BOOL bPrevious = 0) const
	{
		((void)0);
		return ::GetNextDlgGroupItem(m_hWnd, hWndCtl, bPrevious);
	}

	HWND GetNextDlgTabItem(HWND hWndCtl, BOOL bPrevious = 0) const
	{
		((void)0);
		return ::GetNextDlgTabItem(m_hWnd, hWndCtl, bPrevious);
	}

	UINT IsDlgButtonChecked(int nIDButton) const
	{
		((void)0);
		return ::IsDlgButtonChecked(m_hWnd, nIDButton);
	}

	LRESULT SendDlgItemMessageA(int nID, UINT message, WPARAM wParam = 0, LPARAM lParam = 0)
	{
		((void)0);
		return ::SendDlgItemMessageA(m_hWnd, nID, message, wParam, lParam);
	}

	BOOL SetDlgItemInt(int nID, UINT nValue, BOOL bSigned = 1)
	{
		((void)0);
		return ::SetDlgItemInt(m_hWnd, nID, nValue, bSigned);
	}

	BOOL SetDlgItemTextA(int nID, LPCTSTR lpszString)
	{
		((void)0);
		return ::SetDlgItemTextA(m_hWnd, nID, lpszString);
	}


	HRESULT GetDlgControl(int nID, const IID & iid, void** ppUnk)
	{
		((void)0);
		((void)0);
		HRESULT hr = ((HRESULT)0x80004005L);
		HWND hWndCtrl = GetDlgItem(nID);
		if (hWndCtrl != 0)
		{
			*ppUnk = 0;
			CComPtr<IUnknown> spUnk;
			hr = AtlAxGetControl(hWndCtrl, &spUnk);
			if (((HRESULT)(hr) >= 0))
				hr = spUnk->QueryInterface(iid, ppUnk);
		}
		return hr;
	}
#line 725 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"



	int GetScrollPos(int nBar) const
	{
		((void)0);
		return ::GetScrollPos(m_hWnd, nBar);
	}

	BOOL GetScrollRange(int nBar, LPINT lpMinPos, LPINT lpMaxPos) const
	{
		((void)0);
		return ::GetScrollRange(m_hWnd, nBar, lpMinPos, lpMaxPos);
	}

	BOOL ScrollWindow(int xAmount, int yAmount, LPCRECT lpRect = 0, LPCRECT lpClipRect = 0)
	{
		((void)0);
		return ::ScrollWindow(m_hWnd, xAmount, yAmount, lpRect, lpClipRect);
	}

	int ScrollWindowEx(int dx, int dy, LPCRECT lpRectScroll, LPCRECT lpRectClip, HRGN hRgnUpdate, LPRECT lpRectUpdate, UINT uFlags)
	{
		((void)0);
		return ::ScrollWindowEx(m_hWnd, dx, dy, lpRectScroll, lpRectClip, hRgnUpdate, lpRectUpdate, uFlags);
	}

	int ScrollWindowEx(int dx, int dy, UINT uFlags, LPCRECT lpRectScroll = 0, LPCRECT lpRectClip = 0, HRGN hRgnUpdate = 0, LPRECT lpRectUpdate = 0)
	{
		((void)0);
		return ::ScrollWindowEx(m_hWnd, dx, dy, lpRectScroll, lpRectClip, hRgnUpdate, lpRectUpdate, uFlags);
	}

	int SetScrollPos(int nBar, int nPos, BOOL bRedraw = 1)
	{
		((void)0);
		return ::SetScrollPos(m_hWnd, nBar, nPos, bRedraw);
	}

	BOOL SetScrollRange(int nBar, int nMinPos, int nMaxPos, BOOL bRedraw = 1)
	{
		((void)0);
		return ::SetScrollRange(m_hWnd, nBar, nMinPos, nMaxPos, bRedraw);
	}

	BOOL ShowScrollBar(UINT nBar, BOOL bShow = 1)
	{
		((void)0);
		return ::ShowScrollBar(m_hWnd, nBar, bShow);
	}

	BOOL EnableScrollBar(UINT uSBFlags, UINT uArrowFlags = 0x0000)
	{
		((void)0);
		return ::EnableScrollBar(m_hWnd, uSBFlags, uArrowFlags);
	}



	HWND ChildWindowFromPoint(POINT point) const
	{
		((void)0);
		return ::ChildWindowFromPoint(m_hWnd, point);
	}

	HWND ChildWindowFromPointEx(POINT point, UINT uFlags) const
	{
		((void)0);
		return ::ChildWindowFromPointEx(m_hWnd, point, uFlags);
	}

	HWND GetTopWindow() const
	{
		((void)0);
		return ::GetTopWindow(m_hWnd);
	}

	HWND GetWindow(UINT nCmd) const
	{
		((void)0);
		return ::GetWindow(m_hWnd, nCmd);
	}

	HWND GetLastActivePopup() const
	{
		((void)0);
		return ::GetLastActivePopup(m_hWnd);
	}

	BOOL IsChild(HWND hWnd) const
	{
		((void)0);
		return ::IsChild(m_hWnd, hWnd);
	}

	HWND GetParent() const
	{
		((void)0);
		return ::GetParent(m_hWnd);
	}

	HWND SetParent(HWND hWndNewParent)
	{
		((void)0);
		return ::SetParent(m_hWnd, hWndNewParent);
	}



	int GetDlgCtrlID() const
	{
		((void)0);
		return ::GetDlgCtrlID(m_hWnd);
	}

	int SetDlgCtrlID(int nID)
	{
		((void)0);
		return (int)::SetWindowLongA(m_hWnd, (-12), nID);
	}

	HWND GetDlgItem(int nID) const
	{
		((void)0);
		return ::GetDlgItem(m_hWnd, nID);
	}



	BOOL FlashWindow(BOOL bInvert)
	{
		((void)0);
		return ::FlashWindow(m_hWnd, bInvert);
	}

	int MessageBoxA(LPCTSTR lpszText, LPCTSTR lpszCaption = "", UINT nType = 0x00000000L)
	{
		((void)0);
		return ::MessageBoxA(m_hWnd, lpszText, lpszCaption, nType);
	}



	BOOL ChangeClipboardChain(HWND hWndNewNext)
	{
		((void)0);
		return ::ChangeClipboardChain(m_hWnd, hWndNewNext);
	}

	HWND SetClipboardViewer()
	{
		((void)0);
		return ::SetClipboardViewer(m_hWnd);
	}

	BOOL OpenClipboard()
	{
		((void)0);
		return ::OpenClipboard(m_hWnd);
	}



	BOOL CreateCaret(HBITMAP hBitmap)
	{
		((void)0);
		return ::CreateCaret(m_hWnd, hBitmap, 0, 0);
	}

	BOOL CreateSolidCaret(int nWidth, int nHeight)
	{
		((void)0);
		return ::CreateCaret(m_hWnd, (HBITMAP)0, nWidth, nHeight);
	}

	BOOL CreateGrayCaret(int nWidth, int nHeight)
	{
		((void)0);
		return ::CreateCaret(m_hWnd, (HBITMAP)1, nWidth, nHeight);
	}

	BOOL HideCaret()
	{
		((void)0);
		return ::HideCaret(m_hWnd);
	}

	BOOL ShowCaret()
	{
		((void)0);
		return ::ShowCaret(m_hWnd);
	}



	void DragAcceptFiles(BOOL bAccept = 1)
	{
		((void)0); ::DragAcceptFiles(m_hWnd, bAccept);
	}
#line 925 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"



	HICON SetIcon(HICON hIcon, BOOL bBigIcon = 1)
	{
		((void)0);
		return (HICON)::SendMessageA(m_hWnd, 0x0080, bBigIcon, (LPARAM)hIcon);
	}

	HICON GetIcon(BOOL bBigIcon = 1) const
	{
		((void)0);
		return (HICON)::SendMessageA(m_hWnd, 0x007F, bBigIcon, 0);
	}



	BOOL WinHelpA(LPCTSTR lpszHelp, UINT nCmd = 0x0001L, DWORD dwData = 0)
	{
		((void)0);
		return ::WinHelpA(m_hWnd, lpszHelp, nCmd, dwData);
	}

	BOOL SetWindowContextHelpId(DWORD dwContextHelpId)
	{
		((void)0);
		return ::SetWindowContextHelpId(m_hWnd, dwContextHelpId);
	}

	DWORD GetWindowContextHelpId() const
	{
		((void)0);
		return ::GetWindowContextHelpId(m_hWnd);
	}



	int SetHotKey(WORD wVirtualKeyCode, WORD wModifiers)
	{
		((void)0);
		return (int)::SendMessageA(m_hWnd, 0x0032, ((WORD)(((BYTE)((DWORD_PTR)(wVirtualKeyCode) & 0xff)) | ((WORD)((BYTE)((DWORD_PTR)(wModifiers) & 0xff))) << 8)), 0);
	}

	DWORD GetHotKey() const
	{
		((void)0);
		return ::SendMessageA(m_hWnd, 0x0033, 0, 0);
	}




	BOOL GetScrollInfo(int nBar, LPSCROLLINFO lpScrollInfo)
	{
		((void)0);
		return ::GetScrollInfo(m_hWnd, nBar, lpScrollInfo);
	}
	BOOL SetScrollInfo(int nBar, LPSCROLLINFO lpScrollInfo, BOOL bRedraw = 1)
	{
		((void)0);
		return ::SetScrollInfo(m_hWnd, nBar, lpScrollInfo, bRedraw);
	}
	BOOL IsDialogMessageA(LPMSG lpMsg)
	{
		((void)0);
		return ::IsDialogMessageA(m_hWnd, lpMsg);
	}

	void NextDlgCtrl() const
        {
		((void)0);
		::SendMessageA(m_hWnd, 0x0028, 0, 0L);
	}
	void PrevDlgCtrl() const
        {
		((void)0);
		::SendMessageA(m_hWnd, 0x0028, 1, 0L);
	}
	void GotoDlgCtrl(HWND hWndCtrl) const
        {
		((void)0);
		::SendMessageA(m_hWnd, 0x0028, (WPARAM)hWndCtrl, 1L);
	}

	BOOL ResizeClient(int nWidth, int nHeight, BOOL bRedraw = 1)
	{
		((void)0);

		RECT rcWnd;
		if(!GetClientRect(&rcWnd))
			return 0;

		if(nWidth != -1)
			rcWnd.right = nWidth;
		if(nHeight != -1)
			rcWnd.bottom = nHeight;

		if(!::AdjustWindowRectEx(&rcWnd, GetStyle(), (!(GetStyle() & 0x40000000L) && (GetMenu() != 0)), GetExStyle()))
			return 0;

		UINT uFlags = 0x0004 | 0x0002;
		if(!bRedraw)
			uFlags |= 0x0008;

		return SetWindowPos(0, 0, 0, rcWnd.right - rcWnd.left, rcWnd.bottom - rcWnd.top, uFlags);
	}

	int GetWindowRgn(HRGN hRgn)
	{
		((void)0);
		return ::GetWindowRgn(m_hWnd, hRgn);
	}
	int SetWindowRgn(HRGN hRgn, BOOL bRedraw = 0)
	{
		((void)0);
		return ::SetWindowRgn(m_hWnd, hRgn, bRedraw);
	}
	HDWP DeferWindowPos(HDWP hWinPosInfo, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags)
	{
		((void)0);
		return ::DeferWindowPos(hWinPosInfo, m_hWnd, hWndInsertAfter, x, y, cx, cy, uFlags);
	}
	DWORD GetWindowThreadID()
	{
		((void)0);
		return ::GetWindowThreadProcessId(m_hWnd, 0);
	}
	DWORD GetWindowProcessID()
	{
		((void)0);
		DWORD dwProcessID;
		::GetWindowThreadProcessId(m_hWnd, &dwProcessID);
		return dwProcessID;
	}
	BOOL IsWindow()
	{
		return ::IsWindow(m_hWnd);
	}
	BOOL IsWindowUnicode()
	{
		((void)0);
		return ::IsWindowUnicode(m_hWnd);
	}
	BOOL IsParentDialog()
	{
		((void)0);
		TCHAR szBuf[8]; 
		GetClassNameA(GetParent(), szBuf, sizeof(szBuf)/sizeof(TCHAR));
		return lstrcmpA(szBuf, "#32770") == 0;
	}
	BOOL ShowWindowAsync(int nCmdShow)
	{
		((void)0);
		return ::ShowWindowAsync(m_hWnd, nCmdShow);
	}

	HWND GetDescendantWindow(int nID) const
	{
		((void)0);

		
		

		
		HWND hWndChild, hWndTmp;
		CWindow wnd;
		if((hWndChild = ::GetDlgItem(m_hWnd, nID)) != 0)
		{
			if(::GetTopWindow(hWndChild) != 0)
			{
				
				wnd.Attach(hWndChild);
				hWndTmp = wnd.GetDescendantWindow(nID);
				if(hWndTmp != 0)
					return hWndTmp;
			}
			return hWndChild;
		}

		
		for(hWndChild = ::GetTopWindow(m_hWnd); hWndChild != 0;
			hWndChild = ::GetNextWindow(hWndChild, 2))
		{
			wnd.Attach(hWndChild);
			hWndTmp = wnd.GetDescendantWindow(nID);
			if(hWndTmp != 0)
				return hWndTmp;
		}

		return 0;    
	}

	void SendMessageToDescendants(UINT message, WPARAM wParam = 0, LPARAM lParam = 0, BOOL bDeep = 1)
	{
		CWindow wnd;
		for(HWND hWndChild = ::GetTopWindow(m_hWnd); hWndChild != 0;
			hWndChild = ::GetNextWindow(hWndChild, 2))
		{
			::SendMessageA(hWndChild, message, wParam, lParam);

			if(bDeep && ::GetTopWindow(hWndChild) != 0)
			{
				
				wnd.Attach(hWndChild);
				wnd.SendMessageToDescendants(message, wParam, lParam, bDeep);
			}
		}
	}

	BOOL CenterWindow(HWND hWndCenter = 0)
	{
		((void)0);

		
		DWORD dwStyle = GetStyle();
		if(hWndCenter == 0)
		{
			if(dwStyle & 0x40000000L)
				hWndCenter = ::GetParent(m_hWnd);
			else
				hWndCenter = ::GetWindow(m_hWnd, 4);
		}

		
		RECT rcDlg;
		::GetWindowRect(m_hWnd, &rcDlg);
		RECT rcArea;
		RECT rcCenter;
		HWND hWndParent;
		if(!(dwStyle & 0x40000000L))
		{
			
			if(hWndCenter != 0)
			{
				DWORD dwStyle = ::GetWindowLongA(hWndCenter, (-16));
				if(!(dwStyle & 0x10000000L) || (dwStyle & 0x20000000L))
					hWndCenter = 0;
			}

			
			::SystemParametersInfoA(0x0030, 0, &rcArea, 0);
			if(hWndCenter == 0)
				rcCenter = rcArea;
			else
				::GetWindowRect(hWndCenter, &rcCenter);
		}
		else
		{
			
			hWndParent = ::GetParent(m_hWnd);
			((void)0);

			::GetClientRect(hWndParent, &rcArea);
			((void)0);
			::GetClientRect(hWndCenter, &rcCenter);
			::MapWindowPoints(hWndCenter, hWndParent, (POINT*)&rcCenter, 2);
		}

		int DlgWidth = rcDlg.right - rcDlg.left;
		int DlgHeight = rcDlg.bottom - rcDlg.top;

		
		int xLeft = (rcCenter.left + rcCenter.right) / 2 - DlgWidth / 2;
		int yTop = (rcCenter.top + rcCenter.bottom) / 2 - DlgHeight / 2;

		
		if(xLeft < rcArea.left)
			xLeft = rcArea.left;
		else if(xLeft + DlgWidth > rcArea.right)
			xLeft = rcArea.right - DlgWidth;

		if(yTop < rcArea.top)
			yTop = rcArea.top;
		else if(yTop + DlgHeight > rcArea.bottom)
			yTop = rcArea.bottom - DlgHeight;

		
		return ::SetWindowPos(m_hWnd, 0, xLeft, yTop, -1, -1,
			0x0001 | 0x0004 | 0x0010);
	}

	BOOL ModifyStyle(DWORD dwRemove, DWORD dwAdd, UINT nFlags = 0)
	{
		((void)0);

		DWORD dwStyle = ::GetWindowLongA(m_hWnd, (-16));
		DWORD dwNewStyle = (dwStyle & ~dwRemove) | dwAdd;
		if(dwStyle == dwNewStyle)
			return 0;

		::SetWindowLongA(m_hWnd, (-16), dwNewStyle);
		if(nFlags != 0)
		{
			::SetWindowPos(m_hWnd, 0, 0, 0, 0, 0,
				0x0001 | 0x0002 | 0x0004 | 0x0010 | nFlags);
		}

		return 1;
	}

	BOOL ModifyStyleEx(DWORD dwRemove, DWORD dwAdd, UINT nFlags = 0)
	{
		((void)0);

		DWORD dwStyle = ::GetWindowLongA(m_hWnd, (-20));
		DWORD dwNewStyle = (dwStyle & ~dwRemove) | dwAdd;
		if(dwStyle == dwNewStyle)
			return 0;

		::SetWindowLongA(m_hWnd, (-20), dwNewStyle);
		if(nFlags != 0)
		{
			::SetWindowPos(m_hWnd, 0, 0, 0, 0, 0,
				0x0001 | 0x0002 | 0x0004 | 0x0010 | nFlags);
		}

		return 1;
	}

	BOOL GetWindowTextA(BSTR* pbstrText)
	{
		return GetWindowTextA(*pbstrText);
	}
	BOOL GetWindowTextA(BSTR& bstrText)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		((void)0);
		if (bstrText != 0)
		{
			SysFreeString(bstrText);
			bstrText = 0;
		}

		int nLen = ::GetWindowTextLengthA(m_hWnd);
		if(nLen == 0)
		{
			bstrText = ::SysAllocString(L"");
			return (bstrText != 0) ? 1 : 0;
		}

		LPTSTR lpszText = (LPTSTR)_alloca((nLen+1)*sizeof(TCHAR));

		if(!::GetWindowTextA(m_hWnd, lpszText, nLen+1))
			return 0;

		bstrText = ::SysAllocString(( ((_lpa = lpszText) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert))));
		return (bstrText != 0) ? 1 : 0;
	}
	HWND GetTopLevelParent() const
	{
		((void)0);

		HWND hWndParent = m_hWnd;
		HWND hWndTmp;
		while((hWndTmp = ::GetParent(hWndParent)) != 0)
			hWndParent = hWndTmp;

		return hWndParent;
	}

	HWND GetTopLevelWindow() const
	{
		((void)0);

		HWND hWndParent;
		HWND hWndTmp = m_hWnd;

		do
		{
			hWndParent = hWndTmp;
			hWndTmp = (::GetWindowLongA(hWndParent, (-16)) & 0x40000000L) ? ::GetParent(hWndParent) : ::GetWindow(hWndParent, 4);
		}
		while(hWndTmp != 0);

		return hWndParent;
	}
};

_declspec(selectany) RECT CWindow::rcDefault = { ((int)0x80000000), ((int)0x80000000), 0, 0 };






template <class TBase = CWindow>
class CAxWindowT : public TBase
{
public:

	CAxWindowT(HWND hWnd = 0) : TBase(hWnd)
	{ }

	CAxWindowT< TBase >& operator=(HWND hWnd)
	{
		m_hWnd = hWnd;
		return *this;
	}


	static LPCTSTR GetWndClassName()
	{
		return "AtlAxWin";
	}


	HWND Create(HWND hWndParent, RECT& rcPos, LPCTSTR szWindowName = 0,
			DWORD dwStyle = 0, DWORD dwExStyle = 0,
			UINT nID = 0, LPVOID lpCreateParam = 0)
	{
		return CWindow::Create(GetWndClassName(), hWndParent, rcPos, szWindowName, dwStyle, dwExStyle, nID, lpCreateParam);
	}
	HWND Create(HWND hWndParent, LPRECT lpRect = 0, LPCTSTR szWindowName = 0,
			DWORD dwStyle = 0, DWORD dwExStyle = 0,
			HMENU hMenu = 0, LPVOID lpCreateParam = 0)
	{
		return CWindow::Create(GetWndClassName(), hWndParent, lpRect, szWindowName, dwStyle, dwExStyle, hMenu, lpCreateParam);
	}

	HRESULT CreateControl(LPCOLESTR lpszName, IStream* pStream = 0, IUnknown** ppUnkContainer = 0)
	{
		((void)0);
		return AtlAxCreateControl(lpszName, m_hWnd, pStream, ppUnkContainer);
	}

	HRESULT CreateControl(DWORD dwResID, IStream* pStream = 0, IUnknown** ppUnkContainer = 0)
	{
		TCHAR szModule[260];
		GetModuleFileNameA(_Module.GetModuleInstance(), szModule, 260);

		CComBSTR bstrURL(L"res://");
		bstrURL.Append(szModule);
		bstrURL.Append(L"/");
		TCHAR szResID[11];
		wsprintfA(szResID, "%0d", dwResID);
		bstrURL.Append(szResID);

		((void)0);
		return AtlAxCreateControl(bstrURL, m_hWnd, pStream, ppUnkContainer);
	}

	HRESULT CreateControlEx(LPCOLESTR lpszName, IStream* pStream = 0, 
			IUnknown** ppUnkContainer = 0, IUnknown** ppUnkControl = 0,
			const IID & iidSink = GUID_NULL, IUnknown* punkSink = 0)
	{
		((void)0);
		return AtlAxCreateControlEx(lpszName, m_hWnd, pStream, ppUnkContainer, ppUnkControl, iidSink, punkSink);
	}

	HRESULT CreateControlEx(DWORD dwResID,  IStream* pStream = 0, 
			IUnknown** ppUnkContainer = 0, IUnknown** ppUnkControl = 0,
			const IID & iidSink = GUID_NULL, IUnknown* punkSink = 0)
	{
		TCHAR szModule[260];
		GetModuleFileNameA(_Module.GetModuleInstance(), szModule, 260);

		CComBSTR bstrURL(L"res://");
		bstrURL.Append(szModule);
		bstrURL.Append(L"/");
		TCHAR szResID[11];
		wsprintfA(szResID, "%0d", dwResID);
		bstrURL.Append(szResID);

		((void)0);
		return AtlAxCreateControlEx(bstrURL, m_hWnd, pStream, ppUnkContainer, ppUnkControl, iidSink, punkSink);
	}

	HRESULT AttachControl(IUnknown* pControl, IUnknown** ppUnkContainer)
	{
		((void)0);
		return AtlAxAttachControl(pControl, m_hWnd, ppUnkContainer);
	}
	HRESULT QueryHost(const IID & iid, void** ppUnk)
	{
		((void)0);
		HRESULT hr;
		*ppUnk = 0;
		CComPtr<IUnknown> spUnk;
		hr = AtlAxGetHost(m_hWnd, &spUnk);
		if (((HRESULT)(hr) >= 0))
			hr = spUnk->QueryInterface(iid, ppUnk);
		return hr;
	}
	template <class Q>
	HRESULT QueryHost(Q** ppUnk)
	{
		return QueryHost(__uuidof(Q), (void**)ppUnk);
	}
	HRESULT QueryControl(const IID & iid, void** ppUnk)
	{
		((void)0);
		HRESULT hr;
		*ppUnk = 0;
		CComPtr<IUnknown> spUnk;
		hr = AtlAxGetControl(m_hWnd, &spUnk);
		if (((HRESULT)(hr) >= 0))
			hr = spUnk->QueryInterface(iid, ppUnk);
		return hr;
	}
	template <class Q>
	HRESULT QueryControl(Q** ppUnk)
	{
		return QueryControl(__uuidof(Q), (void**)ppUnk);
	}
	HRESULT SetExternalDispatch(IDispatch* pDisp)
	{
		HRESULT hr;
		CComPtr<IAxWinHostWindow> spHost;
		hr = QueryHost(IID_IAxWinHostWindow, (void**)&spHost);
		if (((HRESULT)(hr) >= 0))
			hr = spHost->SetExternalDispatch(pDisp);
		return hr;
	}
	HRESULT SetExternalUIHandler(IDocHostUIHandlerDispatch* pUIHandler)
	{
		HRESULT hr;
		CComPtr<IAxWinHostWindow> spHost;
		hr = QueryHost(IID_IAxWinHostWindow, (void**)&spHost);
		if (((HRESULT)(hr) >= 0))
			hr = spHost->SetExternalUIHandler(pUIHandler);
		return hr;
	}
};

typedef CAxWindowT<CWindow> CAxWindow;

#line 1452 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"





#pragma pack(push,1)
struct _WndProcThunk
{
	DWORD   m_mov;          
	DWORD   m_this;         
	BYTE    m_jmp;          
	DWORD   m_relproc;      
};
#pragma pack(pop)















#line 1482 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"

class CWndProcThunk
{
public:
	union
	{
		_AtlCreateWndData cd;
		_WndProcThunk thunk;
	};
	void Init(WNDPROC proc, void* pThis)
	{

		thunk.m_mov = 0x042444C7;  
		thunk.m_this = (DWORD)pThis;
		thunk.m_jmp = 0xe9;
		thunk.m_relproc = (int)proc - ((int)this+sizeof(_WndProcThunk));






#line 1505 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
		
		
		FlushInstructionCache(GetCurrentProcess(), &thunk, sizeof(thunk));
	}
};




class __declspec(novtable) CMessageMap
{
public:
	virtual BOOL ProcessWindowMessage(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam,
		LRESULT& lResult, DWORD dwMsgMapID) = 0;
};


























































































































































































class CDynamicChain
{
public:
	struct ATL_CHAIN_ENTRY
	{
		DWORD m_dwChainID;
		CMessageMap* m_pObject;
		DWORD m_dwMsgMapID;
	};

	CSimpleArray<ATL_CHAIN_ENTRY*> m_aChainEntry;

	CDynamicChain()
	{ }

	~CDynamicChain()
	{
		for(int i = 0; i < m_aChainEntry.GetSize(); i++)
		{
			if(m_aChainEntry[i] != 0)
				delete m_aChainEntry[i];
		}
	}

	BOOL SetChainEntry(DWORD dwChainID, CMessageMap* pObject, DWORD dwMsgMapID = 0)
	{
	

		for(int i = 0; i < m_aChainEntry.GetSize(); i++)
		{
			if(m_aChainEntry[i] != 0 && m_aChainEntry[i]->m_dwChainID == dwChainID)
			{
				m_aChainEntry[i]->m_pObject = pObject;
				m_aChainEntry[i]->m_dwMsgMapID = dwMsgMapID;
				return 1;
			}
		}

	

		ATL_CHAIN_ENTRY* pEntry = 0;
		pEntry = new ATL_CHAIN_ENTRY;;

		if(pEntry == 0)
			return 0;

		pEntry->m_dwChainID = dwChainID;
		pEntry->m_pObject = pObject;
		pEntry->m_dwMsgMapID = dwMsgMapID;

	

		for(i = 0; i < m_aChainEntry.GetSize(); i++)
		{
			if(m_aChainEntry[i] == 0)
			{
				m_aChainEntry[i] = pEntry;
				return 1;
			}
		}

	

		BOOL bRet = m_aChainEntry.Add(pEntry);

		if(!bRet)
		{
			delete pEntry;
			return 0;
		}

		return 1;
	}

	BOOL RemoveChainEntry(DWORD dwChainID)
	{
		for(int i = 0; i < m_aChainEntry.GetSize(); i++)
		{
			if(m_aChainEntry[i] != 0 && m_aChainEntry[i]->m_dwChainID == dwChainID)
			{
				delete m_aChainEntry[i];
				m_aChainEntry[i] = 0;
				return 1;
			}
		}

		return 0;
	}

	BOOL CallChain(DWORD dwChainID, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult)
	{
		for(int i = 0; i < m_aChainEntry.GetSize(); i++)
		{
			if(m_aChainEntry[i] != 0 && m_aChainEntry[i]->m_dwChainID == dwChainID)
				return (m_aChainEntry[i]->m_pObject)->ProcessWindowMessage(hWnd, uMsg, wParam, lParam, lResult, m_aChainEntry[i]->m_dwMsgMapID);
		}

		return 0;
	}
};











































template <DWORD t_dwStyle = 0, DWORD t_dwExStyle = 0>
class CWinTraits
{
public:
	static DWORD GetWndStyle(DWORD dwStyle)
	{
		return dwStyle == 0 ? t_dwStyle : dwStyle;
	}
	static DWORD GetWndExStyle(DWORD dwExStyle)
	{
		return dwExStyle == 0 ? t_dwExStyle : dwExStyle;
	}
};

typedef CWinTraits<0x40000000L | 0x10000000L | 0x02000000L | 0x04000000L, 0>					CControlWinTraits;
typedef CWinTraits<(0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L) | 0x02000000L | 0x04000000L, 0x00040000L | 0x00000100L>		CFrameWinTraits;
typedef CWinTraits<(0x00000000L | 0x00C00000L | 0x00080000L | 0x00040000L | 0x00020000L | 0x00010000L) | 0x40000000L | 0x10000000L | 0x02000000L | 0x04000000L, 0x00000040L>	CMDIChildWinTraits;

typedef CWinTraits<0, 0> CNullTraits;

template <DWORD t_dwStyle = 0, DWORD t_dwExStyle = 0, class TWinTraits = CControlWinTraits>
class CWinTraitsOR
{
public:
	static DWORD GetWndStyle(DWORD dwStyle)
	{
		return dwStyle | t_dwStyle | TWinTraits::GetWndStyle(dwStyle);
	}
	static DWORD GetWndExStyle(DWORD dwExStyle)
	{
		return dwExStyle | t_dwExStyle | TWinTraits::GetWndExStyle(dwExStyle);
	}
};




template <class TBase = CWindow>
class __declspec(novtable) CWindowImplRoot : public TBase, public CMessageMap
{
public:
	CWndProcThunk m_thunk;
	const MSG* m_pCurrentMsg;


	CWindowImplRoot() : m_pCurrentMsg(0)
	{ }

	~CWindowImplRoot()
	{







	}


	const MSG* GetCurrentMessage() const
	{
		return m_pCurrentMsg;
	}


	LRESULT ReflectNotifications(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);
	static BOOL DefaultReflectionHandler(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult);
};

template <class TBase>
LRESULT CWindowImplRoot< TBase >::ReflectNotifications(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	HWND hWndChild = 0;

	switch(uMsg)
	{
	case 0x0111:
		if(lParam != 0)	
			hWndChild = (HWND)lParam;
		break;
	case 0x004E:
		hWndChild = ((LPNMHDR)lParam)->hwndFrom;
		break;
	case 0x0210:
		switch(((WORD)((DWORD_PTR)(wParam) & 0xffff)))
		{
		case 0x0001:
		case 0x0002:
			hWndChild = (HWND)lParam;
			break;
		default:
			hWndChild = GetDlgItem(((WORD)((DWORD_PTR)(wParam) >> 16)));
			break;
		}
		break;
	case 0x002B:
		if(wParam)	
			hWndChild = ((LPDRAWITEMSTRUCT)lParam)->hwndItem;
		break;
	case 0x002C:
		if(wParam)	
			hWndChild = GetDlgItem(((LPMEASUREITEMSTRUCT)lParam)->CtlID);
		break;
	case 0x0039:
		if(wParam)	
			hWndChild = GetDlgItem(((LPCOMPAREITEMSTRUCT)lParam)->CtlID);
		break;
	case 0x002D:
		if(wParam)	
			hWndChild = GetDlgItem(((LPDELETEITEMSTRUCT)lParam)->CtlID);
		break;
	case 0x002E:
	case 0x002F:
	case 0x0114:
	case 0x0115:
		hWndChild = (HWND)lParam;
		break;
	case 0x0135:
	case 0x0136:
	case 0x0133:
	case 0x0134:
	case 0x0132:
	case 0x0137:
	case 0x0138:
		hWndChild = (HWND)lParam;
		break;
	default:
		break;
	}

	if(hWndChild == 0)
	{
		bHandled = 0;
		return 1;
	}

	((void)0);
	return ::SendMessageA(hWndChild, (0x0400+0x1c00) + uMsg, wParam, lParam);
}

template <class TBase>
BOOL CWindowImplRoot< TBase >::DefaultReflectionHandler(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult)
{
	switch(uMsg)
	{
	case ((0x0400+0x1c00) + 0x0111):
	case ((0x0400+0x1c00) + 0x004E):
	case ((0x0400+0x1c00) + 0x0210):
	case ((0x0400+0x1c00) + 0x002B):
	case ((0x0400+0x1c00) + 0x002C):
	case ((0x0400+0x1c00) + 0x0039):
	case ((0x0400+0x1c00) + 0x002D):
	case ((0x0400+0x1c00) + 0x002E):
	case ((0x0400+0x1c00) + 0x002F):
	case ((0x0400+0x1c00) + 0x0114):
	case ((0x0400+0x1c00) + 0x0115):
	case ((0x0400+0x1c00) + 0x0135):
	case ((0x0400+0x1c00) + 0x0136):
	case ((0x0400+0x1c00) + 0x0133):
	case ((0x0400+0x1c00) + 0x0134):
	case ((0x0400+0x1c00) + 0x0132):
	case ((0x0400+0x1c00) + 0x0137):
	case ((0x0400+0x1c00) + 0x0138):
		lResult = ::DefWindowProcA(hWnd, uMsg - (0x0400+0x1c00), wParam, lParam);
		return 1;
	default:
		break;
	}
	return 0;
}

template <class TBase = CWindow, class TWinTraits = CControlWinTraits>
class __declspec(novtable) CWindowImplBaseT : public CWindowImplRoot< TBase >
{
public:
	WNDPROC m_pfnSuperWindowProc;

	CWindowImplBaseT() : m_pfnSuperWindowProc(::DefWindowProcA)
	{}

	static DWORD GetWndStyle(DWORD dwStyle)
	{
		return TWinTraits::GetWndStyle(dwStyle);
	}
	static DWORD GetWndExStyle(DWORD dwExStyle)
	{
		return TWinTraits::GetWndExStyle(dwExStyle);
	}

	virtual WNDPROC GetWindowProc()
	{
		return WindowProc;
	}
	static LRESULT __stdcall StartWindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
	static LRESULT __stdcall WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
	HWND Create(HWND hWndParent, RECT& rcPos, LPCTSTR szWindowName,
			DWORD dwStyle, DWORD dwExStyle, UINT nID, ATOM atom, LPVOID lpCreateParam = 0);
	BOOL DestroyWindow()
	{
		((void)0);
		return ::DestroyWindow(m_hWnd);
	}
	BOOL SubclassWindow(HWND hWnd);
	HWND UnsubclassWindow(BOOL bForce = 0);

	LRESULT DefWindowProcA()
	{
		const MSG* pMsg = m_pCurrentMsg;
		LRESULT lRes = 0;
		if (pMsg != 0)
			lRes = DefWindowProcA(pMsg->message, pMsg->wParam, pMsg->lParam);
		return lRes;
	}

	LRESULT DefWindowProcA(UINT uMsg, WPARAM wParam, LPARAM lParam)
	{

		return ::CallWindowProcA(m_pfnSuperWindowProc, m_hWnd, uMsg, wParam, lParam);


#line 2071 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
	}

	virtual void OnFinalMessage(HWND )
	{
		
	}
};

typedef CWindowImplBaseT<CWindow>	CWindowImplBase;

template <class TBase, class TWinTraits>
LRESULT __stdcall CWindowImplBaseT< TBase, TWinTraits >::StartWindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	CWindowImplBaseT< TBase, TWinTraits >* pThis = (CWindowImplBaseT< TBase, TWinTraits >*)_Module.ExtractCreateWndData();
	((void)0);
	pThis->m_hWnd = hWnd;
	pThis->m_thunk.Init(pThis->GetWindowProc(), pThis);
	WNDPROC pProc = (WNDPROC)&(pThis->m_thunk.thunk);
	WNDPROC pOldProc = (WNDPROC)::SetWindowLongA(hWnd, (-4), (LONG)pProc);





	pOldProc;	
#line 2097 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
	return pProc(hWnd, uMsg, wParam, lParam);
}

template <class TBase, class TWinTraits>
LRESULT __stdcall CWindowImplBaseT< TBase, TWinTraits >::WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	CWindowImplBaseT< TBase, TWinTraits >* pThis = (CWindowImplBaseT< TBase, TWinTraits >*)hWnd;
	
	MSG msg = { pThis->m_hWnd, uMsg, wParam, lParam, 0, { 0, 0 } };
	const MSG* pOldMsg = pThis->m_pCurrentMsg;
	pThis->m_pCurrentMsg = &msg;
	
	LRESULT lRes;
	BOOL bRet = pThis->ProcessWindowMessage(pThis->m_hWnd, uMsg, wParam, lParam, lRes, 0);
	
	((void)0);
	pThis->m_pCurrentMsg = pOldMsg;
	
	if(!bRet)
	{
		if(uMsg != 0x0082)
			lRes = pThis->DefWindowProcA(uMsg, wParam, lParam);
		else
		{
			
			LONG pfnWndProc = ::GetWindowLongA(pThis->m_hWnd, (-4));
			lRes = pThis->DefWindowProcA(uMsg, wParam, lParam);
			if(pThis->m_pfnSuperWindowProc != ::DefWindowProcA && ::GetWindowLongA(pThis->m_hWnd, (-4)) == pfnWndProc)
				::SetWindowLongA(pThis->m_hWnd, (-4), (LONG)pThis->m_pfnSuperWindowProc);
			
			HWND hWnd = pThis->m_hWnd;
			pThis->m_hWnd = 0;
			
			pThis->OnFinalMessage(hWnd);
		}
	}
	return lRes;
}

template <class TBase, class TWinTraits>
HWND CWindowImplBaseT< TBase, TWinTraits >::Create(HWND hWndParent, RECT& rcPos, LPCTSTR szWindowName,
		DWORD dwStyle, DWORD dwExStyle, UINT nID, ATOM atom, LPVOID lpCreateParam)
{
	((void)0);

	if(atom == 0)
		return 0;

	_Module.AddCreateWndData(&m_thunk.cd, this);

	if(nID == 0 && (dwStyle & 0x40000000L))
		nID = (UINT)this;

	HWND hWnd = ::CreateWindowExA(dwExStyle, (LPCTSTR)((LONG)(((WORD)((DWORD_PTR)(atom) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(0) & 0xffff))) << 16)), szWindowName,
		dwStyle, rcPos.left, rcPos.top, rcPos.right - rcPos.left,
		rcPos.bottom - rcPos.top, hWndParent, (HMENU)nID,
		_Module.GetModuleInstance(), lpCreateParam);

	((void)0);

	return hWnd;
}

template <class TBase, class TWinTraits>
BOOL CWindowImplBaseT< TBase, TWinTraits >::SubclassWindow(HWND hWnd)
{
	((void)0);
	((void)0);
	m_thunk.Init(GetWindowProc(), this);
	WNDPROC pProc = (WNDPROC)&(m_thunk.thunk);
	WNDPROC pfnWndProc = (WNDPROC)::SetWindowLongA(hWnd, (-4), (LONG)pProc);
	if(pfnWndProc == 0)
		return 0;
	m_pfnSuperWindowProc = pfnWndProc;
	m_hWnd = hWnd;
	return 1;
}



template <class TBase, class TWinTraits>
HWND CWindowImplBaseT< TBase, TWinTraits >::UnsubclassWindow(BOOL bForce )
{
	((void)0);

	WNDPROC pOurProc = (WNDPROC)&(m_thunk.thunk);
	WNDPROC pActiveProc = (WNDPROC)::GetWindowLongA(m_hWnd, (-4));

	HWND hWnd = 0;
	if (bForce || pOurProc == pActiveProc)
	{
		if(!::SetWindowLongA(m_hWnd, (-4), (LONG)m_pfnSuperWindowProc))
			return 0;

		m_pfnSuperWindowProc = ::DefWindowProcA;
		hWnd = m_hWnd;
		m_hWnd = 0;
	}
	return hWnd;
}

template <class T, class TBase = CWindow, class TWinTraits = CControlWinTraits>
class __declspec(novtable) CWindowImpl : public CWindowImplBaseT< TBase, TWinTraits >
{
public:
	static CWndClassInfoA& GetWndClassInfo() { static CWndClassInfoA wc = { { sizeof(WNDCLASSEX), 0x0002 | 0x0001 | 0x0008, StartWindowProc, 0, 0, 0, 0, 0, (HBRUSH)(5 + 1), 0, 0, 0 }, 0, 0, (LPSTR)((ULONG_PTR)((WORD)(32512))), 1, 0, "" }; return wc; }

	HWND Create(HWND hWndParent, RECT& rcPos, LPCTSTR szWindowName = 0,
			DWORD dwStyle = 0, DWORD dwExStyle = 0,
			UINT nID = 0, LPVOID lpCreateParam = 0)
	{
		if (T::GetWndClassInfo().m_lpszOrigName == 0)
			T::GetWndClassInfo().m_lpszOrigName = GetWndClassName();
		ATOM atom = T::GetWndClassInfo().Register(&m_pfnSuperWindowProc);

		dwStyle = T::GetWndStyle(dwStyle);
		dwExStyle = T::GetWndExStyle(dwExStyle);

		return CWindowImplBaseT< TBase, TWinTraits >::Create(hWndParent, rcPos, szWindowName,
			dwStyle, dwExStyle, nID, atom, lpCreateParam);
	}
};




template <class TBase = CWindow>
class __declspec(novtable) CDialogImplBaseT : public CWindowImplRoot< TBase >
{
public:
	virtual WNDPROC GetDialogProc()
	{
		return DialogProc;
	}
	static LRESULT __stdcall StartDialogProc(HWND hWnd, UINT uMsg,
		WPARAM wParam, LPARAM lParam);
	static LRESULT __stdcall DialogProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
	BOOL MapDialogRect(LPRECT lpRect)
	{
		((void)0);
		return ::MapDialogRect(m_hWnd, lpRect);
	}
	virtual void OnFinalMessage(HWND )
	{
		
	}
	
	LRESULT DefWindowProcA()
	{
		return 0;
	}
};

template <class TBase>
LRESULT __stdcall CDialogImplBaseT< TBase >::StartDialogProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	CDialogImplBaseT< TBase >* pThis = (CDialogImplBaseT< TBase >*)_Module.ExtractCreateWndData();
	((void)0);
	pThis->m_hWnd = hWnd;
	pThis->m_thunk.Init(pThis->GetDialogProc(), pThis);
	WNDPROC pProc = (WNDPROC)&(pThis->m_thunk.thunk);
	WNDPROC pOldProc = (WNDPROC)::SetWindowLongA(hWnd, 4, (LONG)pProc);





	pOldProc;	
#line 2266 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
	return pProc(hWnd, uMsg, wParam, lParam);
}

template <class TBase>
LRESULT __stdcall CDialogImplBaseT< TBase >::DialogProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	CDialogImplBaseT< TBase >* pThis = (CDialogImplBaseT< TBase >*)hWnd;
	
	MSG msg = { pThis->m_hWnd, uMsg, wParam, lParam, 0, { 0, 0 } };
	const MSG* pOldMsg = pThis->m_pCurrentMsg;
	pThis->m_pCurrentMsg = &msg;
	
	LRESULT lRes;
	BOOL bRet = pThis->ProcessWindowMessage(pThis->m_hWnd, uMsg, wParam, lParam, lRes, 0);
	
	((void)0);
	pThis->m_pCurrentMsg = pOldMsg;
	
	if(bRet)
	{
		switch (uMsg)
		{
		case 0x0039:
		case 0x002E:
		case 0x002F:
		case 0x0110:
		case 0x0037:
		case 0x0132:
		case 0x0133:
		case 0x0134:
		case 0x0135:
		case 0x0136:
		case 0x0137:
		case 0x0138:
			return lRes;
			break;
		}
		::SetWindowLongA(pThis->m_hWnd, 0, lRes);
		return 1;
	}
	if(uMsg == 0x0082)
	{
		
		HWND hWnd = pThis->m_hWnd;
		pThis->m_hWnd = 0;
		
		pThis->OnFinalMessage(hWnd);
	}
	return 0;
}

typedef CDialogImplBaseT<CWindow>	CDialogImplBase;

template <class T, class TBase = CWindow>
class __declspec(novtable) CDialogImpl : public CDialogImplBaseT< TBase >
{
public:




	
	int DoModal(HWND hWndParent = ::GetActiveWindow(), LPARAM dwInitParam = 0)
	{
		((void)0);
		_Module.AddCreateWndData(&m_thunk.cd, (CDialogImplBaseT< TBase >*)this);



		return ::DialogBoxParamA(_Module.GetResourceInstance(), (LPSTR)((ULONG_PTR)((WORD)(T::IDD))),
					hWndParent, (DLGPROC)T::StartDialogProc, dwInitParam);
	}
	BOOL EndDialog(int nRetCode)
	{
		((void)0);
		((void)0);	
		return ::EndDialog(m_hWnd, nRetCode);
	}
	
	HWND Create(HWND hWndParent, LPARAM dwInitParam = 0)
	{
		((void)0);
		_Module.AddCreateWndData(&m_thunk.cd, (CDialogImplBaseT< TBase >*)this);



		HWND hWnd = ::CreateDialogParamA(_Module.GetResourceInstance(), (LPSTR)((ULONG_PTR)((WORD)(T::IDD))),
					hWndParent, (DLGPROC)T::StartDialogProc, dwInitParam);
		((void)0);
		return hWnd;
	}
	
	HWND Create(HWND hWndParent, RECT&, LPARAM dwInitParam = 0)
	{
		return Create(hWndParent, dwInitParam);
	}
	BOOL DestroyWindow()
	{
		((void)0);
		((void)0);	
		return ::DestroyWindow(m_hWnd);
	}
};






template <class T, class TBase = CWindow>
class __declspec(novtable) CAxDialogImpl : public CDialogImplBaseT< TBase >
{
public:




	
	int DoModal(HWND hWndParent = ::GetActiveWindow(), LPARAM dwInitParam = 0)
	{
		((void)0);
		_Module.AddCreateWndData(&m_thunk.cd, (CDialogImplBaseT< TBase >*)this);



		return AtlAxDialogBoxA(_Module.GetResourceInstance(), (LPSTR)((ULONG_PTR)((WORD)(T::IDD))),
					hWndParent, (DLGPROC)T::StartDialogProc, dwInitParam);
	}
	BOOL EndDialog(int nRetCode)
	{
		((void)0);
		((void)0);	
		return ::EndDialog(m_hWnd, nRetCode);
	}
	
	HWND Create(HWND hWndParent, LPARAM dwInitParam = 0)
	{
		((void)0);
		_Module.AddCreateWndData(&m_thunk.cd, (CDialogImplBaseT< TBase >*)this);



		HWND hWnd = AtlAxCreateDialogA(_Module.GetResourceInstance(), (LPSTR)((ULONG_PTR)((WORD)(T::IDD))),
					hWndParent, (DLGPROC)T::StartDialogProc, dwInitParam);
		((void)0);
		return hWnd;
	}
	
	HWND Create(HWND hWndParent, RECT&, LPARAM dwInitParam = 0)
	{
		return Create(hWndParent, dwInitParam);
	}
	BOOL DestroyWindow()
	{
		((void)0);
		((void)0);	
		return ::DestroyWindow(m_hWnd);
	}
};

#line 2427 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"




template <WORD t_wDlgTemplateID, BOOL t_bCenter = 1>
class CSimpleDialog : public CDialogImplBase
{
public:
	int DoModal(HWND hWndParent = ::GetActiveWindow())
	{
		((void)0);
		_Module.AddCreateWndData(&m_thunk.cd, (CDialogImplBase*)this);
		int nRet = ::
DialogBoxParamA(_Module.GetResourceInstance(), (LPSTR)((ULONG_PTR)((WORD)(t_wDlgTemplateID))), hWndParent, (DLGPROC)StartDialogProc, 0L);
		m_hWnd = 0;
		return nRet;
	}

	typedef CSimpleDialog<t_wDlgTemplateID, t_bCenter>	thisClass;
	public: BOOL ProcessWindowMessage(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult, DWORD dwMsgMapID = 0) { BOOL bHandled = 1; hWnd; uMsg; wParam; lParam; lResult; bHandled; switch(dwMsgMapID) { case 0:
		if(uMsg == 0x0110) { bHandled = 1; lResult = OnInitDialog(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0111 && ((WORD)((DWORD_PTR)(wParam) & 0xffff)) >= 1 && ((WORD)((DWORD_PTR)(wParam) & 0xffff)) <= 7) { bHandled = 1; lResult = OnCloseCmd(((WORD)((DWORD_PTR)(wParam) >> 16)), ((WORD)((DWORD_PTR)(wParam) & 0xffff)), (HWND)lParam, bHandled); if(bHandled) return 1; }
	break; default: 1 ? (void)0 : AtlTrace2(atlTraceWindowing, 0, "Invalid message map ID (%i)\n", dwMsgMapID); ((void)0); break; } return 0; }

	LRESULT OnInitDialog(UINT , WPARAM , LPARAM , BOOL& )
	{
		if(t_bCenter)
			CenterWindow(GetParent());
		return 1;
	}

	LRESULT OnCloseCmd(WORD , WORD wID, HWND , BOOL& )
	{
		::EndDialog(m_hWnd, wID);
		return 0;
	}
};




template <class TBase = CWindow, class TWinTraits = CControlWinTraits>
class CContainedWindowT : public TBase
{
public:
	CWndProcThunk m_thunk;
	LPCTSTR m_lpszClassName;
	WNDPROC m_pfnSuperWindowProc;
	CMessageMap* m_pObject;
	DWORD m_dwMsgMapID;
	const MSG* m_pCurrentMsg;

	
	
	
	CContainedWindowT() : m_pCurrentMsg(0)
	{ }

	CContainedWindowT(LPTSTR lpszClassName, CMessageMap* pObject, DWORD dwMsgMapID = 0)
		: m_lpszClassName(lpszClassName),
		m_pfnSuperWindowProc(::DefWindowProcA),
		m_pObject(pObject), m_dwMsgMapID(dwMsgMapID),
		m_pCurrentMsg(0)
	{ }

	CContainedWindowT(CMessageMap* pObject, DWORD dwMsgMapID = 0)
		: m_lpszClassName(TBase::GetWndClassName()),
		m_pfnSuperWindowProc(::DefWindowProcA),
		m_pObject(pObject), m_dwMsgMapID(dwMsgMapID),
		m_pCurrentMsg(0)
	{ }

	void SwitchMessageMap(DWORD dwMsgMapID)
	{
		m_dwMsgMapID = dwMsgMapID;
	}

	const MSG* GetCurrentMessage() const
	{
		return m_pCurrentMsg;
	}

	LRESULT DefWindowProcA()
	{
		const MSG* pMsg = m_pCurrentMsg;
		LRESULT lRes = 0;
		if (pMsg != 0)
			lRes = DefWindowProcA(pMsg->message, pMsg->wParam, pMsg->lParam);
		return lRes;
	}

	LRESULT DefWindowProcA(UINT uMsg, WPARAM wParam, LPARAM lParam)
	{

		return ::CallWindowProcA(m_pfnSuperWindowProc, m_hWnd, uMsg, wParam, lParam);


#line 2525 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
	}
	static LRESULT __stdcall StartWindowProc(HWND hWnd, UINT uMsg,
		WPARAM wParam, LPARAM lParam)
	{
		CContainedWindowT< TBase >* pThis = (CContainedWindowT< TBase >*)_Module.ExtractCreateWndData();
		((void)0);
		pThis->m_hWnd = hWnd;
		pThis->m_thunk.Init(WindowProc, pThis);
		WNDPROC pProc = (WNDPROC)&(pThis->m_thunk.thunk);
		WNDPROC pOldProc = (WNDPROC)::SetWindowLongA(hWnd, (-4), (LONG)pProc);





		pOldProc;	
#line 2542 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
		return pProc(hWnd, uMsg, wParam, lParam);
	}

	static LRESULT __stdcall WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
	{
		CContainedWindowT< TBase >* pThis = (CContainedWindowT< TBase >*)hWnd;
		((void)0);
		((void)0);
		
		MSG msg = { pThis->m_hWnd, uMsg, wParam, lParam, 0, { 0, 0 } };
		const MSG* pOldMsg = pThis->m_pCurrentMsg;
		pThis->m_pCurrentMsg = &msg;
		
		LRESULT lRes;
		BOOL bRet = pThis->m_pObject->ProcessWindowMessage(pThis->m_hWnd, uMsg, wParam, lParam, lRes, pThis->m_dwMsgMapID);
		
		((void)0);
		pThis->m_pCurrentMsg = pOldMsg;
		
		if(!bRet)
		{
			if(uMsg != 0x0082)
				lRes = pThis->DefWindowProcA(uMsg, wParam, lParam);
			else
			{
				
				LONG pfnWndProc = ::GetWindowLongA(pThis->m_hWnd, (-4));
				lRes = pThis->DefWindowProcA(uMsg, wParam, lParam);
				if(pThis->m_pfnSuperWindowProc != ::DefWindowProcA && ::GetWindowLongA(pThis->m_hWnd, (-4)) == pfnWndProc)
					::SetWindowLongA(pThis->m_hWnd, (-4), (LONG)pThis->m_pfnSuperWindowProc);
				
				pThis->m_hWnd = 0;
			}
		}
		return lRes;
	}

	ATOM RegisterWndSuperclass()
	{
		ATOM atom = 0;
		LPTSTR szBuff = (LPTSTR)_alloca((lstrlenA(m_lpszClassName) + 14) * sizeof(TCHAR));

		WNDCLASSEX wc;
		wc.cbSize = sizeof(WNDCLASSEX);

		
		if(!::GetClassInfoExA(0, m_lpszClassName, &wc))
		{
			
			if(!::GetClassInfoExA(_Module.GetModuleInstance(), m_lpszClassName, &wc))
				return atom;
		}

		m_pfnSuperWindowProc = wc.lpfnWndProc;
		lstrcpyA(szBuff, "ATL:");
		lstrcatA(szBuff, m_lpszClassName);

		WNDCLASSEX wc1;
		wc1.cbSize = sizeof(WNDCLASSEX);
		atom = (ATOM)::GetClassInfoExA(_Module.GetModuleInstance(), szBuff, &wc1);

		if(atom == 0)   
		{
			wc.lpszClassName = szBuff;
			wc.lpfnWndProc = StartWindowProc;
			wc.hInstance = _Module.GetModuleInstance();
			wc.style &= ~0x4000;	

			atom = ::RegisterClassExA(&wc);
		}

		return atom;
	}
	HWND Create(CMessageMap* pObject, DWORD dwMsgMapID, HWND hWndParent, RECT* prcPos,
		LPCTSTR szWindowName = 0, DWORD dwStyle = 0, DWORD dwExStyle = 0,
		UINT nID = 0, LPVOID lpCreateParam = 0)
	{
		m_lpszClassName = TBase::GetWndClassName();
		m_pfnSuperWindowProc = ::DefWindowProcA;
		m_pObject = pObject;
		m_dwMsgMapID = dwMsgMapID;
		return Create(hWndParent, prcPos, szWindowName, dwStyle, dwExStyle, nID, lpCreateParam);
	}

	HWND Create(LPCTSTR lpszClassName, CMessageMap* pObject, DWORD dwMsgMapID, HWND hWndParent, RECT* prcPos, LPCTSTR szWindowName = 0,
		DWORD dwStyle = 0, DWORD dwExStyle = 0, UINT nID = 0, LPVOID lpCreateParam = 0)
	{
		m_lpszClassName = lpszClassName;
		m_pfnSuperWindowProc = ::DefWindowProcA;
		m_pObject = pObject;
		m_dwMsgMapID = dwMsgMapID;
		return Create(hWndParent, prcPos, szWindowName, dwStyle, dwExStyle, nID, lpCreateParam);
	}


	
	
	HWND Create(HWND hWndParent, RECT& rcPos, LPCTSTR szWindowName = 0,
		DWORD dwStyle = 0, DWORD dwExStyle = 0,
		UINT nID = 0, LPVOID lpCreateParam = 0)
	{
		return Create(hWndParent, &rcPos, szWindowName, dwStyle, dwExStyle, nID, lpCreateParam);
	}

	HWND Create(HWND hWndParent, RECT* prcPos, LPCTSTR szWindowName = 0,
		DWORD dwStyle = 0, DWORD dwExStyle = 0,
		UINT nID = 0, LPVOID lpCreateParam = 0)
	{
		((void)0);

		ATOM atom = RegisterWndSuperclass();
		if(atom == 0)
			return 0;

		_Module.AddCreateWndData(&m_thunk.cd, this);

		if(nID == 0 && (dwStyle & 0x40000000L))
			nID = (UINT)this;

		dwStyle = TWinTraits::GetWndStyle(dwStyle);
		dwExStyle = TWinTraits::GetWndExStyle(dwExStyle);

		HWND hWnd = ::CreateWindowExA(dwExStyle, (LPCTSTR)((LONG)(((WORD)((DWORD_PTR)(atom) & 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(0) & 0xffff))) << 16)), szWindowName,
								dwStyle,
								prcPos->left, prcPos->top,
								prcPos->right - prcPos->left,
								prcPos->bottom - prcPos->top,
								hWndParent, (HMENU)nID,
								_Module.GetModuleInstance(), lpCreateParam);
		((void)0);
		return hWnd;
	}

	BOOL SubclassWindow(HWND hWnd)
	{
		((void)0);
		((void)0);

		m_thunk.Init(WindowProc, this);
		WNDPROC pProc = (WNDPROC)&m_thunk.thunk;
		WNDPROC pfnWndProc = (WNDPROC)::SetWindowLongA(hWnd, (-4), (LONG)pProc);
		if(pfnWndProc == 0)
			return 0;
		m_pfnSuperWindowProc = pfnWndProc;
		m_hWnd = hWnd;
		return 1;
	}

	
	
	HWND UnsubclassWindow(BOOL bForce = 0)
	{
		((void)0);

		WNDPROC pOurProc = (WNDPROC)&(m_thunk.thunk);
		WNDPROC pActiveProc = (WNDPROC)::GetWindowLongA(m_hWnd, (-4));

		HWND hWnd = 0;
		if (bForce || pOurProc == pActiveProc)
		{
			if(!::SetWindowLongA(m_hWnd, (-4), (LONG)m_pfnSuperWindowProc))
				return 0;

			m_pfnSuperWindowProc = ::DefWindowProcA;
			hWnd = m_hWnd;
			m_hWnd = 0;
		}
		return hWnd;
	}
};

typedef CContainedWindowT<CWindow>	CContainedWindow;




class _DialogSizeHelper
{
public:

#pragma pack(push, 1)
	struct _ATL_DLGTEMPLATEEX
	{
		WORD dlgVer;
		WORD signature;
		DWORD helpID;
		DWORD exStyle;
		DWORD style;
		WORD cDlgItems;
		short x;
		short y;
		short cx;
		short cy;
	};
#pragma pack(pop)

	static void GetDialogSize(const DLGTEMPLATE* pTemplate, SIZE* pSize)
	{
		
		
		if (HasFont(pTemplate))
		{
			TCHAR szFace[32];
			WORD  wFontSize = 0;
			GetFont(pTemplate, szFace, &wFontSize);
			GetSizeInDialogUnits(pTemplate, pSize);
			ConvertDialogUnitsToPixels(szFace, wFontSize, pSize);
		}
		else
		{
			GetSizeInDialogUnits(pTemplate, pSize);
			LONG nDlgBaseUnits = GetDialogBaseUnits();
			pSize->cx = MulDiv(pSize->cx, ((WORD)((DWORD_PTR)(nDlgBaseUnits) & 0xffff)), 4);
			pSize->cy = MulDiv(pSize->cy, ((WORD)((DWORD_PTR)(nDlgBaseUnits) >> 16)), 8);
		}
	}

	static void ConvertDialogUnitsToPixels(LPCTSTR pszFontFace, WORD wFontSize, SIZE* pSizePixel)
	{
		
		UINT cxSysChar, cySysChar;
		LOGFONT lf;
		HDC hDC = ::GetDC(0);
		int cxDlg = pSizePixel->cx;
		int cyDlg = pSizePixel->cy;

		memset((&lf),0,(sizeof(LOGFONT)));
		lf.lfHeight = -MulDiv(wFontSize, GetDeviceCaps(hDC, 90), 72);
		lf.lfWeight = 400;
		lf.lfCharSet = 1;
		lstrcpyA(lf.lfFaceName, pszFontFace);

		HFONT hNewFont = CreateFontIndirectA(&lf);
		if (hNewFont != 0)
		{
			TEXTMETRIC  tm;
			SIZE        size;
			HFONT       hFontOld = (HFONT)SelectObject(hDC, hNewFont);
			GetTextMetricsA(hDC, &tm);
			cySysChar = tm.tmHeight + tm.tmExternalLeading;
			::GetTextExtentPointA(hDC,
				"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", 52,
				&size);
			cxSysChar = (size.cx + 26) / 52;
			SelectObject(hDC, hFontOld);
			DeleteObject(hNewFont);
		}
		else
		{
			
			cxSysChar = ((WORD)((DWORD_PTR)(GetDialogBaseUnits()) & 0xffff));
			cySysChar = ((WORD)((DWORD_PTR)(GetDialogBaseUnits()) >> 16));
		}
		::ReleaseDC(0, hDC);

		
		pSizePixel->cx = MulDiv(cxDlg, cxSysChar, 4);
		pSizePixel->cy = MulDiv(cyDlg, cySysChar, 8);
	}

	static BOOL IsDialogEx(const DLGTEMPLATE* pTemplate)
	{
		return ((_ATL_DLGTEMPLATEEX*)pTemplate)->signature == 0xFFFF;
	}

	static BOOL HasFont(const DLGTEMPLATE* pTemplate)
	{
		return (0x40L &
			(IsDialogEx(pTemplate) ?
				((_ATL_DLGTEMPLATEEX*)pTemplate)->style : pTemplate->style));
	}

	static BYTE* GetFontSizeField(const DLGTEMPLATE* pTemplate)
	{
		BOOL bDialogEx = IsDialogEx(pTemplate);
		WORD* pw;

		if (bDialogEx)
			pw = (WORD*)((_ATL_DLGTEMPLATEEX*)pTemplate + 1);
		else
			pw = (WORD*)(pTemplate + 1);

		if (*pw == (WORD)-1)        
			pw += 2; 
		else
			while(*pw++);

		if (*pw == (WORD)-1)        
			pw += 2; 
		else
			while(*pw++);

		while (*pw++);          

		return (BYTE*)pw;
	}

	static BOOL GetFont(const DLGTEMPLATE* pTemplate, TCHAR* pszFace, WORD* pFontSize)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;
		if (!HasFont(pTemplate))
			return 0;

		BYTE* pb = GetFontSizeField(pTemplate);
		*pFontSize = *(WORD*)pb;
		
		pb += sizeof(WORD) * (IsDialogEx(pTemplate) ? 3 : 1);

		strcpy(pszFace, ( ((_lpw = (WCHAR*)pb) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert))));
		return 1;
	}

	static void GetSizeInDialogUnits(const DLGTEMPLATE* pTemplate, SIZE* pSize)
	{
		if (IsDialogEx(pTemplate))
		{
			pSize->cx = ((_ATL_DLGTEMPLATEEX*)pTemplate)->cx;
			pSize->cy = ((_ATL_DLGTEMPLATEEX*)pTemplate)->cy;
		}
		else
		{
			pSize->cx = pTemplate->cx;
			pSize->cy = pTemplate->cy;
		}
	}
};

inline void AtlGetDialogSize(const DLGTEMPLATE* pTemplate, SIZE* pSize)
{
	_DialogSizeHelper::GetDialogSize(pTemplate, pSize);
}

}; 




#line 2880 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
#line 2881 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"

#line 2883 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"





namespace ATL
{
#line 2891 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"

inline ATOM __stdcall AtlModuleRegisterWndClassInfoA(_ATL_MODULE* pM, _ATL_WNDCLASSINFOA* p, WNDPROC* pProc)
{
	if (p->m_atom == 0)
	{
		::EnterCriticalSection(&pM->m_csWindowCreate);
		if(p->m_atom == 0)
		{
			HINSTANCE hInst = pM->m_hInst;
			if (p->m_lpszOrigName != 0)
			{
				((void)0);
				LPCSTR lpsz = p->m_wc.lpszClassName;
				WNDPROC proc = p->m_wc.lpfnWndProc;

				WNDCLASSEXA wc;
				wc.cbSize = sizeof(WNDCLASSEX);
				
				if(!::GetClassInfoExA(0, p->m_lpszOrigName, &wc))
				{
					
					if(!::GetClassInfoExA(_Module.GetModuleInstance(), p->m_lpszOrigName, &wc))
					{
						::LeaveCriticalSection(&pM->m_csWindowCreate);
						return 0;
					}
				}
				memcpy(&p->m_wc, &wc, sizeof(WNDCLASSEX));
				p->pWndProc = p->m_wc.lpfnWndProc;
				p->m_wc.lpszClassName = lpsz;
				p->m_wc.lpfnWndProc = proc;
			}
			else
			{
				p->m_wc.hCursor = ::LoadCursorA(p->m_bSystemCursor ? 0 : hInst,
					p->m_lpszCursorID);
			}

			p->m_wc.hInstance = hInst;
			p->m_wc.style &= ~0x4000;	
			if (p->m_wc.lpszClassName == 0)
			{
				wsprintfA(p->m_szAutoName, "ATL:%8.8X", (DWORD)&p->m_wc);
				p->m_wc.lpszClassName = p->m_szAutoName;
			}
			WNDCLASSEXA wcTemp;
			memcpy(&wcTemp, &p->m_wc, sizeof(WNDCLASSEXW));
			p->m_atom = (ATOM)::GetClassInfoExA(p->m_wc.hInstance, p->m_wc.lpszClassName, &wcTemp);
			if (p->m_atom == 0)
				p->m_atom = ::RegisterClassExA(&p->m_wc);
		}
		::LeaveCriticalSection(&pM->m_csWindowCreate);
	}

	if (p->m_lpszOrigName != 0)
	{
		((void)0);
		((void)0);
		*pProc = p->pWndProc;
	}
	return p->m_atom;
}

inline ATOM __stdcall AtlModuleRegisterWndClassInfoW(_ATL_MODULE* pM, _ATL_WNDCLASSINFOW* p, WNDPROC* pProc)
{
	if (p->m_atom == 0)
	{
		::EnterCriticalSection(&pM->m_csWindowCreate);
		if(p->m_atom == 0)
		{
			HINSTANCE hInst = pM->m_hInst;
			if (p->m_lpszOrigName != 0)
			{
				((void)0);
				LPCWSTR lpsz = p->m_wc.lpszClassName;
				WNDPROC proc = p->m_wc.lpfnWndProc;

				WNDCLASSEXW wc;
				wc.cbSize = sizeof(WNDCLASSEX);
				
				if(!::GetClassInfoExW(0, p->m_lpszOrigName, &wc))
				{
					
					if(!::GetClassInfoExW(_Module.GetModuleInstance(), p->m_lpszOrigName, &wc))
					{
						::LeaveCriticalSection(&pM->m_csWindowCreate);
						return 0;
					}
				}
				memcpy(&p->m_wc, &wc, sizeof(WNDCLASSEX));
				p->pWndProc = p->m_wc.lpfnWndProc;
				p->m_wc.lpszClassName = lpsz;
				p->m_wc.lpfnWndProc = proc;
			}
			else
			{
				p->m_wc.hCursor = ::LoadCursorW(p->m_bSystemCursor ? 0 : hInst,
					p->m_lpszCursorID);
			}

			p->m_wc.hInstance = hInst;
			p->m_wc.style &= ~0x4000;	
			if (p->m_wc.lpszClassName == 0)
			{
				wsprintfW(p->m_szAutoName, L"ATL:%8.8X", (DWORD)&p->m_wc);
				p->m_wc.lpszClassName = p->m_szAutoName;
			}
			WNDCLASSEXW wcTemp;
			memcpy(&wcTemp, &p->m_wc, sizeof(WNDCLASSEXW));
			p->m_atom = (ATOM)::GetClassInfoExW(p->m_wc.hInstance, p->m_wc.lpszClassName, &wcTemp);
			if (p->m_atom == 0)
				p->m_atom = ::RegisterClassExW(&p->m_wc);
		}
		::LeaveCriticalSection(&pM->m_csWindowCreate);
	}

	if (p->m_lpszOrigName != 0)
	{
		((void)0);
		((void)0);
		*pProc = p->pWndProc;
	}
	return p->m_atom;
}

inline HDC __stdcall AtlCreateTargetDC(HDC hdc, DVTARGETDEVICE* ptd)
{
	int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;

	







	if (ptd != 0)
	{
		LPDEVMODEW lpDevMode;
		LPOLESTR lpszDriverName;
		LPOLESTR lpszDeviceName;
		LPOLESTR lpszPortName;

		if (ptd->tdExtDevmodeOffset == 0)
			lpDevMode = 0;
		else
			lpDevMode  = (LPDEVMODEW) ((LPSTR)ptd + ptd->tdExtDevmodeOffset);

		lpszDriverName = (LPOLESTR)((BYTE*)ptd + ptd->tdDriverNameOffset);
		lpszDeviceName = (LPOLESTR)((BYTE*)ptd + ptd->tdDeviceNameOffset);
		lpszPortName   = (LPOLESTR)((BYTE*)ptd + ptd->tdPortNameOffset);

		return ::CreateDCA(((LPCSTR)( ((_lpw = lpszDriverName) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)))), ((LPCSTR)( ((_lpw = lpszDeviceName) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)))),
			((LPCSTR)( ((_lpw = lpszPortName) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)))), ((lpDevMode == 0) ? 0 : AtlDevModeW2A((LPDEVMODEA)_alloca(sizeof(DEVMODEA)+lpDevMode->dmDriverExtra), lpDevMode)));
	}
	else if (hdc == 0 || GetDeviceCaps(hdc, 2) == 5)
		return ::CreateDCA("DISPLAY", 0, 0, 0);
	else
		return hdc;
}

inline void __stdcall AtlHiMetricToPixel(const SIZEL * lpSizeInHiMetric, LPSIZEL lpSizeInPix)
{
	int nPixelsPerInchX;    
	int nPixelsPerInchY;    

	HDC hDCScreen = GetDC(0);
	((void)0);
	nPixelsPerInchX = GetDeviceCaps(hDCScreen, 88);
	nPixelsPerInchY = GetDeviceCaps(hDCScreen, 90);
	ReleaseDC(0, hDCScreen);

	lpSizeInPix->cx = ( ((nPixelsPerInchX)*(lpSizeInHiMetric->cx) + 2540/2) / 2540 );
	lpSizeInPix->cy = ( ((nPixelsPerInchY)*(lpSizeInHiMetric->cy) + 2540/2) / 2540 );
}

inline void __stdcall AtlPixelToHiMetric(const SIZEL * lpSizeInPix, LPSIZEL lpSizeInHiMetric)
{
	int nPixelsPerInchX;    
	int nPixelsPerInchY;    

	HDC hDCScreen = GetDC(0);
	((void)0);
	nPixelsPerInchX = GetDeviceCaps(hDCScreen, 88);
	nPixelsPerInchY = GetDeviceCaps(hDCScreen, 90);
	ReleaseDC(0, hDCScreen);

	lpSizeInHiMetric->cx = ( (2540*(lpSizeInPix->cx) + ((nPixelsPerInchX)>>1)) / (nPixelsPerInchX) );
	lpSizeInHiMetric->cy = ( (2540*(lpSizeInPix->cy) + ((nPixelsPerInchY)>>1)) / (nPixelsPerInchY) );
}



}; 
#line 3087 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"




#line 3092 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlwin.h"
#line 19 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"




#pragma comment(lib, "gdi32.lib")
#pragma comment(lib, "urlmon.lib")









#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msstkppg.h"
















extern "C" const GUID  CLSID_StockFontPage;


extern "C" const GUID  CLSID_StockColorPage;


extern "C" const GUID  CLSID_StockPicturePage;


#line 27 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msstkppg.h"
#line 35 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"




























#line 30 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atliface.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 36 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"




struct ATL_DRAWINFO
{
	UINT cbSize;
	DWORD dwDrawAspect;
	LONG lindex;
	DVTARGETDEVICE* ptd;
	HDC hicTargetDev;
	HDC hdcDraw;
	LPCRECTL prcBounds; 
	LPCRECTL prcWBounds; 
	BOOL bOptimize;
	BOOL bZoomed;
	BOOL bRectInHimetric;
	SIZEL ZoomNum;      
	SIZEL ZoomDen;
};

namespace ATL
{

#pragma pack(push, 8)



class __declspec(novtable) CComControlBase;
template <class T, class WinBase> class CComControl;






class CFirePropNotifyEvent
{
public:
	
	static HRESULT FireOnRequestEdit(IUnknown* pUnk, DISPID dispID)
	{
		CComQIPtr<IConnectionPointContainer, &IID_IConnectionPointContainer> pCPC(pUnk);
		if (!pCPC)
			return ((HRESULT)0x00000000L);
		CComPtr<IConnectionPoint> pCP;
		pCPC->FindConnectionPoint(IID_IPropertyNotifySink, &pCP);
		if (!pCP)
			return ((HRESULT)0x00000000L);
		CComPtr<IEnumConnections> pEnum;

		if (((HRESULT)(pCP->EnumConnections(&pEnum))<0))
			return ((HRESULT)0x00000000L);
		CONNECTDATA cd;
		while (pEnum->Next(1, &cd, 0) == ((HRESULT)0x00000000L))
		{
			if (cd.pUnk)
			{
				HRESULT hr = ((HRESULT)0x00000000L);
				CComQIPtr<IPropertyNotifySink, &IID_IPropertyNotifySink> pSink(cd.pUnk);
				if (pSink)
					hr = pSink->OnRequestEdit(dispID);
				cd.pUnk->Release();
				if (hr == ((HRESULT)0x00000001L))
					return ((HRESULT)0x00000001L);
			}
		}
		return ((HRESULT)0x00000000L);
	}
	
	static HRESULT FireOnChanged(IUnknown* pUnk, DISPID dispID)
	{
		CComQIPtr<IConnectionPointContainer, &IID_IConnectionPointContainer> pCPC(pUnk);
		if (!pCPC)
			return ((HRESULT)0x00000000L);
		CComPtr<IConnectionPoint> pCP;
		pCPC->FindConnectionPoint(IID_IPropertyNotifySink, &pCP);
		if (!pCP)
			return ((HRESULT)0x00000000L);
		CComPtr<IEnumConnections> pEnum;

		if (((HRESULT)(pCP->EnumConnections(&pEnum))<0))
			return ((HRESULT)0x00000000L);
		CONNECTDATA cd;
		while (pEnum->Next(1, &cd, 0) == ((HRESULT)0x00000000L))
		{
			if (cd.pUnk)
			{
				CComQIPtr<IPropertyNotifySink, &IID_IPropertyNotifySink> pSink(cd.pUnk);
				if (pSink)
					pSink->OnChanged(dispID);
				cd.pUnk->Release();
			}
		}
		return ((HRESULT)0x00000000L);
	}
};






class __declspec(novtable) CComControlBase
{
public:
	CComControlBase(HWND& h) : m_hWndCD(h)
	{
		memset(this, 0, sizeof(CComControlBase));
		m_phWndCD = &h;
		m_sizeExtent.cx = 2*2540;
		m_sizeExtent.cy = 2*2540;
		m_sizeNatural = m_sizeExtent;
	}
	~CComControlBase()
	{
		if (m_hWndCD != 0)
			::DestroyWindow(m_hWndCD);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Control Destroyed\n");
	}


public:
	

	
	void SetDirty(BOOL bDirty)
	{
		m_bRequiresSave = bDirty;
	}
	
	BOOL GetDirty()
	{
		return m_bRequiresSave ? 1 : 0;
	}
	
	void GetZoomInfo(ATL_DRAWINFO& di);
	
	HRESULT SendOnRename(IMoniker *pmk)
	{
		HRESULT hRes = ((HRESULT)0x00000000L);
		if (m_spOleAdviseHolder)
			hRes = m_spOleAdviseHolder->SendOnRename(pmk);
		return hRes;
	}
	
	HRESULT SendOnSave()
	{
		HRESULT hRes = ((HRESULT)0x00000000L);
		if (m_spOleAdviseHolder)
			hRes = m_spOleAdviseHolder->SendOnSave();
		return hRes;
	}
	
	HRESULT SendOnClose()
	{
		HRESULT hRes = ((HRESULT)0x00000000L);
		if (m_spOleAdviseHolder)
			hRes = m_spOleAdviseHolder->SendOnClose();
		return hRes;
	}
	
	HRESULT SendOnDataChange(DWORD advf = 0);
	
	HRESULT SendOnViewChange(DWORD dwAspect, LONG lindex = -1)
	{
		if (m_spAdviseSink)
			m_spAdviseSink->OnViewChange(dwAspect, lindex);
		return ((HRESULT)0x00000000L);
	}
	
	LRESULT OnSetFocus(UINT , WPARAM , LPARAM , BOOL& bHandled)
	{
		if (m_bInPlaceActive)
		{
			CComPtr<IOleObject> pOleObject;
			ControlQueryInterface(IID_IOleObject, (void**)&pOleObject);
			if (pOleObject != 0)
				pOleObject->DoVerb((-4L), 0, m_spClientSite, 0, m_hWndCD, &m_rcPos);
			CComQIPtr<IOleControlSite, &IID_IOleControlSite> spSite(m_spClientSite);
			if (m_bInPlaceActive && spSite != 0)
				spSite->OnFocus(1);
		}
		bHandled = 0;
		return 1;
	}
	LRESULT OnKillFocus(UINT , WPARAM , LPARAM , BOOL& bHandled)
	{
		CComQIPtr<IOleControlSite, &IID_IOleControlSite> spSite(m_spClientSite);
		if (m_bInPlaceActive && spSite != 0 && !::IsChild(m_hWndCD, ::GetFocus()))
			spSite->OnFocus(0);
		bHandled = 0;
		return 1;
	}
	LRESULT OnMouseActivate(UINT , WPARAM , LPARAM , BOOL& bHandled)
	{
		BOOL bUserMode = 1;
		HRESULT hRet = GetAmbientUserMode(bUserMode);
		
		
		if (((HRESULT)(hRet)<0) || bUserMode)
		{
			CComPtr<IOleObject> pOleObject;
			ControlQueryInterface(IID_IOleObject, (void**)&pOleObject);
			if (pOleObject != 0)
				pOleObject->DoVerb((-4L), 0, m_spClientSite, 0, m_hWndCD, &m_rcPos);
		}
		bHandled = 0;
		return 1;
	}
	BOOL PreTranslateAccelerator(LPMSG , HRESULT& )
	{
		return 0;
	}

	HRESULT GetAmbientProperty(DISPID dispid, VARIANT& var)
	{
		HRESULT hRes = ((HRESULT)0x80004005L);
		if (m_spAmbientDispatch.p != 0)
			hRes = m_spAmbientDispatch.GetProperty(dispid, &var);
		return hRes;
	}
	HRESULT GetAmbientAppearance(short& nAppearance)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-716), var);
		((void)0);
		nAppearance = var.iVal;
		return hRes;
	}
	HRESULT GetAmbientBackColor(OLE_COLOR& BackColor)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-701), var);
		((void)0);
		BackColor = var.lVal;
		return hRes;
	}
	HRESULT GetAmbientDisplayName(BSTR& bstrDisplayName)
	{
		CComVariant var;
		if (bstrDisplayName)
		{
			SysFreeString(bstrDisplayName);
			bstrDisplayName = 0;
		}
		HRESULT hRes = GetAmbientProperty((-702), var);
		if (((HRESULT)(hRes) >= 0))
		{
			if (var.vt != VT_BSTR)
				return ((HRESULT)0x80004005L);
			bstrDisplayName = var.bstrVal;
			var.vt = VT_EMPTY;
			var.bstrVal = 0;
		}
		return hRes;
	}
	HRESULT GetAmbientFont(IFont** ppFont)
	{
		
		if (ppFont == 0)
			return ((HRESULT)0x80004003L);
		*ppFont = 0;
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-703), var);
		((void)0);
		if (((HRESULT)(hRes) >= 0) && var.pdispVal)
		{
			if (var.vt == VT_UNKNOWN || var.vt == VT_DISPATCH)
				hRes = var.pdispVal->QueryInterface(IID_IFont, (void**)ppFont);
			else
				hRes = ((HRESULT)0x80020008L);
		}
		return hRes;
	}
	HRESULT GetAmbientFontDisp(IFontDisp** ppFont)
	{
		
		if (ppFont == 0)
			return ((HRESULT)0x80004003L);
		*ppFont = 0;
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-703), var);
		((void)0);
		if (((HRESULT)(hRes) >= 0) && var.pdispVal)
		{
			if (var.vt == VT_UNKNOWN || var.vt == VT_DISPATCH)
				hRes = var.pdispVal->QueryInterface(IID_IFontDisp, (void**)ppFont);
			else
				hRes = ((HRESULT)0x80020008L);
		}
		return hRes;
	}
	HRESULT GetAmbientForeColor(OLE_COLOR& ForeColor)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-704), var);
		((void)0);
		ForeColor = var.lVal;
		return hRes;
	}
	HRESULT GetAmbientLocaleID(LCID& lcid)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-705), var);
		((void)0);
		lcid = var.lVal;
		return hRes;
	}
	HRESULT GetAmbientScaleUnits(BSTR& bstrScaleUnits)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-707), var);
		((void)0);
		bstrScaleUnits = var.bstrVal;
		return hRes;
	}
	HRESULT GetAmbientTextAlign(short& nTextAlign)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-708), var);
		((void)0);
		nTextAlign = var.iVal;
		return hRes;
	}
	HRESULT GetAmbientUserMode(BOOL& bUserMode)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-709), var);
		((void)0);
		bUserMode = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientUIDead(BOOL& bUIDead)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-710), var);
		((void)0);
		bUIDead = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientShowGrabHandles(BOOL& bShowGrabHandles)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-711), var);
		((void)0);
		bShowGrabHandles = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientShowHatching(BOOL& bShowHatching)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-712), var);
		((void)0);
		bShowHatching = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientMessageReflect(BOOL& bMessageReflect)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-706), var);
		((void)0);
		bMessageReflect = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientAutoClip(BOOL& bAutoClip)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-715), var);
		((void)0);
		bAutoClip = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientDisplayAsDefault(BOOL& bDisplaysDefault)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-713), var);
		((void)0);
		bDisplaysDefault = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientSupportsMnemonics(BOOL& bSupportMnemonics)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-714), var);
		((void)0);
		bSupportMnemonics = var.boolVal;
		return hRes;
	}
	HRESULT GetAmbientPalette(HPALETTE& hPalette)
	{
		CComVariant var;
		HRESULT hRes = GetAmbientProperty((-726), var);
		((void)0);
		hPalette = reinterpret_cast<HPALETTE>(var.lVal);
		return hRes;
	}

	HRESULT InternalGetSite(const IID & riid, void** ppUnkSite)
	{
		((void)0);
		if (ppUnkSite == 0)
			return ((HRESULT)0x80004003L);
		if (m_spClientSite == 0)
		{
			*ppUnkSite = 0;
			return ((HRESULT)0x00000000L);
		}
		return m_spClientSite->QueryInterface(riid, ppUnkSite);
	}

	BOOL DoesVerbUIActivate(LONG iVerb)
	{
		BOOL b = 0;
		switch (iVerb)
		{
			case (-4L):
			case (0L):
				b = 1;
				break;
		}
		
		if (DoesVerbActivate(iVerb) && m_spAmbientDispatch.p == 0)
			b = 1;
		return b;
	}

	BOOL DoesVerbActivate(LONG iVerb)
	{
		BOOL b = 0;
		switch (iVerb)
		{
			case (-4L):
			case (0L):
			case (-1L):
			case (-5L):
				b = 1;
				break;
		}
		return b;
	}

	BOOL SetControlFocus(BOOL bGrab);
	HRESULT IQuickActivate_QuickActivate(QACONTAINER *pQACont,
		QACONTROL *pQACtrl);
	HRESULT DoVerbProperties(LPCRECT , HWND hwndParent);
	HRESULT InPlaceActivate(LONG iVerb, const RECT* prcPosRect = 0);

	HRESULT IOleObject_SetClientSite(IOleClientSite *pClientSite);
	HRESULT IOleObject_GetClientSite(IOleClientSite **ppClientSite);
	HRESULT IOleObject_Advise(IAdviseSink *pAdvSink, DWORD *pdwConnection);
	HRESULT IOleObject_Close(DWORD dwSaveOption);
	HRESULT IOleObject_SetExtent(DWORD dwDrawAspect, SIZEL *psizel);
	HRESULT IOleInPlaceObject_InPlaceDeactivate(void);
	HRESULT IOleInPlaceObject_UIDeactivate(void);
	HRESULT IOleInPlaceObject_SetObjectRects(LPCRECT prcPos,LPCRECT prcClip);
	HRESULT IViewObject_Draw(DWORD dwDrawAspect, LONG lindex, void *pvAspect,
		DVTARGETDEVICE *ptd, HDC hicTargetDev, HDC hdcDraw,
		LPCRECTL prcBounds, LPCRECTL prcWBounds);
	HRESULT IDataObject_GetData(FORMATETC *pformatetcIn, STGMEDIUM *pmedium);

	HRESULT FireViewChange();
	LRESULT OnPaint(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& lResult);

	virtual HWND CreateControlWindow(HWND hWndParent, RECT& rcPos) = 0;
	virtual HRESULT ControlQueryInterface(const IID& iid, void** ppv) = 0;
	virtual HRESULT OnDrawAdvanced(ATL_DRAWINFO& di);
	virtual HRESULT OnDraw(ATL_DRAWINFO& )
	{
		return ((HRESULT)0x00000000L);
	}



public:
	CComPtr<IOleInPlaceSiteWindowless> m_spInPlaceSite;
	CComPtr<IDataAdviseHolder> m_spDataAdviseHolder;
	CComPtr<IOleAdviseHolder> m_spOleAdviseHolder;
	CComPtr<IOleClientSite> m_spClientSite;
	CComPtr<IAdviseSink> m_spAdviseSink;
	CComDispatchDriver m_spAmbientDispatch;

	SIZE m_sizeNatural; 
	SIZE m_sizeExtent;  
	RECT m_rcPos; 
#pragma warning(disable: 4510 4610) 
	union
	{
		HWND& m_hWndCD;
		HWND* m_phWndCD;
	};
#pragma warning(default: 4510 4610)
	union
	{
		
		int m_nFreezeEvents; 

		
		IPictureDisp* m_pMouseIcon;
		IPictureDisp* m_pPicture;
		IFontDisp* m_pFont;
		OLE_COLOR m_clrBackColor;
		OLE_COLOR m_clrBorderColor;
		OLE_COLOR m_clrFillColor;
		OLE_COLOR m_clrForeColor;
		BSTR m_bstrText;
		BSTR m_bstrCaption;
		BOOL m_bValid;
		BOOL m_bTabStop;
		BOOL m_bBorderVisible;
		BOOL m_bEnabled;
		LONG m_nBackStyle;
		LONG m_nBorderStyle;
		LONG m_nBorderWidth;
		LONG m_nDrawMode;
		LONG m_nDrawStyle;
		LONG m_nDrawWidth;
		LONG m_nFillStyle;
		SHORT m_nAppearance;
		LONG m_nMousePointer;
		LONG m_nReadyState;
	};

	unsigned m_bNegotiatedWnd:1;
	unsigned m_bWndLess:1;
	unsigned m_bInPlaceActive:1;
	unsigned m_bUIActive:1;
	unsigned m_bUsingWindowRgn:1;
	unsigned m_bInPlaceSiteEx:1;
	unsigned m_bWindowOnly:1;
	unsigned m_bRequiresSave:1;
	unsigned m_bWasOnceWindowless:1;
	unsigned m_bAutoSize:1; 
	unsigned m_bRecomposeOnResize:1; 
	unsigned m_bResizeNatural:1;  
	unsigned m_bDrawFromNatural:1; 
	unsigned m_bDrawGetDataInHimetric:1; 

	DWORD _GetViewStatus() { return VIEWSTATUS_OPAQUE; }
};

inline HRESULT CComControlBase::IQuickActivate_QuickActivate(QACONTAINER *pQACont,
	QACONTROL *pQACtrl)
{
	((void)0);
	((void)0);
	if (!pQACont || !pQACtrl)
		return ((HRESULT)0x80004003L);

	HRESULT hRes;
	ULONG uCB = pQACtrl->cbSize;
	memset(pQACtrl, 0, uCB);
	pQACtrl->cbSize = uCB;

	
	CComPtr<IOleObject> pOO;
	ControlQueryInterface(IID_IOleObject, (void**)&pOO);
	CComPtr<IViewObjectEx> pVOEX;
	ControlQueryInterface(IID_IViewObjectEx, (void**)&pVOEX);
	CComPtr<IPointerInactive> pPI;
	ControlQueryInterface(IID_IPointerInactive, (void**)&pPI);
	CComPtr<IProvideClassInfo2> pPCI;
	ControlQueryInterface(IID_IProvideClassInfo2, (void**)&pPCI);

	if (pOO == 0 || pVOEX == 0)
		return ((HRESULT)0x80004005L);

	pOO->SetClientSite(pQACont->pClientSite);

	if (pQACont->pAdviseSink != 0)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Setting up IOleObject Advise\n");
		pVOEX->SetAdvise(DVASPECT_CONTENT, 0, pQACont->pAdviseSink);
	}

	CComPtr<IConnectionPointContainer> pCPC;
	ControlQueryInterface(IID_IConnectionPointContainer, (void**)&pCPC);

	if (pQACont->pPropertyNotifySink)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Setting up PropNotify CP\n");
		CComPtr<IConnectionPoint> pCP;
		if (pCPC != 0)
		{
			hRes = pCPC->FindConnectionPoint(IID_IPropertyNotifySink, &pCP);
			if (((HRESULT)(hRes) >= 0))
				pCP->Advise(pQACont->pPropertyNotifySink, &pQACtrl->dwPropNotifyCookie);
		}
	}

	if (pPCI)
	{
		GUID iidDefaultSrc;
		if (
((HRESULT)(pPCI->GetGUID(GUIDKIND_DEFAULT_SOURCE_DISP_IID, &iidDefaultSrc)) >= 0))
#line 631 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"
		{
			if (pQACont->pUnkEventSink)
			{
				1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Setting up Default Out Going Interface\n");
				CComPtr<IConnectionPoint> pCP;
				if (pCPC != 0)
				{
					hRes = pCPC->FindConnectionPoint(iidDefaultSrc, &pCP);
					if (((HRESULT)(hRes) >= 0))
						pCP->Advise(pQACont->pUnkEventSink, &pQACtrl->dwEventCookie);
				}
			}
		}
	}
	
	if (pOO != 0)
		pOO->GetMiscStatus(DVASPECT_CONTENT, &pQACtrl->dwMiscStatus);

	if (pVOEX != 0)
		pVOEX->GetViewStatus(&pQACtrl->dwViewStatus);

	if (pPI != 0)
		pPI->GetActivationPolicy(&pQACtrl->dwPointerActivationPolicy);
	return ((HRESULT)0x00000000L);
}

inline BOOL CComControlBase::SetControlFocus(BOOL bGrab)
{
	if (m_bWndLess)
	{
		if (!m_bUIActive && bGrab)
			if (((HRESULT)(InPlaceActivate((-4L)))<0))
				return 0;

		return (m_spInPlaceSite->SetFocus(bGrab) == ((HRESULT)0x00000000L));
	}
	else
	{
		
		
		if (m_bInPlaceActive)
		{
			HWND hwnd = (bGrab) ? m_hWndCD : ::GetParent(m_hWndCD);
			if (!m_bUIActive && bGrab)
				return ((HRESULT)(InPlaceActivate((-4L))) >= 0);
			else
			{
				if (!::IsChild(hwnd, ::GetFocus()))
					::SetFocus(hwnd);
				return 1;
			}
		}
	}
	return 0;
}

inline HRESULT CComControlBase::DoVerbProperties(LPCRECT , HWND hwndParent)
{
	HRESULT hr = ((HRESULT)0x00000000L);
	CComQIPtr <ISpecifyPropertyPages, &IID_ISpecifyPropertyPages> spPages;
	CComQIPtr <IOleObject, &IID_IOleObject> spObj;
	CComQIPtr <IOleControlSite, &IID_IOleControlSite> spSite(m_spClientSite);

	if (spSite)
	{
		hr = spSite->ShowPropertyFrame();
		if (((HRESULT)(hr) >= 0))
			return hr;
	}

	CComPtr<IUnknown> pUnk;
	ControlQueryInterface(IID_IUnknown, (void**)&pUnk);
	((void)0);
	CAUUID pages;
	spPages = pUnk;
	if (spPages)
	{
		hr = spPages->GetPages(&pages);
		if (((HRESULT)(hr) >= 0))
		{
			spObj = pUnk;
			if (spObj)
			{
				LPOLESTR szTitle = 0;

				spObj->GetUserType(USERCLASSTYPE_SHORT, &szTitle);

				LCID lcid;
				if (((HRESULT)(GetAmbientLocaleID(lcid))<0))
					lcid = (((DWORD)((((DWORD)((WORD )(0x0))) << 16) | ((DWORD)((WORD )((((((WORD )(0x01)) << 10) | (WORD )(0x00)))))))));

				hr = OleCreatePropertyFrame(hwndParent, m_rcPos.top, m_rcPos.left, szTitle,
					1, &pUnk.p, pages.cElems, pages.pElems, lcid, 0, 0);

				CoTaskMemFree(szTitle);
			}
			else
			{
				hr = ((HRESULT)0x00040181L);
			}
			CoTaskMemFree(pages.pElems);
		}
	}
	else
	{
		hr = ((HRESULT)0x00040181L);
	}

	return hr;
}

inline HRESULT CComControlBase::InPlaceActivate(LONG iVerb, const RECT* )
{
	HRESULT hr;

	if (m_spClientSite == 0)
		return ((HRESULT)0x00000000L);

	CComPtr<IOleInPlaceObject> pIPO;
	ControlQueryInterface(IID_IOleInPlaceObject, (void**)&pIPO);
	((void)0);

	if (!m_bNegotiatedWnd)
	{
		if (!m_bWindowOnly)
			
			hr = m_spClientSite->QueryInterface(IID_IOleInPlaceSiteWindowless, (void **)&m_spInPlaceSite);

		if (m_spInPlaceSite)
		{
			m_bInPlaceSiteEx = 1;
			
			if ( m_spInPlaceSite->CanWindowlessActivate() == ((HRESULT)0x00000000L) )
			{
				m_bWndLess = 1;
				m_bWasOnceWindowless = 1;
			}
			else
			{
				m_bWndLess = 0;
			}
		}
		else
		{
			m_spClientSite->QueryInterface(IID_IOleInPlaceSiteEx, (void **)&m_spInPlaceSite);
			if (m_spInPlaceSite)
				m_bInPlaceSiteEx = 1;
			else
				hr = m_spClientSite->QueryInterface(IID_IOleInPlaceSite, (void **)&m_spInPlaceSite);
		}
	}

	((void)0);
	if (!m_spInPlaceSite)
		return ((HRESULT)0x80004005L);

	m_bNegotiatedWnd = 1;

	if (!m_bInPlaceActive)
	{

		BOOL bNoRedraw = 0;
		if (m_bWndLess)
			m_spInPlaceSite->OnInPlaceActivateEx(&bNoRedraw, ACTIVATE_WINDOWLESS);
		else
		{
			if (m_bInPlaceSiteEx)
				m_spInPlaceSite->OnInPlaceActivateEx(&bNoRedraw, 0);
			else
			{
				hr = m_spInPlaceSite->CanInPlaceActivate();
				
				if (((HRESULT)(hr)<0))
					return hr;
				if ( hr != ((HRESULT)0x00000000L) )
				{
				   
				   return( ((HRESULT)0x80004005L) );
				}
				m_spInPlaceSite->OnInPlaceActivate();
			}
		}
	}

	m_bInPlaceActive = 1;

	
	
	
	OLEINPLACEFRAMEINFO frameInfo;
	RECT rcPos, rcClip;
	CComPtr<IOleInPlaceFrame> spInPlaceFrame;
	CComPtr<IOleInPlaceUIWindow> spInPlaceUIWindow;
	frameInfo.cb = sizeof(OLEINPLACEFRAMEINFO);
	HWND hwndParent;
	if (m_spInPlaceSite->GetWindow(&hwndParent) == ((HRESULT)0x00000000L))
	{
		m_spInPlaceSite->GetWindowContext(&spInPlaceFrame,
			&spInPlaceUIWindow, &rcPos, &rcClip, &frameInfo);

		if (!m_bWndLess)
		{
			if (m_hWndCD)
			{
				ShowWindow(m_hWndCD, 5);
				if (!::IsChild(m_hWndCD, ::GetFocus()))
					::SetFocus(m_hWndCD);
			}
			else
			{
				HWND h = CreateControlWindow(hwndParent, rcPos);
				((void)0);	
				((void)0);
				h;	
			}
		}

		pIPO->SetObjectRects(&rcPos, &rcClip);
	}

	CComPtr<IOleInPlaceActiveObject> spActiveObject;
	ControlQueryInterface(IID_IOleInPlaceActiveObject, (void**)&spActiveObject);

	
	if (DoesVerbUIActivate(iVerb))
	{
		if (!m_bUIActive)
		{
			m_bUIActive = 1;
			hr = m_spInPlaceSite->OnUIActivate();
			if (((HRESULT)(hr)<0))
				return hr;

			SetControlFocus(1);
			
			
			if (spActiveObject)
			{
				if (spInPlaceFrame)
					spInPlaceFrame->SetActiveObject(spActiveObject, 0);
				if (spInPlaceUIWindow)
					spInPlaceUIWindow->SetActiveObject(spActiveObject, 0);
			}

			if (spInPlaceFrame)
				spInPlaceFrame->SetBorderSpace(0);
			if (spInPlaceUIWindow)
				spInPlaceUIWindow->SetBorderSpace(0);
		}
	}

	m_spClientSite->ShowObject();

	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::SendOnDataChange(DWORD advf)
{
	HRESULT hRes = ((HRESULT)0x00000000L);
	if (m_spDataAdviseHolder)
	{
		CComPtr<IDataObject> pdo;
		if (((HRESULT)(ControlQueryInterface(IID_IDataObject, (void**)&pdo)) >= 0))
			hRes = m_spDataAdviseHolder->SendOnDataChange(pdo, 0, advf);
	}
	return hRes;
}

inline HRESULT CComControlBase::IOleObject_SetClientSite(IOleClientSite *pClientSite)
{
	((void)0);
	m_spClientSite = pClientSite;
	m_spAmbientDispatch.Release();
	if (m_spClientSite != 0)
	{
		m_spClientSite->QueryInterface(IID_IDispatch,
			(void**) &m_spAmbientDispatch.p);
	}
	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::IOleObject_GetClientSite(IOleClientSite **ppClientSite)
{
	((void)0);
	if (ppClientSite == 0)
		return ((HRESULT)0x80004003L);

	*ppClientSite = m_spClientSite;
	if (m_spClientSite != 0)
		m_spClientSite.p->AddRef();
	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::IOleObject_Advise(IAdviseSink *pAdvSink,
	DWORD *pdwConnection)
{
	HRESULT hr = ((HRESULT)0x00000000L);
	if (m_spOleAdviseHolder == 0)
		hr = CreateOleAdviseHolder(&m_spOleAdviseHolder);
	if (((HRESULT)(hr) >= 0))
		hr = m_spOleAdviseHolder->Advise(pAdvSink, pdwConnection);
	return hr;
}

inline HRESULT CComControlBase::IOleObject_Close(DWORD dwSaveOption)
{
	CComPtr<IOleInPlaceObject> pIPO;
	ControlQueryInterface(IID_IOleInPlaceObject, (void**)&pIPO);
	((void)0);
	if (m_hWndCD)
	{
		if (m_spClientSite)
			m_spClientSite->OnShowWindow(0);
	}

	if (m_bInPlaceActive)
	{
		HRESULT hr = pIPO->InPlaceDeactivate();
		if (((HRESULT)(hr)<0))
			return hr;
		((void)0);
	}
	if (m_hWndCD)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Destroying Window\n");
		if (::IsWindow(m_hWndCD))
			DestroyWindow(m_hWndCD);
		m_hWndCD = 0;
	}

	
	
	if ((dwSaveOption == OLECLOSE_SAVEIFDIRTY ||
		dwSaveOption == OLECLOSE_PROMPTSAVE) && m_bRequiresSave)
	{
		if (m_spClientSite)
			m_spClientSite->SaveObject();
		SendOnSave();
	}

	m_spInPlaceSite.Release();
	m_bNegotiatedWnd = 0;
	m_bWndLess = 0;
	m_bInPlaceSiteEx = 0;
	m_spAdviseSink.Release();
	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::IOleInPlaceObject_InPlaceDeactivate(void)
{
	CComPtr<IOleInPlaceObject> pIPO;
	ControlQueryInterface(IID_IOleInPlaceObject, (void**)&pIPO);
	((void)0);

	if (!m_bInPlaceActive)
		return ((HRESULT)0x00000000L);
	pIPO->UIDeactivate();

	m_bInPlaceActive = 0;

	
	
	if (m_hWndCD)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Destroying Window\n");
		if (::IsWindow(m_hWndCD))
			DestroyWindow(m_hWndCD);
		m_hWndCD = 0;
	}

	if (m_spInPlaceSite)
		m_spInPlaceSite->OnInPlaceDeactivate();

	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::IOleInPlaceObject_UIDeactivate(void)
{
	
	
	if (!m_bUIActive)
		return ((HRESULT)0x00000000L);

	m_bUIActive = 0;

	
	
	CComPtr<IOleInPlaceFrame> spInPlaceFrame;
	CComPtr<IOleInPlaceUIWindow> spInPlaceUIWindow;
	OLEINPLACEFRAMEINFO frameInfo;
	frameInfo.cb = sizeof(OLEINPLACEFRAMEINFO);
	RECT rcPos, rcClip;

	HWND hwndParent; 
	
	if (m_spInPlaceSite->GetWindow(&hwndParent) == ((HRESULT)0x00000000L))
	{
		m_spInPlaceSite->GetWindowContext(&spInPlaceFrame,
			&spInPlaceUIWindow, &rcPos, &rcClip, &frameInfo);
		if (spInPlaceUIWindow)
			spInPlaceUIWindow->SetActiveObject(0, 0);
		if (spInPlaceFrame)
			spInPlaceFrame->SetActiveObject(0, 0);
	}
	
	
	
	m_spInPlaceSite->OnUIDeactivate(0);

	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::IOleInPlaceObject_SetObjectRects(LPCRECT prcPos,LPCRECT prcClip)
{
	if (prcPos == 0 || prcClip == 0)
		return ((HRESULT)0x80004003L);

	m_rcPos = *prcPos;
	if (m_hWndCD)
	{
		
		
		
		RECT rcIXect;
		BOOL b = IntersectRect(&rcIXect, prcPos, prcClip);
		HRGN tempRgn = 0;
		if (b && !EqualRect(&rcIXect, prcPos))
		{
			OffsetRect(&rcIXect, -(prcPos->left), -(prcPos->top));
			tempRgn = CreateRectRgnIndirect(&rcIXect);
		}

		SetWindowRgn(m_hWndCD, tempRgn, 1);

		
		
		
		SIZEL size = {prcPos->right - prcPos->left, prcPos->bottom - prcPos->top};
		SetWindowPos(m_hWndCD, 0, prcPos->left,
					 prcPos->top, size.cx, size.cy, 0x0004 | 0x0010);
	}

	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::IOleObject_SetExtent(DWORD dwDrawAspect, SIZEL *psizel)
{
	if (dwDrawAspect != DVASPECT_CONTENT)
		return ((HRESULT)0x8004006BL);
	if (psizel == 0)
		return ((HRESULT)0x80004003L);

	BOOL bSizeMatchesNatural =
		memcmp(psizel, &m_sizeNatural, sizeof(SIZE)) == 0;

	if (m_bAutoSize) 
		return (bSizeMatchesNatural) ? ((HRESULT)0x00000000L) : ((HRESULT)0x80004005L);

	BOOL bResized = 0;
	if (memcmp(psizel, &m_sizeExtent, sizeof(SIZE)) != 0)
	{
		m_sizeExtent = *psizel;
		bResized = 1;
	}
	if (m_bResizeNatural && !bSizeMatchesNatural)
	{
		m_sizeNatural = *psizel;
		bResized = 1;
	}

	if (m_bRecomposeOnResize && bResized)
	{
		SendOnDataChange();
		FireViewChange();
	}
	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::IViewObject_Draw(DWORD dwDrawAspect, LONG lindex,
	void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, HDC hdcDraw,
	LPCRECTL prcBounds, LPCRECTL prcWBounds)
{
	1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Draw dwDrawAspect=%x lindex=%d ptd=%x hic=%x hdc=%x\n",
		dwDrawAspect, lindex, ptd, hicTargetDev, hdcDraw);













	if (prcBounds == 0)
	{
		if (!m_bWndLess)
			return ((HRESULT)0x80070057L);
		prcBounds = (RECTL*)&m_rcPos;
	}

	
	switch (dwDrawAspect)
	{
		case DVASPECT_CONTENT:
		case DVASPECT_OPAQUE:
		case DVASPECT_TRANSPARENT:
			break;
		default:
			((void)0);
			return ((HRESULT)0x8004006BL);
			break;
	}

	
	if (ptd == 0)
		hicTargetDev = 0;

	BOOL bOptimize = 0;
	if (pvAspect && ((DVASPECTINFO *)pvAspect)->cb >= sizeof(DVASPECTINFO))
		bOptimize = (((DVASPECTINFO *)pvAspect)->dwFlags & DVASPECTINFOFLAG_CANOPTIMIZE);

	ATL_DRAWINFO di;
	memset(&di, 0, sizeof(di));
	di.cbSize = sizeof(di);
	di.dwDrawAspect = dwDrawAspect;
	di.lindex = lindex;
	di.ptd = ptd;
	di.hicTargetDev = hicTargetDev;
	di.hdcDraw = hdcDraw;
	di.prcBounds = prcBounds;
	di.prcWBounds = prcWBounds;
	di.bOptimize = bOptimize;
	return OnDrawAdvanced(di);
}

inline HRESULT CComControlBase::IDataObject_GetData(FORMATETC *pformatetcIn,
	STGMEDIUM *pmedium)
{
	if (pmedium == 0)
		return ((HRESULT)0x80004003L);
	memset(pmedium, 0, sizeof(STGMEDIUM));
	1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Format = %x\n", pformatetcIn->cfFormat);
	1 ? (void)0 : AtlTrace2(atlTraceControls,2,"TYMED = %x\n", pformatetcIn->tymed);

	if ((pformatetcIn->tymed & TYMED_MFPICT) == 0)
		return ((HRESULT)0x80040064L);

	SIZEL sizeMetric, size;
	if (m_bDrawFromNatural)
		sizeMetric = m_sizeNatural;
	else
		sizeMetric = m_sizeExtent;
	if (!m_bDrawGetDataInHimetric)
		AtlHiMetricToPixel(&sizeMetric, &size);
	else
		size = sizeMetric;
	RECTL rectl = {0 ,0, size.cx, size.cy};

	ATL_DRAWINFO di;
	memset(&di, 0, sizeof(di));
	di.cbSize = sizeof(di);
	di.dwDrawAspect = DVASPECT_CONTENT;
	di.lindex = -1;
	di.ptd = 0;
	di.hicTargetDev = 0;
	di.prcBounds = &rectl;
	di.prcWBounds = &rectl;
	di.bOptimize = 1; 
	di.bRectInHimetric = m_bDrawGetDataInHimetric;
	
	di.hdcDraw = CreateMetaFileA(0);

	

	SaveDC(di.hdcDraw);
	SetWindowOrgEx(di.hdcDraw, 0, 0, 0);
	SetWindowExtEx(di.hdcDraw, rectl.right, rectl.bottom, 0);
	OnDrawAdvanced(di);
	RestoreDC(di.hdcDraw, -1);

	HMETAFILE hMF = CloseMetaFile(di.hdcDraw);
	if (hMF == 0)
		return ((HRESULT)0x8000FFFFL);

	HGLOBAL hMem=GlobalAlloc(0x2000 | 0x0002, sizeof(METAFILEPICT));

	if (0==hMem)
	{
		DeleteMetaFile(hMF);
		return ((HRESULT) (((HRESULT)0x80030070L)));
	}

	LPMETAFILEPICT pMF=(LPMETAFILEPICT)GlobalLock(hMem);
	pMF->hMF=hMF;
	pMF->mm=8;
	pMF->xExt=sizeMetric.cx;
	pMF->yExt=sizeMetric.cy;
	GlobalUnlock(hMem);

	pmedium->tymed = TYMED_MFPICT;
	pmedium->hGlobal = hMem;
	pmedium->pUnkForRelease = 0;

	return ((HRESULT)0x00000000L);
}

inline HRESULT CComControlBase::FireViewChange()
{
	if (m_bInPlaceActive)
	{
		
		if (m_hWndCD != 0)
			::InvalidateRect(m_hWndCD, 0, 1); 
		else if (m_spInPlaceSite != 0)
			m_spInPlaceSite->InvalidateRect(0, 1); 
	}
	else 
		SendOnViewChange(DVASPECT_CONTENT);
	return ((HRESULT)0x00000000L);
}

inline void CComControlBase::GetZoomInfo(ATL_DRAWINFO& di)
{
	const RECTL& rcPos = *di.prcBounds;
	SIZEL sizeDen;
	if (m_bDrawFromNatural)
		sizeDen = m_sizeNatural;
	else
		sizeDen = m_sizeExtent;
	if (!di.bRectInHimetric)
		AtlHiMetricToPixel(&sizeDen, &sizeDen);
	SIZEL sizeNum = {rcPos.right-rcPos.left, rcPos.bottom-rcPos.top};
	di.ZoomNum.cx = sizeNum.cx;
	di.ZoomNum.cy = sizeNum.cy;
	di.ZoomDen.cx = sizeDen.cx;
	di.ZoomDen.cy = sizeDen.cy;
	if (sizeDen.cx == 0 || sizeDen.cy == 0 ||
		sizeNum.cx == 0 || sizeNum.cy == 0)
	{
		di.ZoomNum.cx = di.ZoomNum.cy = di.ZoomDen.cx = di.ZoomDen.cy = 1;
		di.bZoomed = 0;
	}
	else if (sizeNum.cx != sizeDen.cx || sizeNum.cy != sizeDen.cy)
		di.bZoomed = 1;
	else
		di.bZoomed = 0;
}

inline HRESULT CComControlBase::OnDrawAdvanced(ATL_DRAWINFO& di)
{
	BOOL bDeleteDC = 0;
	if (di.hicTargetDev == 0)
	{
		di.hicTargetDev = AtlCreateTargetDC(di.hdcDraw, di.ptd);
		bDeleteDC = (di.hicTargetDev != di.hdcDraw);
	}
	RECTL rectBoundsDP = *di.prcBounds;
	BOOL bMetafile = GetDeviceCaps(di.hdcDraw, 2) == 5;
	if (!bMetafile)
	{
		::LPtoDP(di.hicTargetDev, (LPPOINT)&rectBoundsDP, 2);
		SaveDC(di.hdcDraw);
		SetMapMode(di.hdcDraw, 1);
		SetWindowOrgEx(di.hdcDraw, 0, 0, 0);
		SetViewportOrgEx(di.hdcDraw, 0, 0, 0);
		di.bOptimize = 1; 
	}
	di.prcBounds = &rectBoundsDP;
	GetZoomInfo(di);

	HRESULT hRes = OnDraw(di);
	if (bDeleteDC)
		::DeleteDC(di.hicTargetDev);
	if (!bMetafile)
		RestoreDC(di.hdcDraw, -1);
	return hRes;
}

inline LRESULT CComControlBase::OnPaint(UINT , WPARAM wParam,
	LPARAM , BOOL& )
{
	RECT rc;
	PAINTSTRUCT ps;

	HDC hdc = (wParam != 0) ? (HDC)wParam : ::BeginPaint(m_hWndCD, &ps);
	if (hdc == 0)
		return 0;
	::GetClientRect(m_hWndCD, &rc);

	ATL_DRAWINFO di;
	memset(&di, 0, sizeof(di));
	di.cbSize = sizeof(di);
	di.dwDrawAspect = DVASPECT_CONTENT;
	di.lindex = -1;
	di.hdcDraw = hdc;
	di.prcBounds = (LPCRECTL)&rc;

	OnDrawAdvanced(di);
	if (wParam == 0)
		::EndPaint(m_hWndCD, &ps);
	return 0;
}

template <class T, class WinBase =  CWindowImpl< T > >
class __declspec(novtable) CComControl :  public CComControlBase, public WinBase
{
public:
	CComControl() : CComControlBase(m_hWnd) {}
	HRESULT FireOnRequestEdit(DISPID dispID)
	{
		T* pT = static_cast<T*>(this);
		return T::__ATL_PROP_NOTIFY_EVENT_CLASS::FireOnRequestEdit(pT->GetUnknown(), dispID);
	}
	HRESULT FireOnChanged(DISPID dispID)
	{
		T* pT = static_cast<T*>(this);
		return T::__ATL_PROP_NOTIFY_EVENT_CLASS::FireOnChanged(pT->GetUnknown(), dispID);
	}
	virtual HRESULT ControlQueryInterface(const IID& iid, void** ppv)
	{
		T* pT = static_cast<T*>(this);
		return pT->_InternalQueryInterface(iid, ppv);
	}
	virtual HWND CreateControlWindow(HWND hWndParent, RECT& rcPos)
	{
		T* pT = static_cast<T*>(this);
		return pT->Create(hWndParent, rcPos);
	}

	typedef CComControl< T, WinBase >	thisClass;
	public: BOOL ProcessWindowMessage(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult, DWORD dwMsgMapID = 0) { BOOL bHandled = 1; hWnd; uMsg; wParam; lParam; lResult; bHandled; switch(dwMsgMapID) { case 0:
		if(uMsg == 0x000F) { bHandled = 1; lResult = CComControlBase::OnPaint(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0007) { bHandled = 1; lResult = CComControlBase::OnSetFocus(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0008) { bHandled = 1; lResult = CComControlBase::OnKillFocus(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0021) { bHandled = 1; lResult = CComControlBase::OnMouseActivate(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
	break; default: 1 ? (void)0 : AtlTrace2(atlTraceWindowing, 0, "Invalid message map ID (%i)\n", dwMsgMapID); ((void)0); break; } return 0; }
};





template <class T>
class CComCompositeControl : public CComControl< T, CAxDialogImpl< T > >
{
public:
	CComCompositeControl()
	{
		m_hbrBackground = 0;
	}
	~CComCompositeControl()
	{
		DeleteObject(m_hbrBackground);
	}
	HRESULT AdviseSinkMap(bool bAdvise)
	{
		if(!bAdvise && m_hWnd == 0)
		{
			
			1 ? (void)0 : AtlTrace2(atlTraceControls, 1, "CComCompositeControl::AdviseSinkMap called after the window was destroyed\n");
			return ((HRESULT)0x00000000L);
		}
		T* pT = static_cast<T*>(this);
		return AtlAdviseSinkMap(pT, bAdvise);
	}
	HBRUSH m_hbrBackground;
	HRESULT SetBackgroundColorFromAmbient()
	{
		if (m_hbrBackground != 0)
		{
			DeleteObject(m_hbrBackground);
			m_hbrBackground = 0;
		}
		OLE_COLOR clr;
		HRESULT hr = GetAmbientBackColor(clr);
		if (((HRESULT)(hr) >= 0))
		{
			COLORREF rgb;
			::OleTranslateColor(clr, 0, &rgb);
			m_hbrBackground = ::CreateSolidBrush(rgb);
			EnumChildWindows(m_hWnd, (WNDENUMPROC)BackgroundColorEnumProc, (LPARAM) clr);
		}
		return hr;
	}
	static BOOL __stdcall BackgroundColorEnumProc(HWND hwnd, LPARAM l)
	{
		CAxWindow wnd(hwnd);
		CComPtr<IAxWinAmbientDispatch> spDispatch;
		wnd.QueryHost(&spDispatch);
		if (spDispatch != 0)
			spDispatch->put_BackColor((OLE_COLOR)l);
		return 1;
	}
	LRESULT OnDialogColor(UINT, WPARAM w, LPARAM, BOOL&)
	{
		HDC dc = (HDC) w;
		LOGBRUSH lb;
		::GetObjectA(m_hbrBackground, sizeof(lb), (void*)&lb);
		::SetBkColor(dc, lb.lbColor);
		return (LRESULT)m_hbrBackground;
	}
	HWND Create(HWND hWndParent, RECT& , LPARAM dwInitParam = 0)
	{
		CComControl< T, CAxDialogImpl< T > >::Create(hWndParent, dwInitParam);
		SetBackgroundColorFromAmbient();
		if (m_hWnd != 0)
			ShowWindow(4);
		return m_hWnd;
	}
	BOOL CalcExtent(SIZE& size)
	{
		HINSTANCE hInstance = _Module.GetResourceInstance();
		LPCTSTR lpTemplateName = (LPSTR)((ULONG_PTR)((WORD)(T::IDD)));
		HRSRC hDlgTempl = FindResourceA(hInstance, lpTemplateName, (LPSTR)((ULONG_PTR)((WORD)(5))));
		if (hDlgTempl == 0)
			return 0;
		HGLOBAL hResource = LoadResource(hInstance, hDlgTempl);
		DLGTEMPLATE* pDlgTempl = (DLGTEMPLATE*)LockResource(hResource);
		if (pDlgTempl == 0)
			return 0;
		AtlGetDialogSize(pDlgTempl, &size);
		AtlPixelToHiMetric(&size, &size);
		return 1;
	}

	BOOL PreTranslateAccelerator(LPMSG pMsg, HRESULT& hRet)
	{
		hRet = ((HRESULT)0x00000000L);
		if ((pMsg->message < 0x0100 || pMsg->message > 0x0108) &&
		   (pMsg->message < 0x0200 || pMsg->message > 0x0209))
			return 0;
		
		HWND hWndCtl = ::GetFocus();
		if (IsChild(hWndCtl) && ::GetParent(hWndCtl) != m_hWnd)
		{
			do
			{
				hWndCtl = ::GetParent(hWndCtl);
			}
			while (::GetParent(hWndCtl) != m_hWnd);
		}
		
		if (::SendMessageA(hWndCtl, 0x037F, 0, (LPARAM)pMsg) == 1)
			return 1;

		
		DWORD dwDlgCode = ::SendMessageA(pMsg->hwnd, 0x0087, 0, 0L);
		switch(pMsg->message)
		{
		case 0x0102:
			if(dwDlgCode == 0)	
				return 0;	
			break;
		case 0x0100:
			switch(((WORD)((DWORD_PTR)(pMsg->wParam) & 0xffff)))
			{
			case 0x09:
				
				if((dwDlgCode & 0x0002) == 0)
				{
					HWND hWndFirstOrLast = ::GetWindow(m_hWnd, 5);
					if (::GetKeyState(0x10) >= 0)  
						hWndFirstOrLast = GetNextDlgTabItem(hWndFirstOrLast, 1);
					if (hWndFirstOrLast == hWndCtl)
						return 0;
				}
				break;
			case 0x25:
			case 0x26:
			case 0x27:
			case 0x28:
				
				if((dwDlgCode & 0x0001) == 0)
				{
					HWND hWndFirstOrLast = ::GetWindow(m_hWnd, 5);
					if (pMsg->wParam == 0x27 || pMsg->wParam == 0x28)	
						hWndFirstOrLast = GetNextDlgTabItem(hWndFirstOrLast, 1);
					if (hWndFirstOrLast == hWndCtl)
						return 0;
				}
				break;
			case 0x2B:
			case 0x0D:
			case 0x1B:
			case 0x03:
				
				return 0;
			}
			break;
		}

		return IsDialogMessageA(pMsg);
	}
	HRESULT IOleInPlaceObject_InPlaceDeactivate(void)
	{
		AdviseSinkMap(false); 
		return CComControl<T, CAxDialogImpl<T> >::IOleInPlaceObject_InPlaceDeactivate();
	}
	virtual HWND CreateControlWindow(HWND hWndParent, RECT& rcPos)
	{
		T* pT = static_cast<T*>(this);
		HWND h = pT->Create(hWndParent, rcPos);
		if (h != 0)
			AdviseSinkMap(true);
		return h;
	}
	virtual HRESULT OnDraw(ATL_DRAWINFO& di)
	{
		if(!m_bInPlaceActive)
		{
			HPEN hPen = (HPEN)::GetStockObject(7);
			HBRUSH hBrush = (HBRUSH)::GetStockObject(2);
			::SelectObject(di.hdcDraw, hPen);
			::SelectObject(di.hdcDraw, hBrush);
			::Rectangle(di.hdcDraw, di.prcBounds->left, di.prcBounds->top, di.prcBounds->right, di.prcBounds->bottom);
			::SetTextColor(di.hdcDraw, ::GetSysColor(8));
			::SetBkMode(di.hdcDraw, 1);
			::DrawTextA(di.hdcDraw, "ATL Composite Control", -1, (LPRECT)di.prcBounds, 0x00000001 | 0x00000020 | 0x00000004);
		}
		return ((HRESULT)0x00000000L);
	}
	typedef CComControl< T, CAxDialogImpl< T > >	baseClass;
	public: BOOL ProcessWindowMessage(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult, DWORD dwMsgMapID = 0) { BOOL bHandled = 1; hWnd; uMsg; wParam; lParam; lResult; bHandled; switch(dwMsgMapID) { case 0:
		if(uMsg == 0x0136) { bHandled = 1; lResult = OnDialogColor(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0138) { bHandled = 1; lResult = OnDialogColor(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0007) { bHandled = 1; lResult = baseClass::OnSetFocus(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0008) { bHandled = 1; lResult = baseClass::OnKillFocus(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
		if(uMsg == 0x0021) { bHandled = 1; lResult = baseClass::OnMouseActivate(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
	break; default: 1 ? (void)0 : AtlTrace2(atlTraceWindowing, 0, "Invalid message map ID (%i)\n", dwMsgMapID); ((void)0); break; } return 0; }

	static const _ATL_EVENT_ENTRY<T>* _GetSinkMap() { typedef T _atl_event_classtype; static const _ATL_EVENT_ENTRY<T> map[] = {
	{0, 0, 0, 0, 0, 0} }; return map;}
};
#line 1569 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"



template <class T> class IPersistStorageImpl;
template <class T> class IPersistPropertyBagImpl;

template <class T> class IOleControlImpl;
template <class T> class IRunnableObjectImpl;
template <class T> class IQuickActivateImpl;
template <class T> class IOleObjectImpl;
template <class T> class IPropertyPageImpl;
template <class T> class IPropertyPage2Impl;
template <class T> class IPerPropertyBrowsingImpl;
template <class T> class IViewObjectExImpl;
template <class T> class IOleWindowImpl;
template <class T> class IPointerInactiveImpl;
template <class T, class CDV> class IPropertyNotifySinkCP;
template <class T> class IBindStatusCallbackImpl;
template <class T> class CBindStatusCallback;




template <class T>
class __declspec(novtable) IOleControlImpl : public IOleControl
{
public:
	virtual HRESULT __stdcall GetControlInfo(LPCONTROLINFO )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall OnMnemonic(LPMSG )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall OnAmbientPropertyChange(DISPID dispid)
	{
		dispid;
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleControlImpl::OnAmbientPropertyChange\n");
		1 ? (void)0 : AtlTrace2(atlTraceControls,2," -- DISPID = %d (%d)\n", dispid);
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall FreezeEvents(BOOL bFreeze)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleControlImpl::FreezeEvents\n");
		if (bFreeze)
			pT->m_nFreezeEvents++;
		else
			pT->m_nFreezeEvents--;
		return ((HRESULT)0x00000000L);
	}
};




template <class T>
class __declspec(novtable) IQuickActivateImpl : public IQuickActivate
{
public:
	virtual HRESULT __stdcall QuickActivate(QACONTAINER *pQACont, QACONTROL *pQACtrl)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IQuickActivateImpl::QuickActivate\n");
		return pT->IQuickActivate_QuickActivate(pQACont, pQACtrl);
	}
	virtual HRESULT __stdcall SetContentExtent(LPSIZEL pSize)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IQuickActivateImpl::SetContentExtent\n");
		return pT->IOleObjectImpl<T>::SetExtent(DVASPECT_CONTENT, pSize);
	}
	virtual HRESULT __stdcall GetContentExtent(LPSIZEL pSize)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IQuickActivateImpl::GetContentExtent\n");
		return pT->IOleObjectImpl<T>::GetExtent(DVASPECT_CONTENT, pSize);
	}
};




template <class T>
class __declspec(novtable) IOleObjectImpl : public IOleObject
{
public:
	virtual HRESULT __stdcall SetClientSite(IOleClientSite *pClientSite)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::SetClientSite\n");
		return pT->IOleObject_SetClientSite(pClientSite);
	}
	virtual HRESULT __stdcall GetClientSite(IOleClientSite **ppClientSite)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::GetClientSite\n");
		return pT->IOleObject_GetClientSite(ppClientSite);
	}
	virtual HRESULT __stdcall SetHostNames(LPCOLESTR , LPCOLESTR )
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::SetHostNames\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Close(DWORD dwSaveOption)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::Close\n");
		return pT->IOleObject_Close(dwSaveOption);
	}
	virtual HRESULT __stdcall SetMoniker(DWORD , IMoniker* )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall GetMoniker(DWORD , DWORD , IMoniker** )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall InitFromData(IDataObject* , BOOL , DWORD )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall GetClipboardData(DWORD , IDataObject** )
	{
		return ((HRESULT)0x80004001L);
	}

	
	HRESULT DoVerbPrimary(LPCRECT prcPosRect, HWND hwndParent)
	{
		T* pT = static_cast<T*>(this);
		BOOL bDesignMode = 0;
		CComVariant var;
		
		
		HRESULT hRes = pT->GetAmbientProperty((-709), var);
		if (((HRESULT)(hRes) >= 0) && var.vt == VT_BOOL && !var.boolVal)
			bDesignMode = 1;
		if (bDesignMode)
			return pT->DoVerbProperties(prcPosRect, hwndParent);
		else
			return pT->DoVerbInPlaceActivate(prcPosRect, hwndParent);
	}
	HRESULT DoVerbShow(LPCRECT prcPosRect, HWND )
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr;
		hr = pT->OnPreVerbShow();
		if (((HRESULT)(hr) >= 0))
		{
			hr = pT->InPlaceActivate((-1L), prcPosRect);
			if (((HRESULT)(hr) >= 0))
				hr = pT->OnPostVerbShow();
		}
		return hr;
	}
	HRESULT DoVerbInPlaceActivate(LPCRECT prcPosRect, HWND )
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr;
		hr = pT->OnPreVerbInPlaceActivate();
		if (((HRESULT)(hr) >= 0))
		{
			hr = pT->InPlaceActivate((-5L), prcPosRect);
			if (((HRESULT)(hr) >= 0))
				hr = pT->OnPostVerbInPlaceActivate();
			if (((HRESULT)(hr) >= 0))
				pT->FireViewChange();
		}
		return hr;
	}
	HRESULT DoVerbUIActivate(LPCRECT prcPosRect, HWND )
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr = ((HRESULT)0x00000000L);
		if (!pT->m_bUIActive)
		{
			hr = pT->OnPreVerbUIActivate();
			if (((HRESULT)(hr) >= 0))
			{
				hr = pT->InPlaceActivate((-4L), prcPosRect);
				if (((HRESULT)(hr) >= 0))
					hr = pT->OnPostVerbUIActivate();
			}
		}
		return hr;
	}
	HRESULT DoVerbHide(LPCRECT , HWND )
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr;
		hr = pT->OnPreVerbHide();
		if (((HRESULT)(hr) >= 0))
		{
			pT->UIDeactivate();
			if (pT->m_hWnd)
				pT->ShowWindow(0);
			hr = pT->OnPostVerbHide();
		}
		return hr;
	}
	HRESULT DoVerbOpen(LPCRECT , HWND )
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr;
		hr = pT->OnPreVerbOpen();
		if (((HRESULT)(hr) >= 0))
			hr = pT->OnPostVerbOpen();
		return hr;
	}
	HRESULT DoVerbDiscardUndo(LPCRECT , HWND )
	{
		T* pT = static_cast<T*>(this);
		HRESULT hr;
		hr = pT->OnPreVerbDiscardUndo();
		if (((HRESULT)(hr) >= 0))
			hr = pT->OnPostVerbDiscardUndo();
		return hr;
	}
	virtual HRESULT __stdcall DoVerb(LONG iVerb, LPMSG , IOleClientSite* , LONG ,
									 HWND hwndParent, LPCRECT lprcPosRect)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::DoVerb(%d)\n", iVerb);
		((void)0);

		HRESULT hr = ((HRESULT)0x80004001L);
		switch (iVerb)
		{
		case (0L):
			hr = pT->DoVerbPrimary(lprcPosRect, hwndParent);
			break;
		case (-1L):
			hr = pT->DoVerbShow(lprcPosRect, hwndParent);
			break;
		case (-5L):
			hr = pT->DoVerbInPlaceActivate(lprcPosRect, hwndParent);
			break;
		case (-4L):
			hr = pT->DoVerbUIActivate(lprcPosRect, hwndParent);
			break;
		case (-3L):
			hr = pT->DoVerbHide(lprcPosRect, hwndParent);
			break;
		case (-2L):
			hr = pT->DoVerbOpen(lprcPosRect, hwndParent);
			break;
		case (-6L):
			hr = pT->DoVerbDiscardUndo(lprcPosRect, hwndParent);
			break;
		case (-7L):
			hr = pT->DoVerbProperties(lprcPosRect, hwndParent);
		}
		return hr;
	}
	virtual HRESULT __stdcall EnumVerbs(IEnumOLEVERB **ppEnumOleVerb)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::EnumVerbs\n");
		((void)0);
		if (!ppEnumOleVerb)
			return ((HRESULT)0x80004003L);
		return OleRegEnumVerbs(T::GetObjectCLSID(), ppEnumOleVerb);
	}
	virtual HRESULT __stdcall Update(void)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::Update\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall IsUpToDate(void)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::IsUpToDate\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall GetUserClassID(CLSID *pClsid)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::GetUserClassID\n");
		((void)0);
		if (!pClsid)
			return ((HRESULT)0x80004003L);
		*pClsid = T::GetObjectCLSID();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall GetUserType(DWORD dwFormOfType, LPOLESTR *pszUserType)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::GetUserType\n");
		return OleRegGetUserType(T::GetObjectCLSID(), dwFormOfType, pszUserType);
	}
	virtual HRESULT __stdcall SetExtent(DWORD dwDrawAspect, SIZEL *psizel)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::SetExtent\n");
		return pT->IOleObject_SetExtent(dwDrawAspect, psizel);
	}
	virtual HRESULT __stdcall GetExtent(DWORD dwDrawAspect, SIZEL *psizel)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::GetExtent\n");
		if (dwDrawAspect != DVASPECT_CONTENT)
			return ((HRESULT)0x80004005L);
		if (psizel == 0)
			return ((HRESULT)0x80004003L);
		*psizel = pT->m_sizeExtent;
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Advise(IAdviseSink *pAdvSink, DWORD *pdwConnection)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::Advise\n");
		return pT->IOleObject_Advise(pAdvSink, pdwConnection);
	}
	virtual HRESULT __stdcall Unadvise(DWORD dwConnection)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::Unadvise\n");
		HRESULT hRes = ((HRESULT)0x80004005L);
		if (pT->m_spOleAdviseHolder != 0)
			hRes = pT->m_spOleAdviseHolder->Unadvise(dwConnection);
		return hRes;
	}
	virtual HRESULT __stdcall EnumAdvise(IEnumSTATDATA **ppenumAdvise)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::EnumAdvise\n");
		HRESULT hRes = ((HRESULT)0x80004005L);
		if (pT->m_spOleAdviseHolder != 0)
			hRes = pT->m_spOleAdviseHolder->EnumAdvise(ppenumAdvise);
		return hRes;
	}
	virtual HRESULT __stdcall GetMiscStatus(DWORD dwAspect, DWORD *pdwStatus)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleObjectImpl::GetMiscStatus\n");
		return OleRegGetMiscStatus(T::GetObjectCLSID(), dwAspect, pdwStatus);
	}
	virtual HRESULT __stdcall SetColorScheme(LOGPALETTE* )
	{
		return ((HRESULT)0x80004001L);
	}

public:
	HRESULT OnPreVerbShow() { return ((HRESULT)0x00000000L); }
	HRESULT OnPostVerbShow() { return ((HRESULT)0x00000000L); }
	HRESULT OnPreVerbInPlaceActivate() { return ((HRESULT)0x00000000L); }
	HRESULT OnPostVerbInPlaceActivate() { return ((HRESULT)0x00000000L); }
	HRESULT OnPreVerbUIActivate() { return ((HRESULT)0x00000000L); }
	HRESULT OnPostVerbUIActivate() { return ((HRESULT)0x00000000L); }
	HRESULT OnPreVerbHide() { return ((HRESULT)0x00000000L); }
	HRESULT OnPostVerbHide() { return ((HRESULT)0x00000000L); }
	HRESULT OnPreVerbOpen() { return ((HRESULT)0x00000000L); }
	HRESULT OnPostVerbOpen() { return ((HRESULT)0x00000000L); }
	HRESULT OnPreVerbDiscardUndo() { return ((HRESULT)0x00000000L); }
	HRESULT OnPostVerbDiscardUndo() { return ((HRESULT)0x00000000L); }
};


#pragma pack(push, 1)
struct _ATL_DLGTEMPLATEEX
{
	WORD dlgVer;
	WORD signature;
	DWORD helpID;
	DWORD exStyle;
	DWORD style;
	WORD cDlgItems;
	short x;
	short y;
	short cx;
	short cy;
};
#pragma pack(pop)



template <class T>
class __declspec(novtable) IPropertyPageImpl : public IPropertyPage
{

public:
	void SetDirty(BOOL bDirty)
	{
		T* pT = static_cast<T*>(this);
		if (pT->m_bDirty != bDirty)
		{
			pT->m_bDirty = bDirty;
			pT->m_pPageSite->OnStatusChange(bDirty ? PROPPAGESTATUS_DIRTY | PROPPAGESTATUS_VALIDATE : 0);
		}
	}

	IPropertyPageImpl()
	{
		T* pT = static_cast<T*>(this);
		pT->m_pPageSite = 0;
		pT->m_size.cx = 0;
		pT->m_size.cy = 0;
		pT->m_dwTitleID = 0;
		pT->m_dwHelpFileID = 0;
		pT->m_dwDocStringID = 0;
		pT->m_dwHelpContext = 0;
		pT->m_ppUnk = 0;
		pT->m_nObjects = 0;
		pT->m_bDirty = 0;
		pT->m_hWnd = 0;
	}

	~IPropertyPageImpl()
	{
		T* pT = static_cast<T*>(this);
		if (pT->m_pPageSite != 0)
			pT->m_pPageSite->Release();

		for (UINT i = 0; i < m_nObjects; i++)
			pT->m_ppUnk[i]->Release();

		delete[] pT->m_ppUnk;
	}

	
	
	virtual HRESULT __stdcall SetPageSite(IPropertyPageSite *pPageSite)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::SetPageSite\n");

		if (!pPageSite && pT->m_pPageSite)
		{
			pT->m_pPageSite->Release();
			pT->m_pPageSite = 0;
			return ((HRESULT)0x00000000L);
		}

		if (!pPageSite && !pT->m_pPageSite)
			return ((HRESULT)0x00000000L);

		if (pPageSite && pT->m_pPageSite)
		{
			1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Error : setting page site again with non NULL value\n");
			return ((HRESULT)0x8000FFFFL);
		}

		pT->m_pPageSite = pPageSite;
		pT->m_pPageSite->AddRef();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Activate(HWND hWndParent, LPCRECT pRect, BOOL )
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::Activate\n");

		if (pRect == 0)
		{
			1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Error : Passed a NULL rect\n");
			return ((HRESULT)0x80004003L);
		}

		pT->m_hWnd = pT->Create(hWndParent);
		Move(pRect);

		m_size.cx = pRect->right - pRect->left;
		m_size.cy = pRect->bottom - pRect->top;

		return ((HRESULT)0x00000000L);

	}
	virtual HRESULT __stdcall Deactivate( void)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::Deactivate\n");

		if (pT->m_hWnd)
		{
			1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Destroying Dialog\n");
			if (::IsWindow(pT->m_hWnd))
				pT->DestroyWindow();
			pT->m_hWnd = 0;
		}

		return ((HRESULT)0x00000000L);

	}
	virtual HRESULT __stdcall GetPageInfo(PROPPAGEINFO *pPageInfo)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::GetPageInfo\n");

		if (pPageInfo == 0)
		{
			1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Error : PROPPAGEINFO passed == NULL\n");
			return ((HRESULT)0x80004003L);
		}

		HRSRC hRsrc = FindResourceA(_Module.GetResourceInstance(),
								   (LPSTR)((ULONG_PTR)((WORD)(T::IDD))), (LPSTR)((ULONG_PTR)((WORD)(5))));
		if (hRsrc == 0)
		{
			1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Could not find resource template\n");
			return ((HRESULT)0x8000FFFFL);
		}

		HGLOBAL hGlob = LoadResource(_Module.GetResourceInstance(), hRsrc);
		DLGTEMPLATE* pDlgTempl = (DLGTEMPLATE*)LockResource(hGlob);
		if (pDlgTempl == 0)
		{
			1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Could not load resource template\n");
			return ((HRESULT)0x8000FFFFL);
		}
		AtlGetDialogSize(pDlgTempl, &m_size);

		pPageInfo->cb = sizeof(PROPPAGEINFO);
		pPageInfo->pszTitle = LoadStringHelper(pT->m_dwTitleID);
		pPageInfo->size = m_size;
		pPageInfo->pszHelpFile = LoadStringHelper(pT->m_dwHelpFileID);
		pPageInfo->pszDocString = LoadStringHelper(pT->m_dwDocStringID);
		pPageInfo->dwHelpContext = pT->m_dwHelpContext;

		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall SetObjects(ULONG nObjects, IUnknown **ppUnk)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::SetObjects\n");

		if (ppUnk == 0)
			return ((HRESULT)0x80004003L);

		if (pT->m_ppUnk != 0 && pT->m_nObjects > 0)
		{
			for (UINT iObj = 0; iObj < pT->m_nObjects; iObj++)
				pT->m_ppUnk[iObj]->Release();

			delete [] pT->m_ppUnk;
		}

		pT->m_ppUnk = 0;
		pT->m_ppUnk = new IUnknown*[nObjects];;

		if (pT->m_ppUnk == 0)
			return ((HRESULT)0x8007000EL);

		for (UINT i = 0; i < nObjects; i++)
		{
			ppUnk[i]->AddRef();
			pT->m_ppUnk[i] = ppUnk[i];
		}

		pT->m_nObjects = nObjects;

		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Show(UINT nCmdShow)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::Show\n");

		if (pT->m_hWnd == 0)
			return ((HRESULT)0x8000FFFFL);

		ShowWindow(pT->m_hWnd, nCmdShow);
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Move(LPCRECT pRect)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::Move\n");

		if (pT->m_hWnd == 0)
			return ((HRESULT)0x8000FFFFL);

		if (pRect == 0)
			return ((HRESULT)0x80004003L);

		MoveWindow(pT->m_hWnd, pRect->left, pRect->top, pRect->right - pRect->left,
				 pRect->bottom - pRect->top, 1);

		return ((HRESULT)0x00000000L);

	}
	virtual HRESULT __stdcall IsPageDirty(void)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::IsPageDirty\n");
		return pT->m_bDirty ? ((HRESULT)0x00000000L) : ((HRESULT)0x00000001L);
	}
	virtual HRESULT __stdcall Apply(void)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::Apply\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall Help(LPCOLESTR pszHelpDir)
	{
		T* pT = static_cast<T*>(this);
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;

		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::Help\n");
		CComBSTR szFullFileName(pszHelpDir);
		LPOLESTR szFileName = LoadStringHelper(pT->m_dwHelpFileID);
		szFullFileName.Append(L"\\");
		szFullFileName.Append(szFileName);
		CoTaskMemFree(szFileName);
		WinHelpA(pT->m_hWnd, ((LPCSTR)( ((_lpw = szFullFileName) == 0) ? 0 : ( _convert = (lstrlenW(_lpw)+1)*2, AtlW2AHelper((LPSTR) _alloca(_convert), _lpw, _convert)))), 0x0008L, 0);
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall TranslateAcceleratorA(MSG *pMsg)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPropertyPageImpl::TranslateAccelerator\n");
		T* pT = static_cast<T*>(this);
		if ((pMsg->message < 0x0100 || pMsg->message > 0x0108) &&
			(pMsg->message < 0x0200 || pMsg->message > 0x0209))
			return ((HRESULT)0x00000001L);

		return (IsDialogMessageA(pT->m_hWnd, pMsg)) ? ((HRESULT)0x00000000L) : ((HRESULT)0x00000001L);
	}

	IPropertyPageSite* m_pPageSite;
	IUnknown** m_ppUnk;
	ULONG m_nObjects;
	SIZE m_size;
	UINT m_dwTitleID;
	UINT m_dwHelpFileID;
	UINT m_dwDocStringID;
	DWORD m_dwHelpContext;
	BOOL m_bDirty;


public:

	public: BOOL ProcessWindowMessage(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult, DWORD dwMsgMapID = 0) { BOOL bHandled = 1; hWnd; uMsg; wParam; lParam; lResult; bHandled; switch(dwMsgMapID) { case 0:
		if(uMsg == 0x007C) { bHandled = 1; lResult = OnStyleChange(uMsg, wParam, lParam, bHandled); if(bHandled) return 1; }
	break; default: 1 ? (void)0 : AtlTrace2(atlTraceWindowing, 0, "Invalid message map ID (%i)\n", dwMsgMapID); ((void)0); break; } return 0; }

	LRESULT OnStyleChange(UINT, WPARAM wParam, LPARAM lParam, BOOL&)
	{
		if (wParam == (-20))
		{
			LPSTYLESTRUCT lpss = (LPSTYLESTRUCT) lParam;
			lpss->styleNew |= 0x00010000L;
			return 0;
		}
		return 1;
	}

	LPOLESTR LoadStringHelper(UINT idRes)
	{
		int _convert; _convert; UINT _acp = 0; _acp; LPCWSTR _lpw; _lpw; LPCSTR _lpa; _lpa;

		TCHAR szTemp[260];
		LPOLESTR sz;
		sz = (LPOLESTR)CoTaskMemAlloc(260*sizeof(OLECHAR));
		if (sz == 0)
			return 0;
		sz[0] = 0;

		if (LoadStringA(_Module.GetResourceInstance(), idRes, szTemp, 260))
			ocscpy(sz, ( ((_lpa = szTemp) == 0) ? 0 : ( _convert = (lstrlenA(_lpa)+1), AtlA2WHelper((LPWSTR) _alloca(_convert*2), _lpa, _convert))));
		else
		{
			1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Error : Failed to load string from res\n");
		}

		return sz;
	}
};




template <class T>
class __declspec(novtable) IPropertyPage2Impl : public IPropertyPageImpl<T>
{
public:

	virtual HRESULT __stdcall EditProperty(DISPID dispID)
	{
		return ((HRESULT)0x80004001L);
	}
};





template <class T>
class __declspec(novtable) IPerPropertyBrowsingImpl : public IPerPropertyBrowsing
{
public:
	virtual HRESULT __stdcall GetDisplayString(DISPID dispID,BSTR *pBstr)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPerPropertyBrowsingImpl::GetDisplayString\n");
		T* pT = static_cast<T*>(this);
		*pBstr = 0;
		CComVariant var;
		if (((HRESULT)(CComDispatchDriver::GetProperty(pT, dispID, &var))<0))
			return ((HRESULT)0x00000001L);

		BSTR bstrTemp = var.bstrVal;
		if (var.vt != VT_BSTR)
		{
			CComVariant varDest;
			if (((HRESULT)(::VariantChangeType(&varDest, &var, 0x01, VT_BSTR))<0))
				return ((HRESULT)0x00000001L);
			bstrTemp = varDest.bstrVal;
		}
		*pBstr = SysAllocString(bstrTemp);
		if (*pBstr == 0)
			return ((HRESULT)0x8007000EL);
		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall MapPropertyToPage(DISPID dispID, CLSID *pClsid)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPerPropertyBrowsingImpl::MapPropertyToPage\n");
		ATL_PROPMAP_ENTRY* pMap = T::GetPropertyMap();
		((void)0);
		for (int i = 0; pMap[i].pclsidPropPage != 0; i++)
		{
			if (pMap[i].szDesc == 0)
				continue;

			
			if (pMap[i].dwSizeData != 0)
				continue;

			if (pMap[i].dispid == dispID)
			{
				((void)0);
				*pClsid = *(pMap[i].pclsidPropPage);
				return ((HRESULT)0x00000000L);
			}
		}
		*pClsid = GUID_NULL;
		return ((HRESULT)0x80070057L);
	}
	virtual HRESULT __stdcall GetPredefinedStrings(DISPID dispID, CALPOLESTR *pCaStringsOut,CADWORD *pCaCookiesOut)
	{
		dispID;
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IPerPropertyBrowsingImpl::GetPredefinedStrings\n");
		if (pCaStringsOut == 0 || pCaCookiesOut == 0)
			return ((HRESULT)0x80004003L);

		pCaStringsOut->cElems = 0;
		pCaStringsOut->pElems = 0;
		pCaCookiesOut->cElems = 0;
		pCaCookiesOut->pElems = 0;
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall GetPredefinedValue(DISPID , DWORD , VARIANT* )
	{
		return ((HRESULT)0x80004001L);
	}
};



template <class T>
class __declspec(novtable) IViewObjectExImpl : public IViewObjectEx
{
public:
	virtual HRESULT __stdcall Draw(DWORD dwDrawAspect, LONG lindex, void *pvAspect,
					DVTARGETDEVICE *ptd, HDC hicTargetDev, HDC hdcDraw,
					LPCRECTL prcBounds, LPCRECTL prcWBounds,
					BOOL (__stdcall * )(DWORD dwContinue),
					DWORD )
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::Draw\n");
		return pT->IViewObject_Draw(dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, hdcDraw,
			prcBounds, prcWBounds);
	}

	virtual HRESULT __stdcall GetColorSet(DWORD ,LONG , void* , DVTARGETDEVICE* , HDC , LOGPALETTE** )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall Freeze(DWORD , LONG , void* ,DWORD* )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall Unfreeze(DWORD )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall SetAdvise(DWORD , DWORD , IAdviseSink* pAdvSink)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::SetAdvise\n");
		pT->m_spAdviseSink = pAdvSink;
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall GetAdvise(DWORD* , DWORD* , IAdviseSink** ppAdvSink)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::GetAdvise\n");
		if (ppAdvSink != 0)
		{
			*ppAdvSink = pT->m_spAdviseSink;
			if (pT->m_spAdviseSink)
				pT->m_spAdviseSink.p->AddRef();
		}
		return ((HRESULT)0x00000000L);
	}

	
	
	virtual HRESULT __stdcall GetExtent(DWORD , LONG , DVTARGETDEVICE* , LPSIZEL lpsizel)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::GetExtent\n");
		*lpsizel = pT->m_sizeExtent;
		return ((HRESULT)0x00000000L);
	}

	
	
	virtual HRESULT __stdcall GetRect(DWORD , LPRECTL )
	{
		return ((HRESULT)0x80004001L);
	}

	virtual HRESULT __stdcall GetViewStatus(DWORD* pdwStatus)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::GetViewStatus\n");
		*pdwStatus = pT->_GetViewStatus();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall QueryHitPoint(DWORD dwAspect, LPCRECT pRectBounds, POINT ptlLoc, LONG , DWORD *pHitResult)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::QueryHitPoint\n");
		if (dwAspect == DVASPECT_CONTENT)
		{
			*pHitResult = PtInRect(pRectBounds, ptlLoc) ? HITRESULT_HIT : HITRESULT_OUTSIDE;
			return ((HRESULT)0x00000000L);
		}
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Wrong DVASPECT\n");
		return ((HRESULT)0x80004005L);
	}
	virtual HRESULT __stdcall QueryHitRect(DWORD dwAspect, LPCRECT pRectBounds, LPCRECT prcLoc, LONG , DWORD* pHitResult)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::QueryHitRect\n");
		if (dwAspect == DVASPECT_CONTENT)
		{
			RECT rc;
			*pHitResult = UnionRect(&rc, pRectBounds, prcLoc) ? HITRESULT_HIT : HITRESULT_OUTSIDE;
			return ((HRESULT)0x00000000L);
		}
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Wrong DVASPECT\n");
		return ((HRESULT)0x80004005L);
	}
	virtual HRESULT __stdcall GetNaturalExtent(DWORD dwAspect, LONG , DVTARGETDEVICE* , HDC , DVEXTENTINFO* pExtentInfo , LPSIZEL psizel)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IViewObjectExImpl::GetNaturalExtent\n");
		HRESULT hRes = ((HRESULT)0x80004005L);
		if (pExtentInfo == 0 || psizel == 0)
			hRes = ((HRESULT)0x80004003L);
		else if (dwAspect == DVASPECT_CONTENT)
		{
			if (pExtentInfo->dwExtentMode == DVEXTENT_CONTENT)
			{
				*psizel = pT->m_sizeNatural;
				hRes = ((HRESULT)0x00000000L);
			}
		}
		return hRes;
	}

public:
};




template <class T>
class __declspec(novtable) IOleInPlaceObjectWindowlessImpl : public IOleInPlaceObjectWindowless
{
public:
	
	

	
	virtual HRESULT __stdcall GetWindow(HWND* phwnd)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceObjectWindowlessImpl::GetWindow\n");
		T* pT = static_cast<T*>(this);
		HRESULT hRes = ((HRESULT)0x80004003L);

		if (pT->m_bWasOnceWindowless)
			return ((HRESULT)0x80004005L);

		if (phwnd != 0)
		{
			*phwnd = pT->m_hWnd;
			hRes = (*phwnd == 0) ? ((HRESULT)0x8000FFFFL) : ((HRESULT)0x00000000L);
		}
		return hRes;
	}
	virtual HRESULT __stdcall ContextSensitiveHelp(BOOL )
	{
		return ((HRESULT)0x80004001L);
	}

	
	
	virtual HRESULT __stdcall InPlaceDeactivate(void)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceObjectWindowlessImpl::InPlaceDeactivate\n");
		return pT->IOleInPlaceObject_InPlaceDeactivate();
	}
	virtual HRESULT __stdcall UIDeactivate(void)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceObjectWindowlessImpl::UIDeactivate\n");
		return pT->IOleInPlaceObject_UIDeactivate();
	}
	virtual HRESULT __stdcall SetObjectRects(LPCRECT prcPos,LPCRECT prcClip)
	{
		T* pT = static_cast<T*>(this);
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceObjectWindowlessImpl::SetObjectRects\n");
		return pT->IOleInPlaceObject_SetObjectRects(prcPos, prcClip);
	}
	virtual HRESULT __stdcall ReactivateAndUndo(void)
	{
		return ((HRESULT)0x80004001L);
	}

	
	
	virtual HRESULT __stdcall OnWindowMessage(UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceObjectWindowlessImpl::OnWindowMessage\n");
		T* pT = static_cast<T*>(this);
		BOOL b = pT->ProcessWindowMessage(pT->m_hWnd, msg, wParam, lParam, *plResult);
		return b ? ((HRESULT)0x00000000L) : ((HRESULT)0x00000001L);
	}

	virtual HRESULT __stdcall GetDropTarget(IDropTarget** )
	{
		return ((HRESULT)0x80004001L);
	}
};





template <class T>
class __declspec(novtable) IOleInPlaceActiveObjectImpl : public IOleInPlaceActiveObject
{
public:
	
	

	
	virtual HRESULT __stdcall GetWindow(HWND *phwnd)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceActiveObjectImpl::GetWindow\n");
		T* pT = static_cast<T*>(this);
		HRESULT hRes = ((HRESULT)0x80004003L);

		if (pT->m_bWasOnceWindowless)
			return ((HRESULT)0x80004005L);

		if (phwnd != 0)
		{
			*phwnd = pT->m_hWnd;
			hRes = (*phwnd == 0) ? ((HRESULT)0x8000FFFFL) : ((HRESULT)0x00000000L);
		}
		return hRes;
	}
	virtual HRESULT __stdcall ContextSensitiveHelp(BOOL )
	{
		return ((HRESULT)0x80004001L);
	}

	
	
	virtual HRESULT __stdcall TranslateAcceleratorA(LPMSG pMsg)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceActiveObjectImpl::TranslateAccelerator\n");
		T* pT = static_cast<T*>(this);
		HRESULT hRet = ((HRESULT)0x00000000L);
		if (pT->PreTranslateAccelerator(pMsg, hRet))
			return hRet;
		CComPtr<IOleControlSite> spCtlSite;
		hRet = pT->InternalGetSite(IID_IOleControlSite, (void**)&spCtlSite);
		if (((HRESULT)(hRet) >= 0))
		{
			if (spCtlSite != 0)
			{
				DWORD dwKeyMod = 0;
				if (::GetKeyState(0x10) < 0)
					dwKeyMod += 1;	
				if (::GetKeyState(0x11) < 0)
					dwKeyMod += 2;	
				if (::GetKeyState(0x12) < 0)
					dwKeyMod += 4;	
				hRet = spCtlSite->TranslateAcceleratorA(pMsg, dwKeyMod);
			}
			else
				hRet = ((HRESULT)0x00000001L);
		}
		return (hRet == ((HRESULT)0x00000000L)) ? ((HRESULT)0x00000000L) : ((HRESULT)0x00000001L);
	}
	virtual HRESULT __stdcall OnFrameWindowActivate(BOOL )
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceActiveObjectImpl::OnFrameWindowActivate\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall OnDocWindowActivate(BOOL fActivate)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceActiveObjectImpl::OnDocWindowActivate\n");
		T* pT = static_cast<T*>(this);
		if (fActivate == 0)
			pT->IOleInPlaceObject_UIDeactivate();
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall ResizeBorder(LPCRECT , IOleInPlaceUIWindow* , BOOL )
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceActiveObjectImpl::ResizeBorder\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall EnableModeless(BOOL )
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleInPlaceActiveObjectImpl::EnableModeless\n");
		return ((HRESULT)0x00000000L);
	}
};



template <class T>
class __declspec(novtable) IPointerInactiveImpl : public IPointerInactive
{
public:
	
	
	virtual HRESULT __stdcall GetActivationPolicy(DWORD *pdwPolicy)
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall OnInactiveMouseMove(LPCRECT pRectBounds, long x, long y, DWORD dwMouseMsg)
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall OnInactiveSetCursor(LPCRECT pRectBounds, long x, long y, DWORD dwMouseMsg, BOOL fSetAlways)
	{
		return ((HRESULT)0x80004001L);
	}
};



template <class T>
class __declspec(novtable) IRunnableObjectImpl : public IRunnableObject
{
public:
	
	
	virtual HRESULT __stdcall GetRunningClass(LPCLSID lpClsid)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IRunnableObjectImpl::GetRunningClass\n");
		*lpClsid = GUID_NULL;
		return ((HRESULT)0x8000FFFFL);
	}
	virtual HRESULT __stdcall Run(LPBINDCTX)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IRunnableObjectImpl::Run\n");
		return ((HRESULT)0x00000000L);
	}
	virtual BOOL __stdcall IsRunning()
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IRunnableObjectImpl::IsRunning\n");
		return 1;
	}
	virtual HRESULT __stdcall LockRunning(BOOL , BOOL )
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IRunnableObjectImpl::LockRunning\n");
		return ((HRESULT)0x00000000L);
	}
	virtual HRESULT __stdcall SetContainedObject(BOOL )
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IRunnableObjectImpl::SetContainedObject\n");
		return ((HRESULT)0x00000000L);
	}
};




template <class T>
class __declspec(novtable) IDataObjectImpl : public IDataObject
{
public:
	virtual HRESULT __stdcall GetData(FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IDataObjectImpl::GetData\n");
		T* pT = (T*) this;
		return pT->IDataObject_GetData(pformatetcIn, pmedium);
	}
	virtual HRESULT __stdcall GetDataHere(FORMATETC* , STGMEDIUM* )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall QueryGetData(FORMATETC* )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall GetCanonicalFormatEtc(FORMATETC* ,FORMATETC* )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall SetData(FORMATETC* , STGMEDIUM* , BOOL )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall EnumFormatEtc(DWORD , IEnumFORMATETC** )
	{
		return ((HRESULT)0x80004001L);
	}
	virtual HRESULT __stdcall DAdvise(FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink,
		DWORD *pdwConnection)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IDataObjectImpl::DAdvise\n");
		T* pT = static_cast<T*>(this);
		HRESULT hr = ((HRESULT)0x00000000L);
		if (pT->m_spDataAdviseHolder == 0)
			hr = CreateDataAdviseHolder(&pT->m_spDataAdviseHolder);

		if (hr == ((HRESULT)0x00000000L))
			hr = pT->m_spDataAdviseHolder->Advise((IDataObject*)this, pformatetc, advf, pAdvSink, pdwConnection);

		return hr;
	}
	virtual HRESULT __stdcall DUnadvise(DWORD dwConnection)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IDataObjectImpl::DUnadvise\n");
		T* pT = static_cast<T*>(this);
		HRESULT hr = ((HRESULT)0x00000000L);
		if (pT->m_spDataAdviseHolder == 0)
			hr = ((HRESULT)0x80040004L);
		else
			hr = pT->m_spDataAdviseHolder->Unadvise(dwConnection);
		return hr;
	}
	virtual HRESULT __stdcall EnumDAdvise(IEnumSTATDATA **ppenumAdvise)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IDataObjectImpl::EnumDAdvise\n");
		T* pT = static_cast<T*>(this);
		HRESULT hr = ((HRESULT)0x80004005L);
		if (pT->m_spDataAdviseHolder != 0)
			hr = pT->m_spDataAdviseHolder->EnumAdvise(ppenumAdvise);
		return hr;
	}
};



template <class T, class CDV = CComDynamicUnkArray >
class __declspec(novtable) IPropertyNotifySinkCP :
	public IConnectionPointImpl<T, &IID_IPropertyNotifySink, CDV>
{
public:
	typedef CFirePropNotifyEvent _ATL_PROP_NOTIFY_EVENT_CLASS;
};









template <class T, DWORD dwSupportedSafety>
class __declspec(novtable) IObjectSafetyImpl : public IObjectSafety
{
public:
	IObjectSafetyImpl()
	{
		m_dwCurrentSafety = 0;
	}

	virtual HRESULT __stdcall GetInterfaceSafetyOptions(const IID & riid, DWORD *pdwSupportedOptions, DWORD *pdwEnabledOptions)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IObjectSafetyImpl2::GetInterfaceSafetyOptions\n");
		T* pT = static_cast<T*>(this);
		if (pdwSupportedOptions == 0 || pdwEnabledOptions == 0)
			return ((HRESULT)0x80004003L);
		
		HRESULT hr;
		IUnknown* pUnk;
		
		hr = pT->GetUnknown()->QueryInterface(riid, (void**)&pUnk);
		if (((HRESULT)(hr) >= 0))
		{
			
			pUnk->Release();	
			*pdwSupportedOptions = dwSupportedSafety;
			*pdwEnabledOptions   = m_dwCurrentSafety;
		}
		else
		{
			
			*pdwSupportedOptions = 0;
			*pdwEnabledOptions   = 0;
		}
		return hr;
	}
	virtual HRESULT __stdcall SetInterfaceSafetyOptions(const IID & riid, DWORD dwOptionSetMask, DWORD dwEnabledOptions)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IObjectSafetyImpl2::SetInterfaceSafetyOptions\n");
		T* pT = static_cast<T*>(this);
		IUnknown* pUnk;
		
		
		if (((HRESULT)(pT->GetUnknown()->QueryInterface(riid, (void**)&pUnk))<0))
			return ((HRESULT)0x80004002L);
		pUnk->Release();	
		
		
		if (dwOptionSetMask & ~dwSupportedSafety)
			return ((HRESULT)0x80004005L);

		
		m_dwCurrentSafety = m_dwCurrentSafety  & ~dwEnabledOptions | dwOptionSetMask;
		return ((HRESULT)0x00000000L);
	}
	DWORD m_dwCurrentSafety;
};

template <class T>
class __declspec(novtable) IOleLinkImpl : public IOleLink
{
	virtual HRESULT __stdcall SetUpdateOptions(DWORD )
	{
		return ((HRESULT)0x80004001L);
	}

	virtual HRESULT __stdcall GetUpdateOptions(DWORD* )
	{
		return ((HRESULT)0x80004001L);
	}

	virtual HRESULT __stdcall SetSourceMoniker(IMoniker* , const IID & )
	{
		return ((HRESULT)0x80004001L);
	}

	virtual HRESULT __stdcall GetSourceMoniker(IMoniker** )
	{
		return ((HRESULT)0x80004001L);
	};

	virtual HRESULT __stdcall SetSourceDisplayName(LPCOLESTR )
	{
		return ((HRESULT)0x80004001L);
	}

	virtual HRESULT __stdcall GetSourceDisplayName(LPOLESTR *ppszDisplayName)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleLink::GetSourceDisplayName\n");
		*ppszDisplayName = 0;
		return ((HRESULT)0x80004005L);
	}

	virtual HRESULT __stdcall BindToSource(DWORD , IBindCtx* )
	{
		return ((HRESULT)0x80004001L);
	};

	virtual HRESULT __stdcall BindIfRunning()
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"IOleLinkImpl::BindIfRunning\n");
		return ((HRESULT)0x00000000L);
	};

	virtual HRESULT __stdcall GetBoundSource(IUnknown** )
	{
		return ((HRESULT)0x80004001L);
	};

	virtual HRESULT __stdcall UnbindSource()
	{
		return ((HRESULT)0x80004001L);
	};

	virtual HRESULT __stdcall Update(IBindCtx* )
	{
		return ((HRESULT)0x80004001L);
	};
};

template <class T>
class __declspec(novtable) CBindStatusCallback :
	public CComObjectRootEx<T::_ThreadModel::ThreadModelNoCS>,
	public IBindStatusCallback
{
	typedef void (T::*ATL_PDATAAVAILABLE)(CBindStatusCallback<T>* pbsc, BYTE* pBytes, DWORD dwSize);

public:

public: typedef CBindStatusCallback<T> _ComMapClass; static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw) { _ComMapClass* p = (_ComMapClass*)pv; p->Lock(); HRESULT hRes = CComObjectRootBase::_Cache(pv, iid, ppvObject, dw); p->Unlock(); return hRes; } IUnknown* _GetRawUnknown() { ((void)0); return (IUnknown*)((int)this+_GetEntries()->dw); } IUnknown* GetUnknown() {return _GetRawUnknown();} HRESULT _InternalQueryInterface(const IID & iid, void** ppvObject) { return InternalQueryInterface(this, _GetEntries(), iid, ppvObject); } const static _ATL_INTMAP_ENTRY* __stdcall _GetEntries() { static const _ATL_INTMAP_ENTRY _entries[] = { 
	{&__uuidof(IBindStatusCallback), ((DWORD)(static_cast<IBindStatusCallback*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
{0, 0, 0}}; return _entries;} virtual ULONG __stdcall AddRef( void) = 0; virtual ULONG __stdcall Release( void) = 0; virtual HRESULT __stdcall QueryInterface(const IID &, void**) = 0;

	CBindStatusCallback()
	{
		m_pT = 0;
		m_pFunc = 0;
	}
	~CBindStatusCallback()
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"~CBindStatusCallback\n");
	}

	virtual HRESULT __stdcall OnStartBinding(DWORD dwReserved, IBinding *pBinding)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::OnStartBinding\n");
		m_spBinding = pBinding;
		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall GetPriority(LONG *pnPriority)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::GetPriority");
		HRESULT hr = ((HRESULT)0x00000000L);
		if (pnPriority)
			*pnPriority = 0;
		else
			hr = ((HRESULT)0x80070057L);
		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall OnLowResource(DWORD reserved)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::OnLowResource");
		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall OnProgress(ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::OnProgress");
		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall OnStopBinding(HRESULT hresult, LPCWSTR szError)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::OnStopBinding\n");
		(m_pT->*m_pFunc)(this, 0, 0);
		m_spBinding.Release();
		m_spBindCtx.Release();
		m_spMoniker.Release();
		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall GetBindInfo(DWORD *pgrfBINDF, BINDINFO *pbindInfo)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::GetBindInfo\n");

		if (pbindInfo==0 || pbindInfo->cbSize==0 || pgrfBINDF==0)
			return ((HRESULT)0x80070057L);

		*pgrfBINDF = BINDF_ASYNCHRONOUS | BINDF_ASYNCSTORAGE |
			BINDF_GETNEWESTVERSION | BINDF_NOWRITECACHE;

		ULONG cbSize = pbindInfo->cbSize;		
		memset(pbindInfo, 0, cbSize);			
		pbindInfo->cbSize = cbSize;				
		pbindInfo->dwBindVerb = BINDVERB_GET;	
		return ((HRESULT)0x00000000L);
	}

	virtual HRESULT __stdcall OnDataAvailable(DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::OnDataAvailable\n");
		HRESULT hr = ((HRESULT)0x00000000L);

		
		if (BSCF_FIRSTDATANOTIFICATION & grfBSCF)
		{
			if (!m_spStream && pstgmed->tymed == TYMED_ISTREAM)
				m_spStream = pstgmed->pstm;
		}

		DWORD dwRead = dwSize - m_dwTotalRead; 
		DWORD dwActuallyRead = 0;            

		
		if (m_spStream)
		{
			if (dwRead > 0)
			{
				BYTE* pBytes = 0;
				pBytes = new BYTE[dwRead + 1];;
				if (pBytes == 0)
					return ((HRESULT)0x8007000EL);
				hr = m_spStream->Read(pBytes, dwRead, &dwActuallyRead);
				if (((HRESULT)(hr) >= 0))
				{
					pBytes[dwActuallyRead] = 0;
					if (dwActuallyRead>0)
					{
						(m_pT->*m_pFunc)(this, pBytes, dwActuallyRead);
						m_dwTotalRead += dwActuallyRead;
					}
				}
				delete[] pBytes;
			}
		}

		if (BSCF_LASTDATANOTIFICATION & grfBSCF)
			m_spStream.Release();
		return hr;
	}

	virtual HRESULT __stdcall OnObjectAvailable(const IID & riid, IUnknown *punk)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CBindStatusCallback::OnObjectAvailable");
		return ((HRESULT)0x00000000L);
	}

	HRESULT _StartAsyncDownload(BSTR bstrURL, IUnknown* pUnkContainer, BOOL bRelative)
	{
		m_dwTotalRead = 0;
		m_dwAvailableToRead = 0;
		HRESULT hr = ((HRESULT)0x00000000L);
		CComQIPtr<IServiceProvider, &IID_IServiceProvider> spServiceProvider(pUnkContainer);
		CComPtr<IBindHost>	spBindHost;
		CComPtr<IStream>	spStream;
		if (spServiceProvider)
			spServiceProvider->QueryService(IID_IBindHost, IID_IBindHost, (void**)&spBindHost);

		if (spBindHost == 0)
		{
			if (bRelative)
				return ((HRESULT)0x80004002L);  
			hr = CreateURLMoniker(0, bstrURL, &m_spMoniker);
			if (((HRESULT)(hr) >= 0))
				hr = CreateBindCtx(0, &m_spBindCtx);

			if (((HRESULT)(hr) >= 0))
				hr = RegisterBindStatusCallback(m_spBindCtx, static_cast<IBindStatusCallback*>(this), 0, 0L);
			else
				m_spMoniker.Release();

			if (((HRESULT)(hr) >= 0))
				hr = m_spMoniker->BindToStorage(m_spBindCtx, 0, IID_IStream, (void**)&spStream);
		}
		else
		{
			hr = CreateBindCtx(0, &m_spBindCtx);
			if (((HRESULT)(hr) >= 0))
				hr = RegisterBindStatusCallback(m_spBindCtx, static_cast<IBindStatusCallback*>(this), 0, 0L);

			if (((HRESULT)(hr) >= 0))
			{
				if (bRelative)
					hr = spBindHost->CreateMoniker(bstrURL, m_spBindCtx, &m_spMoniker, 0);
				else
					hr = CreateURLMoniker(0, bstrURL, &m_spMoniker);
			}

			if (((HRESULT)(hr) >= 0))
			{
				hr = spBindHost->MonikerBindToStorage(m_spMoniker, m_spBindCtx, static_cast<IBindStatusCallback*>(this), IID_IStream, (void**)&spStream);
				1 ? (void)0 : AtlTrace2(atlTraceControls,2,"Bound");
			}
		}
		return hr;
	}

	HRESULT StartAsyncDownload(T* pT, ATL_PDATAAVAILABLE pFunc, BSTR bstrURL, IUnknown* pUnkContainer = 0, BOOL bRelative = 0)
	{
		m_pT = pT;
		m_pFunc = pFunc;
		return  _StartAsyncDownload(bstrURL, pUnkContainer, bRelative);
	}

	static HRESULT Download(T* pT, ATL_PDATAAVAILABLE pFunc, BSTR bstrURL, IUnknown* pUnkContainer = 0, BOOL bRelative = 0)
	{
		CComObject<CBindStatusCallback<T> > *pbsc;
		HRESULT hRes = CComObject<CBindStatusCallback<T> >::CreateInstance(&pbsc);
		if (((HRESULT)(hRes)<0))
			return hRes;
		return pbsc->StartAsyncDownload(pT, pFunc, bstrURL, pUnkContainer, bRelative);
	}

	CComPtr<IMoniker> m_spMoniker;
	CComPtr<IBindCtx> m_spBindCtx;
	CComPtr<IBinding> m_spBinding;
	CComPtr<IStream> m_spStream;
	T* m_pT;
	ATL_PDATAAVAILABLE m_pFunc;
	DWORD m_dwTotalRead;
	DWORD m_dwAvailableToRead;
};






































































template < class T, class InterfaceName, const IID* piid, const GUID* plibid>
class __declspec(novtable) CStockPropImpl : public IDispatchImpl< InterfaceName, piid, plibid >
{
public:
	
	HRESULT __stdcall put_Font(IFontDisp* pFont)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_Font\n");
		T* pT = (T*) this;
		if (pT->FireOnRequestEdit((-512)) == ((HRESULT)0x00000001L))
			return ((HRESULT)0x00000001L);
		pT->m_pFont = 0;
		if (pFont)
		{
			CComQIPtr<IFont, &IID_IFont> p(pFont);
			if (p)
			{
				CComPtr<IFont> pFont;
				p->Clone(&pFont);
				if (pFont)
					pFont->QueryInterface(IID_IFontDisp, (void**) &pT->m_pFont);
			}
		}
		pT->m_bRequiresSave = 1;
		pT->FireOnChanged((-512));
		pT->FireViewChange();
		pT->SendOnDataChange(0);
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall putref_Font(IFontDisp* pFont)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::putref_Font\n");
		T* pT = (T*) this;
		if (pT->FireOnRequestEdit((-512)) == ((HRESULT)0x00000001L))
			return ((HRESULT)0x00000001L);
		pT->m_pFont = pFont;
		pT->m_bRequiresSave = 1;
		pT->FireOnChanged((-512));
		pT->FireViewChange();
		pT->SendOnDataChange(0);
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall get_Font(IFontDisp** ppFont)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_Font\n");
		T* pT = (T*) this;
		*ppFont = pT->m_pFont;
		if (*ppFont != 0)
			(*ppFont)->AddRef();
		return ((HRESULT)0x00000000L);
	}
	
	HRESULT __stdcall put_Picture(IPictureDisp* pPicture)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_Picture\n");
		T* pT = (T*) this;
		if (pT->FireOnRequestEdit((-523)) == ((HRESULT)0x00000001L))
			return ((HRESULT)0x00000001L);
		pT->m_pPicture = 0;
		if (pPicture)
		{
			CComQIPtr<IPersistStream, &IID_IPersistStream> p(pPicture);
			if (p)
			{
				ULARGE_INTEGER l;
				p->GetSizeMax(&l);
				HGLOBAL hGlob = GlobalAlloc((0x0002 | 0x0040), l.LowPart);
				if (hGlob)
				{
					CComPtr<IStream> spStream;
					CreateStreamOnHGlobal(hGlob, 1, &spStream);
					if (spStream)
					{
						if (((HRESULT)(p->Save(spStream, 0)) >= 0))
						{
							LARGE_INTEGER l;
							l.QuadPart = 0;
							spStream->Seek(l, STREAM_SEEK_SET, 0);
							OleLoadPicture(spStream, l.LowPart, 0, IID_IPictureDisp, (void**)&pT->m_pPicture);
						}
						spStream.Release();
					}
					GlobalFree(hGlob);
				}
			}
		}
		pT->m_bRequiresSave = 1;
		pT->FireOnChanged((-523));
		pT->FireViewChange();
		pT->SendOnDataChange(0);
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall putref_Picture(IPictureDisp* pPicture)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::putref_Picture\n");
		T* pT = (T*) this;
		if (pT->FireOnRequestEdit((-523)) == ((HRESULT)0x00000001L))
			return ((HRESULT)0x00000001L);
		pT->m_pPicture = pPicture;
		pT->m_bRequiresSave = 1;
		pT->FireOnChanged((-523));
		pT->FireViewChange();
		pT->SendOnDataChange(0);
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall get_Picture(IPictureDisp** ppPicture)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_Picture\n");
		T* pT = (T*) this;
		*ppPicture = pT->m_pPicture;
		if (*ppPicture != 0)
			(*ppPicture)->AddRef();
		return ((HRESULT)0x00000000L);
	}
	
	HRESULT __stdcall put_MouseIcon(IPictureDisp* pPicture)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_MouseIcon\n");
		T* pT = (T*) this;
		if (pT->FireOnRequestEdit((-522)) == ((HRESULT)0x00000001L))
			return ((HRESULT)0x00000001L);
		pT->m_pMouseIcon = 0;
		if (pPicture)
		{
			CComQIPtr<IPersistStream, &IID_IPersistStream> p(pPicture);
			if (p)
			{
				ULARGE_INTEGER l;
				p->GetSizeMax(&l);
				HGLOBAL hGlob = GlobalAlloc((0x0002 | 0x0040), l.LowPart);
				if (hGlob)
				{
					CComPtr<IStream> spStream;
					CreateStreamOnHGlobal(hGlob, 1, &spStream);
					if (spStream)
					{
						if (((HRESULT)(p->Save(spStream, 0)) >= 0))
						{
							LARGE_INTEGER l;
							l.QuadPart = 0;
							spStream->Seek(l, STREAM_SEEK_SET, 0);
							OleLoadPicture(spStream, l.LowPart, 0, IID_IPictureDisp, (void**)&pT->m_pMouseIcon);
						}
						spStream.Release();
					}
					GlobalFree(hGlob);
				}
			}
		}
		pT->m_bRequiresSave = 1;
		pT->FireOnChanged((-522));
		pT->FireViewChange();
		pT->SendOnDataChange(0);
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall putref_MouseIcon(IPictureDisp* pPicture)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::putref_MouseIcon\n");
		T* pT = (T*) this;
		if (pT->FireOnRequestEdit((-522)) == ((HRESULT)0x00000001L))
			return ((HRESULT)0x00000001L);
		pT->m_pMouseIcon = pPicture;
		pT->m_bRequiresSave = 1;
		pT->FireOnChanged((-522));
		pT->FireViewChange();
		pT->SendOnDataChange(0);
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall get_MouseIcon(IPictureDisp** ppPicture)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_MouseIcon\n");
		T* pT = (T*) this;
		*ppPicture = pT->m_pMouseIcon;
		if (*ppPicture != 0)
			(*ppPicture)->AddRef();
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall put_BackColor(OLE_COLOR clrBackColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "BackColor"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-501)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_clrBackColor = clrBackColor; pT->m_bRequiresSave = 1; pT->FireOnChanged((-501)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_BackColor(OLE_COLOR* pclrBackColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "BackColor"); T* pT = (T*) this; *pclrBackColor = pT->m_clrBackColor; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_BorderColor(OLE_COLOR clrBorderColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "BorderColor"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-503)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_clrBorderColor = clrBorderColor; pT->m_bRequiresSave = 1; pT->FireOnChanged((-503)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_BorderColor(OLE_COLOR* pclrBorderColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "BorderColor"); T* pT = (T*) this; *pclrBorderColor = pT->m_clrBorderColor; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_FillColor(OLE_COLOR clrFillColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "FillColor"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-510)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_clrFillColor = clrFillColor; pT->m_bRequiresSave = 1; pT->FireOnChanged((-510)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_FillColor(OLE_COLOR* pclrFillColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "FillColor"); T* pT = (T*) this; *pclrFillColor = pT->m_clrFillColor; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_ForeColor(OLE_COLOR clrForeColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "ForeColor"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-513)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_clrForeColor = clrForeColor; pT->m_bRequiresSave = 1; pT->FireOnChanged((-513)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_ForeColor(OLE_COLOR* pclrForeColor) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "ForeColor"); T* pT = (T*) this; *pclrForeColor = pT->m_clrForeColor; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_AutoSize(VARIANT_BOOL bAutoSize) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "AutoSize"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-500)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_bAutoSize = bAutoSize; pT->m_bRequiresSave = 1; pT->FireOnChanged((-500)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_AutoSize(VARIANT_BOOL* pbAutoSize) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "AutoSize"); T* pT = (T*) this; *pbAutoSize = pT->m_bAutoSize ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0); return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_Valid(VARIANT_BOOL bValid) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "Valid"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-524)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_bValid = bValid; pT->m_bRequiresSave = 1; pT->FireOnChanged((-524)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_Valid(VARIANT_BOOL* pbValid) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "Valid"); T* pT = (T*) this; *pbValid = pT->m_bValid ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0); return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_Enabled(VARIANT_BOOL bEnabled) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "Enabled"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-514)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_bEnabled = bEnabled; pT->m_bRequiresSave = 1; pT->FireOnChanged((-514)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_Enabled(VARIANT_BOOL* pbEnabled) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "Enabled"); T* pT = (T*) this; *pbEnabled = pT->m_bEnabled ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0); return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_TabStop(VARIANT_BOOL bTabStop) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "TabStop"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-516)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_bTabStop = bTabStop; pT->m_bRequiresSave = 1; pT->FireOnChanged((-516)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_TabStop(VARIANT_BOOL* pbTabStop) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "TabStop"); T* pT = (T*) this; *pbTabStop = pT->m_bTabStop ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0); return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_BorderVisible(VARIANT_BOOL bBorderVisible) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "BorderVisible"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-519)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_bBorderVisible = bBorderVisible; pT->m_bRequiresSave = 1; pT->FireOnChanged((-519)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_BorderVisible(VARIANT_BOOL* pbBorderVisible) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "BorderVisible"); T* pT = (T*) this; *pbBorderVisible = pT->m_bBorderVisible ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0); return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_Text(BSTR bstrText) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "Text"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-517)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); if (*(&(pT->m_bstrText)) != 0) SysFreeString(*(&(pT->m_bstrText))); *(&(pT->m_bstrText)) = SysAllocString(bstrText); pT->m_bRequiresSave = 1; pT->FireOnChanged((-517)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_Text(BSTR* pbstrText) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "Text"); T* pT = (T*) this; *pbstrText = SysAllocString(pT->m_bstrText); return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_Caption(BSTR bstrCaption) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "Caption"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-518)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); if (*(&(pT->m_bstrCaption)) != 0) SysFreeString(*(&(pT->m_bstrCaption))); *(&(pT->m_bstrCaption)) = SysAllocString(bstrCaption); pT->m_bRequiresSave = 1; pT->FireOnChanged((-518)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_Caption(BSTR* pbstrCaption) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "Caption"); T* pT = (T*) this; *pbstrCaption = SysAllocString(pT->m_bstrCaption); return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_Window(long )
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_Window\n");
		return ((HRESULT)0x80004005L);
	}
	HRESULT __stdcall get_Window(long* phWnd)
	{
		1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_Window\n");
		T* pT = (T*) this;
		*phWnd = (long)pT->m_hWnd;
		return ((HRESULT)0x00000000L);
	}
	HRESULT __stdcall put_BackStyle(LONG nBackStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "BackStyle"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-502)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nBackStyle = nBackStyle; pT->m_bRequiresSave = 1; pT->FireOnChanged((-502)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_BackStyle(LONG* pnBackStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "BackStyle"); T* pT = (T*) this; *pnBackStyle = pT->m_nBackStyle; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_BorderStyle(LONG nBorderStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "BorderStyle"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-504)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nBorderStyle = nBorderStyle; pT->m_bRequiresSave = 1; pT->FireOnChanged((-504)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_BorderStyle(LONG* pnBorderStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "BorderStyle"); T* pT = (T*) this; *pnBorderStyle = pT->m_nBorderStyle; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_BorderWidth(LONG nBorderWidth) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "BorderWidth"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-505)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nBorderWidth = nBorderWidth; pT->m_bRequiresSave = 1; pT->FireOnChanged((-505)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_BorderWidth(LONG* pnBorderWidth) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "BorderWidth"); T* pT = (T*) this; *pnBorderWidth = pT->m_nBorderWidth; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_DrawMode(LONG nDrawMode) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "DrawMode"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-507)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nDrawMode = nDrawMode; pT->m_bRequiresSave = 1; pT->FireOnChanged((-507)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_DrawMode(LONG* pnDrawMode) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "DrawMode"); T* pT = (T*) this; *pnDrawMode = pT->m_nDrawMode; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_DrawStyle(LONG nDrawStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "DrawStyle"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-508)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nDrawStyle = nDrawStyle; pT->m_bRequiresSave = 1; pT->FireOnChanged((-508)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_DrawStyle(LONG* pnDrawStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "DrawStyle"); T* pT = (T*) this; *pnDrawStyle = pT->m_nDrawStyle; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_DrawWidth(LONG nDrawWidth) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "DrawWidth"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-509)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nDrawWidth = nDrawWidth; pT->m_bRequiresSave = 1; pT->FireOnChanged((-509)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_DrawWidth(LONG* pnDrawWidth) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "DrawWidth"); T* pT = (T*) this; *pnDrawWidth = pT->m_nDrawWidth; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_FillStyle(LONG nFillStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "FillStyle"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-511)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nFillStyle = nFillStyle; pT->m_bRequiresSave = 1; pT->FireOnChanged((-511)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_FillStyle(LONG* pnFillStyle) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "FillStyle"); T* pT = (T*) this; *pnFillStyle = pT->m_nFillStyle; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_Appearance(SHORT nAppearance) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "Appearance"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-520)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nAppearance = nAppearance; pT->m_bRequiresSave = 1; pT->FireOnChanged((-520)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_Appearance(SHORT* pnAppearance) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "Appearance"); T* pT = (T*) this; *pnAppearance = pT->m_nAppearance; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_MousePointer(LONG nMousePointer) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "MousePointer"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-521)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nMousePointer = nMousePointer; pT->m_bRequiresSave = 1; pT->FireOnChanged((-521)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_MousePointer(LONG* pnMousePointer) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "MousePointer"); T* pT = (T*) this; *pnMousePointer = pT->m_nMousePointer; return ((HRESULT)0x00000000L); }
	HRESULT __stdcall put_ReadyState(LONG nReadyState) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::put_%s\n", "ReadyState"); T* pT = (T*) this; if (pT->FireOnRequestEdit((-525)) == ((HRESULT)0x00000001L)) return ((HRESULT)0x00000001L); pT->m_nReadyState = nReadyState; pT->m_bRequiresSave = 1; pT->FireOnChanged((-525)); pT->FireViewChange(); pT->SendOnDataChange(0); return ((HRESULT)0x00000000L); } HRESULT __stdcall get_ReadyState(LONG* pnReadyState) { 1 ? (void)0 : AtlTrace2(atlTraceControls,2,"CStockPropImpl::get_%s\n", "ReadyState"); T* pT = (T*) this; *pnReadyState = pT->m_nReadyState; return ((HRESULT)0x00000000L); }
};

#pragma pack(pop)

}; 




#line 3356 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"
#line 3357 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"

#line 3359 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"




namespace ATL
{
#line 3366 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"






}; 
#line 3374 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"




#line 3379 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"

#line 29 "stdafx.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"


















	#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"























extern "C" const GUID  IID_IPrintDialogCallback;






extern "C" const GUID  IID_IPrintDialogServices;

#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"




#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\prsht.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 41 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack1.h"
#line 44 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
#line 45 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


extern "C" {            
#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"









#line 59 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
#line 60 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


















#line 79 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"















typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);




#line 100 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"










typedef struct tagOFN_NT4A {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;




typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;
#line 161 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

typedef struct tagOFNA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;








#line 192 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;








#line 223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
} OPENFILENAMEW, *LPOPENFILENAMEW;




typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
#line 231 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"









#line 241 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


__declspec(dllimport) BOOL  __stdcall GetOpenFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL  __stdcall GetOpenFileNameW(LPOPENFILENAMEW);




#line 250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
__declspec(dllimport) BOOL  __stdcall GetSaveFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL  __stdcall GetSaveFileNameW(LPOPENFILENAMEW);




#line 257 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


__declspec(dllimport) short __stdcall GetFileTitleA(LPCSTR, LPSTR, WORD);
__declspec(dllimport) short __stdcall GetFileTitleW(LPCWSTR, LPWSTR, WORD);




#line 266 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


























#line 293 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"



#line 297 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"




#line 302 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"















typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR           pszFile;        
} OFNOTIFYA, *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR          pszFile;        
} OFNOTIFYW, *LPOFNOTIFYW;




typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;
#line 341 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"



typedef struct _OFNOTIFYEXA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXA, *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXW, *LPOFNOTIFYEXW;




typedef OFNOTIFYEXA OFNOTIFYEX;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
#line 366 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

































#line 400 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"













#line 414 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"













#line 428 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"




























#line 457 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


typedef struct tagCHOOSECOLORA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;




typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
#line 488 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
































#line 521 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

__declspec(dllimport) BOOL __stdcall ChooseColorA(LPCHOOSECOLORA);
__declspec(dllimport) BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);




#line 529 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"











#line 541 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPSTR        lpstrFindWhat;      
   LPSTR        lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCSTR       lpTemplateName;     
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPWSTR       lpstrFindWhat;      
   LPWSTR       lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCWSTR      lpTemplateName;     
} FINDREPLACEW, *LPFINDREPLACEW;




typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
#line 579 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"























__declspec(dllimport) HWND __stdcall FindTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall FindTextW(LPFINDREPLACEW);




#line 609 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

__declspec(dllimport) HWND __stdcall ReplaceTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall ReplaceTextW(LPFINDREPLACEW);




#line 617 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"








#line 626 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTA      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCSTR          lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPSTR           lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTA, *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTW      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCWSTR         lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPWSTR          lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTW, *LPCHOOSEFONTW;




typedef CHOOSEFONTA CHOOSEFONT;
typedef LPCHOOSEFONTA LPCHOOSEFONT;
#line 682 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

__declspec(dllimport) BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
__declspec(dllimport) BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);




#line 690 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"















#line 706 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
















#line 723 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"






























































#line 786 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"







typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCSTR           lpPrintTemplateName;
   LPCSTR           lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCWSTR          lpPrintTemplateName;
   LPCWSTR          lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;




typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
#line 845 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

__declspec(dllimport) BOOL __stdcall PrintDlgA(LPPRINTDLGA);
__declspec(dllimport) BOOL __stdcall PrintDlgW(LPPRINTDLGW);




#line 853 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"






































struct __declspec(novtable) IPrintDialogCallback : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, LPVOID *ppvObj) = 0;
    virtual ULONG __stdcall AddRef (void) = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall InitDone (void) = 0;
    virtual HRESULT __stdcall SelectionChange (void) = 0;
    virtual HRESULT __stdcall HandleMessage ( HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult) = 0;
};




















struct __declspec(novtable) IPrintDialogServices : public IUnknown
{
    
    virtual HRESULT __stdcall QueryInterface ( const IID & riid, LPVOID *ppvObj) = 0;
    virtual ULONG __stdcall AddRef (void) = 0;
    virtual ULONG __stdcall Release (void) = 0;

    
    virtual HRESULT __stdcall GetCurrentDevMode ( LPDEVMODE pDevMode, UINT *pcbSize) = 0;
    virtual HRESULT __stdcall GetCurrentPrinterName ( LPTSTR pPrinterName, UINT *pcchSize) = 0;
    virtual HRESULT __stdcall GetCurrentPortName ( LPTSTR pPortName, UINT *pcchSize) = 0;
};





typedef struct tagPRINTPAGERANGE {
   DWORD  nFromPage;
   DWORD  nToPage;
} PRINTPAGERANGE, *LPPRINTPAGERANGE;





typedef struct tagPDEXA {
   DWORD                 lStructSize;          
   HWND                  hwndOwner;            
   HGLOBAL               hDevMode;             
   HGLOBAL               hDevNames;            
   HDC                   hDC;                  
   DWORD                 Flags;                
   DWORD                 Flags2;               
   DWORD                 ExclusionFlags;       
   DWORD                 nPageRanges;          
   DWORD                 nMaxPageRanges;       
   LPPRINTPAGERANGE      lpPageRanges;         
   DWORD                 nMinPage;             
   DWORD                 nMaxPage;             
   DWORD                 nCopies;              
   HINSTANCE             hInstance;            
   LPCSTR                lpPrintTemplateName;  
   LPUNKNOWN             lpCallback;           
   DWORD                 nPropertyPages;       
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXA, *LPPRINTDLGEXA;



typedef struct tagPDEXW {
   DWORD                 lStructSize;          
   HWND                  hwndOwner;            
   HGLOBAL               hDevMode;             
   HGLOBAL               hDevNames;            
   HDC                   hDC;                  
   DWORD                 Flags;                
   DWORD                 Flags2;               
   DWORD                 ExclusionFlags;       
   DWORD                 nPageRanges;          
   DWORD                 nMaxPageRanges;       
   LPPRINTPAGERANGE      lpPageRanges;         
   DWORD                 nMinPage;             
   DWORD                 nMaxPage;             
   DWORD                 nCopies;              
   HINSTANCE             hInstance;            
   LPCWSTR               lpPrintTemplateName;  
   LPUNKNOWN             lpCallback;           
   DWORD                 nPropertyPages;       
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXW, *LPPRINTDLGEXW;




typedef PRINTDLGEXA PRINTDLGEX;
typedef LPPRINTDLGEXA LPPRINTDLGEX;
#line 1005 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"



__declspec(dllimport) HRESULT __stdcall PrintDlgExA(LPPRINTDLGEXA);
__declspec(dllimport) HRESULT __stdcall PrintDlgExW(LPPRINTDLGEXW);




#line 1015 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

#line 1017 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

#line 1019 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

































#line 1053 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"























#line 1077 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"




typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES, *LPDEVNAMES;




__declspec(dllimport) DWORD __stdcall CommDlgExtendedError(void);










typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR          lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR         lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;




typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
#line 1146 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

__declspec(dllimport) BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
__declspec(dllimport) BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );




#line 1154 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"





















#line 1176 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2018 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
#line 2019 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"




}
#line 2025 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 2028 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
#line 2029 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
#line 2030 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"
#line 2031 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\commdlg.h"

#line 20 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
#line 21 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"




inline short __stdcall GetFileTitle(LPCTSTR lpszFile, LPTSTR lpszTitle, WORD cbBuf)



	{ return ::GetFileTitleA(lpszFile, lpszTitle, cbBuf); }
#line 31 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
#line 32 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"


	
		#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"















#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 17 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"


#line 20 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"


extern "C" {
#line 24 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"























#line 48 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"







#line 56 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

#line 58 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"
























































#line 115 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"













typedef enum tagTextMode
{
	TM_PLAINTEXT			= 1,
	TM_RICHTEXT				= 2,	
	TM_SINGLELEVELUNDO		= 4,
	TM_MULTILEVELUNDO		= 8,	
	TM_SINGLECODEPAGE		= 16,
	TM_MULTICODEPAGE		= 32	
} TEXTMODE;


































































































                                        
                                        
                                        
                                        

                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        

                                        
                                        


































































#line 320 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"






































































typedef LONG (*EDITWORDBREAKPROCEX)(char *pchText, LONG cchText, BYTE bCharSet, INT action);
#line 392 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"


typedef struct _charformat
{
	UINT		cbSize;
	DWORD		dwMask;
	DWORD		dwEffects;
	LONG		yHeight;
	LONG		yOffset;
	COLORREF	crTextColor;
	BYTE		bCharSet;
	BYTE		bPitchAndFamily;
	char		szFaceName[32];
} CHARFORMATA;

typedef struct _charformatw
{
	UINT		cbSize;
	DWORD		dwMask;
	DWORD		dwEffects;
	LONG		yHeight;
	LONG		yOffset;
	COLORREF	crTextColor;
	BYTE		bCharSet;
	BYTE		bPitchAndFamily;
	WCHAR		szFaceName[32];
} CHARFORMATW;







#line 427 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

#line 429 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"






















										








										
										
										

										
										

										
typedef struct _charrange
{
	LONG	cpMin;
	LONG	cpMax;
} CHARRANGE;

typedef struct _textrange
{
	CHARRANGE chrg;
	LPSTR lpstrText;	
} TEXTRANGEA;

typedef struct _textrangew
{
	CHARRANGE chrg;
	LPWSTR lpstrText;	
} TEXTRANGEW;







#line 493 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

#line 495 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"


typedef DWORD (__stdcall *EDITSTREAMCALLBACK)(DWORD_PTR dwCookie, LPBYTE pbBuff, LONG cb, LONG *pcb);

typedef struct _editstream
{
	DWORD_PTR dwCookie;		
	DWORD	  dwError;		
	EDITSTREAMCALLBACK pfnCallback;
} EDITSTREAM;





































typedef struct _findtext
{
	CHARRANGE chrg;
	LPCSTR lpstrText;
} FINDTEXTA;

typedef struct _findtextw
{
	CHARRANGE chrg;
	LPCWSTR lpstrText;
} FINDTEXTW;







#line 561 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

#line 563 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

typedef struct _findtextexa
{
	CHARRANGE chrg;
	LPCSTR	  lpstrText;
	CHARRANGE chrgText;
} FINDTEXTEXA;

typedef struct _findtextexw
{
	CHARRANGE chrg;
	LPCWSTR	  lpstrText;
	CHARRANGE chrgText;
} FINDTEXTEXW;







#line 585 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

#line 587 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"


typedef struct _formatrange
{
	HDC hdc;
	HDC hdcTarget;
	RECT rc;
	RECT rcPage;
	CHARRANGE chrg;
} FORMATRANGE;









typedef struct _paraformat
{
	UINT	cbSize;
	DWORD	dwMask;
	WORD	wNumbering;
	WORD	wEffects;
	LONG	dxStartIndent;
	LONG	dxRightIndent;
	LONG	dxOffset;
	WORD	wAlignment;
	SHORT	cTabCount;
	LONG	rgxTabs[32];
} PARAFORMAT;






















struct CHARFORMAT2W : _charformatw
{
	WORD		wWeight;			
	SHORT		sSpacing;			
	COLORREF	crBackColor;		
	LCID		lcid;				
	DWORD		dwReserved;			
	SHORT		sStyle;				
	WORD		wKerning;			
	BYTE		bUnderlineType;		
	BYTE		bAnimation;			
	BYTE		bRevAuthor;			
};

struct CHARFORMAT2A : _charformat
{
	WORD		wWeight;			
	SHORT		sSpacing;			
	COLORREF	crBackColor;		
	LCID		lcid;				
	DWORD		dwReserved;			
	SHORT		sStyle;				
	WORD		wKerning;			
	BYTE		bUnderlineType;		
	BYTE		bAnimation;			
	BYTE		bRevAuthor;			
};


















































#line 719 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"





#line 725 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"



















































































struct PARAFORMAT2 : _paraformat
{
	LONG	dySpaceBefore;			
	LONG	dySpaceAfter;				
	LONG	dyLineSpacing;			
	SHORT	sStyle;					
	BYTE	bLineSpacingRule;		
	BYTE	bOutlineLevel;			
	WORD	wShadingWeight;			
	WORD	wShadingStyle;			
	WORD	wNumberingStart;		
	WORD	wNumberingStyle;		
	WORD	wNumberingTab;			
	WORD	wBorderSpace;			
	WORD	wBorderWidth;			
	WORD	wBorders;				
};































#line 857 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

























































































typedef struct _msgfilter
{
	NMHDR	nmhdr;
	UINT	msg;
	WPARAM	wParam;
	LPARAM	lParam;
} MSGFILTER;

typedef struct _reqresize
{
	NMHDR nmhdr;
	RECT rc;
} REQRESIZE;

typedef struct _selchange
{
	NMHDR nmhdr;
	CHARRANGE chrg;
	WORD seltyp;
} SELCHANGE;














typedef struct _endropfiles
{
	NMHDR nmhdr;
	HANDLE hDrop;
	LONG cp;
	BOOL fProtected;
} ENDROPFILES;

typedef struct _enprotected
{
	NMHDR nmhdr;
	UINT msg;
	WPARAM wParam;
	LPARAM lParam;
	CHARRANGE chrg;
} ENPROTECTED;

typedef struct _ensaveclipboard
{
	NMHDR nmhdr;
	LONG cObjectCount;
    LONG cch;
} ENSAVECLIPBOARD;


typedef struct _enoleopfailed
{
	NMHDR nmhdr;
	LONG iob;
	LONG lOper;
	HRESULT hr;
} ENOLEOPFAILED;
#line 1013 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"



typedef struct _objectpositions
{
    NMHDR nmhdr;
    LONG cObjectCount;
    LONG *pcpPositions;
} OBJECTPOSITIONS;

typedef struct _enlink
{
    NMHDR nmhdr;
    UINT msg;
    WPARAM wParam;
    LPARAM lParam;
    CHARRANGE chrg;
} ENLINK;


typedef struct _encorrecttext
{
	NMHDR nmhdr;
	CHARRANGE chrg;
	WORD seltyp;
} ENCORRECTTEXT;


typedef struct _punctuation
{
	UINT	iSize;
	LPSTR	szPunctuation;
} PUNCTUATION;


typedef struct _compcolor
{
	COLORREF crText;
	COLORREF crBackground;
	DWORD dwEffects;
}COMPCOLOR;








typedef struct _repastespecial
{
	DWORD		dwAspect;
	DWORD_PTR	dwParam;
} REPASTESPECIAL;


typedef enum _undonameid
{
    UID_UNKNOWN     = 0,
	UID_TYPING		= 1,
	UID_DELETE 		= 2,
	UID_DRAGDROP	= 3,
	UID_CUT			= 4,
	UID_PASTE		= 5
} UNDONAMEID;







typedef struct _settextex
{
	DWORD	flags;			
	UINT	codepage;		

} SETTEXTEX;







typedef struct _gettextex
{
	DWORD	cb;				
	DWORD	flags;			
	UINT	codepage;		

	LPCSTR	lpDefaultChar;	
	LPBOOL	lpUsedDefChar;	
} GETTEXTEX;










typedef struct _gettextlengthex
{
	DWORD	flags;			
	UINT	codepage;		

} GETTEXTLENGTHEX;
	

typedef struct _bidioptions
{
	UINT	cbSize;
	WORD	wMask;
	WORD	wEffects; 
} BIDIOPTIONS;





#line 1137 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"








#line 1146 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"








	



#line 1159 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"
		


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 1163 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"


#line 1166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"


}
#line 1170 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

#line 1172 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\richedit.h"

#line 36 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
	#line 37 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
#line 38 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"


#pragma component(minrebuild, off)
#line 42 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"

#pragma component(mintypeinfo, on)
#line 45 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"






#line 52 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"




#pragma pack(push, 4)
#line 58 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"






	
		class CCommonDialog;  

			
			class CFindReplaceDialog; 

			
			class CFileDialog;    
			class CColorDialog;   
			class CFontDialog;    
			class CPrintDialog;   
			class CPageSetupDialog; 

	
	class CPropertySheet;     
		class CPropertySheetEx;

	
		class CPropertyPage;  
			class CPropertyPageEx;












class __declspec(novtable) CCommonDialog : public CDialog
#line 98 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
{
public:
	CCommonDialog(CWnd* pParentWnd);


protected:
	virtual void OnOK();
	virtual void OnCancel();

	
	 BOOL OnHelpInfo(HELPINFO*);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CFileDialog : public CCommonDialog
{
	public: static const  CRuntimeClass classCFileDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	OPENFILENAME m_ofn; 


	CFileDialog(BOOL bOpenFileDialog, 
		LPCTSTR lpszDefExt = 0,
		LPCTSTR lpszFileName = 0,
		DWORD dwFlags = 0x00000004 | 0x00000002,
		LPCTSTR lpszFilter = 0,
		CWnd* pParentWnd = 0);


	virtual int DoModal();

	
	
	CString GetPathName() const;  
	CString GetFileName() const;  
	CString GetFileExt() const;   
	CString GetFileTitle() const; 
	BOOL GetReadOnlyPref() const; 

	
	POSITION GetStartPosition() const;
	CString GetNextPathName(POSITION& pos) const;

	
	void SetTemplate(UINT nWin3ID, UINT nWin4ID);
	void SetTemplate(LPCTSTR lpWin3ID, LPCTSTR lpWin4ID);

	
	CString GetFolderPath() const; 
	void SetControlText(int nID, LPCSTR lpsz);
	void HideControl(int nID);
	void SetDefExt(LPCSTR lpsz);


protected:
	friend UINT __stdcall _AfxCommDlgProc(HWND, UINT, WPARAM, LPARAM);
	virtual UINT OnShareViolation(LPCTSTR lpszPathName);
	virtual BOOL OnFileNameOK();
	virtual void OnLBSelChangedNotify(UINT nIDBox, UINT iCurSel, UINT nCode);

	
	virtual void OnInitDone();
	virtual void OnFileNameChange();
	virtual void OnFolderChange();
	virtual void OnTypeChange();







protected:
	BOOL m_bOpenFileDialog;       
	CString m_strFilter;          
						
	TCHAR m_szFileTitle[64];       
	TCHAR m_szFileName[260]; 

	OPENFILENAME*  m_pofnTemp;

	virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);
};




class CFontDialog : public CCommonDialog
{
	public: static const  CRuntimeClass classCFontDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	
	CHOOSEFONT m_cf;


	CFontDialog(LPLOGFONT lplfInitial = 0,
		DWORD dwFlags = 0x00000100L | 0x00000001,
		CDC* pdcPrinter = 0,
		CWnd* pParentWnd = 0);

	CFontDialog(const CHARFORMATA& charformat,
		DWORD dwFlags = 0x00000001,
		CDC* pdcPrinter = 0,
		CWnd* pParentWnd = 0);
#line 211 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"

	virtual int DoModal();

	
	void GetCurrentFont(LPLOGFONT lplf);

	
	CString GetFaceName() const;  
	CString GetStyleName() const; 
	int GetSize() const;          
	COLORREF GetColor() const;    
	int GetWeight() const;        
	BOOL IsStrikeOut() const;     
	BOOL IsUnderline() const;     
	BOOL IsBold() const;          
	BOOL IsItalic() const;        

	void GetCharFormat(CHARFORMATA& cf) const;
#line 230 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"


	LOGFONT m_lf; 

	DWORD FillInLogFont(const CHARFORMATA& cf);
#line 236 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"






protected:
	TCHAR m_szStyleName[64]; 
};




class CColorDialog : public CCommonDialog
{
	public: static const  CRuntimeClass classCColorDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	
	CHOOSECOLOR m_cc;


	CColorDialog(COLORREF clrInit = 0, DWORD dwFlags = 0,
			CWnd* pParentWnd = 0);


	virtual int DoModal();

	
	void SetCurrentColor(COLORREF clr);

	
	COLORREF GetColor() const;
	static COLORREF* __stdcall GetSavedCustomColors();


protected:
	friend UINT __stdcall _AfxCommDlgProc(HWND, UINT, WPARAM, LPARAM);
	virtual BOOL OnColorOK();       









protected:
	
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
#line 291 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
};







class CPageSetupDialog : public CCommonDialog
{
	public: static const  CRuntimeClass classCPageSetupDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	PAGESETUPDLG m_psd;


	CPageSetupDialog(DWORD dwFlags = 0x00000002 | 0x00000000,
		CWnd* pParentWnd = 0);


	LPDEVMODE GetDevMode() const;   
	CString GetDriverName() const;  
	CString GetDeviceName() const;  
	CString GetPortName() const;    
	HDC CreatePrinterDC();
	CSize GetPaperSize() const;
	void GetMargins(LPRECT lpRectMargins, LPRECT lpRectMinMargins) const;


	virtual int DoModal();


	virtual UINT PreDrawPage(WORD wPaper, WORD wFlags, LPPAGESETUPDLG pPSD);
	virtual UINT OnDrawPage(CDC* pDC, UINT nMessage, LPRECT lpRect);


protected:
	static UINT __stdcall PaintHookProc(HWND hWnd, UINT message, WPARAM wParam,
		LPARAM lParam);





};




class CPrintDialog : public CCommonDialog
{
	public: static const  CRuntimeClass classCPrintDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	
	PRINTDLG& m_pd;


	CPrintDialog(BOOL bPrintSetupOnly,
		
		DWORD dwFlags = 0x00000000 | 0x00040000 | 0x00000008
			| 0x00100000 | 0x00000004,
		CWnd* pParentWnd = 0);


	virtual int DoModal();

	
	
	BOOL GetDefaults();

	
	int GetCopies() const;          
	BOOL PrintCollate() const;      
	BOOL PrintSelection() const;    
	BOOL PrintAll() const;          
	BOOL PrintRange() const;        
	int GetFromPage() const;        
	int GetToPage() const;          
	LPDEVMODE GetDevMode() const;   
	CString GetDriverName() const;  
	CString GetDeviceName() const;  
	CString GetPortName() const;    
	HDC GetPrinterDC() const;       

	
	
	
	
	

	HDC CreatePrinterDC();








private:
	PRINTDLG m_pdActual; 
protected:
	
	CPrintDialog(PRINTDLG& pdInit);
	virtual CPrintDialog* AttachOnSetup();

	
	 void OnPrintSetup();
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;
};




class CFindReplaceDialog : public CCommonDialog
{
	public: static const  CRuntimeClass classCFindReplaceDialog; virtual CRuntimeClass* GetRuntimeClass() const;

public:

	FINDREPLACE m_fr;


	CFindReplaceDialog();
	
	

	BOOL Create(BOOL bFindDialogOnly, 
			LPCTSTR lpszFindWhat,
			LPCTSTR lpszReplaceWith = 0,
			DWORD dwFlags = 0x00000001,
			CWnd* pParentWnd = 0);

	
	static CFindReplaceDialog* __stdcall GetNotifier(LPARAM lParam);


	
	CString GetReplaceString() const;
	CString GetFindString() const;   
	BOOL SearchDown() const;         
	BOOL FindNext() const;           
	BOOL MatchCase() const;          
	BOOL MatchWholeWord() const;     
	BOOL ReplaceCurrent() const;     
	BOOL ReplaceAll() const;         
	BOOL IsTerminating() const;      


protected:
	virtual void PostNcDestroy();






protected:
	TCHAR m_szFindWhat[128];
	TCHAR m_szReplaceWith[128];
};






typedef struct _AFX_OLDPROPSHEETPAGE {
		DWORD           dwSize;
		DWORD           dwFlags;
		HINSTANCE       hInstance;
		union {
			LPCTSTR          pszTemplate;

			LPCDLGTEMPLATE  pResource;


#line 473 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
		} ;
		union {
			HICON       hIcon;
			LPCSTR      pszIcon;
		} ;
		LPCTSTR          pszTitle;
		DLGPROC         pfnDlgProc;
		LPARAM          lParam;
		LPFNPSPCALLBACKA pfnCallback;
		UINT  * pcRefParent;
} AFX_OLDPROPSHEETPAGE;



typedef struct _AFX_OLDPROPSHEETHEADER {
		DWORD           dwSize;
		DWORD           dwFlags;
		HWND            hwndParent;
		HINSTANCE       hInstance;
		union {
			HICON       hIcon;
			LPCTSTR     pszIcon;
		};
		LPCTSTR         pszCaption;

		UINT            nPages;
		union {
			UINT        nStartPage;
			LPCTSTR     pStartPage;
		};
		union {
			LPCPROPSHEETPAGEA ppsp;
			HPROPSHEETPAGE  *phpage;
		};
		PFNPROPSHEETCALLBACK pfnCallback;
} AFX_OLDPROPSHEETHEADER;

class CPropertyPage : public CDialog
{
	public: static const  CRuntimeClass classCPropertyPage; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPropertyPage();
	CPropertyPage(UINT nIDTemplate, UINT nIDCaption = 0);
	CPropertyPage(LPCTSTR lpszTemplateName, UINT nIDCaption = 0);
	void Construct(UINT nIDTemplate, UINT nIDCaption = 0);
	void Construct(LPCTSTR lpszTemplateName, UINT nIDCaption = 0);


	AFX_OLDPROPSHEETPAGE   m_psp;


	void CancelToClose();
	void SetModified(BOOL bChanged = 1);
	LRESULT QuerySiblings(WPARAM wParam, LPARAM lParam);


public:
	virtual BOOL OnApply();
	virtual void OnReset();
	virtual void OnOK();
	virtual void OnCancel();
	virtual BOOL OnSetActive();
	virtual BOOL OnKillActive();
	virtual BOOL OnQueryCancel();

	virtual LRESULT OnWizardBack();
	virtual LRESULT OnWizardNext();
	virtual BOOL OnWizardFinish();


public:
	virtual ~CPropertyPage();




	void EndDialog(int nEndID); 

protected:
	
	CString m_strCaption;
	BOOL m_bFirstSetActive;

	
	void CommonConstruct(LPCTSTR lpszTemplateName, UINT nIDCaption);
	virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);
	virtual BOOL PreTranslateMessage(MSG*);
	LRESULT MapWizardResult(LRESULT lToMap);
	BOOL IsButtonEnabled(int iButton);

	void PreProcessPageTemplate(PROPSHEETPAGEA& psp, BOOL bWizard);

	void Cleanup();
	const DLGTEMPLATE* InitDialogInfo(const DLGTEMPLATE* pTemplate);
#line 570 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"

	
	
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;

	friend class CPropertySheet;
	friend class CPropertySheetEx;
};

class CPropertyPageEx : public CPropertyPage
{
	public: static const  CRuntimeClass classCPropertyPageEx; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPropertyPageEx();
	CPropertyPageEx(UINT nIDTemplate, UINT nIDCaption = 0,
		UINT nIDHeaderTitle = 0, UINT nIDHeaderSubTitle = 0);
	CPropertyPageEx(LPCTSTR lpszTemplateName, UINT nIDCaption = 0,
		UINT nIDHeaderTitle = 0, UINT nIDHeaderSubTitle = 0);
	void Construct(UINT nIDTemplate, UINT nIDCaption = 0,
		UINT nIDHeaderTitle = 0, UINT nIDHeaderSubTitle = 0);
	void Construct(LPCTSTR lpszTemplateName, UINT nIDCaption = 0,
		UINT nIDHeaderTitle = 0, UINT nIDHeaderSubTitle = 0);


public:





protected:
	
	CString m_strHeaderTitle;    
	CString m_strHeaderSubTitle; 

	
	void CommonConstruct(LPCTSTR lpszTemplateName, UINT nIDCaption,
		UINT nIDHeaderTitle, UINT nIDHeaderSubTitle);

	friend class CPropertySheet;
	friend class CPropertySheetEx;
};




class CTabCtrl; 

class CPropertySheet : public CWnd
{
	public: static const  CRuntimeClass classCPropertySheet; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPropertySheet();
	CPropertySheet(UINT nIDCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);
	CPropertySheet(LPCTSTR pszCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);
	void Construct(UINT nIDCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);
	void Construct(LPCTSTR pszCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0);

	
	BOOL Create(CWnd* pParentWnd = 0, DWORD dwStyle = (DWORD)-1,
		DWORD dwExStyle = 0);
	
	


public:
	AFX_OLDPROPSHEETHEADER m_psh;

	int GetPageCount() const;
	CPropertyPage* GetActivePage() const;
	int GetActiveIndex() const;
	CPropertyPage* GetPage(int nPage) const;
	int GetPageIndex(CPropertyPage* pPage);
	BOOL SetActivePage(int nPage);
	BOOL SetActivePage(CPropertyPage* pPage);
	void SetTitle(LPCTSTR lpszText, UINT nStyle = 0);
	CTabCtrl* GetTabControl() const;

	void SetWizardMode();
	void SetFinishText(LPCTSTR lpszText);
	void SetWizardButtons(DWORD dwFlags);

	void EnableStackedTabs(BOOL bStacked);


public:
	virtual int DoModal();
	void AddPage(CPropertyPage* pPage);
	void RemovePage(CPropertyPage* pPage);
	void RemovePage(int nPage);
	void EndDialog(int nEndID); 
	BOOL PressButton(int nButton);


public:
	virtual ~CPropertySheet();




	void CommonConstruct(CWnd* pParentWnd, UINT iSelectPage);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	virtual void BuildPropPageArray();
	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);
	virtual BOOL OnInitDialog();
	virtual BOOL ContinueModal();
	virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra,
		AFX_CMDHANDLERINFO* pHandlerInfo);
	AFX_OLDPROPSHEETHEADER* GetPropSheetHeader();   
	BOOL IsWizard() const;

protected:
	CPtrArray m_pages;      
	CString m_strCaption;   
	CWnd* m_pParentWnd;     
	BOOL m_bStacked;        
	BOOL m_bModeless;       

	
	
	 BOOL OnNcCreate(LPCREATESTRUCT);
	 LRESULT HandleInitDialog(WPARAM, LPARAM);
	 HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);
	 LRESULT OnCommandHelp(WPARAM, LPARAM);
	 void OnClose();
	 void OnSysCommand(UINT nID, LPARAM);
	 LRESULT OnSetDefID(WPARAM, LPARAM);
	
	private: static const AFX_MSGMAP_ENTRY _messageEntries[]; protected: static  const AFX_MSGMAP messageMap; virtual const AFX_MSGMAP* GetMessageMap() const;

	friend class CPropertyPage;
};





class CPropertySheetEx : public CPropertySheet
{
	public: static const  CRuntimeClass classCPropertySheetEx; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CPropertySheetEx();
	CPropertySheetEx(UINT nIDCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0, HBITMAP hbmWatermark = 0,
		HPALETTE hpalWatermark = 0, HBITMAP hbmHeader = 0);
	CPropertySheetEx(LPCTSTR pszCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0, HBITMAP hbmWatermark = 0,
		HPALETTE hpalWatermark = 0, HBITMAP hbmHeader = 0);
	void Construct(UINT nIDCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0, HBITMAP hbmWatermark = 0,
		HPALETTE hpalWatermark = 0, HBITMAP hbmHeader = 0);
	void Construct(LPCTSTR pszCaption, CWnd* pParentWnd = 0,
		UINT iSelectPage = 0, HBITMAP hbmWatermark = 0,
		HPALETTE hpalWatermark = 0, HBITMAP hbmHeader = 0);


public:
	PROPSHEETHEADERA m_psh;


public:
	void AddPage(CPropertyPageEx* pPage);


public:
	virtual ~CPropertySheetEx();




	void CommonConstruct(CWnd* pParentWnd, UINT iSelectPage,
		HBITMAP hbmWatermark, HPALETTE hpalWatermark, HBITMAP hbmHeader);
	virtual void BuildPropPageArray();
	void SetWizardMode();

	friend class CPropertyPage;
	friend class CPropertyPageEx;
};





#pragma pack(pop)
#line 767 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"



#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.inl"















inline CCommonDialog::CCommonDialog(CWnd* pParentWnd)
	: CDialog((UINT)0, pParentWnd) { }


inline BOOL CFileDialog::GetReadOnlyPref() const
	{ return m_ofn.Flags & 0x00000001 ? 1 : 0; }
inline void CFileDialog::SetTemplate(UINT nWin3ID, UINT nWin4ID)
	{ SetTemplate((LPSTR)((ULONG_PTR)((WORD)(nWin3ID))), (LPSTR)((ULONG_PTR)((WORD)(nWin4ID)))); }
inline POSITION CFileDialog::GetStartPosition() const
	{ return (POSITION)m_ofn.lpstrFile; }


inline CString CFontDialog::GetFaceName() const
	{ return (LPCTSTR)m_cf.lpLogFont->lfFaceName; }
inline CString CFontDialog::GetStyleName() const
	{ return m_cf.lpszStyle; }
inline int CFontDialog::GetSize() const
	{ return m_cf.iPointSize; }
inline int CFontDialog::GetWeight() const
	{ return (int)m_cf.lpLogFont->lfWeight; }
inline BOOL CFontDialog::IsItalic() const
	{ return m_cf.lpLogFont->lfItalic ? 1 : 0; }
inline BOOL CFontDialog::IsStrikeOut() const
	{ return m_cf.lpLogFont->lfStrikeOut ? 1 : 0; }
inline BOOL CFontDialog::IsBold() const
	{ return m_cf.lpLogFont->lfWeight == 700 ? 1 : 0; }
inline BOOL CFontDialog::IsUnderline() const
	{ return m_cf.lpLogFont->lfUnderline ? 1 : 0; }
inline COLORREF CFontDialog::GetColor() const
	{ return m_cf.rgbColors; }


inline COLORREF CColorDialog::GetColor() const
	{ return m_cc.rgbResult; }


inline BOOL CPrintDialog::PrintSelection() const
	{ return m_pd.Flags & 0x00000001 ? 1 : 0; }
inline BOOL CPrintDialog::PrintRange() const
	{ return m_pd.Flags & 0x00000002 ? 1 : 0; }
inline BOOL CPrintDialog::PrintAll() const
	{ return !PrintRange() && !PrintSelection() ? 1 : 0; }
inline BOOL CPrintDialog::PrintCollate() const
	{ return m_pd.Flags & 0x00000010 ? 1 : 0; }
inline int CPrintDialog::GetFromPage() const
	{ return (PrintRange() ? m_pd.nFromPage :-1); }
inline int CPrintDialog::GetToPage() const
	{ return (PrintRange() ? m_pd.nToPage :-1); }
inline HDC CPrintDialog::GetPrinterDC() const
	{ ((void)0);
		((void)0);
		return m_pd.hDC; }


inline BOOL CFindReplaceDialog::IsTerminating() const
	{ return m_fr.Flags & 0x00000040 ? 1 : 0 ; }
inline CString CFindReplaceDialog::GetReplaceString() const
	{ return m_fr.lpstrReplaceWith; }
inline CString CFindReplaceDialog::GetFindString() const
	{ return m_fr.lpstrFindWhat; }
inline BOOL CFindReplaceDialog::SearchDown() const
	{ return m_fr.Flags & 0x00000001 ? 1 : 0; }
inline BOOL CFindReplaceDialog::FindNext() const
	{ return m_fr.Flags & 0x00000008 ? 1 : 0; }
inline BOOL CFindReplaceDialog::MatchCase() const
	{ return m_fr.Flags & 0x00000004 ? 1 : 0; }
inline BOOL CFindReplaceDialog::MatchWholeWord() const
	{ return m_fr.Flags & 0x00000002 ? 1 : 0; }
inline BOOL CFindReplaceDialog::ReplaceCurrent() const
	{ return m_fr. Flags & 0x00000010 ? 1 : 0; }
inline BOOL CFindReplaceDialog::ReplaceAll() const
	{ return m_fr.Flags & 0x00000020 ? 1 : 0; }


inline CPropertyPage* CPropertySheet::GetPage(int nPage) const
	{ return ((CPropertyPage*)(CObject*)m_pages[nPage]); }
inline void CPropertySheet::SetWizardMode()
	{ m_psh.dwFlags |= 0x00000020; }
inline void CPropertySheet::SetFinishText(LPCTSTR lpszText)
	{ ((void)0); ::SendMessageA(m_hWnd, (0x0400 + 115), 0, (LPARAM)lpszText); }
inline void CPropertySheet::SetWizardButtons(DWORD dwFlags)
	{ ((void)0); ::PostMessageA(m_hWnd, (0x0400 + 112), 0, dwFlags); }
inline CTabCtrl* CPropertySheet::GetTabControl() const
	{ ((void)0); return (CTabCtrl*)CWnd::FromHandle(
		(HWND)::SendMessageA(m_hWnd, (0x0400 + 116), 0, 0)); }
inline BOOL CPropertySheet::PressButton(int nButton)
	{ ((void)0); return (BOOL)::SendMessageA(m_hWnd, (0x0400 + 113), nButton, 0); }
inline BOOL CPropertySheet::IsWizard() const
		{ return ((((CPropertySheet*)this)->GetPropSheetHeader()->dwFlags & (0x00000020 | 0x01000000)) != 0); }


inline void CPropertySheetEx::SetWizardMode()
	{ m_psh.dwFlags |= 0x00000020; }


inline CSize CPageSetupDialog::GetPaperSize() const
	{ return CSize(m_psd.ptPaperSize.x, m_psd.ptPaperSize.y); }



#line 117 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.inl"
#line 771 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"
#line 772 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"





#pragma component(minrebuild, on)
#line 779 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"

#pragma component(mintypeinfo, off)
#line 782 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"

#line 784 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxdlgs.h"


#line 30 "stdafx.h"


#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"












#pragma once
#line 15 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"








#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\comutil.h"









#pragma once
#line 12 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\comutil.h"






#pragma warning(push)
#pragma warning(disable:4290)
#pragma warning(disable:4310)

class _com_error;

void __stdcall _com_issue_error(HRESULT);







class _bstr_t;
class _variant_t;







namespace _com_util {
	inline void CheckError(HRESULT hr) throw(_com_error)
	{
		if (((HRESULT)(hr)<0)) {
			_com_issue_error(hr);
		}
	}
}







namespace _com_util {
	
	
	BSTR __stdcall ConvertStringToBSTR(const char* pSrc) throw(_com_error);

	
	
	char* __stdcall ConvertBSTRToString(BSTR pSrc) throw(_com_error);
}







class _bstr_t {
public:
	
	
	_bstr_t() throw();
	_bstr_t(const _bstr_t& s) throw();
	_bstr_t(const char* s) throw(_com_error);
	_bstr_t(const wchar_t* s) throw(_com_error);
	_bstr_t(const _variant_t& var) throw(_com_error);
	_bstr_t(BSTR bstr, bool fCopy) throw(_com_error);

	
	
	~_bstr_t() throw();

	
	
	_bstr_t& operator=(const _bstr_t& s) throw();
	_bstr_t& operator=(const char* s) throw(_com_error);
	_bstr_t& operator=(const wchar_t* s) throw(_com_error);
	_bstr_t& operator=(const _variant_t& var) throw(_com_error);

	
	
	_bstr_t& operator+=(const _bstr_t& s) throw(_com_error);
	_bstr_t operator+(const _bstr_t& s) const throw(_com_error);

	
	
	friend _bstr_t operator+(const char* s1, const _bstr_t& s2) throw(_com_error);
	friend _bstr_t operator+(const wchar_t* s1, const _bstr_t& s2) throw(_com_error);

	
	
	operator const wchar_t*() const throw();
	operator wchar_t*() const throw();
	operator const char*() const throw(_com_error);
	operator char*() const throw(_com_error);

	
	
	bool operator!() const throw();
	bool operator==(const _bstr_t& str) const throw();
	bool operator!=(const _bstr_t& str) const throw();
	bool operator<(const _bstr_t& str) const throw();
	bool operator>(const _bstr_t& str) const throw();
	bool operator<=(const _bstr_t& str) const throw();
	bool operator>=(const _bstr_t& str) const throw();

	
	
	BSTR copy() const throw(_com_error);
	unsigned int length() const throw();

	
	
	void Assign(BSTR s) throw(_com_error);

private:
	
	
	class Data_t {
	public:
		
		
		Data_t(const char* s) throw(_com_error);
		Data_t(const wchar_t* s) throw(_com_error);
		Data_t(BSTR bstr, bool fCopy) throw(_com_error);
		Data_t(const _bstr_t& s1, const _bstr_t& s2) throw(_com_error);

		
		
		unsigned long AddRef() throw();
		unsigned long Release() throw();

		
		
		operator const wchar_t*() const throw();
		operator const char*() const throw(_com_error);

		
		
		const wchar_t* GetWString() const throw();
		const char* GetString() const throw(_com_error);

		BSTR Copy() const throw(_com_error);
		void Assign(BSTR s) throw(_com_error);
		unsigned int Length() const throw();
		int Compare(const Data_t& str) const throw();

	private:
		wchar_t*		m_wstr;
		mutable char*	m_str;
		unsigned long	m_RefCount;

		
		
		Data_t() throw();

		
		
		Data_t(const Data_t& s) throw();

		
		
		~Data_t() throw();

		void _Free() throw();
	};

private:
	
	
	Data_t* m_Data;

private:
	
	
	void _AddRef() throw();
	void _Free() throw();
	int _Compare(const _bstr_t& str) const throw();
};









inline _bstr_t::_bstr_t() throw()
	: m_Data(0)
{
}



inline _bstr_t::_bstr_t(const _bstr_t& s) throw()
	: m_Data(s.m_Data)
{
	_AddRef();
}



inline _bstr_t::_bstr_t(const char* s) throw(_com_error)
	: m_Data(new Data_t(s))
{
	if (m_Data == 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}



inline _bstr_t::_bstr_t(const wchar_t* s) throw(_com_error)
	: m_Data(new Data_t(s))
{
	if (m_Data == 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}




inline _bstr_t::_bstr_t(BSTR bstr, bool fCopy) throw(_com_error)
	: m_Data(new Data_t(bstr, fCopy))
{
	if (m_Data == 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}



inline _bstr_t::~_bstr_t() throw()
{
	_Free();
}









inline _bstr_t& _bstr_t::operator=(const _bstr_t& s) throw()
{
	const_cast<_bstr_t*>(&s)->_AddRef();
	_Free();
	m_Data = s.m_Data;

	return *this;
}



inline _bstr_t& _bstr_t::operator=(const char* s) throw(_com_error)
{
	_Free();
	m_Data = new Data_t(s);

	return *this;
}



inline _bstr_t& _bstr_t::operator=(const wchar_t* s) throw(_com_error)
{
	_Free();
	m_Data = new Data_t(s);

	return *this;
}









inline _bstr_t& _bstr_t::operator+=(const _bstr_t& s) throw(_com_error)
{
	Data_t* newData = new Data_t(*this, s);

	_Free();
	m_Data = newData;

	return *this;
}



inline _bstr_t _bstr_t::operator+(const _bstr_t& s) const throw(_com_error)
{
	_bstr_t b = *this;
	b += s;

	return b;
}









inline _bstr_t operator+(const char* s1, const _bstr_t& s2) throw(_com_error)
{
	_bstr_t b = s1; 
	b += s2;

	return b;
}



inline _bstr_t operator+(const wchar_t* s1, const _bstr_t& s2) throw(_com_error)
{
	_bstr_t b = s1; 
	b += s2;

	return b;
}









inline _bstr_t::operator const wchar_t*() const throw()
{
	return (m_Data != 0) ? m_Data->GetWString() : 0;
}



inline _bstr_t::operator wchar_t*() const throw()
{
	return const_cast<wchar_t*>((m_Data != 0) ? m_Data->GetWString() : 0);
}



inline _bstr_t::operator const char*() const throw(_com_error)
{
	return (m_Data != 0) ? m_Data->GetString() : 0;
}



inline _bstr_t::operator char*() const throw(_com_error)
{
	return const_cast<char*>((m_Data != 0) ? m_Data->GetString() : 0);
}







inline bool _bstr_t::operator!() const throw()
{
	return (m_Data != 0) ? !m_Data->GetWString() : true;
}

inline bool _bstr_t::operator==(const _bstr_t& str) const throw()
{
	return _Compare(str) == 0;
}

inline bool _bstr_t::operator!=(const _bstr_t& str) const throw()
{
	return _Compare(str) != 0;
}

inline bool _bstr_t::operator<(const _bstr_t& str) const throw()
{
	return _Compare(str) < 0;
}

inline bool _bstr_t::operator>(const _bstr_t& str) const throw()
{
	return _Compare(str) > 0;
}

inline bool _bstr_t::operator<=(const _bstr_t& str) const throw()
{
	return _Compare(str) <= 0;
}

inline bool _bstr_t::operator>=(const _bstr_t& str) const throw()
{
	return _Compare(str) >= 0;
}









inline BSTR _bstr_t::copy() const throw(_com_error)
{
	return (m_Data != 0) ? m_Data->Copy() : 0;
}



inline unsigned int _bstr_t::length() const throw()
{
	return (m_Data != 0) ? m_Data->Length() : 0;
}



inline void _bstr_t::Assign(BSTR s) throw(_com_error)
{
	if (m_Data != 0) {
		m_Data->Assign(s); 
	} 
	else {
		m_Data = new Data_t(s, 1);
		if (m_Data == 0) {
			_com_issue_error(((HRESULT)0x8007000EL));
		}
	}
}



inline void _bstr_t::_AddRef() throw()
{
	if (m_Data != 0) {
		m_Data->AddRef();
	}
}



inline void _bstr_t::_Free() throw()
{
	if (m_Data != 0) {
		m_Data->Release();
		m_Data = 0;
	}
}



inline int _bstr_t::_Compare(const _bstr_t& str) const throw()
{
	if (m_Data == str.m_Data) {
		return 0;
	}

	if (m_Data == 0) {
		return -1;
	}

	if (str.m_Data == 0) {
		return 1;
	}

	return m_Data->Compare(*str.m_Data);
}









inline _bstr_t::Data_t::Data_t(const char* s) throw(_com_error)
	: m_str(0), m_RefCount(1)
{
	m_wstr = _com_util::ConvertStringToBSTR(s);

	if (m_wstr == 0 && s != 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}



inline _bstr_t::Data_t::Data_t(const wchar_t* s) throw(_com_error)
	: m_str(0), m_RefCount(1)
{
	m_wstr = ::SysAllocString(s);

	if (m_wstr == 0 && s != 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}




inline _bstr_t::Data_t::Data_t(BSTR bstr, bool fCopy) throw(_com_error)
	: m_str(0), m_RefCount(1)
{
	if (fCopy && bstr != 0) {
		m_wstr = ::SysAllocStringByteLen(reinterpret_cast<char*>(bstr),
										 ::SysStringByteLen(bstr));

		if (m_wstr == 0) {
			_com_issue_error(((HRESULT)0x8007000EL));
		}
	}
	else {
		m_wstr = bstr;
	}
}



inline _bstr_t::Data_t::Data_t(const _bstr_t& s1, const _bstr_t& s2) throw(_com_error)
	: m_str(0), m_RefCount(1)
{
	const unsigned int l1 = s1.length();
	const unsigned int l2 = s2.length();

	m_wstr = ::SysAllocStringByteLen(0, (l1 + l2) * sizeof(wchar_t));

	if (m_wstr == 0) {
		if (l1 + l2 == 0) {
			return;
		}
		_com_issue_error(((HRESULT)0x8007000EL));
	}

	const wchar_t* wstr1 = static_cast<const wchar_t*>(s1);

	if (wstr1 != 0) {
		memcpy(m_wstr, wstr1, (l1 + 1) * sizeof(wchar_t));
	}

	const wchar_t* wstr2 = static_cast<const wchar_t*>(s2);

	if (wstr2 != 0) {
		memcpy(m_wstr + l1, wstr2, (l2 + 1) * sizeof(wchar_t));
	}
}







inline unsigned long _bstr_t::Data_t::AddRef() throw()
{
	InterlockedIncrement(reinterpret_cast<long*>(&m_RefCount));
	return m_RefCount;
}

inline unsigned long _bstr_t::Data_t::Release() throw()
{
	if (!InterlockedDecrement(reinterpret_cast<long*>(&m_RefCount))) {
		delete this;
		return 0;
	}

	return m_RefCount;
}









inline _bstr_t::Data_t::operator const wchar_t*() const throw()
{
	return m_wstr;
}



inline _bstr_t::Data_t::operator const char*() const throw(_com_error)
{
	return GetString();
}







inline const wchar_t* _bstr_t::Data_t::GetWString() const throw()
{
	return m_wstr;
}

inline const char* _bstr_t::Data_t::GetString() const throw(_com_error)
{
	if (m_str == 0) {
		m_str = _com_util::ConvertBSTRToString(m_wstr);

		if (m_str == 0 && m_wstr != 0) {
			_com_issue_error(((HRESULT)0x8007000EL));
		}
	}

	return m_str;
}



inline BSTR _bstr_t::Data_t::Copy() const throw(_com_error)
{
	if (m_wstr != 0) {
		BSTR bstr = ::SysAllocStringByteLen(reinterpret_cast<char*>(m_wstr),
											::SysStringByteLen(m_wstr));

		if (bstr == 0) {
			_com_issue_error(((HRESULT)0x8007000EL));
		}

		return bstr;
	}

	return 0;
}

inline void _bstr_t::Data_t::Assign(BSTR s) throw(_com_error)
{
	_Free();
	if (s != 0) {
		m_wstr = ::SysAllocStringByteLen(reinterpret_cast<char*>(s), 
											::SysStringByteLen(s));
	}
}



inline unsigned int _bstr_t::Data_t::Length() const throw()
{
	return m_wstr ? ::SysStringLen(m_wstr) : 0;
}



inline int _bstr_t::Data_t::Compare(const _bstr_t::Data_t& str) const throw()
{
	if (m_wstr == 0) {
		return str.m_wstr ? -1 : 0;
	}

	if (str.m_wstr == 0) {
		return 1;
	}

	const unsigned int l1 = ::SysStringLen(m_wstr);
	const unsigned int l2 = ::SysStringLen(str.m_wstr);

	unsigned int len = l1;
	if (len > l2) {
		len = l2;
	}

	BSTR bstr1 = m_wstr;
	BSTR bstr2 = str.m_wstr;

	while (len-- > 0) {
		if (*bstr1++ != *bstr2++) {
			return bstr1[-1] - bstr2[-1];
		}
	}

	return (l1 < l2) ? -1 : (l1 == l2) ? 0 : 1;
}



inline _bstr_t::Data_t::~Data_t() throw()
{
	_Free();
}



inline void _bstr_t::Data_t::_Free() throw()
{
	if (m_wstr != 0) {
		::SysFreeString(m_wstr);
	}

	if (m_str != 0) {
		delete [] m_str;
	}
}






























































class _variant_t : public ::tagVARIANT {
public:
	
	
	_variant_t() throw();

	_variant_t(const VARIANT& varSrc) throw(_com_error);
	_variant_t(const VARIANT* pSrc) throw(_com_error);
	_variant_t(const _variant_t& varSrc) throw(_com_error);

	_variant_t(VARIANT& varSrc, bool fCopy) throw(_com_error);			

	_variant_t(short sSrc, VARTYPE vtSrc = VT_I2) throw(_com_error);	
	_variant_t(long lSrc, VARTYPE vtSrc = VT_I4) throw(_com_error);		
	_variant_t(float fltSrc) throw();									
	_variant_t(double dblSrc, VARTYPE vtSrc = VT_R8) throw(_com_error);	
	_variant_t(const CY& cySrc) throw();								
	_variant_t(const _bstr_t& bstrSrc) throw(_com_error);				
	_variant_t(const wchar_t *pSrc) throw(_com_error);					
	_variant_t(const char* pSrc) throw(_com_error);						
	_variant_t(IDispatch* pSrc, bool fAddRef = true) throw();			
	_variant_t(bool bSrc) throw();										
	_variant_t(IUnknown* pSrc, bool fAddRef = true) throw();			
	_variant_t(const DECIMAL& decSrc) throw();							
	_variant_t(BYTE bSrc) throw();										

	
	
	~_variant_t() throw(_com_error);

	
	
	operator short() const throw(_com_error);			
	operator long() const throw(_com_error);			
	operator float() const throw(_com_error);			
	operator double() const throw(_com_error);			
	operator CY() const throw(_com_error);				
	operator _bstr_t() const throw(_com_error);			
	operator IDispatch*() const throw(_com_error);		
	operator bool() const throw(_com_error);			
	operator IUnknown*() const throw(_com_error);		
	operator DECIMAL() const throw(_com_error);			
	operator BYTE() const throw(_com_error);			
	
	
	
	_variant_t& operator=(const VARIANT& varSrc) throw(_com_error);
	_variant_t& operator=(const VARIANT* pSrc) throw(_com_error);
	_variant_t& operator=(const _variant_t& varSrc) throw(_com_error);

	_variant_t& operator=(short sSrc) throw(_com_error);				
	_variant_t& operator=(long lSrc) throw(_com_error);					
	_variant_t& operator=(float fltSrc) throw(_com_error);				
	_variant_t& operator=(double dblSrc) throw(_com_error);				
	_variant_t& operator=(const CY& cySrc) throw(_com_error);			
	_variant_t& operator=(const _bstr_t& bstrSrc) throw(_com_error);	
	_variant_t& operator=(const wchar_t* pSrc) throw(_com_error);		
	_variant_t& operator=(const char* pSrc) throw(_com_error);			
	_variant_t& operator=(IDispatch* pSrc) throw(_com_error);			
 	_variant_t& operator=(bool bSrc) throw(_com_error);					
	_variant_t& operator=(IUnknown* pSrc) throw(_com_error);			
	_variant_t& operator=(const DECIMAL& decSrc) throw(_com_error);		
	_variant_t& operator=(BYTE bSrc) throw(_com_error);					

	
	
	bool operator==(const VARIANT& varSrc) const throw(_com_error);
	bool operator==(const VARIANT* pSrc) const throw(_com_error);

	bool operator!=(const VARIANT& varSrc) const throw(_com_error);
	bool operator!=(const VARIANT* pSrc) const throw(_com_error);

	
	
	void Clear() throw(_com_error);

	void Attach(VARIANT& varSrc) throw(_com_error);
	VARIANT Detach() throw(_com_error);

	void ChangeType(VARTYPE vartype, const _variant_t* pSrc = 0) throw(_com_error);

	void SetString(const char* pSrc) throw(_com_error); 
};









inline _variant_t::_variant_t() throw()
{
	::VariantInit(this);
}



inline _variant_t::_variant_t(const VARIANT& varSrc) throw(_com_error)
{
	::VariantInit(this);
	_com_util::CheckError(::VariantCopy(this, const_cast<VARIANT*>(&varSrc)));
}



inline _variant_t::_variant_t(const VARIANT* pSrc) throw(_com_error)
{
	::VariantInit(this);
	_com_util::CheckError(::VariantCopy(this, const_cast<VARIANT*>(pSrc)));
}



inline _variant_t::_variant_t(const _variant_t& varSrc) throw(_com_error)
{
	::VariantInit(this);
	_com_util::CheckError(::VariantCopy(this, const_cast<VARIANT*>(static_cast<const VARIANT*>(&varSrc))));
}




inline _variant_t::_variant_t(VARIANT& varSrc, bool fCopy) throw(_com_error)
{
	if (fCopy) {
		::VariantInit(this);
		_com_util::CheckError(::VariantCopy(this, &varSrc));
	} else {
		memcpy(this, &varSrc, sizeof(varSrc));
		((&varSrc)->vt) = VT_EMPTY;
	}
}




inline _variant_t::_variant_t(short sSrc, VARTYPE vtSrc) throw(_com_error)
{
	if ((vtSrc != VT_I2) && (vtSrc != VT_BOOL)) {
		_com_issue_error(((HRESULT)0x80070057L));
	}

	if (vtSrc == VT_BOOL) {
		((this)->vt) = VT_BOOL;
		((this)->boolVal) = (sSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0));
	}
	else {
		((this)->vt) = VT_I2;
		((this)->iVal) = sSrc;
	}
}




inline _variant_t::_variant_t(long lSrc, VARTYPE vtSrc) throw(_com_error)
{
	if ((vtSrc != VT_I4) && (vtSrc != VT_ERROR) && (vtSrc != VT_BOOL)) {
		_com_issue_error(((HRESULT)0x80070057L));
	}

	if (vtSrc == VT_ERROR) {
		((this)->vt) = VT_ERROR;
		((this)->scode) = lSrc;
	}
	else if (vtSrc == VT_BOOL) {
		((this)->vt) = VT_BOOL;
		((this)->boolVal) = (lSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0));
	}
	else {
		((this)->vt) = VT_I4;
		((this)->lVal) = lSrc;
	}
}



inline _variant_t::_variant_t(float fltSrc) throw()
{
	((this)->vt) = VT_R4;
	((this)->fltVal) = fltSrc;
}




inline _variant_t::_variant_t(double dblSrc, VARTYPE vtSrc) throw(_com_error)
{
	if ((vtSrc != VT_R8) && (vtSrc != VT_DATE)) {
		_com_issue_error(((HRESULT)0x80070057L));
	}

	if (vtSrc == VT_DATE) {
		((this)->vt) = VT_DATE;
		((this)->date) = dblSrc;
	}
	else {
		((this)->vt) = VT_R8;
		((this)->dblVal) = dblSrc;
	}
}



inline _variant_t::_variant_t(const CY& cySrc) throw()
{
	((this)->vt) = VT_CY;
	((this)->cyVal) = cySrc;
}



inline _variant_t::_variant_t(const _bstr_t& bstrSrc) throw(_com_error)
{
	((this)->vt) = VT_BSTR;

	BSTR bstr = static_cast<wchar_t*>(bstrSrc);
	((this)->bstrVal) = ::SysAllocStringByteLen(reinterpret_cast<char*>(bstr),
										   ::SysStringByteLen(bstr));

	if (((this)->bstrVal) == 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}



inline _variant_t::_variant_t(const wchar_t* pSrc) throw(_com_error)
{
	((this)->vt) = VT_BSTR;
	((this)->bstrVal) = ::SysAllocString(pSrc);

	if (((this)->bstrVal) == 0 && pSrc != 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}



inline _variant_t::_variant_t(const char* pSrc) throw(_com_error)
{
	((this)->vt) = VT_BSTR;
	((this)->bstrVal) = _com_util::ConvertStringToBSTR(pSrc);

	if (((this)->bstrVal) == 0 && pSrc != 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}



inline _variant_t::_variant_t(IDispatch* pSrc, bool fAddRef) throw()
{
	((this)->vt) = VT_DISPATCH;
	((this)->pdispVal) = pSrc;

	
	
	
	if (fAddRef) {
		((this)->pdispVal)->AddRef();
	}
}



inline _variant_t::_variant_t(bool bSrc) throw()
{
	((this)->vt) = VT_BOOL;
	((this)->boolVal) = (bSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0));
}



inline _variant_t::_variant_t(IUnknown* pSrc, bool fAddRef) throw()
{
	((this)->vt) = VT_UNKNOWN;
	((this)->punkVal) = pSrc;

	
	
	
	if (fAddRef) {
		((this)->punkVal)->AddRef();
	}
}



inline _variant_t::_variant_t(const DECIMAL& decSrc) throw()
{
	
	
	((this)->decVal) = decSrc;
	((this)->vt) = VT_DECIMAL;
}



inline _variant_t::_variant_t(BYTE bSrc) throw()
{
	((this)->vt) = VT_UI1;
	((this)->bVal) = bSrc;
}









inline _variant_t::operator short() const throw(_com_error)
{
	if (((this)->vt) == VT_I2) {
		return ((this)->iVal); 
	}

	_variant_t varDest;

	varDest.ChangeType(VT_I2, this);

	return ((&varDest)->iVal);
}



inline _variant_t::operator long() const throw(_com_error)
{
	if (((this)->vt) == VT_I4) {
		return ((this)->lVal); 
	}

	_variant_t varDest;

	varDest.ChangeType(VT_I4, this);

	return ((&varDest)->lVal);
}



inline _variant_t::operator float() const throw(_com_error)
{
	if (((this)->vt) == VT_R4) {
		return ((this)->fltVal); 
	}

	_variant_t varDest;

	varDest.ChangeType(VT_R4, this);

	return ((&varDest)->fltVal);
}



inline _variant_t::operator double() const throw(_com_error)
{
	if (((this)->vt) == VT_R8) {
		return ((this)->dblVal); 
	}

	_variant_t varDest;

	varDest.ChangeType(VT_R8, this);

	return ((&varDest)->dblVal);
}



inline _variant_t::operator CY() const throw(_com_error)
{
	if (((this)->vt) == VT_CY) {
		return ((this)->cyVal); 
	}

	_variant_t varDest;

	varDest.ChangeType(VT_CY, this);

	return ((&varDest)->cyVal);
}



inline _variant_t::operator _bstr_t() const throw(_com_error)
{
	if (((this)->vt) == VT_BSTR) {
		return ((this)->bstrVal);
	}

	_variant_t varDest;

	varDest.ChangeType(VT_BSTR, this);

	return ((&varDest)->bstrVal);
}



inline _variant_t::operator IDispatch*() const throw(_com_error)
{
	if (((this)->vt) == VT_DISPATCH) {
		((this)->pdispVal)->AddRef();
		return ((this)->pdispVal);
	}

	_variant_t varDest;

	varDest.ChangeType(VT_DISPATCH, this);

	((&varDest)->pdispVal)->AddRef();
	return ((&varDest)->pdispVal);
}



inline _variant_t::operator bool() const throw(_com_error)
{
	if (((this)->vt) == VT_BOOL) {
		return ((this)->boolVal) ? true : false;
	}

	_variant_t varDest;

	varDest.ChangeType(VT_BOOL, this);

	return ((&varDest)->boolVal) ? true : false;
}



inline _variant_t::operator IUnknown*() const throw(_com_error)
{
	if (((this)->vt) == VT_UNKNOWN) {
		((this)->punkVal)->AddRef();
		return ((this)->punkVal);
	}

	_variant_t varDest;

	varDest.ChangeType(VT_UNKNOWN, this);

	((&varDest)->punkVal)->AddRef();
	return ((&varDest)->punkVal);
}



inline _variant_t::operator DECIMAL() const throw(_com_error)
{
	if (((this)->vt) == VT_DECIMAL) {
		return ((this)->decVal);
	}

	_variant_t varDest;

	varDest.ChangeType(VT_DECIMAL, this);

	return ((&varDest)->decVal);
}



inline _variant_t::operator BYTE() const throw(_com_error)
{
	if (((this)->vt) == VT_UI1) {
		return ((this)->bVal);
	}

	_variant_t varDest;

	varDest.ChangeType(VT_UI1, this);

	return ((&varDest)->bVal);
}









inline _variant_t& _variant_t::operator=(const VARIANT& varSrc) throw(_com_error)
{
	_com_util::CheckError(::VariantCopy(this, const_cast<VARIANT*>(&varSrc)));

	return *this;
}



inline _variant_t& _variant_t::operator=(const VARIANT* pSrc) throw(_com_error)
{
	_com_util::CheckError(::VariantCopy(this, const_cast<VARIANT*>(pSrc)));

	return *this;
}



inline _variant_t& _variant_t::operator=(const _variant_t& varSrc) throw(_com_error)
{
	_com_util::CheckError(::VariantCopy(this, const_cast<VARIANT*>(static_cast<const VARIANT*>(&varSrc))));

	return *this;
}




inline _variant_t& _variant_t::operator=(short sSrc) throw(_com_error)
{
	if (((this)->vt) == VT_I2) {
		((this)->iVal) = sSrc;
	}
	else if (((this)->vt) == VT_BOOL) {
		((this)->boolVal) = (sSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0));
	}
	else {
		
		
		Clear();

		((this)->vt) = VT_I2;
		((this)->iVal) = sSrc;
	}

	return *this;
}




inline _variant_t& _variant_t::operator=(long lSrc) throw(_com_error)
{
	if (((this)->vt) == VT_I4) {
		((this)->lVal) = lSrc;
	}
	else if (((this)->vt) == VT_ERROR) {
		((this)->scode) = lSrc;
	}
	else if (((this)->vt) == VT_BOOL) {
		((this)->boolVal) = (lSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0));
	}
	else {
		
		
		Clear();

		((this)->vt) = VT_I4;
		((this)->lVal) = lSrc;
	}

	return *this;
}



inline _variant_t& _variant_t::operator=(float fltSrc) throw(_com_error)
{
	if (((this)->vt) != VT_R4) {
		
		
		Clear();

		((this)->vt) = VT_R4;
	}

	((this)->fltVal) = fltSrc;

	return *this;
}




inline _variant_t& _variant_t::operator=(double dblSrc) throw(_com_error)
{
	if (((this)->vt) == VT_R8) {
		((this)->dblVal) = dblSrc;
	}
	else if(((this)->vt) == VT_DATE) {
		((this)->date) = dblSrc;
	}
	else {
		
		
		Clear();

		((this)->vt) = VT_R8;
		((this)->dblVal) = dblSrc;
	}

	return *this;
}



inline _variant_t& _variant_t::operator=(const CY& cySrc) throw(_com_error)
{
	if (((this)->vt) != VT_CY) {
		
		
		Clear();

		((this)->vt) = VT_CY;
	}

	((this)->cyVal) = cySrc;

	return *this;
}



inline _variant_t& _variant_t::operator=(const _bstr_t& bstrSrc) throw(_com_error)
{
	
	
	Clear();

	((this)->vt) = VT_BSTR;

	if (!bstrSrc) {
		((this)->bstrVal) = 0;
	}
	else {
		BSTR bstr = static_cast<wchar_t*>(bstrSrc);
		((this)->bstrVal) = ::SysAllocStringByteLen(reinterpret_cast<char*>(bstr),
											   ::SysStringByteLen(bstr));

		if (((this)->bstrVal) == 0) {
			_com_issue_error(((HRESULT)0x8007000EL));
		}
	}

	return *this;
}



inline _variant_t& _variant_t::operator=(const wchar_t* pSrc) throw(_com_error)
{
	
	
	Clear();

	((this)->vt) = VT_BSTR;

	if (pSrc == 0) {
		((this)->bstrVal) = 0;
	}
	else {
		((this)->bstrVal) = ::SysAllocString(pSrc);

		if (((this)->bstrVal) == 0) {
			_com_issue_error(((HRESULT)0x8007000EL));
		}
	}

	return *this;
}



inline _variant_t& _variant_t::operator=(const char* pSrc) throw(_com_error)
{
	
	
	Clear();

	((this)->vt) = VT_BSTR;
	((this)->bstrVal) = _com_util::ConvertStringToBSTR(pSrc);

	if (((this)->bstrVal) == 0 && pSrc != 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}

	return *this;
}



inline _variant_t& _variant_t::operator=(IDispatch* pSrc) throw(_com_error)
{
	
	
	Clear();

	((this)->vt) = VT_DISPATCH;
	((this)->pdispVal) = pSrc;

	
	
	((this)->pdispVal)->AddRef();

	return *this;
}



inline _variant_t& _variant_t::operator=(bool bSrc) throw(_com_error)
{
	if (((this)->vt) != VT_BOOL) {
		
		
		Clear();

		((this)->vt) = VT_BOOL;
	}

	((this)->boolVal) = (bSrc ? ((VARIANT_BOOL)-1) : ((VARIANT_BOOL)0));

	return *this;
}



inline _variant_t& _variant_t::operator=(IUnknown* pSrc) throw(_com_error)
{
	
	
	Clear();

	((this)->vt) = VT_UNKNOWN;
	((this)->punkVal) = pSrc;

	
	
	((this)->punkVal)->AddRef();

	return *this;
}



inline _variant_t& _variant_t::operator=(const DECIMAL& decSrc) throw(_com_error)
{
	if (((this)->vt) != VT_DECIMAL) {
		
		
		Clear();
	}

	
	((this)->decVal) = decSrc;
	((this)->vt) = VT_DECIMAL;

	return *this;
}



inline _variant_t& _variant_t::operator=(BYTE bSrc) throw(_com_error)
{
	if (((this)->vt) != VT_UI1) {
		
		
		Clear();

		((this)->vt) = VT_UI1;
	}

	((this)->bVal) = bSrc;

	return *this;
}









inline bool _variant_t::operator==(const VARIANT& varSrc) const throw()
{
	return *this == &varSrc;
}



inline bool _variant_t::operator==(const VARIANT* pSrc) const throw()
{
	if (this == pSrc) {
		return true;
	}

	
	
	
	if (((this)->vt) != ((pSrc)->vt)) {
		return false;
	}

	
	
	
	switch (((this)->vt)) {
		case VT_EMPTY:
		case VT_NULL:
			return true;

		case VT_I2:
			return ((this)->iVal) == ((pSrc)->iVal);

		case VT_I4:
			return ((this)->lVal) == ((pSrc)->lVal);

		case VT_R4:
			return ((this)->fltVal) == ((pSrc)->fltVal);

		case VT_R8:
			return ((this)->dblVal) == ((pSrc)->dblVal);

		case VT_CY:
			return memcmp(&(((this)->cyVal)), &(((pSrc)->cyVal)), sizeof(CY)) == 0;

		case VT_DATE:
			return ((this)->date) == ((pSrc)->date);

		case VT_BSTR:
			return (::SysStringByteLen(((this)->bstrVal)) == ::SysStringByteLen(((pSrc)->bstrVal))) &&
					(memcmp(((this)->bstrVal), ((pSrc)->bstrVal), ::SysStringByteLen(((this)->bstrVal))) == 0);

		case VT_DISPATCH:
			return ((this)->pdispVal) == ((pSrc)->pdispVal);

		case VT_ERROR:
			return ((this)->scode) == ((pSrc)->scode);

		case VT_BOOL:
			return ((this)->boolVal) == ((pSrc)->boolVal);

		case VT_UNKNOWN:
			return ((this)->punkVal) == ((pSrc)->punkVal);

		case VT_DECIMAL:
			return memcmp(&(((this)->decVal)), &(((pSrc)->decVal)), sizeof(DECIMAL)) == 0;

		case VT_UI1:
			return ((this)->bVal) == ((pSrc)->bVal);

		default:
			_com_issue_error(((HRESULT)0x80070057L));
			
	}

	return false;
}



inline bool _variant_t::operator!=(const VARIANT& varSrc) const throw()
{
	return !(*this == &varSrc);
}



inline bool _variant_t::operator!=(const VARIANT* pSrc) const throw()
{
	return !(*this == pSrc);
}









inline void _variant_t::Clear() throw(_com_error)
{
	_com_util::CheckError(::VariantClear(this));
}

inline void _variant_t::Attach(VARIANT& varSrc) throw(_com_error)
{
	
	
	
	Clear();

	
	
	
	memcpy(this, &varSrc, sizeof(varSrc));
	((&varSrc)->vt) = VT_EMPTY;
}

inline VARIANT _variant_t::Detach() throw(_com_error)
{
	VARIANT varResult = *this;
	((this)->vt) = VT_EMPTY;

	return varResult;
}




inline void _variant_t::ChangeType(VARTYPE vartype, const _variant_t* pSrc) throw(_com_error)
{
	
	
	
	if (pSrc == 0) {
		pSrc = this;
	}

	if ((this != pSrc) || (vartype != ((this)->vt))) {
		_com_util::CheckError(::VariantChangeType(static_cast<VARIANT*>(this),
												  const_cast<VARIANT*>(static_cast<const VARIANT*>(pSrc)),
												  0, vartype));
	}
}

inline void _variant_t::SetString(const char* pSrc) throw(_com_error)
{
	
	
	
	Clear();

	((this)->vt) = VT_BSTR;
	((this)->bstrVal) = _com_util::ConvertStringToBSTR(pSrc);

	if (((this)->bstrVal) == 0 && pSrc != 0) {
		_com_issue_error(((HRESULT)0x8007000EL));
	}
}







inline _variant_t::~_variant_t() throw(_com_error)
{
	_com_util::CheckError(::VariantClear(this));
}









inline _bstr_t::_bstr_t(const _variant_t &var) throw(_com_error)
	: m_Data(0)
{
	if (((&var)->vt) == VT_BSTR) {
		*this = ((&var)->bstrVal);
		return;
	}

	_variant_t varDest;

	varDest.ChangeType(VT_BSTR, &var);

	*this = ((&varDest)->bstrVal);
}



inline _bstr_t& _bstr_t::operator=(const _variant_t &var) throw(_com_error)
{
	if (((&var)->vt) == VT_BSTR) {
		*this = ((&var)->bstrVal);
		return *this;
	}

	_variant_t varDest;

	varDest.ChangeType(VT_BSTR, &var);

	*this = ((&varDest)->bstrVal);

	return *this;
}

extern _variant_t vtMissing;




#line 1786 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\comutil.h"

#pragma warning(pop)

#line 1790 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\comutil.h"
#line 24 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"


#pragma warning(push)
#line 28 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"
#pragma warning(disable: 4244)
#pragma warning(disable: 4290)

#pragma comment(lib, "comsupp.lib")

#pragma comment(lib, "user32.lib")
#pragma comment(lib, "ole32.lib")
#pragma comment(lib, "oleaut32.lib")

class _com_error;

void __stdcall
        _com_raise_error(HRESULT hr, IErrorInfo* perrinfo = 0) throw(_com_error);

void __stdcall
        _com_issue_error(HRESULT) throw(_com_error);
void __stdcall
        _com_issue_errorex(HRESULT, IUnknown*, const IID &) throw(_com_error);

HRESULT __stdcall
        _com_dispatch_propget(IDispatch*, DISPID, VARTYPE, void*) throw(_com_error);
HRESULT __cdecl
        _com_dispatch_propput(IDispatch*, DISPID, VARTYPE, ...) throw(_com_error);
HRESULT __cdecl
        _com_dispatch_method(IDispatch*, DISPID, WORD, VARTYPE, void*,
                                                 const wchar_t*, ...) throw(_com_error);

HRESULT __stdcall
        _com_dispatch_raw_propget(IDispatch*, DISPID, VARTYPE, void*) throw();
HRESULT __cdecl
        _com_dispatch_raw_propput(IDispatch*, DISPID, VARTYPE, ...) throw();
HRESULT __cdecl
        _com_dispatch_raw_method(IDispatch*, DISPID, WORD, VARTYPE, void*,
                                                         const wchar_t*, ...) throw();

class _com_error {
public:
        
        
        _com_error(HRESULT hr,
               IErrorInfo* perrinfo = 0,
               bool fAddRef = false) throw();
        _com_error(const _com_error& that) throw();

        
        
        virtual ~_com_error() throw();

        
        
        _com_error& operator=(const _com_error& that) throw();

        
        
        HRESULT Error() const throw();
        WORD WCode() const throw();
        IErrorInfo * ErrorInfo() const throw();

        
        
        _bstr_t Description() const throw(_com_error);
        DWORD HelpContext() const throw();
        _bstr_t HelpFile() const throw(_com_error);
        _bstr_t Source() const throw(_com_error);
        GUID GUID() const throw();

        
        const TCHAR * ErrorMessage() const throw();

        
        static HRESULT WCodeToHRESULT(WORD wCode) throw();
        static WORD HRESULTToWCode(HRESULT hr) throw();

private:
        enum {
                WCODE_HRESULT_FIRST = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(4)<<16) | ((unsigned long)(0x200))) ),
                WCODE_HRESULT_LAST = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(4+1)<<16) | ((unsigned long)(0))) ) - 1
        };
        const HRESULT                   m_hresult;
        IErrorInfo *                    m_perrinfo;
        mutable TCHAR *                 m_pszMsg;
};

inline _com_error::_com_error(HRESULT hr,
                              IErrorInfo* perrinfo,
                              bool fAddRef) throw()
        : m_hresult(hr), m_perrinfo(perrinfo), m_pszMsg(0)
{
        if (m_perrinfo != 0 && fAddRef) {
                m_perrinfo->AddRef();
        }
}

inline _com_error::_com_error(const _com_error& that) throw()
        : m_hresult(that.m_hresult), m_perrinfo(that.m_perrinfo), m_pszMsg(0)
{
        if (m_perrinfo != 0) {
                m_perrinfo->AddRef();
        }
}

inline _com_error::~_com_error() throw()
{
        if (m_perrinfo != 0) {
                m_perrinfo->Release();
        }
        if (m_pszMsg != 0) {
                LocalFree((HLOCAL)m_pszMsg);
        }
}

inline _com_error& _com_error::operator=(const _com_error& that) throw()
{
        if (this != &that) {
                this->_com_error::~_com_error();
                this->_com_error::_com_error(that);
        }
        return *this;
}

inline HRESULT _com_error::Error() const throw()
{
        return m_hresult;
}

inline WORD _com_error::WCode() const throw()
{
        return HRESULTToWCode(m_hresult);
}

inline IErrorInfo * _com_error::ErrorInfo() const throw()
{
        if (m_perrinfo != 0) {
                m_perrinfo->AddRef();
        }
        return m_perrinfo;
}

inline _bstr_t _com_error::Description() const throw(_com_error)
{
        BSTR bstr = 0;
        if (m_perrinfo != 0) {
                m_perrinfo->GetDescription(&bstr);
        }
        return _bstr_t(bstr, false);
}

inline DWORD _com_error::HelpContext() const throw()
{
        DWORD dwHelpContext = 0;
        if (m_perrinfo != 0) {
                m_perrinfo->GetHelpContext(&dwHelpContext);
        }
        return dwHelpContext;
}

inline _bstr_t _com_error::HelpFile() const throw(_com_error)
{
        BSTR bstr = 0;
        if (m_perrinfo != 0) {
                m_perrinfo->GetHelpFile(&bstr);
        }
        return _bstr_t(bstr, false);
}

inline _bstr_t _com_error::Source() const throw(_com_error)
{
        BSTR bstr = 0;
        if (m_perrinfo != 0) {
                m_perrinfo->GetSource(&bstr);
        }
        return _bstr_t(bstr, false);
}

inline _GUID _com_error::GUID() const throw()
{
        _GUID guid;
        memcpy(&guid, &__uuidof(0), sizeof(_GUID));
        if (m_perrinfo != 0) {
                m_perrinfo->GetGUID(&guid);
        }
        return guid;
}

inline const TCHAR * _com_error::ErrorMessage() const throw()
{
        if (m_pszMsg == 0) {
                FormatMessageA(0x00000100|0x00001000,
                                          0,
                                          m_hresult,
                                          ((((WORD )(0x01)) << 10) | (WORD )(0x00)),
                                          (LPTSTR)&m_pszMsg,
                                          0,
                                          0 );
                if (m_pszMsg != 0) {
                        int nLen = lstrlenA(m_pszMsg);
                        if (nLen > 1 && m_pszMsg[nLen - 1] == '\n') {
                                m_pszMsg[nLen - 1] = 0;
                                if (m_pszMsg[nLen - 2] == '\r') {
                                        m_pszMsg[nLen - 2] = 0;
                                }
                        }
                } else {
                        m_pszMsg = (LPTSTR)LocalAlloc(0, 32 * sizeof(TCHAR));
                        if (m_pszMsg != 0) {
                                WORD wCode = WCode();
                                if (wCode != 0) {
                                        wsprintfA(m_pszMsg, "IDispatch error #%d", wCode);
                                } else {
                                        wsprintfA(m_pszMsg, "Unknown error 0x%0lX", m_hresult);
                                }
                        }
                }
        }
        return m_pszMsg;
}

inline HRESULT _com_error::WCodeToHRESULT(WORD wCode) throw()
{
        return wCode >= 0xFE00 ? WCODE_HRESULT_LAST : WCODE_HRESULT_FIRST + wCode;
}

inline WORD _com_error::HRESULTToWCode(HRESULT hr) throw()
{
        return (hr >= WCODE_HRESULT_FIRST && hr <= WCODE_HRESULT_LAST)
                ? WORD(hr - WCODE_HRESULT_FIRST)
                : 0;
}


 
  #line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\comip.h"









#pragma once
#line 12 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\comip.h"









#pragma warning(push)
#pragma warning(disable: 4290)

class _com_error;

void __stdcall _com_issue_error(HRESULT);
struct __declspec(uuid("00000000-0000-0000-c000-000000000046")) IUnknown;



template<typename _Interface, const IID* _IID > class _com_IIID {
public:
	typedef _Interface Interface;

	static _Interface* GetInterfacePtr() throw()
	{
		return 0;
	}

	static _Interface& GetInterface() throw()
	{
		return *GetInterfacePtr();
	}

	static const IID& GetIID() throw()
	{
		return *_IID;
	}
};

template<typename _IIID> class _com_ptr_t {
public:
	
	
	
	typedef _IIID ThisIIID;
	typedef typename _IIID::Interface Interface;

	
	
	
	
	
	static const IID& GetIID() throw()
	{ 
		return ThisIIID::GetIID(); 
	}

	
	
	template<typename _InterfacePtr> _com_ptr_t(const _InterfacePtr& p) throw(_com_error)
		: m_pInterface(0)
	{
		if (p) {
			HRESULT hr = _QueryInterface(p);

			if (((HRESULT)(hr)<0) && (hr != ((HRESULT)0x80004002L))) {
				_com_issue_error(hr);
			}
		}
	}

	
	
	template<> explicit _com_ptr_t(_com_ptr_t* const & p) throw(_com_error)
	{
		if (p != 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}
		else {
			m_pInterface = p->m_pInterface;
			AddRef();
		}
	}

	
	
	_com_ptr_t() throw()
		: m_pInterface(0)
	{
	}

	
	
	
	_com_ptr_t(int null) throw(_com_error)
		: m_pInterface(0)
	{
		if (null != 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}
	}

	
	
	template<> _com_ptr_t(const _com_ptr_t& cp) throw()
		: m_pInterface(cp.m_pInterface)
	{ 
		_AddRef(); 
	}

	
	
	_com_ptr_t(Interface* pInterface) throw()
		: m_pInterface(pInterface)
	{ 
		_AddRef(); 
	}

	
	
	
	_com_ptr_t(Interface* pInterface, bool fAddRef) throw()
		: m_pInterface(pInterface)
	{
		if (fAddRef) {
			_AddRef();
		}
	}

	
	
	template<> _com_ptr_t(const _variant_t& varSrc) throw(_com_error)
		: m_pInterface(0)
	{
		HRESULT hr = QueryStdInterfaces(varSrc);

		if (((HRESULT)(hr)<0) && (hr != ((HRESULT)0x80004002L))) {
			_com_issue_error(hr);
		}
	}

	
	
	explicit _com_ptr_t(const CLSID& clsid, IUnknown* pOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER)) throw(_com_error)
		: m_pInterface(0)
	{
		HRESULT hr = CreateInstance(clsid, pOuter, dwClsContext);

		if (((HRESULT)(hr)<0) && (hr != ((HRESULT)0x80004002L))) {
			_com_issue_error(hr);
		}
	}

	
	
	
	explicit _com_ptr_t(LPOLESTR str, IUnknown* pOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER)) throw(_com_error)
		: m_pInterface(0)
	{
		HRESULT hr = CreateInstance(str, pOuter, dwClsContext);

		if (((HRESULT)(hr)<0) && (hr != ((HRESULT)0x80004002L))) {
			_com_issue_error(hr);
		}
	}

	
	
	
	explicit _com_ptr_t(LPCSTR str, IUnknown* pOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER)) throw(_com_error)
		: m_pInterface(0)
	{
		HRESULT hr = CreateInstance(str, pOuter, dwClsContext);

		if (((HRESULT)(hr)<0) && (hr != ((HRESULT)0x80004002L))) {
			_com_issue_error(hr);
		}
	}

	
	
	template<typename _InterfacePtr> _com_ptr_t& operator=(const _InterfacePtr& p) throw(_com_error)
	{
		HRESULT hr = _QueryInterface(p);

		if (((HRESULT)(hr)<0) && (hr != ((HRESULT)0x80004002L))) {
			_com_issue_error(hr);
		}

		return *this;
	}

	
	
	_com_ptr_t& operator=(Interface* pInterface) throw()
	{
		if (m_pInterface != pInterface) {
			Interface* pOldInterface = m_pInterface;

			m_pInterface = pInterface;

			_AddRef();

			if (pOldInterface != 0) {
				pOldInterface->Release();
			}
		}

		return *this;
	}

	
	
	template<> _com_ptr_t& operator=(const _com_ptr_t& cp) throw()
	{ 
		return operator=(cp.m_pInterface); 
	}

	
	
	
	_com_ptr_t& operator=(int null) throw(_com_error)
	{
		if (null != 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}

		return operator=(reinterpret_cast<Interface*>(0));
	}

	
	
	template<> _com_ptr_t& operator=(const _variant_t& varSrc) throw(_com_error)
	{
		HRESULT hr = QueryStdInterfaces(varSrc);

		if (((HRESULT)(hr)<0) && (hr != ((HRESULT)0x80004002L))) {
			_com_issue_error(hr);
		}

		return *this;
	}

	
	
	
	
	~_com_ptr_t() throw()
	{ 
		_Release(); 
	}

	
	
	
	void Attach(Interface* pInterface) throw()
	{
		_Release();
		m_pInterface = pInterface;
	}

	
	
	
	void Attach(Interface* pInterface, bool fAddRef) throw()
	{
		_Release();
		m_pInterface = pInterface;

		if (fAddRef) {
			if (pInterface != 0) {
				pInterface->AddRef();
			}
		}
	}

	
	
	Interface* Detach() throw()
	{
		Interface* const old=m_pInterface;
		m_pInterface = 0;
		return old;
	}

	
	
	operator Interface*() const throw()
	{ 
		return m_pInterface; 
	}

	
	
	
	operator Interface&() const throw(_com_error)
	{ 
		if (m_pInterface == 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}

		return *m_pInterface; 
	}

	
	
	
	Interface& operator*() const throw(_com_error)
	{ 
		if (m_pInterface == 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}

		return *m_pInterface; 
	}

	
	
	
	
	Interface** operator&() throw()
	{
		_Release();
		m_pInterface = 0;
		return &m_pInterface;
	}

	
	
	
	Interface* operator->() const throw(_com_error)
	{ 
		if (m_pInterface == 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}

		return m_pInterface; 
	}

	
	
	
	
	operator bool() const throw()
	{ 
		return m_pInterface != 0; 
	}

	
	
	template<typename _InterfacePtr> bool operator==(_InterfacePtr p) throw(_com_error)
	{
		return _CompareUnknown(p) == 0;
	}

	
	
	template<> bool operator==(Interface* p) throw(_com_error)
	{
		return (m_pInterface == p) ? true : _CompareUnknown(p) == 0;
	}

	
	
	template<> bool operator==(_com_ptr_t& p) throw()
	{
		return operator==(p.m_pInterface);
	}

	
	
	template<> bool operator==(int null) throw(_com_error)
	{
		if (null != 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}

		return m_pInterface == 0;
	}

	
	
	template<typename _InterfacePtr> bool operator!=(_InterfacePtr p) throw(_com_error)
	{
		return !(operator==(p));
	}

	
	
	template<> bool operator!=(Interface* p) throw(_com_error)
	{
		return !(operator==(p));
	}

	
	
	template<> bool operator!=(_com_ptr_t& p) throw(_com_error)
	{
		return !(operator==(p));
	}

	
	
	template<> bool operator!=(int null) throw(_com_error)
	{
		return !(operator==(null));
	}

	
	
	template<typename _InterfacePtr> bool operator<(_InterfacePtr p) throw(_com_error)
	{
		return _CompareUnknown(p) < 0;
	}

	
	
	template<typename _InterfacePtr> bool operator>(_InterfacePtr p) throw(_com_error)
	{
		return _CompareUnknown(p) > 0;
	}

	
	
	template<typename _InterfacePtr> bool operator<=(_InterfacePtr p) throw(_com_error)
	{
		return _CompareUnknown(p) <= 0;
	}

	
	
	template<typename _InterfacePtr> bool operator>=(_InterfacePtr p) throw(_com_error)
	{
		return _CompareUnknown(p) >= 0;
	}

	
	
	void Release() throw(_com_error)
	{
		if (m_pInterface == 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}

		m_pInterface->Release();
		m_pInterface = 0;
	}

	
	
	void AddRef() throw(_com_error)
	{ 
		if (m_pInterface == 0) {
			_com_issue_error(((HRESULT)0x80004003L));
		}

		m_pInterface->AddRef(); 
	}

	
	
	Interface* GetInterfacePtr() const throw()
	{ 
		return m_pInterface; 
	}

	
	
	
	HRESULT CreateInstance(const CLSID& rclsid, IUnknown* pOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER)) throw()
	{
		HRESULT hr;

		_Release();

		if (dwClsContext & (CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER)) {
			IUnknown* pIUnknown;

			hr = CoCreateInstance(rclsid, pOuter, dwClsContext, __uuidof(IUnknown), reinterpret_cast<void**>(&pIUnknown));

			if (((HRESULT)(hr)<0)) {
				return hr;
			}

			hr = OleRun(pIUnknown);

			if (((HRESULT)(hr) >= 0)) {
				hr = pIUnknown->QueryInterface(GetIID(), reinterpret_cast<void**>(&m_pInterface));
			}

			pIUnknown->Release();
		}
		else {
			hr = CoCreateInstance(rclsid, pOuter, dwClsContext, GetIID(), reinterpret_cast<void**>(&m_pInterface));
		}

		return hr;
	}

	
	
	
	HRESULT CreateInstance(LPOLESTR clsidString, IUnknown* pOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER)) throw()
	{
		if (clsidString == 0) {
			return ((HRESULT)0x80070057L);
		}

		CLSID clsid;
		HRESULT hr;

		if (clsidString[0] == '{') {
			hr = CLSIDFromString(clsidString, &clsid);
		}
		else {
			hr = CLSIDFromProgID(clsidString, &clsid);
		}

		if (((HRESULT)(hr)<0)) {
			return hr;
		}

		return CreateInstance(clsid, pOuter, dwClsContext);
	}

	
	
	
	HRESULT CreateInstance(LPCSTR clsidStringA, IUnknown* pOuter = 0, DWORD dwClsContext = (CLSCTX_INPROC_SERVER| CLSCTX_INPROC_HANDLER| CLSCTX_LOCAL_SERVER| CLSCTX_REMOTE_SERVER)) throw()
	{
		if (clsidStringA == 0) {
			return ((HRESULT)0x80070057L);
		}

		int size = lstrlenA(clsidStringA) + 1;
		LPOLESTR clsidStringW = static_cast<LPOLESTR>(_alloca(size * 2));

		clsidStringW[0] = '\0';

		if (MultiByteToWideChar(0, 0, clsidStringA, -1, clsidStringW, size) == 0) {
			return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		}

		return CreateInstance(clsidStringW, pOuter, dwClsContext);
	}

	
	
	
	HRESULT GetActiveObject(const CLSID& rclsid) throw()
	{
		_Release();

		IUnknown* pIUnknown;

		HRESULT hr = ::GetActiveObject(rclsid, 0, &pIUnknown);

		if (((HRESULT)(hr)<0)) {
			return hr;
		}

		hr = pIUnknown->QueryInterface(GetIID(), reinterpret_cast<void**>(&m_pInterface));

		if (((HRESULT)(hr)<0)) {
			return hr;
		}

		pIUnknown->Release();

		return hr;
	}

	
	
	
	HRESULT GetActiveObject(LPOLESTR clsidString) throw()
	{
		if (clsidString == 0) {
			return ((HRESULT)0x80070057L);
		}

		CLSID clsid;
		HRESULT hr;

		if (clsidString[0] == '{') {
			hr = CLSIDFromString(clsidString, &clsid);
		}
		else {
			hr = CLSIDFromProgID(clsidString, &clsid);
		}

		if (((HRESULT)(hr)<0)) {
			return hr;
		}

		return GetActiveObject(clsid);
	}

	
	
	
	HRESULT GetActiveObject(LPCSTR clsidStringA) throw()
	{
		if (clsidStringA == 0) {
			return ((HRESULT)0x80070057L);
		}

		int size = lstrlenA(clsidStringA) + 1;
		LPOLESTR clsidStringW = static_cast<LPOLESTR>(_alloca(size * 2));

		clsidStringW[0] = '\0';

		if (MultiByteToWideChar(0, 0, clsidStringA, -1, clsidStringW, size) == 0) {
			return ((HRESULT)(GetLastError()) <= 0 ? ((HRESULT)(GetLastError())) : ((HRESULT) (((GetLastError()) & 0x0000FFFF) | (7 << 16) | 0x80000000)));
		}

		return GetActiveObject(clsidStringW);
	}

	
	
	
	template<typename _InterfaceType> HRESULT QueryInterface(const IID& iid, _InterfaceType*& p) throw ()
	{
		if (m_pInterface != 0) {
			return m_pInterface->QueryInterface(iid, reinterpret_cast<void**>(&p));
		}

		return ((HRESULT)0x80004003L);
	}

	
	
	
	template<typename _InterfaceType> HRESULT QueryInterface(const IID& iid, _InterfaceType** p) throw()
	{
		return QueryInterface(iid, *p);
	}

private:
	
	
	Interface* m_pInterface;

	
	
	
	void _Release() throw()
	{
		if (m_pInterface != 0) {
			m_pInterface->Release();
		}
	}

	
	
	void _AddRef() throw()
	{
		if (m_pInterface != 0) {
			m_pInterface->AddRef();
		}
	}

	
	
	
	
	
	template<typename _InterfacePtr> HRESULT _QueryInterface(const _InterfacePtr& p) throw()
	{
		HRESULT hr;

		
		
		if (p) {
			
			
			Interface* pInterface;
			hr = p->QueryInterface(GetIID(), reinterpret_cast<void**>(&pInterface));

			if (((HRESULT)(hr)<0)) {
				
				
				Attach(0);
				return hr;
			}

			
			
			Attach(pInterface);
		}
		else {
			operator=(static_cast<Interface*>(0));
			hr = ((HRESULT)0x80004002L);
		}

		return hr;
	}

	
	
	
	template<typename _InterfacePtr> int _CompareUnknown(_InterfacePtr p) throw(_com_error)
	{
		IUnknown* pu1, *pu2;

		if (m_pInterface != 0) {
			HRESULT hr = m_pInterface->QueryInterface(__uuidof(IUnknown), reinterpret_cast<void**>(&pu1));

			if (((HRESULT)(hr)<0)) {
				_com_issue_error(hr);
			}

			pu1->Release();
		}
		else {
			pu1 = 0;
		}

		if (p) {
			HRESULT hr = p->QueryInterface(__uuidof(IUnknown), reinterpret_cast<void**>(&pu2));

			if (((HRESULT)(hr)<0)) {
				_com_issue_error(hr);
			}

			pu2->Release();
		}
		else {
			pu2 = 0;
		}

		return pu1 - pu2;
	}

	
	
	
	HRESULT QueryStdInterfaces(const _variant_t& varSrc) throw()
	{
		if (((&varSrc)->vt) == VT_DISPATCH) {
			return _QueryInterface(((&varSrc)->pdispVal));
		}

		if (((&varSrc)->vt) == VT_UNKNOWN) {
			return _QueryInterface(((&varSrc)->punkVal));
		}

		
		
		
		
		VARIANT varDest;
		VariantInit(&varDest);

		HRESULT hr = VariantChangeType(&varDest, const_cast<VARIANT*>(static_cast<const VARIANT*>(&varSrc)), 0, VT_DISPATCH);
		if (((HRESULT)(hr) >= 0)) {
			hr = _QueryInterface(((&varSrc)->pdispVal));
		}

		if (((HRESULT)(hr)<0) && (hr == ((HRESULT)0x80004002L))) {
			
			
			VariantInit(&varDest);
			hr = VariantChangeType(&varDest, const_cast<VARIANT*>(static_cast<const VARIANT*>(&varSrc)), 0, VT_UNKNOWN);
			if (((HRESULT)(hr) >= 0)) {
				hr = _QueryInterface(((&varSrc)->punkVal));
			}
		}

		VariantClear(&varDest);
		return hr;
	}
};



template<typename _InterfaceType> bool operator==(int null, _com_ptr_t<_InterfaceType>& p) throw(_com_error)
{
	if (null != 0) {
		_com_issue_error(((HRESULT)0x80004003L));
	}

	return p == 0;
}

template<typename _Interface, typename _InterfacePtr> bool operator==(_Interface* i, _com_ptr_t<_InterfacePtr>& p) throw(_com_error)
{
	return p == i;
}

template<typename _Interface> bool operator!=(int null, _com_ptr_t<_Interface>& p) throw(_com_error)
{
	if (null != 0) {
		_com_issue_error(((HRESULT)0x80004003L));
	}

	return p != 0;
}

template<typename _Interface, typename _InterfacePtr> bool operator!=(_Interface* i, _com_ptr_t<_InterfacePtr>& p) throw(_com_error)
{
	return p != i;
}

template<typename _Interface> bool operator<(int null, _com_ptr_t<_Interface>& p) throw(_com_error)
{
	if (null != 0) {
		_com_issue_error(((HRESULT)0x80004003L));
	}

	return p > 0;
}

template<typename _Interface, typename _InterfacePtr> bool operator<(_Interface* i, _com_ptr_t<_InterfacePtr>& p) throw(_com_error)
{
	return p > i;
}

template<typename _Interface> bool operator>(int null, _com_ptr_t<_Interface>& p) throw(_com_error)
{
	if (null != 0) {
		_com_issue_error(((HRESULT)0x80004003L));
	}

	return p < 0;
}

template<typename _Interface, typename _InterfacePtr> bool operator>(_Interface* i, _com_ptr_t<_InterfacePtr>& p) throw(_com_error)
{
	return p < i;
}

template<typename _Interface> bool operator<=(int null, _com_ptr_t<_Interface>& p) throw(_com_error)
{
	if (null != 0) {
		_com_issue_error(((HRESULT)0x80004003L));
	}

	return p >= 0;
}

template<typename _Interface, typename _InterfacePtr> bool operator<=(_Interface* i, _com_ptr_t<_InterfacePtr>& p) throw(_com_error)
{
	return p >= i;
}

template<typename _Interface> bool operator>=(int null, _com_ptr_t<_Interface>& p) throw(_com_error)
{
	if (null != 0) {
		_com_issue_error(((HRESULT)0x80004003L));
	}

	return p <= 0;
}

template<typename _Interface, typename _InterfacePtr> bool operator>=(_Interface* i, _com_ptr_t<_InterfacePtr>& p) throw(_com_error)
{
	return p <= i;
}

#pragma warning(pop)

#line 876 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\include\\comip.h"
#line 260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"
 #line 261 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"
 
 
#line 264 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"

 
  
   


  



#line 275 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"
 #line 276 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"
#line 277 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"













#line 291 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"



struct __declspec(uuid("0000013D-0000-0000-C000-000000000046")) IClientSecurity;
struct __declspec(uuid("0000013E-0000-0000-C000-000000000046")) IServerSecurity;
struct __declspec(uuid("00000140-0000-0000-C000-000000000046")) IClassActivator;
struct __declspec(uuid("00020d00-0000-0000-c000-000000000046")) IRichEditOle;
struct __declspec(uuid("00020d03-0000-0000-c000-000000000046")) IRichEditOleCallback;
struct __declspec(uuid("000214e1-0000-0000-c000-000000000046")) INewShortcutHookA;
struct __declspec(uuid("000214e2-0000-0000-c000-000000000046")) IShellBrowser;
struct __declspec(uuid("000214e3-0000-0000-c000-000000000046")) IShellView;
struct __declspec(uuid("000214e4-0000-0000-c000-000000000046")) IContextMenu;
struct __declspec(uuid("000214e5-0000-0000-c000-000000000046")) IShellIcon;
struct __declspec(uuid("000214e6-0000-0000-c000-000000000046")) IShellFolder;
struct __declspec(uuid("000214e8-0000-0000-c000-000000000046")) IShellExtInit;
struct __declspec(uuid("000214e9-0000-0000-c000-000000000046")) IShellPropSheetExt;
struct __declspec(uuid("000214ea-0000-0000-c000-000000000046")) IPersistFolder;
struct __declspec(uuid("000214eb-0000-0000-c000-000000000046")) IExtractIconA;
struct __declspec(uuid("000214ee-0000-0000-c000-000000000046")) IShellLinkA;
struct __declspec(uuid("000214f0-0000-0000-c000-000000000046")) IFileViewerA;
struct __declspec(uuid("000214f1-0000-0000-c000-000000000046")) ICommDlgBrowser;
struct __declspec(uuid("000214f2-0000-0000-c000-000000000046")) IEnumIDList;
struct __declspec(uuid("000214f3-0000-0000-c000-000000000046")) IFileViewerSite;
struct __declspec(uuid("000214f4-0000-0000-c000-000000000046")) IContextMenu2;
struct __declspec(uuid("000214f5-0000-0000-c000-000000000046")) IShellExecuteHookA;
struct __declspec(uuid("000214f7-0000-0000-c000-000000000046")) INewShortcutHookW;
struct __declspec(uuid("000214f8-0000-0000-c000-000000000046")) IFileViewerW;
struct __declspec(uuid("000214f9-0000-0000-c000-000000000046")) IShellLinkW;
struct __declspec(uuid("000214fa-0000-0000-c000-000000000046")) IExtractIconW;
struct __declspec(uuid("000214fb-0000-0000-c000-000000000046")) IShellExecuteHookW;
struct __declspec(uuid("00021500-0000-0000-c000-000000000046")) IQueryInfo;
struct __declspec(uuid("0002DF05-0000-0000-C000-000000000046")) IWebBrowserApp;
struct __declspec(uuid("0002E000-0000-0000-C000-000000000046")) IEnumGUID;
struct __declspec(uuid("0002E011-0000-0000-C000-000000000046")) IEnumCATEGORYINFO;
struct __declspec(uuid("0002E012-0000-0000-C000-000000000046")) ICatRegister;
struct __declspec(uuid("0002E013-0000-0000-C000-000000000046")) ICatInformation;
struct __declspec(uuid("012dd920-7b26-11d0-8ca9-00a0c92dbfe8")) IDockingWindow;
struct __declspec(uuid("3050f4e9-98b5-11cf-bb82-00aa00bdce0b")) IHTMLControlElement;
struct __declspec(uuid("085FB2C0-0DF8-11D1-8F4B-00A0C905413F")) ISubscriptionMgr;
struct __declspec(uuid("08EC3E00-50B0-11CF-960C-0080C7F4EE85")) FolderItemVerb;
struct __declspec(uuid("0c6c4200-c589-11d0-999a-00c04fd655e1")) IShellIconOverlayIdentifier;
struct __declspec(uuid("1008C4A0-7613-11CF-9AF1-0020AF6E72F4")) IChannelHook;
struct __declspec(uuid("163BB1E0-6E00-11CF-837A-48DC04C10000")) IHTMLLocation;
struct __declspec(uuid("1CFF0050-6FDD-11D0-9328-00A0C90DCAA9")) IActiveScriptParseProcedureOld32;
struct __declspec(uuid("1F8352C0-50B0-11CF-960C-0080C7F4EE85")) FolderItemVerbs;
struct __declspec(uuid("1ac3d9f0-175c-11d1-95be-00609797ea4f")) IPersistFolder2;
struct __declspec(uuid("21F57128-08C9-4638-BA12-22D15D88DC5C")) IActiveScriptParseProcedureOld64;
struct __declspec(uuid("275C23E1-3747-11D0-9FEA-00AA003F8646")) IMultiLanguage;
struct __declspec(uuid("275C23E3-3747-11D0-9FEA-00AA003F8646")) IEnumCodePage;
struct __declspec(uuid("2a342fc2-7b26-11d0-8ca9-00a0c92dbfe8")) IDockingWindowSite;
struct __declspec(uuid("3050F1D8-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLBodyElement;
struct __declspec(uuid("3050F1D9-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFontElement;
struct __declspec(uuid("3050F1DA-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLAnchorElement;
struct __declspec(uuid("3050F1DD-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLUListElement;
struct __declspec(uuid("3050F1DE-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLOListElement;
struct __declspec(uuid("3050F1E0-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLLIElement;
struct __declspec(uuid("3050F1F0-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLBRElement;
struct __declspec(uuid("3050F1F1-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLDListElement;
struct __declspec(uuid("3050F1F2-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLDDElement;
struct __declspec(uuid("3050F1F3-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLDTElement;
struct __declspec(uuid("3050F1F4-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLHRElement;
struct __declspec(uuid("3050F1F5-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLParaElement;
struct __declspec(uuid("3050F1F6-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLHeaderElement;
struct __declspec(uuid("3050F1F7-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFormElement;
struct __declspec(uuid("3050F1FF-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLElement;
struct __declspec(uuid("3050F200-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLDivElement;
struct __declspec(uuid("3050F202-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLBaseFontElement;
struct __declspec(uuid("3050F203-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLMetaElement;
struct __declspec(uuid("3050F204-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLBaseElement;
struct __declspec(uuid("3050F205-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLLinkElement;
struct __declspec(uuid("3050F206-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLIsIndexElement;
struct __declspec(uuid("3050F207-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLNextIdElement;
struct __declspec(uuid("3050F208-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLBlockElement;
struct __declspec(uuid("3050F209-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLUnknownElement;
struct __declspec(uuid("3050F20A-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLPhraseElement;
struct __declspec(uuid("3050F20C-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLCommentElement;
struct __declspec(uuid("3050F20E-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLListElement;
struct __declspec(uuid("3050F211-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLOptionElement;
struct __declspec(uuid("3050F212-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLDivPosition;
struct __declspec(uuid("3050F216-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLDialog;
struct __declspec(uuid("3050F218-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTextElement;
struct __declspec(uuid("3050F21E-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTable;
struct __declspec(uuid("3050F21F-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLElementCollection;
struct __declspec(uuid("3050F220-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTxtRange;
struct __declspec(uuid("3050F230-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTextContainer;
struct __declspec(uuid("3050F23A-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTableCol;
struct __declspec(uuid("3050F23B-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTableSection;
struct __declspec(uuid("3050F23C-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTableRow;
struct __declspec(uuid("3050F23D-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTableCell;
struct __declspec(uuid("3050F240-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLImgElement;
struct __declspec(uuid("3050F244-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLSelectElement;
struct __declspec(uuid("3050F24F-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLObjectElement;
struct __declspec(uuid("3050F25A-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLSelectionObject;
struct __declspec(uuid("3050F25E-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLStyle;
struct __declspec(uuid("3050F25F-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLEmbedElement;
struct __declspec(uuid("3050F265-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLAreaElement;
struct __declspec(uuid("3050F266-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLMapElement;
struct __declspec(uuid("3050F28B-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLScriptElement;
struct __declspec(uuid("3050F29C-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLControlRange;
struct __declspec(uuid("3050F2A4-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLInputHiddenElement;
struct __declspec(uuid("3050F2A6-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLInputTextElement;
struct __declspec(uuid("3050F2AA-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTextAreaElement;
struct __declspec(uuid("3050F2AD-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLInputFileElement;
struct __declspec(uuid("3050F2B2-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLInputButtonElement;
struct __declspec(uuid("3050F2B5-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLMarqueeElement;
struct __declspec(uuid("3050F2BB-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLButtonElement;
struct __declspec(uuid("3050F2BC-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLOptionButtonElement;
struct __declspec(uuid("3050F2C2-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLInputImage;
struct __declspec(uuid("3050F2E3-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLStyleSheet;
struct __declspec(uuid("3050F2E5-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLStyleSheetRulesCollection;
struct __declspec(uuid("3050F2EB-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTableCaption;
struct __declspec(uuid("3050F2F4-98B5-11CF-BB82-00AA00BDCE0B")) IViewFilterSite;
struct __declspec(uuid("3050F311-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFrameBase;
struct __declspec(uuid("3050F313-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFrameElement;
struct __declspec(uuid("3050F315-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLIFrameElement;
struct __declspec(uuid("3050F319-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFrameSetElement;
struct __declspec(uuid("3050F322-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLTitleElement;
struct __declspec(uuid("3050F32A-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLLabelElement;
struct __declspec(uuid("3050F32D-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLEventObj;
struct __declspec(uuid("3050F357-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLStyleSheetRule;
struct __declspec(uuid("3050F35C-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLScreen;
struct __declspec(uuid("3050F35F-98B5-11CF-BB82-00AA00BDCE0B")) ITimerService;
struct __declspec(uuid("3050F360-98B5-11CF-BB82-00AA00BDCE0B")) ITimer;
struct __declspec(uuid("3050F361-98B5-11CF-BB82-00AA00BDCE0B")) ITimerSink;
struct __declspec(uuid("3050F369-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLBGsound;
struct __declspec(uuid("3050F372-98B5-11CF-BB82-00AA00BDCE0B")) IViewTransition;
struct __declspec(uuid("3050F373-98B5-11CF-BB82-00AA00BDCE0B")) IViewTransitionSite;
struct __declspec(uuid("3050F375-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLStyleElement;
struct __declspec(uuid("3050F376-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFontNamesCollection;
struct __declspec(uuid("3050F377-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFontSizesCollection;
struct __declspec(uuid("3050F378-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLOptionsHolder;
struct __declspec(uuid("3050F37E-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLStyleSheetsCollection;
struct __declspec(uuid("3050F383-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLAreasCollection;
struct __declspec(uuid("3050F38A-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLNoShowElement;
struct __declspec(uuid("3050F38C-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLOptionElementFactory;
struct __declspec(uuid("3050F38E-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLImageElementFactory;
struct __declspec(uuid("3050F3CF-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLRuleStyle;
struct __declspec(uuid("3050F3D5-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLStyleFontFace;
struct __declspec(uuid("3050F3E5-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLSpanFlow;
struct __declspec(uuid("3050F3E7-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFieldSetElement;
struct __declspec(uuid("3050F3EA-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLLegendElement;
struct __declspec(uuid("3050F3EC-98B5-11CF-BB82-00AA00BDCE0B")) ICSSFilter;
struct __declspec(uuid("3050F3ED-98B5-11CF-BB82-00AA00BDCE0B")) ICSSFilterSite;
struct __declspec(uuid("3050F3EE-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLFiltersCollection;
struct __declspec(uuid("3050F3F0-98B5-11CF-BB82-00AA00BDCE0B")) ICustomDoc;
struct __declspec(uuid("3050F3F2-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLDatabinding;
struct __declspec(uuid("3050F3F3-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLSpanElement;
struct __declspec(uuid("3050F3FC-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLMimeTypesCollection;
struct __declspec(uuid("3050F3FD-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLPluginsCollection;
struct __declspec(uuid("3050F401-98B5-11CF-BB82-00AA00BDCE0B")) IHTMLOpsProfile;
struct __declspec(uuid("3050f3d7-98b5-11cf-bb82-00aa00bdce0b")) IImgCtx;
struct __declspec(uuid("332C4425-26CB-11D0-B483-00C04FD90119")) IHTMLDocument2;
struct __declspec(uuid("332C4426-26CB-11D0-B483-00C04FD90119")) IHTMLFramesCollection2;
struct __declspec(uuid("332C4427-26CB-11D0-B483-00C04FD90119")) IHTMLWindow2;
struct __declspec(uuid("359F3441-BD4A-11D0-B188-00AA0038C969")) IMLangFontLink;
struct __declspec(uuid("359F3443-BD4A-11D0-B188-00AA0038C969")) IMLangCodePages;
struct __declspec(uuid("3C374A41-BAE4-11CF-BF7D-00AA006946EE")) IUrlHistoryStg;
struct __declspec(uuid("3C374A42-BAE4-11CF-BF7D-00AA006946EE")) IEnumSTATURL;
struct __declspec(uuid("3DC39D1D-C030-11D0-B81B-00C04FC9B31F")) IEnumRfc1766;
struct __declspec(uuid("47d2657a-7b27-11d0-8ca9-00a0c92dbfe8")) IDockingWindowFrame;
struct __declspec(uuid("539698A0-CDCA-11CF-A5EB-00AA0047A063")) IActiveScriptSiteInterruptPoll;
struct __declspec(uuid("618736e0-3c3d-11cf-810c-00aa00389b71")) IAccessible;
struct __declspec(uuid("626FC520-A41E-11CF-A731-00A0C9082637")) IHTMLDocument;
struct __declspec(uuid("63CDBCB0-C1B1-11D0-9336-00A0C90DCAA9")) IBindEventHandler;
struct __declspec(uuid("68284faa-6a48-11d0-8c78-00c04fd918b4")) IInputObject;
struct __declspec(uuid("71EE5B20-FB04-11d1-B3A8-00A0C911E8B2")) IActiveScriptParseProcedure2_32;
struct __declspec(uuid("729FE2F8-1EA8-11D1-8F85-00C04FC2FBE1")) IShellUIHelper;
struct __declspec(uuid("744129E0-CBE5-11CE-8350-444553540000")) FolderItems;
struct __declspec(uuid("79EAC9C2-BAF9-11CE-8C82-00AA004BA90B")) IHlinkSite;
struct __declspec(uuid("79EAC9C3-BAF9-11CE-8C82-00AA004BA90B")) IHlink;
struct __declspec(uuid("79EAC9C4-BAF9-11CE-8C82-00AA004BA90B")) IHlinkTarget;
struct __declspec(uuid("79EAC9C5-BAF9-11CE-8C82-00AA004BA90B")) IHlinkFrame;
struct __declspec(uuid("79EAC9C6-BAF9-11CE-8C82-00AA004BA90B")) IEnumHLITEM;
struct __declspec(uuid("79EAC9C7-BAF9-11CE-8C82-00AA004BA90B")) IHlinkBrowseContext;
struct __declspec(uuid("79EAC9CB-BAF9-11CE-8C82-00AA004BA90B")) IExtensionServices;
struct __declspec(uuid("7d688a70-c613-11d0-999b-00c04fd655e1")) IShellIconOverlay;
struct __declspec(uuid("85BD8E82-0FBA-11D1-90C3-00C04FC2F568")) IChannelMgr;
struct __declspec(uuid("85CB6900-4D95-11CF-960C-0080C7F4EE85")) IShellWindows;
struct __declspec(uuid("88A05C00-F000-11CE-8350-444553540000")) IShellLinkDual;
struct __declspec(uuid("88e39e80-3578-11cf-ae69-08002b2e1262")) IShellView2;
struct __declspec(uuid("89BCB740-6119-101A-BCB7-00DD010655AF")) IFilter;
struct __declspec(uuid("91A565C1-E38F-11D0-94BF-00A0C9055CBF")) IPersistHistory;
struct __declspec(uuid("9BA05970-F6A8-11CF-A442-00A0C90A8F39")) IFolderViewOC;
struct __declspec(uuid("A3CCEDF3-2DE2-11D0-86F4-00A0C913F750")) IImageDecodeFilter;
struct __declspec(uuid("A4C65425-0F82-11D1-90C3-00C04FC2F568")) IEnumChannels;
struct __declspec(uuid("A6EF9860-C720-11D0-9337-00A0C90DCAA9")) IDispatchEx;
struct __declspec(uuid("A6EF9861-C720-11D0-9337-00A0C90DCAA9")) IDispError;
struct __declspec(uuid("A6EF9862-C720-11D0-9337-00A0C90DCAA9")) IVariantChangeType;
struct __declspec(uuid("AA5B6A80-B834-11D0-932F-00A0C90DCAA9")) IActiveScriptParseProcedure32;
struct __declspec(uuid("AFA0DC11-C313-11D0-831A-00C04FD5AE38")) IUrlHistoryStg2;
struct __declspec(uuid("B722BCC5-4E68-101B-A2BC-00AA00404770")) IOleDocument;
struct __declspec(uuid("B722BCC6-4E68-101B-A2BC-00AA00404770")) IOleDocumentView;
struct __declspec(uuid("B722BCC7-4E68-101B-A2BC-00AA00404770")) IOleDocumentSite;
struct __declspec(uuid("B722BCC8-4E68-101B-A2BC-00AA00404770")) IEnumOleDocumentViews;
struct __declspec(uuid("B722BCC9-4E68-101B-A2BC-00AA00404770")) IPrint;
struct __declspec(uuid("B722BCCA-4E68-101B-A2BC-00AA00404770")) IContinueCallback;
struct __declspec(uuid("B722BCCB-4E68-101B-A2BC-00AA00404770")) IOleCommandTarget;
struct __declspec(uuid("B8DA6310-E19B-11D0-933C-00A0C90DCAA9")) IActiveScriptStats;
struct __declspec(uuid("BAA342A0-2DED-11D0-86F4-00A0C913F750")) IImageDecodeEventSink;
struct __declspec(uuid("BB1A2AE1-A4F9-11CF-8F20-00805F2CD064")) IActiveScript;
struct __declspec(uuid("BB1A2AE2-A4F9-11CF-8F20-00805F2CD064")) IActiveScriptParse32;
struct __declspec(uuid("BC40BEC1-C493-11D0-831B-00C04FD5AE38")) IUrlHistoryNotify;
struct __declspec(uuid("BD3F23C0-D43E-11CF-893B-00AA00BDCE1A")) IDocHostUIHandler;
struct __declspec(uuid("C04D65CE-B70D-11D0-B188-00AA0038C969")) IMLangString;
struct __declspec(uuid("C04D65D0-B70D-11D0-B188-00AA0038C969")) IMLangStringWStr;
struct __declspec(uuid("C04D65D2-B70D-11D0-B188-00AA0038C969")) IMLangStringAStr;
struct __declspec(uuid("C4D244B0-D43E-11CF-893B-00AA00BDCE1A")) IDocHostShowUI;
struct __declspec(uuid("C64713B6-E029-4CC5-9200-438B72890B6A")) IActiveScriptParseProcedure64;
struct __declspec(uuid("C7EF7658-E1EE-480E-97EA-D52CB4D76D17")) IActiveScriptParse64;
struct __declspec(uuid("CA04B7E6-0D21-11D1-8CC5-00C04FC2B085")) IObjectIdentity;
struct __declspec(uuid("CB5BDC81-93C1-11CF-8F20-00805F2CD064")) IObjectSafety;
struct __declspec(uuid("D10F6761-83E9-11CF-8F20-00805F2CD064")) IActiveScriptSiteWindow;
struct __declspec(uuid("D24ACD21-BA72-11D0-B188-00AA0038C969")) IMLangStringBufW;
struct __declspec(uuid("D24ACD23-BA72-11D0-B188-00AA0038C969")) IMLangStringBufA;
struct __declspec(uuid("D30C1661-CDAF-11D0-8A3E-00C04FC9E26E")) IWebBrowser2;
struct __declspec(uuid("D66D6F98-CDAA-11D0-B822-00C04FC9B31F")) IMLangConvertCharset;
struct __declspec(uuid("D8F015C0-C278-11CE-A49E-444553540000")) IShellDispatch;
struct __declspec(uuid("D9E89500-30FA-11D0-B724-00AA006C1A01")) IMapMIMEToCLSID;
struct __declspec(uuid("DB01A1E3-A42B-11CF-8F20-00805F2CD064")) IActiveScriptSite;
struct __declspec(uuid("E0E270C0-C0BE-11D0-8FE4-00A0C90A6341")) OLEDBSimpleProvider;
struct __declspec(uuid("E0E270C1-C0BE-11D0-8FE4-00A0C90A6341")) OLEDBSimpleProviderListener;
struct __declspec(uuid("E7A1AF80-4D96-11CF-960C-0080C7F4EE85")) IShellFolderViewDual;
struct __declspec(uuid("EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B")) IWebBrowser;
struct __declspec(uuid("EAE1BA61-A4ED-11CF-8F20-00805F2CD064")) IActiveScriptError;
struct __declspec(uuid("F5BE2EE1-BFD7-11D0-B188-00AA0038C969")) IMLangLineBreakConsole;
struct __declspec(uuid("F77459A0-BF9A-11CF-BA4E-00C04FD70816")) IMimeInfo;
struct __declspec(uuid("FAC32C80-CBE4-11CE-8350-444553540000")) FolderItem;
struct __declspec(uuid("FE7C4271-210C-448D-9F54-76DAB7047B28")) IActiveScriptParseProcedure2_64;
struct __declspec(uuid("FECEAAA2-8405-11CF-8BA1-00AA00476DA6")) IOmHistory;
struct __declspec(uuid("FECEAAA5-8405-11CF-8BA1-00AA00476DA6")) IOmNavigator;
struct __declspec(uuid("ac60f6a0-0fd9-11d0-99cb-00c04fd64497")) IURLSearchHook;
struct __declspec(uuid("bcfce0a0-ec17-11d0-8d10-00a0c90f2719")) IContextMenu3;
struct __declspec(uuid("cabb0da0-da57-11cf-9974-0020afd79762")) IUniformResourceLocatorW;
struct __declspec(uuid("eb0fe172-1a3a-11d0-89b3-00a0c90a90ac")) IDeskBand;
struct __declspec(uuid("f1db8392-7331-11d0-8c99-00a0c92dbfe8")) IInputObjectSite;
struct __declspec(uuid("f490eb00-1240-11d1-9888-006097deacf9")) IActiveDesktop;
struct __declspec(uuid("fbf23b80-e3f0-101b-8488-00aa003e56f8")) IUniformResourceLocatorA;



class __declspec(uuid("00000017-0000-0000-c000-000000000046")) StdMarshal;
class __declspec(uuid("0000001b-0000-0000-c000-000000000046")) IdentityUnmarshal;
class __declspec(uuid("0000001c-0000-0000-c000-000000000046")) InProcFreeMarshaler;
class __declspec(uuid("0000030c-0000-0000-c000-000000000046")) PSGenObject;
class __declspec(uuid("0000030d-0000-0000-c000-000000000046")) PSClientSite;
class __declspec(uuid("0000030e-0000-0000-c000-000000000046")) PSClassObject;
class __declspec(uuid("0000030f-0000-0000-c000-000000000046")) PSInPlaceActive;
class __declspec(uuid("00000310-0000-0000-c000-000000000046")) PSInPlaceFrame;
class __declspec(uuid("00000311-0000-0000-c000-000000000046")) PSDragDrop;
class __declspec(uuid("00000312-0000-0000-c000-000000000046")) PSBindCtx;
class __declspec(uuid("00000313-0000-0000-c000-000000000046")) PSEnumerators;
class __declspec(uuid("00000315-0000-0000-c000-000000000046")) Picture_Metafile;
class __declspec(uuid("00000315-0000-0000-c000-000000000046")) StaticMetafile;
class __declspec(uuid("00000316-0000-0000-c000-000000000046")) Picture_Dib;
class __declspec(uuid("00000316-0000-0000-c000-000000000046")) StaticDib;
class __declspec(uuid("00000319-0000-0000-c000-000000000046")) Picture_EnhMetafile;
class __declspec(uuid("0000031d-0000-0000-c000-000000000046")) DCOMAccessControl;
class __declspec(uuid("00021400-0000-0000-c000-000000000046")) ShellDesktop;
class __declspec(uuid("00021401-0000-0000-c000-000000000046")) ShellLink;
class __declspec(uuid("0002DF01-0000-0000-C000-000000000046")) InternetExplorer;
class __declspec(uuid("0002e005-0000-0000-c000-000000000046")) StdComponentCategoriesMgr;
class __declspec(uuid("08165ea0-e946-11cf-9c87-00aa005127ed")) WebCrawlerAgent;
class __declspec(uuid("0A89A860-D7B1-11CE-8350-444553540000")) ShellDispatchInproc;
class __declspec(uuid("0D04D285-6BEC-11CF-8B97-00AA00476DA6")) OldHTMLFormElement;
class __declspec(uuid("0be35200-8f91-11ce-9de3-00aa004bb851")) CFontPropPage;
class __declspec(uuid("0be35201-8f91-11ce-9de3-00aa004bb851")) CColorPropPage;
class __declspec(uuid("0be35202-8f91-11ce-9de3-00aa004bb851")) CPicturePropPage;
class __declspec(uuid("0be35203-8f91-11ce-9de3-00aa004bb851")) StdFont;
class __declspec(uuid("0be35204-8f91-11ce-9de3-00aa004bb851")) StdPicture;
class __declspec(uuid("11219420-1768-11D1-95BE-00609797EA4F")) ShellLinkObject;
class __declspec(uuid("163BB1E1-6E00-11CF-837A-48DC04C10000")) HTMLLocation;
class __declspec(uuid("1820FED0-473E-11D0-A96C-00C04FD705A2")) WebViewFolderContents;
class __declspec(uuid("25336920-03F9-11CF-8FD0-00AA00686F13")) HTMLDocument;
class __declspec(uuid("25336921-03f9-11cf-8fd0-00aa00686f13")) HTMLPluginDocument;
class __declspec(uuid("275C23E2-3747-11D0-9FEA-00AA003F8646")) CMultiLanguage;
class __declspec(uuid("3050F241-98B5-11CF-BB82-00AA00BDCE0B")) HTMLImg;
class __declspec(uuid("3050F245-98B5-11CF-BB82-00AA00BDCE0B")) HTMLSelectElement;
class __declspec(uuid("3050F246-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTableCell;
class __declspec(uuid("3050F248-98B5-11CF-BB82-00AA00BDCE0B")) HTMLAnchorElement;
class __declspec(uuid("3050F249-98B5-11CF-BB82-00AA00BDCE0B")) HTMLDivPosition;
class __declspec(uuid("3050F24A-98B5-11CF-BB82-00AA00BDCE0B")) HTMLBody;
class __declspec(uuid("3050F24D-98B5-11CF-BB82-00AA00BDCE0B")) HTMLOptionElement;
class __declspec(uuid("3050F24E-98B5-11CF-BB82-00AA00BDCE0B")) HTMLObjectElement;
class __declspec(uuid("3050F251-98B5-11CF-BB82-00AA00BDCE0B")) HTMLFormElement;
class __declspec(uuid("3050F252-98B5-11CF-BB82-00AA00BDCE0B")) HTMLHRElement;
class __declspec(uuid("3050F25D-98B5-11CF-BB82-00AA00BDCE0B")) HTMLEmbed;
class __declspec(uuid("3050F268-98B5-11CF-BB82-00AA00BDCE0B")) HTMLUnknownElement;
class __declspec(uuid("3050F269-98B5-11CF-BB82-00AA00BDCE0B")) HTMLUListElement;
class __declspec(uuid("3050F26A-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTextElement;
class __declspec(uuid("3050F26B-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTable;
class __declspec(uuid("3050F26C-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTableCol;
class __declspec(uuid("3050F26D-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTableRow;
class __declspec(uuid("3050F26E-98B5-11CF-BB82-00AA00BDCE0B")) HTMLPhraseElement;
class __declspec(uuid("3050F26F-98B5-11CF-BB82-00AA00BDCE0B")) HTMLParaElement;
class __declspec(uuid("3050F270-98B5-11CF-BB82-00AA00BDCE0B")) HTMLOListElement;
class __declspec(uuid("3050F271-98B5-11CF-BB82-00AA00BDCE0B")) HTMLMapElement;
class __declspec(uuid("3050F272-98B5-11CF-BB82-00AA00BDCE0B")) HTMLListElement;
class __declspec(uuid("3050F273-98B5-11CF-BB82-00AA00BDCE0B")) HTMLLIElement;
class __declspec(uuid("3050F275-98B5-11CF-BB82-00AA00BDCE0B")) HTMLMetaElement;
class __declspec(uuid("3050F276-98B5-11CF-BB82-00AA00BDCE0B")) HTMLBaseElement;
class __declspec(uuid("3050F277-98B5-11CF-BB82-00AA00BDCE0B")) HTMLLinkElement;
class __declspec(uuid("3050F278-98B5-11CF-BB82-00AA00BDCE0B")) HTMLIsIndexElement;
class __declspec(uuid("3050F279-98B5-11CF-BB82-00AA00BDCE0B")) HTMLNextIdElement;
class __declspec(uuid("3050F27A-98B5-11CF-BB82-00AA00BDCE0B")) HTMLHeaderElement;
class __declspec(uuid("3050F27B-98B5-11CF-BB82-00AA00BDCE0B")) HTMLFontElement;
class __declspec(uuid("3050F27C-98B5-11CF-BB82-00AA00BDCE0B")) HTMLDTElement;
class __declspec(uuid("3050F27D-98B5-11CF-BB82-00AA00BDCE0B")) HTMLDListElement;
class __declspec(uuid("3050F27E-98B5-11CF-BB82-00AA00BDCE0B")) HTMLDivElement;
class __declspec(uuid("3050F27F-98B5-11CF-BB82-00AA00BDCE0B")) HTMLDDElement;
class __declspec(uuid("3050F280-98B5-11CF-BB82-00AA00BDCE0B")) HTMLBRElement;
class __declspec(uuid("3050F281-98B5-11CF-BB82-00AA00BDCE0B")) HTMLBlockElement;
class __declspec(uuid("3050F282-98B5-11CF-BB82-00AA00BDCE0B")) HTMLBaseFontElement;
class __declspec(uuid("3050F283-98B5-11CF-BB82-00AA00BDCE0B")) HTMLAreaElement;
class __declspec(uuid("3050F284-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTitleElement;
class __declspec(uuid("3050F285-98B5-11CF-BB82-00AA00BDCE0B")) HTMLStyle;
class __declspec(uuid("3050F28A-98B5-11CF-BB82-00AA00BDCE0B")) HTMLDialog;
class __declspec(uuid("3050F28C-98B5-11CF-BB82-00AA00BDCE0B")) HTMLScriptElement;
class __declspec(uuid("3050F2AB-98B5-11CF-BB82-00AA00BDCE0B")) HTMLInputTextElement;
class __declspec(uuid("3050F2AC-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTextAreaElement;
class __declspec(uuid("3050F2AE-98B5-11CF-BB82-00AA00BDCE0B")) HTMLInputFileElement;
class __declspec(uuid("3050F2B4-98B5-11CF-BB82-00AA00BDCE0B")) HTMLInputButtonElement;
class __declspec(uuid("3050F2B9-98B5-11CF-BB82-00AA00BDCE0B")) HTMLMarqueeElement;
class __declspec(uuid("3050F2BE-98B5-11CF-BB82-00AA00BDCE0B")) HTMLOptionButtonElement;
class __declspec(uuid("3050F2C4-98B5-11CF-BB82-00AA00BDCE0B")) HTMLInputImage;
class __declspec(uuid("3050F2C6-98B5-11CF-BB82-00AA00BDCE0B")) HTMLButtonElement;
class __declspec(uuid("3050F2E4-98B5-11CF-BB82-00AA00BDCE0B")) HTMLStyleSheet;
class __declspec(uuid("3050F2E9-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTableSection;
class __declspec(uuid("3050F2EC-98B5-11CF-BB82-00AA00BDCE0B")) HTMLTableCaption;
class __declspec(uuid("3050F312-98B5-11CF-BB82-00AA00BDCE0B")) HTMLFrameBase;
class __declspec(uuid("3050F314-98B5-11CF-BB82-00AA00BDCE0B")) HTMLFrameElement;
class __declspec(uuid("3050F316-98B5-11CF-BB82-00AA00BDCE0B")) HTMLIFrame;
class __declspec(uuid("3050F317-98B5-11CF-BB82-00AA00BDCE0B")) HTMLCommentElement;
class __declspec(uuid("3050F31A-98B5-11CF-BB82-00AA00BDCE0B")) HTMLFrameSetSite;
class __declspec(uuid("3050F32B-98B5-11CF-BB82-00AA00BDCE0B")) HTMLLabelElement;
class __declspec(uuid("3050F35D-98B5-11CF-BB82-00AA00BDCE0B")) HTMLScreen;
class __declspec(uuid("3050F370-98B5-11CF-BB82-00AA00BDCE0B")) HTMLBGsound;
class __declspec(uuid("3050F37D-98B5-11CF-BB82-00AA00BDCE0B")) HTMLStyleElement;
class __declspec(uuid("3050F37F-98B5-11CF-BB82-00AA00BDCE0B")) HTMLStyleSheetsCollection;
class __declspec(uuid("3050F38B-98B5-11CF-BB82-00AA00BDCE0B")) HTMLNoShowElement;
class __declspec(uuid("3050F38D-98B5-11CF-BB82-00AA00BDCE0B")) HTMLOptionElementFactory;
class __declspec(uuid("3050F38F-98B5-11CF-BB82-00AA00BDCE0B")) HTMLImageElementFactory;
class __declspec(uuid("3050F391-98B5-11CF-BB82-00AA00BDCE0B")) HTMLWindowProxy;
class __declspec(uuid("3050F3CD-98B5-11CF-BB82-00AA00BDCE0B")) HTMLStyleSheetRulesCollection;
class __declspec(uuid("3050F3CE-98B5-11CF-BB82-00AA00BDCE0B")) HTMLStyleSheetRule;
class __declspec(uuid("3050F3D0-98B5-11CF-BB82-00AA00BDCE0B")) HTMLRuleStyle;
class __declspec(uuid("3050F3D4-98B5-11CF-BB82-00AA00BDCE0B")) HTMLStyleFontFace;
class __declspec(uuid("3050F3E6-98B5-11CF-BB82-00AA00BDCE0B")) HTMLSpanFlow;
class __declspec(uuid("3050F3E8-98B5-11CF-BB82-00AA00BDCE0B")) HTMLFieldSetElement;
class __declspec(uuid("3050F3E9-98B5-11CF-BB82-00AA00BDCE0B")) HTMLLegendElement;
class __declspec(uuid("3050F3EF-98B5-11CF-BB82-00AA00BDCE0B")) HTMLFiltersCollection;
class __declspec(uuid("3050F3F5-98B4-11CF-BB82-00AA00BDCE0B")) HTMLSpanElement;
class __declspec(uuid("3050F3FE-98B5-11CF-BB82-00AA00BDCE0B")) CMimeTypes;
class __declspec(uuid("3050F3FF-98B5-11CF-BB82-00AA00BDCE0B")) CPlugins;
class __declspec(uuid("3050F402-98B5-11CF-BB82-00AA00BDCE0B")) COpsProfile;
class __declspec(uuid("3050f3d9-98b5-11cf-bb82-00aa00bdce0b")) MHTMLDocument;
class __declspec(uuid("32b533bb-edae-11d0-bd5a-00aa00b92af1")) ClassInstallFilter;
class __declspec(uuid("3c374a40-bae4-11cf-bf7d-00aa006946ee")) CUrlHistory;
class __declspec(uuid("3dd53d40-7b8b-11d0-b013-00aa0059ce02")) CdlProtocol;
class __declspec(uuid("54c37cd0-d944-11d0-a9f4-006097942311")) StdEncodingFilterFac;
class __declspec(uuid("56fdf344-fd6d-11d0-958a-006097c9a090")) TaskbarList;
class __declspec(uuid("62112AA1-EBE4-11CF-A5FB-0020AFE7292D")) ShellFolderView;
class __declspec(uuid("63b51f81-c868-11d0-999c-00c04fd655e1")) CFSIconOverlayManager;
class __declspec(uuid("64AB4BB7-111E-11D1-8F79-00C04FC2FBE1")) ShellUIHelper;
class __declspec(uuid("75048700-ef1f-11d0-9888-006097deacf9")) ActiveDesktop;
class __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) StdHlink;
class __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) StdHlinkBrowseContext;
class __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) StdURLMoniker;
class __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) StdURLProtocol;
class __declspec(uuid("79eac9e2-baf9-11ce-8c82-00aa004ba90b")) HttpProtocol;
class __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) FtpProtocol;
class __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) GopherProtocol;
class __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) HttpSProtocol;
class __declspec(uuid("79eac9e6-baf9-11ce-8c82-00aa004ba90b")) MkProtocol;
class __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) FileProtocol;
class __declspec(uuid("79eac9f2-baf9-11ce-8c82-00aa004ba90b")) UrlMkBindCtx;
class __declspec(uuid("7b8a2d94-0ac9-11d1-896c-00c04fb6bfc4")) InternetSecurityManager;
class __declspec(uuid("7b8a2d95-0ac9-11d1-896c-00c04fb6bfc4")) InternetZoneManager;
class __declspec(uuid("7d559c10-9fe9-11d0-93f7-00aa0059ce02")) CDLAgent;
class __declspec(uuid("7d688a77-c613-11d0-999b-00c04fd655e1")) OverlayIdentifier_SlowFile;
class __declspec(uuid("7ebdaae0-8120-11cf-899f-00aa00688b10")) StockFontPage;
class __declspec(uuid("7ebdaae1-8120-11cf-899f-00aa00688b10")) StockColorPage;
class __declspec(uuid("7ebdaae2-8120-11cf-899f-00aa00688b10")) StockPicturePage;
class __declspec(uuid("8856F961-340A-11D0-A96B-00C04FD705A2")) WebBrowser;
class __declspec(uuid("8f6b0360-b80d-11d0-a9b3-006097942311")) DeCompMimeFilter;
class __declspec(uuid("9BA05971-F6A8-11CF-A442-00A0C90A8F39")) ShellFolderViewOC;
class __declspec(uuid("9BA05972-F6A8-11CF-A442-00A0C90A8F39")) ShellWindows;
class __declspec(uuid("ABBE31D0-6DAE-11D0-BECA-00C04FD940BE")) SubscriptionMgr;
class __declspec(uuid("B3CDAE90-D170-11D0-802B-00C04FD75D13")) ChannelMgr;
class __declspec(uuid("C04D65CF-B70D-11D0-B188-00AA0038C969")) CMLangString;
class __declspec(uuid("D48A6EC6-6A4A-11CF-94A7-444553540000")) HTMLWindow2;
class __declspec(uuid("D48A6EC9-6A4A-11CF-94A7-444553540000")) OldHTMLDocument;
class __declspec(uuid("D66D6F99-CDAA-11D0-B822-00C04FC9B31F")) CMLangConvertCharset;
class __declspec(uuid("EAB22AC3-30C1-11CF-A7EB-0000C05BAE0B")) WebBrowser_V1;
class __declspec(uuid("FECEAAA3-8405-11CF-8BA1-00AA00476DA6")) HTMLHistory;
class __declspec(uuid("FECEAAA6-8405-11CF-8BA1-00AA00476DA6")) HTMLNavigator;
class __declspec(uuid("b15b8dc0-c7e1-11d0-8680-00aa00bdcb71")) SoftDistExt;
class __declspec(uuid("cfbfae00-17a6-11d0-99cb-00c04fd64497")) CURLSearchHook;
class __declspec(uuid("e3a8bde6-abce-11d0-bc4b-00c04fd929db")) ChannelAgent;
class __declspec(uuid("fb8f0821-0164-101b-84ed-08002b2ec713")) PersistPropset;
class __declspec(uuid("fb8f0822-0164-101b-84ed-08002b2ec713")) ConvertVBX;
class __declspec(uuid("fbf23b40-e3f0-101b-8488-00aa003e56f8")) InternetShortcut;



typedef _com_ptr_t<_com_IIID<FolderItem, &__uuidof(FolderItem)> > FolderItemPtr;
typedef _com_ptr_t<_com_IIID<FolderItemVerb, &__uuidof(FolderItemVerb)> > FolderItemVerbPtr;
typedef _com_ptr_t<_com_IIID<FolderItemVerbs, &__uuidof(FolderItemVerbs)> > FolderItemVerbsPtr;
typedef _com_ptr_t<_com_IIID<FolderItems, &__uuidof(FolderItems)> > FolderItemsPtr;
typedef _com_ptr_t<_com_IIID<IAccessible, &__uuidof(IAccessible)> > IAccessiblePtr;
typedef _com_ptr_t<_com_IIID<IActiveDesktop, &__uuidof(IActiveDesktop)> > IActiveDesktopPtr;
typedef _com_ptr_t<_com_IIID<IActiveScript, &__uuidof(IActiveScript)> > IActiveScriptPtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptError, &__uuidof(IActiveScriptError)> > IActiveScriptErrorPtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptParse32, &__uuidof(IActiveScriptParse32)> > IActiveScriptParsePtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptParseProcedure32, &__uuidof(IActiveScriptParseProcedure32)> > IActiveScriptParseProcedurePtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptParseProcedure2_32, &__uuidof(IActiveScriptParseProcedure2_32)> > IActiveScriptParseProcedure2Ptr;
typedef _com_ptr_t<_com_IIID<IActiveScriptParseProcedureOld32, &__uuidof(IActiveScriptParseProcedureOld32)> > IActiveScriptParseProcedureOldPtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptSite, &__uuidof(IActiveScriptSite)> > IActiveScriptSitePtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptSiteInterruptPoll, &__uuidof(IActiveScriptSiteInterruptPoll)> > IActiveScriptSiteInterruptPollPtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptSiteWindow, &__uuidof(IActiveScriptSiteWindow)> > IActiveScriptSiteWindowPtr;
typedef _com_ptr_t<_com_IIID<IActiveScriptStats, &__uuidof(IActiveScriptStats)> > IActiveScriptStatsPtr;
typedef _com_ptr_t<_com_IIID<IAdviseSink, &__uuidof(IAdviseSink)> > IAdviseSinkPtr;
typedef _com_ptr_t<_com_IIID<IAdviseSink2, &__uuidof(IAdviseSink2)> > IAdviseSink2Ptr;
typedef _com_ptr_t<_com_IIID<IAdviseSinkEx, &__uuidof(IAdviseSinkEx)> > IAdviseSinkExPtr;
typedef _com_ptr_t<_com_IIID<IAsyncManager, &__uuidof(IAsyncManager)> > IAsyncManagerPtr;
typedef _com_ptr_t<_com_IIID<IAuthenticate, &__uuidof(IAuthenticate)> > IAuthenticatePtr;
typedef _com_ptr_t<_com_IIID<IBindCtx, &__uuidof(IBindCtx)> > IBindCtxPtr;
typedef _com_ptr_t<_com_IIID<IBindEventHandler, &__uuidof(IBindEventHandler)> > IBindEventHandlerPtr;
typedef _com_ptr_t<_com_IIID<IBindHost, &__uuidof(IBindHost)> > IBindHostPtr;
typedef _com_ptr_t<_com_IIID<IBindProtocol, &__uuidof(IBindProtocol)> > IBindProtocolPtr;
typedef _com_ptr_t<_com_IIID<IBindStatusCallback, &__uuidof(IBindStatusCallback)> > IBindStatusCallbackPtr;
typedef _com_ptr_t<_com_IIID<IBinding, &__uuidof(IBinding)> > IBindingPtr;
typedef _com_ptr_t<_com_IIID<ICSSFilter, &__uuidof(ICSSFilter)> > ICSSFilterPtr;
typedef _com_ptr_t<_com_IIID<ICSSFilterSite, &__uuidof(ICSSFilterSite)> > ICSSFilterSitePtr;
typedef _com_ptr_t<_com_IIID<ICancelMethodCalls, &__uuidof(ICancelMethodCalls)> > ICancelMethodCallsPtr;
typedef _com_ptr_t<_com_IIID<ICatInformation, &__uuidof(ICatInformation)> > ICatInformationPtr;
typedef _com_ptr_t<_com_IIID<ICatRegister, &__uuidof(ICatRegister)> > ICatRegisterPtr;
typedef _com_ptr_t<_com_IIID<IChannelHook, &__uuidof(IChannelHook)> > IChannelHookPtr;
typedef _com_ptr_t<_com_IIID<IChannelMgr, &__uuidof(IChannelMgr)> > IChannelMgrPtr;
typedef _com_ptr_t<_com_IIID<IClassActivator, &__uuidof(IClassActivator)> > IClassActivatorPtr;
typedef _com_ptr_t<_com_IIID<IClassFactory, &__uuidof(IClassFactory)> > IClassFactoryPtr;
typedef _com_ptr_t<_com_IIID<IClassFactory2, &__uuidof(IClassFactory2)> > IClassFactory2Ptr;
typedef _com_ptr_t<_com_IIID<IClientSecurity, &__uuidof(IClientSecurity)> > IClientSecurityPtr;
typedef _com_ptr_t<_com_IIID<ICodeInstall, &__uuidof(ICodeInstall)> > ICodeInstallPtr;
typedef _com_ptr_t<_com_IIID<ICommDlgBrowser, &__uuidof(ICommDlgBrowser)> > ICommDlgBrowserPtr;
typedef _com_ptr_t<_com_IIID<IConnectionPoint, &__uuidof(IConnectionPoint)> > IConnectionPointPtr;
typedef _com_ptr_t<_com_IIID<IConnectionPointContainer, &__uuidof(IConnectionPointContainer)> > IConnectionPointContainerPtr;
typedef _com_ptr_t<_com_IIID<IContextMenu, &__uuidof(IContextMenu)> > IContextMenuPtr;
typedef _com_ptr_t<_com_IIID<IContextMenu2, &__uuidof(IContextMenu2)> > IContextMenu2Ptr;
typedef _com_ptr_t<_com_IIID<IContextMenu3, &__uuidof(IContextMenu3)> > IContextMenu3Ptr;
typedef _com_ptr_t<_com_IIID<IContinue, &__uuidof(IContinue)> > IContinuePtr;
typedef _com_ptr_t<_com_IIID<IContinueCallback, &__uuidof(IContinueCallback)> > IContinueCallbackPtr;
typedef _com_ptr_t<_com_IIID<ICreateErrorInfo, &__uuidof(ICreateErrorInfo)> > ICreateErrorInfoPtr;
typedef _com_ptr_t<_com_IIID<ICreateTypeInfo, &__uuidof(ICreateTypeInfo)> > ICreateTypeInfoPtr;
typedef _com_ptr_t<_com_IIID<ICreateTypeInfo2, &__uuidof(ICreateTypeInfo2)> > ICreateTypeInfo2Ptr;
typedef _com_ptr_t<_com_IIID<ICreateTypeLib, &__uuidof(ICreateTypeLib)> > ICreateTypeLibPtr;
typedef _com_ptr_t<_com_IIID<ICreateTypeLib2, &__uuidof(ICreateTypeLib2)> > ICreateTypeLib2Ptr;
typedef _com_ptr_t<_com_IIID<ICustomDoc, &__uuidof(ICustomDoc)> > ICustomDocPtr;
typedef _com_ptr_t<_com_IIID<IDataAdviseHolder, &__uuidof(IDataAdviseHolder)> > IDataAdviseHolderPtr;
typedef _com_ptr_t<_com_IIID<IDataFilter, &__uuidof(IDataFilter)> > IDataFilterPtr;
typedef _com_ptr_t<_com_IIID<IDataObject, &__uuidof(IDataObject)> > IDataObjectPtr;
typedef _com_ptr_t<_com_IIID<IDeskBand, &__uuidof(IDeskBand)> > IDeskBandPtr;
typedef _com_ptr_t<_com_IIID<IDirectWriterLock, &__uuidof(IDirectWriterLock)> > IDirectWriterLockPtr;
typedef _com_ptr_t<_com_IIID<IDispError, &__uuidof(IDispError)> > IDispErrorPtr;
typedef _com_ptr_t<_com_IIID<IDispatch, &__uuidof(IDispatch)> > IDispatchPtr;
typedef _com_ptr_t<_com_IIID<IDispatchEx, &__uuidof(IDispatchEx)> > IDispatchExPtr;
typedef _com_ptr_t<_com_IIID<IDocHostShowUI, &__uuidof(IDocHostShowUI)> > IDocHostShowUIPtr;
typedef _com_ptr_t<_com_IIID<IDocHostUIHandler, &__uuidof(IDocHostUIHandler)> > IDocHostUIHandlerPtr;
typedef _com_ptr_t<_com_IIID<IDockingWindow, &__uuidof(IDockingWindow)> > IDockingWindowPtr;
typedef _com_ptr_t<_com_IIID<IDockingWindowFrame, &__uuidof(IDockingWindowFrame)> > IDockingWindowFramePtr;
typedef _com_ptr_t<_com_IIID<IDockingWindowSite, &__uuidof(IDockingWindowSite)> > IDockingWindowSitePtr;
typedef _com_ptr_t<_com_IIID<IDropSource, &__uuidof(IDropSource)> > IDropSourcePtr;
typedef _com_ptr_t<_com_IIID<IDropTarget, &__uuidof(IDropTarget)> > IDropTargetPtr;
typedef _com_ptr_t<_com_IIID<IEncodingFilterFactory, &__uuidof(IEncodingFilterFactory)> > IEncodingFilterFactoryPtr;
typedef _com_ptr_t<_com_IIID<IEnumCATEGORYINFO, &__uuidof(IEnumCATEGORYINFO)> > IEnumCATEGORYINFOPtr;
typedef _com_ptr_t<_com_IIID<IEnumChannels, &__uuidof(IEnumChannels)> > IEnumChannelsPtr;
typedef _com_ptr_t<_com_IIID<IEnumCodePage, &__uuidof(IEnumCodePage)> > IEnumCodePagePtr;
typedef _com_ptr_t<_com_IIID<IEnumConnectionPoints, &__uuidof(IEnumConnectionPoints)> > IEnumConnectionPointsPtr;
typedef _com_ptr_t<_com_IIID<IEnumConnections, &__uuidof(IEnumConnections)> > IEnumConnectionsPtr;
typedef _com_ptr_t<_com_IIID<IEnumFORMATETC, &__uuidof(IEnumFORMATETC)> > IEnumFORMATETCPtr;
typedef _com_ptr_t<_com_IIID<IEnumGUID, &__uuidof(IEnumGUID)> > IEnumGUIDPtr;
typedef _com_ptr_t<_com_IIID<IEnumHLITEM, &__uuidof(IEnumHLITEM)> > IEnumHLITEMPtr;
typedef _com_ptr_t<_com_IIID<IEnumIDList, &__uuidof(IEnumIDList)> > IEnumIDListPtr;
typedef _com_ptr_t<_com_IIID<IEnumMoniker, &__uuidof(IEnumMoniker)> > IEnumMonikerPtr;
typedef _com_ptr_t<_com_IIID<IEnumOLEVERB, &__uuidof(IEnumOLEVERB)> > IEnumOLEVERBPtr;
typedef _com_ptr_t<_com_IIID<IEnumOleDocumentViews, &__uuidof(IEnumOleDocumentViews)> > IEnumOleDocumentViewsPtr;
typedef _com_ptr_t<_com_IIID<IEnumOleUndoUnits, &__uuidof(IEnumOleUndoUnits)> > IEnumOleUndoUnitsPtr;
typedef _com_ptr_t<_com_IIID<IEnumRfc1766, &__uuidof(IEnumRfc1766)> > IEnumRfc1766Ptr;
typedef _com_ptr_t<_com_IIID<IEnumSTATDATA, &__uuidof(IEnumSTATDATA)> > IEnumSTATDATAPtr;
typedef _com_ptr_t<_com_IIID<IEnumSTATPROPSETSTG, &__uuidof(IEnumSTATPROPSETSTG)> > IEnumSTATPROPSETSTGPtr;
typedef _com_ptr_t<_com_IIID<IEnumSTATPROPSTG, &__uuidof(IEnumSTATPROPSTG)> > IEnumSTATPROPSTGPtr;
typedef _com_ptr_t<_com_IIID<IEnumSTATSTG, &__uuidof(IEnumSTATSTG)> > IEnumSTATSTGPtr;
typedef _com_ptr_t<_com_IIID<IEnumSTATURL, &__uuidof(IEnumSTATURL)> > IEnumSTATURLPtr;
typedef _com_ptr_t<_com_IIID<IEnumString, &__uuidof(IEnumString)> > IEnumStringPtr;
typedef _com_ptr_t<_com_IIID<IEnumUnknown, &__uuidof(IEnumUnknown)> > IEnumUnknownPtr;
typedef _com_ptr_t<_com_IIID<IEnumVARIANT, &__uuidof(IEnumVARIANT)> > IEnumVARIANTPtr;
typedef _com_ptr_t<_com_IIID<IErrorInfo, &__uuidof(IErrorInfo)> > IErrorInfoPtr;
typedef _com_ptr_t<_com_IIID<IErrorLog, &__uuidof(IErrorLog)> > IErrorLogPtr;
typedef _com_ptr_t<_com_IIID<IExtensionServices, &__uuidof(IExtensionServices)> > IExtensionServicesPtr;
typedef _com_ptr_t<_com_IIID<IExternalConnection, &__uuidof(IExternalConnection)> > IExternalConnectionPtr;
typedef _com_ptr_t<_com_IIID<IExtractIconA, &__uuidof(IExtractIconA)> > IExtractIconAPtr;
typedef _com_ptr_t<_com_IIID<IExtractIconW, &__uuidof(IExtractIconW)> > IExtractIconWPtr;
typedef _com_ptr_t<_com_IIID<IFileViewerA, &__uuidof(IFileViewerA)> > IFileViewerAPtr;
typedef _com_ptr_t<_com_IIID<IFileViewerSite, &__uuidof(IFileViewerSite)> > IFileViewerSitePtr;
typedef _com_ptr_t<_com_IIID<IFileViewerW, &__uuidof(IFileViewerW)> > IFileViewerWPtr;
typedef _com_ptr_t<_com_IIID<IFillLockBytes, &__uuidof(IFillLockBytes)> > IFillLockBytesPtr;
typedef _com_ptr_t<_com_IIID<IFilter, &__uuidof(IFilter)> > IFilterPtr;
typedef _com_ptr_t<_com_IIID<IFolderViewOC, &__uuidof(IFolderViewOC)> > IFolderViewOCPtr;
typedef _com_ptr_t<_com_IIID<IFont, &__uuidof(IFont)> > IFontPtr;
typedef _com_ptr_t<_com_IIID<IFontDisp, &__uuidof(IFontDisp)> > IFontDispPtr;
typedef _com_ptr_t<_com_IIID<IFontEventsDisp, &__uuidof(IFontEventsDisp)> > IFontEventsDispPtr;
typedef _com_ptr_t<_com_IIID<IGlobalInterfaceTable, &__uuidof(IGlobalInterfaceTable)> > IGlobalInterfaceTablePtr;
typedef _com_ptr_t<_com_IIID<IHTMLAnchorElement, &__uuidof(IHTMLAnchorElement)> > IHTMLAnchorElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLAreaElement, &__uuidof(IHTMLAreaElement)> > IHTMLAreaElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLAreasCollection, &__uuidof(IHTMLAreasCollection)> > IHTMLAreasCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLBGsound, &__uuidof(IHTMLBGsound)> > IHTMLBGsoundPtr;
typedef _com_ptr_t<_com_IIID<IHTMLBRElement, &__uuidof(IHTMLBRElement)> > IHTMLBRElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLBaseElement, &__uuidof(IHTMLBaseElement)> > IHTMLBaseElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLBaseFontElement, &__uuidof(IHTMLBaseFontElement)> > IHTMLBaseFontElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLBlockElement, &__uuidof(IHTMLBlockElement)> > IHTMLBlockElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLBodyElement, &__uuidof(IHTMLBodyElement)> > IHTMLBodyElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLButtonElement, &__uuidof(IHTMLButtonElement)> > IHTMLButtonElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLCommentElement, &__uuidof(IHTMLCommentElement)> > IHTMLCommentElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLControlElement, &__uuidof(IHTMLControlElement)> > IHTMLControlElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLControlRange, &__uuidof(IHTMLControlRange)> > IHTMLControlRangePtr;
typedef _com_ptr_t<_com_IIID<IHTMLDDElement, &__uuidof(IHTMLDDElement)> > IHTMLDDElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDListElement, &__uuidof(IHTMLDListElement)> > IHTMLDListElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDTElement, &__uuidof(IHTMLDTElement)> > IHTMLDTElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDatabinding, &__uuidof(IHTMLDatabinding)> > IHTMLDatabindingPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDialog, &__uuidof(IHTMLDialog)> > IHTMLDialogPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDivElement, &__uuidof(IHTMLDivElement)> > IHTMLDivElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDivPosition, &__uuidof(IHTMLDivPosition)> > IHTMLDivPositionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDocument, &__uuidof(IHTMLDocument)> > IHTMLDocumentPtr;
typedef _com_ptr_t<_com_IIID<IHTMLDocument2, &__uuidof(IHTMLDocument2)> > IHTMLDocument2Ptr;
typedef _com_ptr_t<_com_IIID<IHTMLElement, &__uuidof(IHTMLElement)> > IHTMLElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLElementCollection, &__uuidof(IHTMLElementCollection)> > IHTMLElementCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLEmbedElement, &__uuidof(IHTMLEmbedElement)> > IHTMLEmbedElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLEventObj, &__uuidof(IHTMLEventObj)> > IHTMLEventObjPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFieldSetElement, &__uuidof(IHTMLFieldSetElement)> > IHTMLFieldSetElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFiltersCollection, &__uuidof(IHTMLFiltersCollection)> > IHTMLFiltersCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFontElement, &__uuidof(IHTMLFontElement)> > IHTMLFontElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFontNamesCollection, &__uuidof(IHTMLFontNamesCollection)> > IHTMLFontNamesCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFontSizesCollection, &__uuidof(IHTMLFontSizesCollection)> > IHTMLFontSizesCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFormElement, &__uuidof(IHTMLFormElement)> > IHTMLFormElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFrameBase, &__uuidof(IHTMLFrameBase)> > IHTMLFrameBasePtr;
typedef _com_ptr_t<_com_IIID<IHTMLFrameElement, &__uuidof(IHTMLFrameElement)> > IHTMLFrameElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFrameSetElement, &__uuidof(IHTMLFrameSetElement)> > IHTMLFrameSetElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLFramesCollection2, &__uuidof(IHTMLFramesCollection2)> > IHTMLFramesCollection2Ptr;
typedef _com_ptr_t<_com_IIID<IHTMLHRElement, &__uuidof(IHTMLHRElement)> > IHTMLHRElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLHeaderElement, &__uuidof(IHTMLHeaderElement)> > IHTMLHeaderElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLIFrameElement, &__uuidof(IHTMLIFrameElement)> > IHTMLIFrameElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLImageElementFactory, &__uuidof(IHTMLImageElementFactory)> > IHTMLImageElementFactoryPtr;
typedef _com_ptr_t<_com_IIID<IHTMLImgElement, &__uuidof(IHTMLImgElement)> > IHTMLImgElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLInputButtonElement, &__uuidof(IHTMLInputButtonElement)> > IHTMLInputButtonElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLInputFileElement, &__uuidof(IHTMLInputFileElement)> > IHTMLInputFileElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLInputHiddenElement, &__uuidof(IHTMLInputHiddenElement)> > IHTMLInputHiddenElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLInputImage, &__uuidof(IHTMLInputImage)> > IHTMLInputImagePtr;
typedef _com_ptr_t<_com_IIID<IHTMLInputTextElement, &__uuidof(IHTMLInputTextElement)> > IHTMLInputTextElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLIsIndexElement, &__uuidof(IHTMLIsIndexElement)> > IHTMLIsIndexElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLLIElement, &__uuidof(IHTMLLIElement)> > IHTMLLIElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLLabelElement, &__uuidof(IHTMLLabelElement)> > IHTMLLabelElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLLegendElement, &__uuidof(IHTMLLegendElement)> > IHTMLLegendElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLLinkElement, &__uuidof(IHTMLLinkElement)> > IHTMLLinkElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLListElement, &__uuidof(IHTMLListElement)> > IHTMLListElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLLocation, &__uuidof(IHTMLLocation)> > IHTMLLocationPtr;
typedef _com_ptr_t<_com_IIID<IHTMLMapElement, &__uuidof(IHTMLMapElement)> > IHTMLMapElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLMarqueeElement, &__uuidof(IHTMLMarqueeElement)> > IHTMLMarqueeElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLMetaElement, &__uuidof(IHTMLMetaElement)> > IHTMLMetaElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLMimeTypesCollection, &__uuidof(IHTMLMimeTypesCollection)> > IHTMLMimeTypesCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLNextIdElement, &__uuidof(IHTMLNextIdElement)> > IHTMLNextIdElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLNoShowElement, &__uuidof(IHTMLNoShowElement)> > IHTMLNoShowElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLOListElement, &__uuidof(IHTMLOListElement)> > IHTMLOListElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLObjectElement, &__uuidof(IHTMLObjectElement)> > IHTMLObjectElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLOpsProfile, &__uuidof(IHTMLOpsProfile)> > IHTMLOpsProfilePtr;
typedef _com_ptr_t<_com_IIID<IHTMLOptionButtonElement, &__uuidof(IHTMLOptionButtonElement)> > IHTMLOptionButtonElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLOptionElement, &__uuidof(IHTMLOptionElement)> > IHTMLOptionElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLOptionElementFactory, &__uuidof(IHTMLOptionElementFactory)> > IHTMLOptionElementFactoryPtr;
typedef _com_ptr_t<_com_IIID<IHTMLOptionsHolder, &__uuidof(IHTMLOptionsHolder)> > IHTMLOptionsHolderPtr;
typedef _com_ptr_t<_com_IIID<IHTMLParaElement, &__uuidof(IHTMLParaElement)> > IHTMLParaElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLPhraseElement, &__uuidof(IHTMLPhraseElement)> > IHTMLPhraseElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLPluginsCollection, &__uuidof(IHTMLPluginsCollection)> > IHTMLPluginsCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLRuleStyle, &__uuidof(IHTMLRuleStyle)> > IHTMLRuleStylePtr;
typedef _com_ptr_t<_com_IIID<IHTMLScreen, &__uuidof(IHTMLScreen)> > IHTMLScreenPtr;
typedef _com_ptr_t<_com_IIID<IHTMLScriptElement, &__uuidof(IHTMLScriptElement)> > IHTMLScriptElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLSelectElement, &__uuidof(IHTMLSelectElement)> > IHTMLSelectElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLSelectionObject, &__uuidof(IHTMLSelectionObject)> > IHTMLSelectionObjectPtr;
typedef _com_ptr_t<_com_IIID<IHTMLSpanElement, &__uuidof(IHTMLSpanElement)> > IHTMLSpanElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLSpanFlow, &__uuidof(IHTMLSpanFlow)> > IHTMLSpanFlowPtr;
typedef _com_ptr_t<_com_IIID<IHTMLStyle, &__uuidof(IHTMLStyle)> > IHTMLStylePtr;
typedef _com_ptr_t<_com_IIID<IHTMLStyleElement, &__uuidof(IHTMLStyleElement)> > IHTMLStyleElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLStyleFontFace, &__uuidof(IHTMLStyleFontFace)> > IHTMLStyleFontFacePtr;
typedef _com_ptr_t<_com_IIID<IHTMLStyleSheet, &__uuidof(IHTMLStyleSheet)> > IHTMLStyleSheetPtr;
typedef _com_ptr_t<_com_IIID<IHTMLStyleSheetRule, &__uuidof(IHTMLStyleSheetRule)> > IHTMLStyleSheetRulePtr;
typedef _com_ptr_t<_com_IIID<IHTMLStyleSheetRulesCollection, &__uuidof(IHTMLStyleSheetRulesCollection)> > IHTMLStyleSheetRulesCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLStyleSheetsCollection, &__uuidof(IHTMLStyleSheetsCollection)> > IHTMLStyleSheetsCollectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTable, &__uuidof(IHTMLTable)> > IHTMLTablePtr;
typedef _com_ptr_t<_com_IIID<IHTMLTableCaption, &__uuidof(IHTMLTableCaption)> > IHTMLTableCaptionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTableCell, &__uuidof(IHTMLTableCell)> > IHTMLTableCellPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTableCol, &__uuidof(IHTMLTableCol)> > IHTMLTableColPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTableRow, &__uuidof(IHTMLTableRow)> > IHTMLTableRowPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTableSection, &__uuidof(IHTMLTableSection)> > IHTMLTableSectionPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTextAreaElement, &__uuidof(IHTMLTextAreaElement)> > IHTMLTextAreaElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTextContainer, &__uuidof(IHTMLTextContainer)> > IHTMLTextContainerPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTextElement, &__uuidof(IHTMLTextElement)> > IHTMLTextElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTitleElement, &__uuidof(IHTMLTitleElement)> > IHTMLTitleElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLTxtRange, &__uuidof(IHTMLTxtRange)> > IHTMLTxtRangePtr;
typedef _com_ptr_t<_com_IIID<IHTMLUListElement, &__uuidof(IHTMLUListElement)> > IHTMLUListElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLUnknownElement, &__uuidof(IHTMLUnknownElement)> > IHTMLUnknownElementPtr;
typedef _com_ptr_t<_com_IIID<IHTMLWindow2, &__uuidof(IHTMLWindow2)> > IHTMLWindow2Ptr;
typedef _com_ptr_t<_com_IIID<IHlink, &__uuidof(IHlink)> > IHlinkPtr;
typedef _com_ptr_t<_com_IIID<IHlinkBrowseContext, &__uuidof(IHlinkBrowseContext)> > IHlinkBrowseContextPtr;
typedef _com_ptr_t<_com_IIID<IHlinkFrame, &__uuidof(IHlinkFrame)> > IHlinkFramePtr;
typedef _com_ptr_t<_com_IIID<IHlinkSite, &__uuidof(IHlinkSite)> > IHlinkSitePtr;
typedef _com_ptr_t<_com_IIID<IHlinkTarget, &__uuidof(IHlinkTarget)> > IHlinkTargetPtr;
typedef _com_ptr_t<_com_IIID<IHttpNegotiate, &__uuidof(IHttpNegotiate)> > IHttpNegotiatePtr;
typedef _com_ptr_t<_com_IIID<IHttpSecurity, &__uuidof(IHttpSecurity)> > IHttpSecurityPtr;
typedef _com_ptr_t<_com_IIID<IImageDecodeEventSink, &__uuidof(IImageDecodeEventSink)> > IImageDecodeEventSinkPtr;
typedef _com_ptr_t<_com_IIID<IImageDecodeFilter, &__uuidof(IImageDecodeFilter)> > IImageDecodeFilterPtr;
typedef _com_ptr_t<_com_IIID<IImgCtx, &__uuidof(IImgCtx)> > IImgCtxPtr;
typedef _com_ptr_t<_com_IIID<IInputObject, &__uuidof(IInputObject)> > IInputObjectPtr;
typedef _com_ptr_t<_com_IIID<IInputObjectSite, &__uuidof(IInputObjectSite)> > IInputObjectSitePtr;
typedef _com_ptr_t<_com_IIID<IInternet, &__uuidof(IInternet)> > IInternetPtr;
typedef _com_ptr_t<_com_IIID<IInternetBindInfo, &__uuidof(IInternetBindInfo)> > IInternetBindInfoPtr;
typedef _com_ptr_t<_com_IIID<IInternetHostSecurityManager, &__uuidof(IInternetHostSecurityManager)> > IInternetHostSecurityManagerPtr;
typedef _com_ptr_t<_com_IIID<IInternetPriority, &__uuidof(IInternetPriority)> > IInternetPriorityPtr;
typedef _com_ptr_t<_com_IIID<IInternetProtocol, &__uuidof(IInternetProtocol)> > IInternetProtocolPtr;
typedef _com_ptr_t<_com_IIID<IInternetProtocolInfo, &__uuidof(IInternetProtocolInfo)> > IInternetProtocolInfoPtr;
typedef _com_ptr_t<_com_IIID<IInternetProtocolRoot, &__uuidof(IInternetProtocolRoot)> > IInternetProtocolRootPtr;
typedef _com_ptr_t<_com_IIID<IInternetProtocolSink, &__uuidof(IInternetProtocolSink)> > IInternetProtocolSinkPtr;
typedef _com_ptr_t<_com_IIID<IInternetSecurityManager, &__uuidof(IInternetSecurityManager)> > IInternetSecurityManagerPtr;
typedef _com_ptr_t<_com_IIID<IInternetSecurityMgrSite, &__uuidof(IInternetSecurityMgrSite)> > IInternetSecurityMgrSitePtr;
typedef _com_ptr_t<_com_IIID<IInternetSession, &__uuidof(IInternetSession)> > IInternetSessionPtr;
typedef _com_ptr_t<_com_IIID<IInternetThreadSwitch, &__uuidof(IInternetThreadSwitch)> > IInternetThreadSwitchPtr;
typedef _com_ptr_t<_com_IIID<IInternetZoneManager, &__uuidof(IInternetZoneManager)> > IInternetZoneManagerPtr;
typedef _com_ptr_t<_com_IIID<ILayoutStorage, &__uuidof(ILayoutStorage)> > ILayoutStoragePtr;
typedef _com_ptr_t<_com_IIID<ILockBytes, &__uuidof(ILockBytes)> > ILockBytesPtr;
typedef _com_ptr_t<_com_IIID<IMLangCodePages, &__uuidof(IMLangCodePages)> > IMLangCodePagesPtr;
typedef _com_ptr_t<_com_IIID<IMLangConvertCharset, &__uuidof(IMLangConvertCharset)> > IMLangConvertCharsetPtr;
typedef _com_ptr_t<_com_IIID<IMLangFontLink, &__uuidof(IMLangFontLink)> > IMLangFontLinkPtr;
typedef _com_ptr_t<_com_IIID<IMLangLineBreakConsole, &__uuidof(IMLangLineBreakConsole)> > IMLangLineBreakConsolePtr;
typedef _com_ptr_t<_com_IIID<IMLangString, &__uuidof(IMLangString)> > IMLangStringPtr;
typedef _com_ptr_t<_com_IIID<IMLangStringAStr, &__uuidof(IMLangStringAStr)> > IMLangStringAStrPtr;
typedef _com_ptr_t<_com_IIID<IMLangStringBufA, &__uuidof(IMLangStringBufA)> > IMLangStringBufAPtr;
typedef _com_ptr_t<_com_IIID<IMLangStringBufW, &__uuidof(IMLangStringBufW)> > IMLangStringBufWPtr;
typedef _com_ptr_t<_com_IIID<IMLangStringWStr, &__uuidof(IMLangStringWStr)> > IMLangStringWStrPtr;
typedef _com_ptr_t<_com_IIID<IMalloc, &__uuidof(IMalloc)> > IMallocPtr;
typedef _com_ptr_t<_com_IIID<IMallocSpy, &__uuidof(IMallocSpy)> > IMallocSpyPtr;
typedef _com_ptr_t<_com_IIID<IMapMIMEToCLSID, &__uuidof(IMapMIMEToCLSID)> > IMapMIMEToCLSIDPtr;
typedef _com_ptr_t<_com_IIID<IMarshal, &__uuidof(IMarshal)> > IMarshalPtr;
typedef _com_ptr_t<_com_IIID<IMessageFilter, &__uuidof(IMessageFilter)> > IMessageFilterPtr;
typedef _com_ptr_t<_com_IIID<IMimeInfo, &__uuidof(IMimeInfo)> > IMimeInfoPtr;
typedef _com_ptr_t<_com_IIID<IMoniker, &__uuidof(IMoniker)> > IMonikerPtr;
typedef _com_ptr_t<_com_IIID<IMultiLanguage, &__uuidof(IMultiLanguage)> > IMultiLanguagePtr;
typedef _com_ptr_t<_com_IIID<IMultiQI, &__uuidof(IMultiQI)> > IMultiQIPtr;
typedef _com_ptr_t<_com_IIID<INewShortcutHookA, &__uuidof(INewShortcutHookA)> > INewShortcutHookAPtr;
typedef _com_ptr_t<_com_IIID<INewShortcutHookW, &__uuidof(INewShortcutHookW)> > INewShortcutHookWPtr;
typedef _com_ptr_t<_com_IIID<IObjectIdentity, &__uuidof(IObjectIdentity)> > IObjectIdentityPtr;
typedef _com_ptr_t<_com_IIID<IObjectSafety, &__uuidof(IObjectSafety)> > IObjectSafetyPtr;
typedef _com_ptr_t<_com_IIID<IObjectWithSite, &__uuidof(IObjectWithSite)> > IObjectWithSitePtr;
typedef _com_ptr_t<_com_IIID<IOleAdviseHolder, &__uuidof(IOleAdviseHolder)> > IOleAdviseHolderPtr;
typedef _com_ptr_t<_com_IIID<IOleCache, &__uuidof(IOleCache)> > IOleCachePtr;
typedef _com_ptr_t<_com_IIID<IOleCache2, &__uuidof(IOleCache2)> > IOleCache2Ptr;
typedef _com_ptr_t<_com_IIID<IOleCacheControl, &__uuidof(IOleCacheControl)> > IOleCacheControlPtr;
typedef _com_ptr_t<_com_IIID<IOleClientSite, &__uuidof(IOleClientSite)> > IOleClientSitePtr;
typedef _com_ptr_t<_com_IIID<IOleCommandTarget, &__uuidof(IOleCommandTarget)> > IOleCommandTargetPtr;
typedef _com_ptr_t<_com_IIID<IOleContainer, &__uuidof(IOleContainer)> > IOleContainerPtr;
typedef _com_ptr_t<_com_IIID<IOleControl, &__uuidof(IOleControl)> > IOleControlPtr;
typedef _com_ptr_t<_com_IIID<IOleControlSite, &__uuidof(IOleControlSite)> > IOleControlSitePtr;
typedef _com_ptr_t<_com_IIID<IOleDocument, &__uuidof(IOleDocument)> > IOleDocumentPtr;
typedef _com_ptr_t<_com_IIID<IOleDocumentSite, &__uuidof(IOleDocumentSite)> > IOleDocumentSitePtr;
typedef _com_ptr_t<_com_IIID<IOleDocumentView, &__uuidof(IOleDocumentView)> > IOleDocumentViewPtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceActiveObject, &__uuidof(IOleInPlaceActiveObject)> > IOleInPlaceActiveObjectPtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceFrame, &__uuidof(IOleInPlaceFrame)> > IOleInPlaceFramePtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceObject, &__uuidof(IOleInPlaceObject)> > IOleInPlaceObjectPtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceObjectWindowless, &__uuidof(IOleInPlaceObjectWindowless)> > IOleInPlaceObjectWindowlessPtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceSite, &__uuidof(IOleInPlaceSite)> > IOleInPlaceSitePtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceSiteEx, &__uuidof(IOleInPlaceSiteEx)> > IOleInPlaceSiteExPtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceSiteWindowless, &__uuidof(IOleInPlaceSiteWindowless)> > IOleInPlaceSiteWindowlessPtr;
typedef _com_ptr_t<_com_IIID<IOleInPlaceUIWindow, &__uuidof(IOleInPlaceUIWindow)> > IOleInPlaceUIWindowPtr;
typedef _com_ptr_t<_com_IIID<IOleItemContainer, &__uuidof(IOleItemContainer)> > IOleItemContainerPtr;
typedef _com_ptr_t<_com_IIID<IOleLink, &__uuidof(IOleLink)> > IOleLinkPtr;
typedef _com_ptr_t<_com_IIID<IOleObject, &__uuidof(IOleObject)> > IOleObjectPtr;
typedef _com_ptr_t<_com_IIID<IOleParentUndoUnit, &__uuidof(IOleParentUndoUnit)> > IOleParentUndoUnitPtr;
typedef _com_ptr_t<_com_IIID<IOleUndoManager, &__uuidof(IOleUndoManager)> > IOleUndoManagerPtr;
typedef _com_ptr_t<_com_IIID<IOleUndoUnit, &__uuidof(IOleUndoUnit)> > IOleUndoUnitPtr;
typedef _com_ptr_t<_com_IIID<IOleWindow, &__uuidof(IOleWindow)> > IOleWindowPtr;
typedef _com_ptr_t<_com_IIID<IOmHistory, &__uuidof(IOmHistory)> > IOmHistoryPtr;
typedef _com_ptr_t<_com_IIID<IOmNavigator, &__uuidof(IOmNavigator)> > IOmNavigatorPtr;
typedef _com_ptr_t<_com_IIID<IPSFactoryBuffer, &__uuidof(IPSFactoryBuffer)> > IPSFactoryBufferPtr;
typedef _com_ptr_t<_com_IIID<IParseDisplayName, &__uuidof(IParseDisplayName)> > IParseDisplayNamePtr;
typedef _com_ptr_t<_com_IIID<IPerPropertyBrowsing, &__uuidof(IPerPropertyBrowsing)> > IPerPropertyBrowsingPtr;
typedef _com_ptr_t<_com_IIID<IPersist, &__uuidof(IPersist)> > IPersistPtr;
typedef _com_ptr_t<_com_IIID<IPersistFile, &__uuidof(IPersistFile)> > IPersistFilePtr;
typedef _com_ptr_t<_com_IIID<IPersistFolder, &__uuidof(IPersistFolder)> > IPersistFolderPtr;
typedef _com_ptr_t<_com_IIID<IPersistFolder2, &__uuidof(IPersistFolder2)> > IPersistFolder2Ptr;
typedef _com_ptr_t<_com_IIID<IPersistHistory, &__uuidof(IPersistHistory)> > IPersistHistoryPtr;
typedef _com_ptr_t<_com_IIID<IPersistMemory, &__uuidof(IPersistMemory)> > IPersistMemoryPtr;
typedef _com_ptr_t<_com_IIID<IPersistMoniker, &__uuidof(IPersistMoniker)> > IPersistMonikerPtr;
typedef _com_ptr_t<_com_IIID<IPersistPropertyBag, &__uuidof(IPersistPropertyBag)> > IPersistPropertyBagPtr;
typedef _com_ptr_t<_com_IIID<IPersistPropertyBag2, &__uuidof(IPersistPropertyBag2)> > IPersistPropertyBag2Ptr;
typedef _com_ptr_t<_com_IIID<IPersistStorage, &__uuidof(IPersistStorage)> > IPersistStoragePtr;
typedef _com_ptr_t<_com_IIID<IPersistStream, &__uuidof(IPersistStream)> > IPersistStreamPtr;
typedef _com_ptr_t<_com_IIID<IPersistStreamInit, &__uuidof(IPersistStreamInit)> > IPersistStreamInitPtr;
typedef _com_ptr_t<_com_IIID<IPicture, &__uuidof(IPicture)> > IPicturePtr;
typedef _com_ptr_t<_com_IIID<IPictureDisp, &__uuidof(IPictureDisp)> > IPictureDispPtr;
typedef _com_ptr_t<_com_IIID<IPointerInactive, &__uuidof(IPointerInactive)> > IPointerInactivePtr;
typedef _com_ptr_t<_com_IIID<IPrint, &__uuidof(IPrint)> > IPrintPtr;
typedef _com_ptr_t<_com_IIID<IProgressNotify, &__uuidof(IProgressNotify)> > IProgressNotifyPtr;
typedef _com_ptr_t<_com_IIID<IPropertyBag, &__uuidof(IPropertyBag)> > IPropertyBagPtr;
typedef _com_ptr_t<_com_IIID<IPropertyBag2, &__uuidof(IPropertyBag2)> > IPropertyBag2Ptr;
typedef _com_ptr_t<_com_IIID<IPropertyNotifySink, &__uuidof(IPropertyNotifySink)> > IPropertyNotifySinkPtr;
typedef _com_ptr_t<_com_IIID<IPropertyPage, &__uuidof(IPropertyPage)> > IPropertyPagePtr;
typedef _com_ptr_t<_com_IIID<IPropertyPage2, &__uuidof(IPropertyPage2)> > IPropertyPage2Ptr;
typedef _com_ptr_t<_com_IIID<IPropertyPageSite, &__uuidof(IPropertyPageSite)> > IPropertyPageSitePtr;
typedef _com_ptr_t<_com_IIID<IPropertySetStorage, &__uuidof(IPropertySetStorage)> > IPropertySetStoragePtr;
typedef _com_ptr_t<_com_IIID<IPropertyStorage, &__uuidof(IPropertyStorage)> > IPropertyStoragePtr;
typedef _com_ptr_t<_com_IIID<IProvideClassInfo, &__uuidof(IProvideClassInfo)> > IProvideClassInfoPtr;
typedef _com_ptr_t<_com_IIID<IProvideClassInfo2, &__uuidof(IProvideClassInfo2)> > IProvideClassInfo2Ptr;
typedef _com_ptr_t<_com_IIID<IProvideMultipleClassInfo, &__uuidof(IProvideMultipleClassInfo)> > IProvideMultipleClassInfoPtr;
typedef _com_ptr_t<_com_IIID<IQueryInfo, &__uuidof(IQueryInfo)> > IQueryInfoPtr;
typedef _com_ptr_t<_com_IIID<IQuickActivate, &__uuidof(IQuickActivate)> > IQuickActivatePtr;
typedef _com_ptr_t<_com_IIID<IROTData, &__uuidof(IROTData)> > IROTDataPtr;
typedef _com_ptr_t<_com_IIID<IRecordInfo, &__uuidof(IRecordInfo)> > IRecordInfoPtr;
typedef _com_ptr_t<_com_IIID<IRichEditOle, &__uuidof(IRichEditOle)> > IRichEditOlePtr;
typedef _com_ptr_t<_com_IIID<IRichEditOleCallback, &__uuidof(IRichEditOleCallback)> > IRichEditOleCallbackPtr;
typedef _com_ptr_t<_com_IIID<IRootStorage, &__uuidof(IRootStorage)> > IRootStoragePtr;
typedef _com_ptr_t<_com_IIID<IRpcChannelBuffer, &__uuidof(IRpcChannelBuffer)> > IRpcChannelBufferPtr;
typedef _com_ptr_t<_com_IIID<IRpcChannelBuffer2, &__uuidof(IRpcChannelBuffer2)> > IRpcChannelBuffer2Ptr;
typedef _com_ptr_t<_com_IIID<IRpcChannelBuffer3, &__uuidof(IRpcChannelBuffer3)> > IRpcChannelBuffer3Ptr;
typedef _com_ptr_t<_com_IIID<IRpcProxyBuffer, &__uuidof(IRpcProxyBuffer)> > IRpcProxyBufferPtr;
typedef _com_ptr_t<_com_IIID<IRpcStubBuffer, &__uuidof(IRpcStubBuffer)> > IRpcStubBufferPtr;
typedef _com_ptr_t<_com_IIID<IRunnableObject, &__uuidof(IRunnableObject)> > IRunnableObjectPtr;
typedef _com_ptr_t<_com_IIID<IRunningObjectTable, &__uuidof(IRunningObjectTable)> > IRunningObjectTablePtr;
typedef _com_ptr_t<_com_IIID<ISequentialStream, &__uuidof(ISequentialStream)> > ISequentialStreamPtr;
typedef _com_ptr_t<_com_IIID<IServerSecurity, &__uuidof(IServerSecurity)> > IServerSecurityPtr;
typedef _com_ptr_t<_com_IIID<IServiceProvider, &__uuidof(IServiceProvider)> > IServiceProviderPtr;
typedef _com_ptr_t<_com_IIID<IShellBrowser, &__uuidof(IShellBrowser)> > IShellBrowserPtr;
typedef _com_ptr_t<_com_IIID<IShellDispatch, &__uuidof(IShellDispatch)> > IShellDispatchPtr;
typedef _com_ptr_t<_com_IIID<IShellExecuteHookA, &__uuidof(IShellExecuteHookA)> > IShellExecuteHookAPtr;
typedef _com_ptr_t<_com_IIID<IShellExecuteHookW, &__uuidof(IShellExecuteHookW)> > IShellExecuteHookWPtr;
typedef _com_ptr_t<_com_IIID<IShellExtInit, &__uuidof(IShellExtInit)> > IShellExtInitPtr;
typedef _com_ptr_t<_com_IIID<IShellFolder, &__uuidof(IShellFolder)> > IShellFolderPtr;
typedef _com_ptr_t<_com_IIID<IShellFolderViewDual, &__uuidof(IShellFolderViewDual)> > IShellFolderViewDualPtr;
typedef _com_ptr_t<_com_IIID<IShellIcon, &__uuidof(IShellIcon)> > IShellIconPtr;
typedef _com_ptr_t<_com_IIID<IShellIconOverlay, &__uuidof(IShellIconOverlay)> > IShellIconOverlayPtr;
typedef _com_ptr_t<_com_IIID<IShellIconOverlayIdentifier, &__uuidof(IShellIconOverlayIdentifier)> > IShellIconOverlayIdentifierPtr;
typedef _com_ptr_t<_com_IIID<IShellLinkA, &__uuidof(IShellLinkA)> > IShellLinkAPtr;
typedef _com_ptr_t<_com_IIID<IShellLinkDual, &__uuidof(IShellLinkDual)> > IShellLinkDualPtr;
typedef _com_ptr_t<_com_IIID<IShellLinkW, &__uuidof(IShellLinkW)> > IShellLinkWPtr;
typedef _com_ptr_t<_com_IIID<IShellPropSheetExt, &__uuidof(IShellPropSheetExt)> > IShellPropSheetExtPtr;
typedef _com_ptr_t<_com_IIID<IShellUIHelper, &__uuidof(IShellUIHelper)> > IShellUIHelperPtr;
typedef _com_ptr_t<_com_IIID<IShellView, &__uuidof(IShellView)> > IShellViewPtr;
typedef _com_ptr_t<_com_IIID<IShellView2, &__uuidof(IShellView2)> > IShellView2Ptr;
typedef _com_ptr_t<_com_IIID<IShellWindows, &__uuidof(IShellWindows)> > IShellWindowsPtr;
typedef _com_ptr_t<_com_IIID<ISimpleFrameSite, &__uuidof(ISimpleFrameSite)> > ISimpleFrameSitePtr;
typedef _com_ptr_t<_com_IIID<ISoftDistExt, &__uuidof(ISoftDistExt)> > ISoftDistExtPtr;
typedef _com_ptr_t<_com_IIID<ISpecifyPropertyPages, &__uuidof(ISpecifyPropertyPages)> > ISpecifyPropertyPagesPtr;
typedef _com_ptr_t<_com_IIID<IStdMarshalInfo, &__uuidof(IStdMarshalInfo)> > IStdMarshalInfoPtr;
typedef _com_ptr_t<_com_IIID<IStorage, &__uuidof(IStorage)> > IStoragePtr;
typedef _com_ptr_t<_com_IIID<IStream, &__uuidof(IStream)> > IStreamPtr;
typedef _com_ptr_t<_com_IIID<ISubscriptionMgr, &__uuidof(ISubscriptionMgr)> > ISubscriptionMgrPtr;
typedef _com_ptr_t<_com_IIID<ISupportErrorInfo, &__uuidof(ISupportErrorInfo)> > ISupportErrorInfoPtr;
typedef _com_ptr_t<_com_IIID<ISurrogate, &__uuidof(ISurrogate)> > ISurrogatePtr;
typedef _com_ptr_t<_com_IIID<ISynchronize, &__uuidof(ISynchronize)> > ISynchronizePtr;
typedef _com_ptr_t<_com_IIID<ISynchronizeEvent, &__uuidof(ISynchronizeEvent)> > ISynchronizeEventPtr;
typedef _com_ptr_t<_com_IIID<ISynchronizeMutex, &__uuidof(ISynchronizeMutex)> > ISynchronizeMutexPtr;
typedef _com_ptr_t<_com_IIID<ITimer, &__uuidof(ITimer)> > ITimerPtr;
typedef _com_ptr_t<_com_IIID<ITimerService, &__uuidof(ITimerService)> > ITimerServicePtr;
typedef _com_ptr_t<_com_IIID<ITimerSink, &__uuidof(ITimerSink)> > ITimerSinkPtr;
typedef _com_ptr_t<_com_IIID<ITypeChangeEvents, &__uuidof(ITypeChangeEvents)> > ITypeChangeEventsPtr;
typedef _com_ptr_t<_com_IIID<ITypeComp, &__uuidof(ITypeComp)> > ITypeCompPtr;
typedef _com_ptr_t<_com_IIID<ITypeFactory, &__uuidof(ITypeFactory)> > ITypeFactoryPtr;
typedef _com_ptr_t<_com_IIID<ITypeInfo, &__uuidof(ITypeInfo)> > ITypeInfoPtr;
typedef _com_ptr_t<_com_IIID<ITypeInfo2, &__uuidof(ITypeInfo2)> > ITypeInfo2Ptr;
typedef _com_ptr_t<_com_IIID<ITypeLib, &__uuidof(ITypeLib)> > ITypeLibPtr;
typedef _com_ptr_t<_com_IIID<ITypeLib2, &__uuidof(ITypeLib2)> > ITypeLib2Ptr;
typedef _com_ptr_t<_com_IIID<ITypeMarshal, &__uuidof(ITypeMarshal)> > ITypeMarshalPtr;
typedef _com_ptr_t<_com_IIID<IURLSearchHook, &__uuidof(IURLSearchHook)> > IURLSearchHookPtr;
typedef _com_ptr_t<_com_IIID<IUniformResourceLocatorA, &__uuidof(IUniformResourceLocatorA)> > IUniformResourceLocatorAPtr;
typedef _com_ptr_t<_com_IIID<IUniformResourceLocatorW, &__uuidof(IUniformResourceLocatorW)> > IUniformResourceLocatorWPtr;
typedef _com_ptr_t<_com_IIID<IUnknown, &__uuidof(IUnknown)> > IUnknownPtr;
typedef _com_ptr_t<_com_IIID<IUrlHistoryNotify, &__uuidof(IUrlHistoryNotify)> > IUrlHistoryNotifyPtr;
typedef _com_ptr_t<_com_IIID<IUrlHistoryStg, &__uuidof(IUrlHistoryStg)> > IUrlHistoryStgPtr;
typedef _com_ptr_t<_com_IIID<IUrlHistoryStg2, &__uuidof(IUrlHistoryStg2)> > IUrlHistoryStg2Ptr;
typedef _com_ptr_t<_com_IIID<IUrlMon, &__uuidof(IUrlMon)> > IUrlMonPtr;
typedef _com_ptr_t<_com_IIID<IVariantChangeType, &__uuidof(IVariantChangeType)> > IVariantChangeTypePtr;
typedef _com_ptr_t<_com_IIID<IViewFilterSite, &__uuidof(IViewFilterSite)> > IViewFilterSitePtr;
typedef _com_ptr_t<_com_IIID<IViewObject, &__uuidof(IViewObject)> > IViewObjectPtr;
typedef _com_ptr_t<_com_IIID<IViewObject2, &__uuidof(IViewObject2)> > IViewObject2Ptr;
typedef _com_ptr_t<_com_IIID<IViewObjectEx, &__uuidof(IViewObjectEx)> > IViewObjectExPtr;
typedef _com_ptr_t<_com_IIID<IViewTransition, &__uuidof(IViewTransition)> > IViewTransitionPtr;
typedef _com_ptr_t<_com_IIID<IViewTransitionSite, &__uuidof(IViewTransitionSite)> > IViewTransitionSitePtr;
typedef _com_ptr_t<_com_IIID<IWaitMultiple, &__uuidof(IWaitMultiple)> > IWaitMultiplePtr;
typedef _com_ptr_t<_com_IIID<IWebBrowser, &__uuidof(IWebBrowser)> > IWebBrowserPtr;
typedef _com_ptr_t<_com_IIID<IWebBrowser2, &__uuidof(IWebBrowser2)> > IWebBrowser2Ptr;
typedef _com_ptr_t<_com_IIID<IWebBrowserApp, &__uuidof(IWebBrowserApp)> > IWebBrowserAppPtr;
typedef _com_ptr_t<_com_IIID<IWinInetHttpInfo, &__uuidof(IWinInetHttpInfo)> > IWinInetHttpInfoPtr;
typedef _com_ptr_t<_com_IIID<IWinInetInfo, &__uuidof(IWinInetInfo)> > IWinInetInfoPtr;
typedef _com_ptr_t<_com_IIID<IWindowForBindingUI, &__uuidof(IWindowForBindingUI)> > IWindowForBindingUIPtr;
typedef _com_ptr_t<_com_IIID<IXMLDocument, &__uuidof(IXMLDocument)> > IXMLDocumentPtr;
typedef _com_ptr_t<_com_IIID<IXMLElement, &__uuidof(IXMLElement)> > IXMLElementPtr;
typedef _com_ptr_t<_com_IIID<IXMLElementCollection, &__uuidof(IXMLElementCollection)> > IXMLElementCollectionPtr;
typedef _com_ptr_t<_com_IIID<IXMLError, &__uuidof(IXMLError)> > IXMLErrorPtr;
typedef _com_ptr_t<_com_IIID<OLEDBSimpleProvider, &__uuidof(OLEDBSimpleProvider)> > OLEDBSimpleProviderPtr;
typedef _com_ptr_t<_com_IIID<OLEDBSimpleProviderListener, &__uuidof(OLEDBSimpleProviderListener)> > OLEDBSimpleProviderListenerPtr;

#line 1097 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"


#pragma warning(pop)
#line 1101 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"

#line 1103 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\comdef.h"

#line 33 "stdafx.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


























#line 28 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 34 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\pshpack4.h"
#line 29 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 30 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"




extern "C" {
#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"












#line 49 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"







typedef LPVOID HINTERNET;
typedef HINTERNET * LPHINTERNET;

typedef WORD INTERNET_PORT;
typedef INTERNET_PORT * LPINTERNET_PORT;









































































































































































































typedef enum {
    INTERNET_SCHEME_PARTIAL = -2,
    INTERNET_SCHEME_UNKNOWN = -1,
    INTERNET_SCHEME_DEFAULT = 0,
    INTERNET_SCHEME_FTP,
    INTERNET_SCHEME_GOPHER,
    INTERNET_SCHEME_HTTP,
    INTERNET_SCHEME_HTTPS,
    INTERNET_SCHEME_FILE,
    INTERNET_SCHEME_NEWS,
    INTERNET_SCHEME_MAILTO,
    INTERNET_SCHEME_SOCKS,
    INTERNET_SCHEME_JAVASCRIPT,
    INTERNET_SCHEME_VBSCRIPT,
    INTERNET_SCHEME_RES,
    INTERNET_SCHEME_FIRST = INTERNET_SCHEME_FTP,
    INTERNET_SCHEME_LAST = INTERNET_SCHEME_RES
} INTERNET_SCHEME, * LPINTERNET_SCHEME;











typedef struct {

    
    
    

    DWORD_PTR dwResult;

    
    
    

    DWORD dwError;
} INTERNET_ASYNC_RESULT, * LPINTERNET_ASYNC_RESULT;







typedef struct {

    
    
    
    

    DWORD dwAccessType;

    
    
    

    LPCTSTR lpszProxy;

    
    
    

    LPCTSTR lpszProxyBypass;
} INTERNET_PROXY_INFO, * LPINTERNET_PROXY_INFO;









typedef struct {
    DWORD   dwOption;            
    union {
        DWORD    dwValue;        
        LPSTR    pszValue;       
        FILETIME ftValue;        
    } Value;
} INTERNET_PER_CONN_OPTIONA, * LPINTERNET_PER_CONN_OPTIONA;
typedef struct {
    DWORD   dwOption;            
    union {
        DWORD    dwValue;        
        LPWSTR   pszValue;       
        FILETIME ftValue;        
    } Value;
} INTERNET_PER_CONN_OPTIONW, * LPINTERNET_PER_CONN_OPTIONW;




typedef INTERNET_PER_CONN_OPTIONA INTERNET_PER_CONN_OPTION;
typedef LPINTERNET_PER_CONN_OPTIONA LPINTERNET_PER_CONN_OPTION;
#line 365 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

typedef struct {
    DWORD   dwSize;             
    LPSTR   pszConnection;      
    DWORD   dwOptionCount;      
    DWORD   dwOptionError;      
    LPINTERNET_PER_CONN_OPTIONA  pOptions;
                                
} INTERNET_PER_CONN_OPTION_LISTA, * LPINTERNET_PER_CONN_OPTION_LISTA;
typedef struct {
    DWORD   dwSize;             
    LPWSTR  pszConnection;      
    DWORD   dwOptionCount;      
    DWORD   dwOptionError;      
    LPINTERNET_PER_CONN_OPTIONW  pOptions;
                                
} INTERNET_PER_CONN_OPTION_LISTW, * LPINTERNET_PER_CONN_OPTION_LISTW;




typedef INTERNET_PER_CONN_OPTION_LISTA INTERNET_PER_CONN_OPTION_LIST;
typedef LPINTERNET_PER_CONN_OPTION_LISTA LPINTERNET_PER_CONN_OPTION_LIST;
#line 389 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"






































typedef struct {
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
} INTERNET_VERSION_INFO, * LPINTERNET_VERSION_INFO;





typedef struct {
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
} HTTP_VERSION_INFO, * LPHTTP_VERSION_INFO;





typedef struct {

    
    
    
    

    DWORD dwConnectedState;

    
    
    
    

    DWORD dwFlags;
} INTERNET_CONNECTED_INFO, * LPINTERNET_CONNECTED_INFO;































#pragma warning( disable : 4121 )   

typedef struct {
    DWORD   dwStructSize;       
    LPSTR   lpszScheme;         
    DWORD   dwSchemeLength;     
    INTERNET_SCHEME nScheme;    
    LPSTR   lpszHostName;       
    DWORD   dwHostNameLength;   
    INTERNET_PORT nPort;        
    LPSTR   lpszUserName;       
    DWORD   dwUserNameLength;   
    LPSTR   lpszPassword;       
    DWORD   dwPasswordLength;   
    LPSTR   lpszUrlPath;        
    DWORD   dwUrlPathLength;    
    LPSTR   lpszExtraInfo;      
    DWORD   dwExtraInfoLength;  
} URL_COMPONENTSA, * LPURL_COMPONENTSA;
typedef struct {
    DWORD   dwStructSize;       
    LPWSTR  lpszScheme;         
    DWORD   dwSchemeLength;     
    INTERNET_SCHEME nScheme;    
    LPWSTR  lpszHostName;       
    DWORD   dwHostNameLength;   
    INTERNET_PORT nPort;        
    LPWSTR  lpszUserName;       
    DWORD   dwUserNameLength;   
    LPWSTR  lpszPassword;       
    DWORD   dwPasswordLength;   
    LPWSTR  lpszUrlPath;        
    DWORD   dwUrlPathLength;    
    LPWSTR  lpszExtraInfo;      
    DWORD   dwExtraInfoLength;  
} URL_COMPONENTSW, * LPURL_COMPONENTSW;




typedef URL_COMPONENTSA URL_COMPONENTS;
typedef LPURL_COMPONENTSA LPURL_COMPONENTS;
#line 535 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

#pragma warning( default : 4121 )   






typedef struct {

    
    
    

    FILETIME ftExpiry;

    
    
    

    FILETIME ftStart;

    
    
    
    

    LPTSTR lpszSubjectInfo;

    
    
    
    

    LPTSTR lpszIssuerInfo;

    
    
    
    

    LPTSTR lpszProtocolName;

    
    
    
    

    LPTSTR lpszSignatureAlgName;

    
    
    
    

    LPTSTR lpszEncryptionAlgName;

    
    
    

    DWORD dwKeySize;

} INTERNET_CERTIFICATE_INFO, * LPINTERNET_CERTIFICATE_INFO;








typedef struct _INTERNET_BUFFERSA {
    DWORD dwStructSize;                 
    struct _INTERNET_BUFFERSA * Next;   
    LPCSTR   lpcszHeader;               
    DWORD dwHeadersLength;              
    DWORD dwHeadersTotal;               
    LPVOID lpvBuffer;                   
    DWORD dwBufferLength;               
    DWORD dwBufferTotal;                
    DWORD dwOffsetLow;                  
    DWORD dwOffsetHigh;
} INTERNET_BUFFERSA, * LPINTERNET_BUFFERSA;
typedef struct _INTERNET_BUFFERSW {
    DWORD dwStructSize;                 
    struct _INTERNET_BUFFERSW * Next;   
    LPCWSTR  lpcszHeader;               
    DWORD dwHeadersLength;              
    DWORD dwHeadersTotal;               
    LPVOID lpvBuffer;                   
    DWORD dwBufferLength;               
    DWORD dwBufferTotal;                
    DWORD dwOffsetLow;                  
    DWORD dwOffsetHigh;
} INTERNET_BUFFERSW, * LPINTERNET_BUFFERSW;




typedef INTERNET_BUFFERSA INTERNET_BUFFERS;
typedef LPINTERNET_BUFFERSA LPINTERNET_BUFFERS;
#line 638 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"





extern "C" __declspec(dllimport) BOOL __stdcall InternetTimeFromSystemTimeA(
      const SYSTEMTIME *pst,  
      DWORD dwRFC,            
     LPSTR lpszTime,         
      DWORD cbTime            
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetTimeFromSystemTimeW(
      const SYSTEMTIME *pst,  
      DWORD dwRFC,            
     LPWSTR lpszTime,        
      DWORD cbTime            
    );







extern "C" __declspec(dllimport) BOOL __stdcall InternetTimeFromSystemTime(
      const SYSTEMTIME *pst,  
      DWORD dwRFC,            
     LPSTR lpszTime,         
      DWORD cbTime            
    );
#line 670 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 671 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"








extern "C" __declspec(dllimport) BOOL __stdcall InternetTimeToSystemTimeA(
      LPCSTR lpszTime,         
     SYSTEMTIME *pst,         
      DWORD dwReserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetTimeToSystemTimeW(
      LPCWSTR lpszTime,        
     SYSTEMTIME *pst,         
      DWORD dwReserved
    );







extern "C" __declspec(dllimport) BOOL __stdcall InternetTimeToSystemTime(
      LPCSTR lpszTime,         
     SYSTEMTIME *pst,         
      DWORD dwReserved
    );
#line 703 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 704 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


extern "C" __declspec(dllimport) BOOL __stdcall InternetCrackUrlA(
     LPCSTR lpszUrl,
     DWORD dwUrlLength,
     DWORD dwFlags,
      LPURL_COMPONENTSA lpUrlComponents
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetCrackUrlW(
     LPCWSTR lpszUrl,
     DWORD dwUrlLength,
     DWORD dwFlags,
      LPURL_COMPONENTSW lpUrlComponents
    );




#line 723 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetCreateUrlA(
     LPURL_COMPONENTSA lpUrlComponents,
     DWORD dwFlags,
     LPSTR lpszUrl,
      LPDWORD lpdwUrlLength
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetCreateUrlW(
     LPURL_COMPONENTSW lpUrlComponents,
     DWORD dwFlags,
     LPWSTR lpszUrl,
      LPDWORD lpdwUrlLength
    );




#line 741 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetCanonicalizeUrlA(
     LPCSTR lpszUrl,
     LPSTR lpszBuffer,
      LPDWORD lpdwBufferLength,
     DWORD dwFlags
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetCanonicalizeUrlW(
     LPCWSTR lpszUrl,
     LPWSTR lpszBuffer,
      LPDWORD lpdwBufferLength,
     DWORD dwFlags
    );




#line 759 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetCombineUrlA(
     LPCSTR lpszBaseUrl,
     LPCSTR lpszRelativeUrl,
     LPSTR lpszBuffer,
      LPDWORD lpdwBufferLength,
     DWORD dwFlags
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetCombineUrlW(
     LPCWSTR lpszBaseUrl,
     LPCWSTR lpszRelativeUrl,
     LPWSTR lpszBuffer,
      LPDWORD lpdwBufferLength,
     DWORD dwFlags
    );




#line 779 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


















        

extern "C" __declspec(dllimport) HINTERNET __stdcall InternetOpenA(
     LPCSTR lpszAgent,
     DWORD dwAccessType,
     LPCSTR lpszProxy ,
     LPCSTR lpszProxyBypass ,
     DWORD dwFlags
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall InternetOpenW(
     LPCWSTR lpszAgent,
     DWORD dwAccessType,
     LPCWSTR lpszProxy ,
     LPCWSTR lpszProxyBypass ,
     DWORD dwFlags
    );




#line 818 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


















extern "C" __declspec(dllimport) BOOL __stdcall InternetCloseHandle(
     HINTERNET hInternet
    );

extern "C" __declspec(dllimport) HINTERNET __stdcall InternetConnectA(
     HINTERNET hInternet,
     LPCSTR lpszServerName,
     INTERNET_PORT nServerPort,
     LPCSTR lpszUserName ,
     LPCSTR lpszPassword ,
     DWORD dwService,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall InternetConnectW(
     HINTERNET hInternet,
     LPCWSTR lpszServerName,
     INTERNET_PORT nServerPort,
     LPCWSTR lpszUserName ,
     LPCWSTR lpszPassword ,
     DWORD dwService,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 865 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"










extern "C" __declspec(dllimport) HINTERNET __stdcall InternetOpenUrlA(
     HINTERNET hInternet,
     LPCSTR lpszUrl,
     LPCSTR lpszHeaders ,
     DWORD dwHeadersLength,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall InternetOpenUrlW(
     HINTERNET hInternet,
     LPCWSTR lpszUrl,
     LPCWSTR lpszHeaders ,
     DWORD dwHeadersLength,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 896 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetReadFile(
     HINTERNET hFile,
     LPVOID lpBuffer,
     DWORD dwNumberOfBytesToRead,
     LPDWORD lpdwNumberOfBytesRead
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetReadFileExA(
     HINTERNET hFile,
     LPINTERNET_BUFFERSA lpBuffersOut,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetReadFileExW(
     HINTERNET hFile,
     LPINTERNET_BUFFERSW lpBuffersOut,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 921 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"










extern "C" __declspec(dllimport) DWORD __stdcall InternetSetFilePointer(
     HINTERNET hFile,
     LONG  lDistanceToMove,
     PVOID pReserved,
     DWORD dwMoveMethod,
     DWORD_PTR dwContext
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetWriteFile(
     HINTERNET hFile,
     LPCVOID lpBuffer,
     DWORD dwNumberOfBytesToWrite,
     LPDWORD lpdwNumberOfBytesWritten
    );


extern "C" __declspec(dllimport) BOOL __stdcall InternetQueryDataAvailable(
     HINTERNET hFile,
     LPDWORD lpdwNumberOfBytesAvailable ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetFindNextFileA(
     HINTERNET hFind,
     LPVOID lpvFindData
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetFindNextFileW(
     HINTERNET hFind,
     LPVOID lpvFindData
    );




#line 967 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetQueryOptionA(
     HINTERNET hInternet ,
     DWORD dwOption,
     LPVOID lpBuffer ,
      LPDWORD lpdwBufferLength
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetQueryOptionW(
     HINTERNET hInternet ,
     DWORD dwOption,
     LPVOID lpBuffer ,
      LPDWORD lpdwBufferLength
    );




#line 985 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetSetOptionA(
     HINTERNET hInternet ,
     DWORD dwOption,
     LPVOID lpBuffer,
     DWORD dwBufferLength
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetSetOptionW(
     HINTERNET hInternet ,
     DWORD dwOption,
     LPVOID lpBuffer,
     DWORD dwBufferLength
    );




#line 1003 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetSetOptionExA(
     HINTERNET hInternet ,
     DWORD dwOption,
     LPVOID lpBuffer,
     DWORD dwBufferLength,
     DWORD dwFlags
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetSetOptionExW(
     HINTERNET hInternet ,
     DWORD dwOption,
     LPVOID lpBuffer,
     DWORD dwBufferLength,
     DWORD dwFlags
    );




#line 1023 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetLockRequestFile(
      HINTERNET hInternet,
     HANDLE * lphLockRequestInfo
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetUnlockRequestFile(
     HANDLE hLockRequestInfo
    );
































































































































































































extern "C" __declspec(dllimport) BOOL __stdcall InternetGetLastResponseInfoA(
     LPDWORD lpdwError,
     LPSTR lpszBuffer ,
      LPDWORD lpdwBufferLength
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetGetLastResponseInfoW(
     LPDWORD lpdwError,
     LPWSTR lpszBuffer ,
      LPDWORD lpdwBufferLength
    );




#line 1239 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"





typedef
void
(__stdcall * INTERNET_STATUS_CALLBACK)(
     HINTERNET hInternet,
     DWORD_PTR dwContext,
     DWORD dwInternetStatus,
     LPVOID lpvStatusInformation ,
     DWORD dwStatusInformationLength
    );

typedef INTERNET_STATUS_CALLBACK * LPINTERNET_STATUS_CALLBACK;

extern "C" __declspec(dllimport) INTERNET_STATUS_CALLBACK __stdcall InternetSetStatusCallbackA(
     HINTERNET hInternet,
     INTERNET_STATUS_CALLBACK lpfnInternetCallback
    );

extern "C" __declspec(dllimport) INTERNET_STATUS_CALLBACK __stdcall InternetSetStatusCallbackW(
     HINTERNET hInternet,
     INTERNET_STATUS_CALLBACK lpfnInternetCallback
    );







extern "C" __declspec(dllimport) INTERNET_STATUS_CALLBACK __stdcall InternetSetStatusCallback(
     HINTERNET hInternet,
     INTERNET_STATUS_CALLBACK lpfnInternetCallback
    );
#line 1277 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 1278 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"














































typedef enum {

    COOKIE_STATE_UNKNOWN        = 0x0,

    COOKIE_STATE_ACCEPT         = 0x1,
    COOKIE_STATE_PROMPT         = 0x2,
    COOKIE_STATE_LEASH          = 0x3,
    COOKIE_STATE_DOWNGRADE      = 0x4,
    COOKIE_STATE_REJECT         = 0x5,

    COOKIE_STATE_MAX            = COOKIE_STATE_REJECT,
}
InternetCookieState;

typedef struct {

    int         cSession;           
    int         cPersistent;        

    int         cAccepted;          
    int         cLeashed;           
    int         cDowngraded;        
    int         cBlocked;           

    const char *pszLocation;        
                                    
}
IncomingCookieState;

typedef struct {

    int     cSent;           
    int     cSuppressed;

    const char *pszLocation;        
                                    
}
OutgoingCookieState;

typedef struct {

    BOOL    fAccepted;
    BOOL    fLeashed;
    BOOL    fDowngraded;
    BOOL    fRejected;
}
InternetCookieHistory;


typedef struct {

    DWORD   dwCookieState;
    BOOL    fAllowSession;
}
CookieDecision;



























extern "C" __declspec(dllimport) HINTERNET __stdcall FtpFindFirstFileA(
     HINTERNET hConnect,
     LPCSTR lpszSearchFile ,
     LPWIN32_FIND_DATAA lpFindFileData ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall FtpFindFirstFileW(
     HINTERNET hConnect,
     LPCWSTR lpszSearchFile ,
     LPWIN32_FIND_DATAW lpFindFileData ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 1425 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpGetFileA(
     HINTERNET hConnect,
     LPCSTR lpszRemoteFile,
     LPCSTR lpszNewFile,
     BOOL fFailIfExists,
     DWORD dwFlagsAndAttributes,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpGetFileW(
     HINTERNET hConnect,
     LPCWSTR lpszRemoteFile,
     LPCWSTR lpszNewFile,
     BOOL fFailIfExists,
     DWORD dwFlagsAndAttributes,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 1449 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpPutFileA(
     HINTERNET hConnect,
     LPCSTR lpszLocalFile,
     LPCSTR lpszNewRemoteFile,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpPutFileW(
     HINTERNET hConnect,
     LPCWSTR lpszLocalFile,
     LPCWSTR lpszNewRemoteFile,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 1469 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpGetFileEx(
     HINTERNET hFtpSession,
     LPCSTR lpszRemoteFile,
     LPCWSTR lpszNewFile,
     BOOL fFailIfExists,
     DWORD dwFlagsAndAttributes,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );

extern "C" __declspec(dllimport) BOOL __stdcall FtpPutFileEx(
     HINTERNET hFtpSession,
     LPCWSTR lpszLocalFile,
     LPCSTR lpszNewRemoteFile,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );

extern "C" __declspec(dllimport) BOOL __stdcall FtpDeleteFileA(
     HINTERNET hConnect,
     LPCSTR lpszFileName
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpDeleteFileW(
     HINTERNET hConnect,
     LPCWSTR lpszFileName
    );




#line 1501 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpRenameFileA(
     HINTERNET hConnect,
     LPCSTR lpszExisting,
     LPCSTR lpszNew
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpRenameFileW(
     HINTERNET hConnect,
     LPCWSTR lpszExisting,
     LPCWSTR lpszNew
    );




#line 1517 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) HINTERNET __stdcall FtpOpenFileA(
     HINTERNET hConnect,
     LPCSTR lpszFileName,
     DWORD dwAccess,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall FtpOpenFileW(
     HINTERNET hConnect,
     LPCWSTR lpszFileName,
     DWORD dwAccess,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 1537 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpCreateDirectoryA(
     HINTERNET hConnect,
     LPCSTR lpszDirectory
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpCreateDirectoryW(
     HINTERNET hConnect,
     LPCWSTR lpszDirectory
    );




#line 1551 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpRemoveDirectoryA(
     HINTERNET hConnect,
     LPCSTR lpszDirectory
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpRemoveDirectoryW(
     HINTERNET hConnect,
     LPCWSTR lpszDirectory
    );




#line 1565 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpSetCurrentDirectoryA(
     HINTERNET hConnect,
     LPCSTR lpszDirectory
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpSetCurrentDirectoryW(
     HINTERNET hConnect,
     LPCWSTR lpszDirectory
    );




#line 1579 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpGetCurrentDirectoryA(
     HINTERNET hConnect,
     LPSTR lpszCurrentDirectory,
      LPDWORD lpdwCurrentDirectory
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpGetCurrentDirectoryW(
     HINTERNET hConnect,
     LPWSTR lpszCurrentDirectory,
      LPDWORD lpdwCurrentDirectory
    );




#line 1595 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FtpCommandA(
     HINTERNET hConnect,
     BOOL fExpectResponse,
     DWORD dwFlags,
     LPCSTR lpszCommand,
     DWORD_PTR dwContext,
     HINTERNET *phFtpCommand 
    );
extern "C" __declspec(dllimport) BOOL __stdcall FtpCommandW(
     HINTERNET hConnect,
     BOOL fExpectResponse,
     DWORD dwFlags,
     LPCWSTR lpszCommand,
     DWORD_PTR dwContext,
     HINTERNET *phFtpCommand 
    );




#line 1617 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) DWORD __stdcall FtpGetFileSize(
     HINTERNET hFile,
     LPDWORD lpdwFileSizeHigh 
    );








































typedef struct {
    CHAR   DisplayString[128 + 1];
    DWORD GopherType;   
    DWORD SizeLow;
    DWORD SizeHigh;
    FILETIME LastModificationTime;
    CHAR   Locator[(1 + 128 + 1 + 256 + 1 + 256 + 1 + 5 + 1 + 1 + 2 ) + 1];
} GOPHER_FIND_DATAA, * LPGOPHER_FIND_DATAA;
typedef struct {
    WCHAR  DisplayString[128 + 1];
    DWORD GopherType;   
    DWORD SizeLow;
    DWORD SizeHigh;
    FILETIME LastModificationTime;
    WCHAR  Locator[(1 + 128 + 1 + 256 + 1 + 256 + 1 + 5 + 1 + 1 + 2 ) + 1];
} GOPHER_FIND_DATAW, * LPGOPHER_FIND_DATAW;




typedef GOPHER_FIND_DATAA GOPHER_FIND_DATA;
typedef LPGOPHER_FIND_DATAA LPGOPHER_FIND_DATA;
#line 1685 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"








































































typedef struct {
    LPCTSTR Comment;
    LPCTSTR EmailAddress;
} GOPHER_ADMIN_ATTRIBUTE_TYPE, * LPGOPHER_ADMIN_ATTRIBUTE_TYPE;

typedef struct {
    FILETIME DateAndTime;
} GOPHER_MOD_DATE_ATTRIBUTE_TYPE, * LPGOPHER_MOD_DATE_ATTRIBUTE_TYPE;

typedef struct {
    DWORD Ttl;
} GOPHER_TTL_ATTRIBUTE_TYPE, * LPGOPHER_TTL_ATTRIBUTE_TYPE;

typedef struct {
    INT Score;
} GOPHER_SCORE_ATTRIBUTE_TYPE, * LPGOPHER_SCORE_ATTRIBUTE_TYPE;

typedef struct {
    INT LowerBound;
    INT UpperBound;
} GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE, * LPGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Site;
} GOPHER_SITE_ATTRIBUTE_TYPE, * LPGOPHER_SITE_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Organization;
} GOPHER_ORGANIZATION_ATTRIBUTE_TYPE, * LPGOPHER_ORGANIZATION_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Location;
} GOPHER_LOCATION_ATTRIBUTE_TYPE, * LPGOPHER_LOCATION_ATTRIBUTE_TYPE;

typedef struct {
    INT DegreesNorth;
    INT MinutesNorth;
    INT SecondsNorth;
    INT DegreesEast;
    INT MinutesEast;
    INT SecondsEast;
} GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE, * LPGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE;

typedef struct {
    INT Zone;
} GOPHER_TIMEZONE_ATTRIBUTE_TYPE, * LPGOPHER_TIMEZONE_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Provider;
} GOPHER_PROVIDER_ATTRIBUTE_TYPE, * LPGOPHER_PROVIDER_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR Version;
} GOPHER_VERSION_ATTRIBUTE_TYPE, * LPGOPHER_VERSION_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR ShortAbstract;
    LPCTSTR AbstractFile;
} GOPHER_ABSTRACT_ATTRIBUTE_TYPE, * LPGOPHER_ABSTRACT_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR ContentType;
    LPCTSTR Language;
    DWORD Size;
} GOPHER_VIEW_ATTRIBUTE_TYPE, * LPGOPHER_VIEW_ATTRIBUTE_TYPE;

typedef struct {
    BOOL TreeWalk;
} GOPHER_VERONICA_ATTRIBUTE_TYPE, * LPGOPHER_VERONICA_ATTRIBUTE_TYPE;

typedef struct {
    LPCTSTR QuestionType;
    LPCTSTR QuestionText;
} GOPHER_ASK_ATTRIBUTE_TYPE, * LPGOPHER_ASK_ATTRIBUTE_TYPE;







typedef struct {
    LPCTSTR Text;
} GOPHER_UNKNOWN_ATTRIBUTE_TYPE, * LPGOPHER_UNKNOWN_ATTRIBUTE_TYPE;






typedef struct {
    DWORD CategoryId;   
    DWORD AttributeId;  
    union {
        GOPHER_ADMIN_ATTRIBUTE_TYPE Admin;
        GOPHER_MOD_DATE_ATTRIBUTE_TYPE ModDate;
        GOPHER_TTL_ATTRIBUTE_TYPE Ttl;
        GOPHER_SCORE_ATTRIBUTE_TYPE Score;
        GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE ScoreRange;
        GOPHER_SITE_ATTRIBUTE_TYPE Site;
        GOPHER_ORGANIZATION_ATTRIBUTE_TYPE Organization;
        GOPHER_LOCATION_ATTRIBUTE_TYPE Location;
        GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE GeographicalLocation;
        GOPHER_TIMEZONE_ATTRIBUTE_TYPE TimeZone;
        GOPHER_PROVIDER_ATTRIBUTE_TYPE Provider;
        GOPHER_VERSION_ATTRIBUTE_TYPE Version;
        GOPHER_ABSTRACT_ATTRIBUTE_TYPE Abstract;
        GOPHER_VIEW_ATTRIBUTE_TYPE View;
        GOPHER_VERONICA_ATTRIBUTE_TYPE Veronica;
        GOPHER_ASK_ATTRIBUTE_TYPE Ask;
        GOPHER_UNKNOWN_ATTRIBUTE_TYPE Unknown;
    } AttributeType;
} GOPHER_ATTRIBUTE_TYPE, * LPGOPHER_ATTRIBUTE_TYPE;













































































extern "C" __declspec(dllimport) BOOL __stdcall GopherCreateLocatorA(
     LPCSTR lpszHost,
     INTERNET_PORT nServerPort,
     LPCSTR lpszDisplayString ,
     LPCSTR lpszSelectorString ,
     DWORD dwGopherType,
     LPSTR lpszLocator ,
      LPDWORD lpdwBufferLength
    );
extern "C" __declspec(dllimport) BOOL __stdcall GopherCreateLocatorW(
     LPCWSTR lpszHost,
     INTERNET_PORT nServerPort,
     LPCWSTR lpszDisplayString ,
     LPCWSTR lpszSelectorString ,
     DWORD dwGopherType,
     LPWSTR lpszLocator ,
      LPDWORD lpdwBufferLength
    );




#line 1970 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall GopherGetLocatorTypeA(
     LPCSTR lpszLocator,
     LPDWORD lpdwGopherType
    );
extern "C" __declspec(dllimport) BOOL __stdcall GopherGetLocatorTypeW(
     LPCWSTR lpszLocator,
     LPDWORD lpdwGopherType
    );




#line 1984 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) HINTERNET __stdcall GopherFindFirstFileA(
     HINTERNET hConnect,
     LPCSTR lpszLocator ,
     LPCSTR lpszSearchString ,
     LPGOPHER_FIND_DATAA lpFindData ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall GopherFindFirstFileW(
     HINTERNET hConnect,
     LPCWSTR lpszLocator ,
     LPCWSTR lpszSearchString ,
     LPGOPHER_FIND_DATAW lpFindData ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 2006 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) HINTERNET __stdcall GopherOpenFileA(
     HINTERNET hConnect,
     LPCSTR lpszLocator,
     LPCSTR lpszView ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall GopherOpenFileW(
     HINTERNET hConnect,
     LPCWSTR lpszLocator,
     LPCWSTR lpszView ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 2026 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

typedef BOOL (__stdcall * GOPHER_ATTRIBUTE_ENUMERATOR)(
    LPGOPHER_ATTRIBUTE_TYPE lpAttributeInfo,
    DWORD dwError
    );

extern "C" __declspec(dllimport) BOOL __stdcall GopherGetAttributeA(
     HINTERNET hConnect,
     LPCSTR lpszLocator,
     LPCSTR lpszAttributeName ,
     LPBYTE lpBuffer,
     DWORD dwBufferLength,
     LPDWORD lpdwCharactersReturned,
     GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator ,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) BOOL __stdcall GopherGetAttributeW(
     HINTERNET hConnect,
     LPCWSTR lpszLocator,
     LPCWSTR lpszAttributeName ,
     LPBYTE lpBuffer,
     DWORD dwBufferLength,
     LPDWORD lpdwCharactersReturned,
     GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator ,
     DWORD_PTR dwContext
    );




#line 2057 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"























#line 2081 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

















































































































































































































extern "C" __declspec(dllimport) HINTERNET __stdcall HttpOpenRequestA(
     HINTERNET hConnect,
     LPCSTR lpszVerb,
     LPCSTR lpszObjectName,
     LPCSTR lpszVersion,
     LPCSTR lpszReferrer ,
     LPCSTR  * lplpszAcceptTypes ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) HINTERNET __stdcall HttpOpenRequestW(
     HINTERNET hConnect,
     LPCWSTR lpszVerb,
     LPCWSTR lpszObjectName,
     LPCWSTR lpszVersion,
     LPCWSTR lpszReferrer ,
     LPCWSTR  * lplpszAcceptTypes ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 2315 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall HttpAddRequestHeadersA(
     HINTERNET hRequest,
     LPCSTR lpszHeaders,
     DWORD dwHeadersLength,
     DWORD dwModifiers
    );
extern "C" __declspec(dllimport) BOOL __stdcall HttpAddRequestHeadersW(
     HINTERNET hRequest,
     LPCWSTR lpszHeaders,
     DWORD dwHeadersLength,
     DWORD dwModifiers
    );




#line 2333 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"











































extern "C" __declspec(dllimport) BOOL __stdcall HttpSendRequestA(
     HINTERNET hRequest,
     LPCSTR lpszHeaders ,
     DWORD dwHeadersLength,
     LPVOID lpOptional ,
     DWORD dwOptionalLength
    );
extern "C" __declspec(dllimport) BOOL __stdcall HttpSendRequestW(
     HINTERNET hRequest,
     LPCWSTR lpszHeaders ,
     DWORD dwHeadersLength,
     LPVOID lpOptional ,
     DWORD dwOptionalLength
    );




#line 2395 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall HttpSendRequestExA(
     HINTERNET hRequest,
     LPINTERNET_BUFFERSA lpBuffersIn ,
     LPINTERNET_BUFFERSA lpBuffersOut ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) BOOL __stdcall HttpSendRequestExW(
     HINTERNET hRequest,
     LPINTERNET_BUFFERSW lpBuffersIn ,
     LPINTERNET_BUFFERSW lpBuffersOut ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 2415 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"












extern "C" __declspec(dllimport) BOOL __stdcall HttpEndRequestA(
     HINTERNET hRequest,
     LPINTERNET_BUFFERSA lpBuffersOut ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );
extern "C" __declspec(dllimport) BOOL __stdcall HttpEndRequestW(
     HINTERNET hRequest,
     LPINTERNET_BUFFERSW lpBuffersOut ,
     DWORD dwFlags,
     DWORD_PTR dwContext
    );




#line 2444 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall HttpQueryInfoA(
     HINTERNET hRequest,
     DWORD dwInfoLevel,
      LPVOID lpBuffer ,
      LPDWORD lpdwBufferLength,
      LPDWORD lpdwIndex 
    );
extern "C" __declspec(dllimport) BOOL __stdcall HttpQueryInfoW(
     HINTERNET hRequest,
     DWORD dwInfoLevel,
      LPVOID lpBuffer ,
      LPDWORD lpdwBufferLength,
      LPDWORD lpdwIndex 
    );




#line 2464 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"




















extern "C" __declspec(dllimport) BOOL __stdcall InternetSetCookieA(
     LPCSTR lpszUrl,
     LPCSTR lpszCookieName,
     LPCSTR lpszCookieData
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetSetCookieW(
     LPCWSTR lpszUrl,
     LPCWSTR lpszCookieName,
     LPCWSTR lpszCookieData
    );




#line 2499 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetGetCookieA(
     LPCSTR lpszUrl,
     LPCSTR lpszCookieName,
     LPSTR lpCookieData,
      LPDWORD lpdwSize
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetGetCookieW(
     LPCWSTR lpszUrl,
     LPCWSTR lpszCookieName,
     LPWSTR lpCookieData,
      LPDWORD lpdwSize
    );




#line 2517 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) DWORD __stdcall InternetSetCookieExA(
     LPCSTR lpszUrl,
     LPCSTR lpszCookieName,
     LPCSTR lpszCookieData,
    DWORD       dwFlags,
    DWORD_PTR   dwReserved
    );
extern "C" __declspec(dllimport) DWORD __stdcall InternetSetCookieExW(
     LPCWSTR lpszUrl,
     LPCWSTR lpszCookieName,
     LPCWSTR lpszCookieData,
    DWORD       dwFlags,
    DWORD_PTR   dwReserved
    );




#line 2537 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetGetCookieExA(
     LPCSTR pchURL,
     LPCSTR pchCookieName,
     LPSTR pchCookieData ,
      LPDWORD pcchCookieData ,
     DWORD dwFlags,
     LPVOID lpReserved
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetGetCookieExW(
     LPCWSTR pchURL,
     LPCWSTR pchCookieName,
     LPWSTR pchCookieData ,
      LPDWORD pcchCookieData ,
     DWORD dwFlags,
     LPVOID lpReserved
    );




#line 2559 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"





extern "C" __declspec(dllimport) DWORD __stdcall InternetAttemptConnect(
     DWORD dwReserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetCheckConnectionA(
     LPCSTR lpszUrl,
     DWORD dwFlags,
     DWORD dwReserved
    );
extern "C" __declspec(dllimport) BOOL __stdcall InternetCheckConnectionW(
     LPCWSTR lpszUrl,
     DWORD dwFlags,
     DWORD dwReserved
    );




#line 2583 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"






















DWORD InternetAuthNotifyCallback
(
    DWORD_PTR       dwContext,    
    DWORD           dwReturn,     
    LPVOID          lpReserved    
);
typedef DWORD (__stdcall * PFN_AUTH_NOTIFY) (DWORD_PTR, DWORD, LPVOID);





typedef struct
{
    DWORD            cbStruct;    
    DWORD            dwOptions;   
    PFN_AUTH_NOTIFY  pfnNotify;   
    DWORD_PTR        dwContext;   
}
    INTERNET_AUTH_NOTIFY_DATA;


extern "C" __declspec(dllimport) BOOL __stdcall ResumeSuspendedDownload(
     HINTERNET hRequest,
     DWORD dwResultCode
    );

extern "C" __declspec(dllimport) DWORD __stdcall InternetErrorDlg(
     HWND hWnd,
      HINTERNET hRequest,
     DWORD dwError,
     DWORD dwFlags,
      LPVOID * lppvData
    );

extern "C" __declspec(dllimport) DWORD __stdcall InternetConfirmZoneCrossingA(
     HWND hWnd,
     LPSTR szUrlPrev,
     LPSTR szUrlNew,
     BOOL bPost
    );

extern "C" __declspec(dllimport) DWORD __stdcall InternetConfirmZoneCrossingW(
     HWND hWnd,
     LPWSTR szUrlPrev,
     LPWSTR szUrlNew,
     BOOL bPost
    );







extern "C" __declspec(dllimport) DWORD __stdcall InternetConfirmZoneCrossing(
     HWND hWnd,
     LPSTR szUrlPrev,
     LPSTR szUrlNew,
     BOOL bPost
    );
#line 2667 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 2668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"









































































































































































#pragma warning(push)
#line 2839 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#pragma warning(disable:4201)

typedef struct _INTERNET_CACHE_ENTRY_INFOA {
    DWORD dwStructSize;         
    LPSTR   lpszSourceUrlName;    
    LPSTR   lpszLocalFileName;  
    DWORD CacheEntryType;       
    DWORD dwUseCount;           
    DWORD dwHitRate;            
    DWORD dwSizeLow;            
    DWORD dwSizeHigh;           
    FILETIME LastModifiedTime;  
    FILETIME ExpireTime;        
    FILETIME LastAccessTime;    
    FILETIME LastSyncTime;      
                                
    LPSTR   lpHeaderInfo;        
    DWORD dwHeaderInfoSize;     
    LPSTR   lpszFileExtension;  
        union {                     
                DWORD dwReserved;
                DWORD dwExemptDelta;
    };                          
} INTERNET_CACHE_ENTRY_INFOA, * LPINTERNET_CACHE_ENTRY_INFOA;
typedef struct _INTERNET_CACHE_ENTRY_INFOW {
    DWORD dwStructSize;         
    LPWSTR  lpszSourceUrlName;    
    LPWSTR  lpszLocalFileName;  
    DWORD CacheEntryType;       
    DWORD dwUseCount;           
    DWORD dwHitRate;            
    DWORD dwSizeLow;            
    DWORD dwSizeHigh;           
    FILETIME LastModifiedTime;  
    FILETIME ExpireTime;        
    FILETIME LastAccessTime;    
    FILETIME LastSyncTime;      
                                
    LPWSTR  lpHeaderInfo;        
    DWORD dwHeaderInfoSize;     
    LPWSTR  lpszFileExtension;  
        union {                     
                DWORD dwReserved;
                DWORD dwExemptDelta;
    };                          
} INTERNET_CACHE_ENTRY_INFOW, * LPINTERNET_CACHE_ENTRY_INFOW;




typedef INTERNET_CACHE_ENTRY_INFOA INTERNET_CACHE_ENTRY_INFO;
typedef LPINTERNET_CACHE_ENTRY_INFOA LPINTERNET_CACHE_ENTRY_INFO;
#line 2892 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


#pragma warning(pop)


#line 2898 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

typedef struct _INTERNET_CACHE_TIMESTAMPS {
    FILETIME    ftExpires;
    FILETIME    ftLastModified;
} INTERNET_CACHE_TIMESTAMPS, *LPINTERNET_CACHE_TIMESTAMPS;






typedef LONGLONG GROUPID;







































typedef struct _INTERNET_CACHE_GROUP_INFOA {
    DWORD           dwGroupSize;
    DWORD           dwGroupFlags;
    DWORD           dwGroupType;
    DWORD           dwDiskUsage;    
    DWORD           dwDiskQuota;    
    DWORD           dwOwnerStorage[4];
    CHAR            szGroupName[120];
} INTERNET_CACHE_GROUP_INFOA, * LPINTERNET_CACHE_GROUP_INFOA;
typedef struct _INTERNET_CACHE_GROUP_INFOW {
    DWORD           dwGroupSize;
    DWORD           dwGroupFlags;
    DWORD           dwGroupType;
    DWORD           dwDiskUsage;    
    DWORD           dwDiskQuota;    
    DWORD           dwOwnerStorage[4];
    WCHAR           szGroupName[120];
} INTERNET_CACHE_GROUP_INFOW, * LPINTERNET_CACHE_GROUP_INFOW;




typedef INTERNET_CACHE_GROUP_INFOA INTERNET_CACHE_GROUP_INFO;
typedef LPINTERNET_CACHE_GROUP_INFOA LPINTERNET_CACHE_GROUP_INFO;
#line 2974 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"







extern "C" __declspec(dllimport) BOOL __stdcall CreateUrlCacheEntryA(
     LPCSTR lpszUrlName,
     DWORD dwExpectedFileSize,
     LPCSTR lpszFileExtension,
     LPSTR lpszFileName,
     DWORD dwReserved
    );
extern "C" __declspec(dllimport) BOOL __stdcall CreateUrlCacheEntryW(
     LPCWSTR lpszUrlName,
     DWORD dwExpectedFileSize,
     LPCWSTR lpszFileExtension,
     LPWSTR lpszFileName,
     DWORD dwReserved
    );




#line 3000 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"













extern "C" __declspec(dllimport) BOOL __stdcall CommitUrlCacheEntryA(
     LPCSTR lpszUrlName,
     LPCSTR lpszLocalFileName,
     FILETIME ExpireTime,
     FILETIME LastModifiedTime,
     DWORD CacheEntryType,
     LPBYTE lpHeaderInfo,
     DWORD dwHeaderSize,
     LPCSTR lpszFileExtension,
     LPCSTR lpszOriginalUrl
    );
extern "C" __declspec(dllimport) BOOL __stdcall CommitUrlCacheEntryW(
     LPCWSTR lpszUrlName,
     LPCWSTR lpszLocalFileName,
     FILETIME ExpireTime,
     FILETIME LastModifiedTime,
     DWORD CacheEntryType,
     LPWSTR lpHeaderInfo,
     DWORD dwHeaderSize,
     LPCWSTR lpszFileExtension,
     LPCWSTR lpszOriginalUrl
    );





#line 3041 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"





























#line 3071 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall RetrieveUrlCacheEntryFileA(
     LPCSTR  lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufferSize,
     DWORD dwReserved
    );
extern "C" __declspec(dllimport) BOOL __stdcall RetrieveUrlCacheEntryFileW(
     LPCWSTR  lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufferSize,
     DWORD dwReserved
    );




#line 3089 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall UnlockUrlCacheEntryFileA(
     LPCSTR lpszUrlName,
     DWORD dwReserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall UnlockUrlCacheEntryFileW(
     LPCWSTR lpszUrlName,
     DWORD dwReserved
    );









extern "C" __declspec(dllimport) BOOL __stdcall UnlockUrlCacheEntryFile(
     LPCSTR lpszUrlName,
     DWORD dwReserved
    );
#line 3113 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 3114 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) HANDLE __stdcall RetrieveUrlCacheEntryStreamA(
     LPCSTR  lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufferSize,
     BOOL fRandomRead,
     DWORD dwReserved
    );
extern "C" __declspec(dllimport) HANDLE __stdcall RetrieveUrlCacheEntryStreamW(
     LPCWSTR  lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufferSize,
     BOOL fRandomRead,
     DWORD dwReserved
    );




#line 3134 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall ReadUrlCacheEntryStream(
     HANDLE hUrlCacheStream,
     DWORD dwLocation,
      LPVOID lpBuffer,
      LPDWORD lpdwLen,
     DWORD Reserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall UnlockUrlCacheEntryStream(
     HANDLE hUrlCacheStream,
     DWORD Reserved
    );


extern "C" __declspec(dllimport) BOOL __stdcall GetUrlCacheEntryInfoA(
     LPCSTR lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufferSize
    );
extern "C" __declspec(dllimport) BOOL __stdcall GetUrlCacheEntryInfoW(
     LPCWSTR lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufferSize
    );




#line 3164 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


extern "C" __declspec(dllimport) HANDLE __stdcall FindFirstUrlCacheGroup(
          DWORD                           dwFlags,
          DWORD                           dwFilter,
          LPVOID                          lpSearchCondition,
          DWORD                           dwSearchCondition,
         GROUPID*                        lpGroupId,
       LPVOID                          lpReserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall FindNextUrlCacheGroup(
     HANDLE                               hFind,
     GROUPID*                            lpGroupId,
       LPVOID                          lpReserved
    );


extern "C" __declspec(dllimport) BOOL __stdcall GetUrlCacheGroupAttributeA(
          GROUPID                         gid,
          DWORD                           dwFlags,
          DWORD                           dwAttributes,
         LPINTERNET_CACHE_GROUP_INFOA    lpGroupInfo,
       LPDWORD                         lpdwGroupInfo,
       LPVOID                          lpReserved
    );
extern "C" __declspec(dllimport) BOOL __stdcall GetUrlCacheGroupAttributeW(
          GROUPID                         gid,
          DWORD                           dwFlags,
          DWORD                           dwAttributes,
         LPINTERNET_CACHE_GROUP_INFOW    lpGroupInfo,
       LPDWORD                         lpdwGroupInfo,
       LPVOID                          lpReserved
    );




#line 3203 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall SetUrlCacheGroupAttributeA(
          GROUPID                         gid,
          DWORD                           dwFlags,
          DWORD                           dwAttributes,
          LPINTERNET_CACHE_GROUP_INFOA    lpGroupInfo,
       LPVOID                          lpReserved
    );
extern "C" __declspec(dllimport) BOOL __stdcall SetUrlCacheGroupAttributeW(
          GROUPID                         gid,
          DWORD                           dwFlags,
          DWORD                           dwAttributes,
          LPINTERNET_CACHE_GROUP_INFOW    lpGroupInfo,
       LPVOID                          lpReserved
    );




#line 3223 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


extern "C" __declspec(dllimport) GROUPID __stdcall CreateUrlCacheGroup(
          DWORD                           dwFlags,
          LPVOID                          lpReserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall DeleteUrlCacheGroup(
          GROUPID                         GroupId,
          DWORD                           dwFlags,
          LPVOID                          lpReserved
    );


extern "C" __declspec(dllimport) BOOL __stdcall GetUrlCacheEntryInfoExA(
     LPCSTR lpszUrl,
     LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufSize,
     LPSTR      lpszReserved,  
      LPDWORD lpdwReserved,  
    LPVOID         lpReserved,    
    DWORD          dwFlags        
    );
extern "C" __declspec(dllimport) BOOL __stdcall GetUrlCacheEntryInfoExW(
     LPCWSTR lpszUrl,
     LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
      LPDWORD lpdwCacheEntryInfoBufSize,
     LPWSTR      lpszReserved,  
      LPDWORD lpdwReserved,  
    LPVOID         lpReserved,    
    DWORD          dwFlags        
    );




#line 3260 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"










extern "C" __declspec(dllimport) BOOL __stdcall SetUrlCacheEntryInfoA(
     LPCSTR lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,
     DWORD dwFieldControl
    );
extern "C" __declspec(dllimport) BOOL __stdcall SetUrlCacheEntryInfoW(
     LPCWSTR lpszUrlName,
     LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,
     DWORD dwFieldControl
    );




#line 3285 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"






extern "C" __declspec(dllimport) GROUPID __stdcall CreateUrlCacheGroup(
     DWORD  dwFlags,
     LPVOID lpReserved  
    );

extern "C" __declspec(dllimport) BOOL __stdcall DeleteUrlCacheGroup(
      GROUPID GroupId,
      DWORD   dwFlags,       
      LPVOID  lpReserved     
    );





extern "C" __declspec(dllimport) BOOL __stdcall SetUrlCacheEntryGroupA(
     LPCSTR   lpszUrlName,
     DWORD    dwFlags,
     GROUPID  GroupId,
     LPBYTE   pbGroupAttributes, 
     DWORD    cbGroupAttributes, 
     LPVOID   lpReserved         
    );

extern "C" __declspec(dllimport) BOOL __stdcall SetUrlCacheEntryGroupW(
     LPCWSTR   lpszUrlName,
     DWORD    dwFlags,
     GROUPID  GroupId,
     LPBYTE   pbGroupAttributes, 
     DWORD    cbGroupAttributes, 
     LPVOID   lpReserved         
    );







extern "C" __declspec(dllimport) BOOL __stdcall SetUrlCacheEntryGroup(
     LPCSTR   lpszUrlName,
     DWORD    dwFlags,
     GROUPID  GroupId,
     LPBYTE   pbGroupAttributes, 
     DWORD    cbGroupAttributes, 
     LPVOID   lpReserved         
    );
#line 3339 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 3340 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) HANDLE __stdcall FindFirstUrlCacheEntryExA(
         LPCSTR    lpszUrlSearchPattern,
         DWORD     dwFlags,
         DWORD     dwFilter,
         GROUPID   GroupId,
        LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,
      LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
        LPVOID    lpReserved,     
      LPDWORD   pcbReserved2,   
         LPVOID    lpReserved3     
    );
extern "C" __declspec(dllimport) HANDLE __stdcall FindFirstUrlCacheEntryExW(
         LPCWSTR    lpszUrlSearchPattern,
         DWORD     dwFlags,
         DWORD     dwFilter,
         GROUPID   GroupId,
        LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,
      LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
        LPVOID    lpReserved,     
      LPDWORD   pcbReserved2,   
         LPVOID    lpReserved3     
    );




#line 3368 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FindNextUrlCacheEntryExA(
         HANDLE    hEnumHandle,
        LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,
      LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
        LPVOID    lpReserved,     
      LPDWORD   pcbReserved2,   
         LPVOID    lpReserved3     
    );
extern "C" __declspec(dllimport) BOOL __stdcall FindNextUrlCacheEntryExW(
         HANDLE    hEnumHandle,
        LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,
      LPDWORD   lpdwFirstCacheEntryInfoBufferSize,
        LPVOID    lpReserved,     
      LPDWORD   pcbReserved2,   
         LPVOID    lpReserved3     
    );




#line 3390 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) HANDLE __stdcall FindFirstUrlCacheEntryA(
     LPCSTR lpszUrlSearchPattern,
     LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,
      LPDWORD lpdwFirstCacheEntryInfoBufferSize
    );
extern "C" __declspec(dllimport) HANDLE __stdcall FindFirstUrlCacheEntryW(
     LPCWSTR lpszUrlSearchPattern,
     LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,
      LPDWORD lpdwFirstCacheEntryInfoBufferSize
    );




#line 3406 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall FindNextUrlCacheEntryA(
     HANDLE hEnumHandle,
     LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,
      LPDWORD lpdwNextCacheEntryInfoBufferSize
    );
extern "C" __declspec(dllimport) BOOL __stdcall FindNextUrlCacheEntryW(
     HANDLE hEnumHandle,
     LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo,
      LPDWORD lpdwNextCacheEntryInfoBufferSize
    );




#line 3422 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


extern "C" __declspec(dllimport) BOOL __stdcall FindCloseUrlCache(
     HANDLE hEnumHandle
    );

extern "C" __declspec(dllimport) BOOL __stdcall DeleteUrlCacheEntryA(
     LPCSTR lpszUrlName
    );

extern "C" __declspec(dllimport) BOOL __stdcall DeleteUrlCacheEntryW(
     LPCWSTR lpszUrlName
    );







extern "C" __declspec(dllimport) BOOL __stdcall DeleteUrlCacheEntry(
     LPCSTR lpszUrlName
    );
#line 3446 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 3447 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"







extern "C" __declspec(dllimport) DWORD __stdcall InternetDialA(
     HWND     hwndParent,
     LPSTR   lpszConnectoid,
     DWORD    dwFlags,
     DWORD_PTR *lpdwConnection,
     DWORD    dwReserved
    );

extern "C" __declspec(dllimport) DWORD __stdcall InternetDialW(
     HWND     hwndParent,
     LPWSTR   lpszConnectoid,
     DWORD    dwFlags,
     DWORD_PTR *lpdwConnection,
     DWORD    dwReserved
    );







extern "C" __declspec(dllimport) DWORD __stdcall InternetDial(
     HWND     hwndParent,
     LPSTR   lpszConnectoid,
     DWORD    dwFlags,
     LPDWORD lpdwConnection,
     DWORD    dwReserved
    );
#line 3484 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 3485 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"







extern "C" __declspec(dllimport) DWORD __stdcall InternetHangUp(
     DWORD_PTR    dwConnection,
     DWORD        dwReserved);




extern "C" __declspec(dllimport) BOOL __stdcall InternetGoOnlineA(
     LPSTR   lpszURL,
     HWND     hwndParent,
     DWORD    dwFlags
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetGoOnlineW(
     LPWSTR   lpszURL,
     HWND     hwndParent,
     DWORD    dwFlags
    );







extern "C" __declspec(dllimport) BOOL __stdcall InternetGoOnline(
     LPSTR   lpszURL,
     HWND     hwndParent,
     DWORD    dwFlags
    );
#line 3523 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 3524 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetAutodial(
     DWORD    dwFlags,
     HWND     hwndParent);









extern "C" __declspec(dllimport) BOOL __stdcall InternetAutodialHangup(
     DWORD    dwReserved);

extern "C" __declspec(dllimport) BOOL __stdcall InternetGetConnectedState(
     LPDWORD  lpdwFlags,
     DWORD    dwReserved);

extern "C" __declspec(dllimport) BOOL __stdcall InternetGetConnectedStateExA(
     LPDWORD lpdwFlags,
     LPSTR  lpszConnectionName,
     DWORD    dwNameLen,
     DWORD    dwReserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetGetConnectedStateExW(
     LPDWORD lpdwFlags,
     LPWSTR  lpszConnectionName,
     DWORD    dwNameLen,
     DWORD    dwReserved
    );




extern "C" __declspec(dllimport) BOOL __stdcall InternetInitializeAutoProxyDll(
    DWORD dwReserved
    );







extern "C" __declspec(dllimport) BOOL __stdcall InternetGetConnectedStateEx(
     LPDWORD lpdwFlags,
     LPSTR  lpszConnectionName,
     DWORD    dwNameLen,
     DWORD    dwReserved
    );
#line 3578 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 3579 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"















typedef DWORD (__stdcall * PFN_DIAL_HANDLER) (HWND, LPCSTR, DWORD, LPDWORD);












extern "C" __declspec(dllimport) BOOL __stdcall InternetSetDialStateA(
     LPCSTR lpszConnectoid,
     DWORD    dwState,
     DWORD    dwReserved
    );

extern "C" __declspec(dllimport) BOOL __stdcall InternetSetDialStateW(
     LPCWSTR lpszConnectoid,
     DWORD    dwState,
     DWORD    dwReserved
    );







extern "C" __declspec(dllimport) BOOL __stdcall InternetSetDialState(
     LPCSTR lpszConnectoid,
     DWORD    dwState,
     DWORD    dwReserved
    );
#line 3631 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
#line 3632 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"






extern "C" __declspec(dllimport) BOOL __stdcall InternetSetPerSiteCookieDecisionA(  LPCSTR pchHostName, DWORD dwDecision);
extern "C" __declspec(dllimport) BOOL __stdcall InternetSetPerSiteCookieDecisionW(  LPCWSTR pchHostName, DWORD dwDecision);




#line 3645 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"
extern "C" __declspec(dllimport) BOOL __stdcall InternetGetPerSiteCookieDecisionA(  LPCSTR pchHostName, unsigned long* pResult);
extern "C" __declspec(dllimport) BOOL __stdcall InternetGetPerSiteCookieDecisionW(  LPCWSTR pchHostName, unsigned long* pResult);




#line 3652 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

extern "C" __declspec(dllimport) BOOL __stdcall InternetClearAllPerSiteCookieDecisions();


extern "C" __declspec(dllimport) BOOL __stdcall InternetEnumPerSiteCookieDecisionA( LPSTR pszSiteName,   unsigned long *pcSiteNameSize,  unsigned long *pdwDecision,  unsigned long dwIndex);
extern "C" __declspec(dllimport) BOOL __stdcall InternetEnumPerSiteCookieDecisionW( LPWSTR pszSiteName,   unsigned long *pcSiteNameSize,  unsigned long *pdwDecision,  unsigned long dwIndex);




#line 3663 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

    





























extern "C" __declspec(dllimport) DWORD __stdcall
PrivacySetZonePreferenceW(
    DWORD       dwZone, 
    DWORD       dwType,
    DWORD       dwTemplate,
    LPCWSTR     pszPreference
    );

extern "C" __declspec(dllimport) DWORD __stdcall
PrivacyGetZonePreferenceW(
    DWORD       dwZone,
    DWORD       dwType,
    LPDWORD     pdwTemplate,
    LPWSTR      pszBuffer,
    LPDWORD     pdwBufferLength
    );




}
#line 3716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"






#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"


#line 36 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 37 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\poppack.h"
#line 3723 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"


#line 3726 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\wininet.h"

#line 34 "stdafx.h"




#line 39 "stdafx.h"
#line 9 "Upload.cpp"
#line 1 "IDocPost.h"

#pragma warning( disable: 4049 )  




 




























#line 37 "IDocPost.h"





#pragma once
#line 44 "IDocPost.h"

 



typedef struct IUpload IUpload;
#line 51 "IDocPost.h"






typedef class Upload Upload;


#line 61 "IDocPost.h"

#line 63 "IDocPost.h"







extern "C"{
#line 72 "IDocPost.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 





 


extern "C" const IID IID_IUpload;


    
    struct __declspec(uuid("82C12E1E-9452-4186-B9BB-66C032E095B5")) __declspec(novtable)
    IUpload : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall UploadFile( 
             BSTR FileName,
             BSTR Server,
             BSTR URL,
             long bRemove,
             VARIANT *pErrorCode) = 0;
        
        virtual  HRESULT __stdcall SelectFile( 
             long bSaving,
             VARIANT *pFileName) = 0;
        
        virtual  HRESULT __stdcall DownloadFile( 
             BSTR URL,
             BSTR LocalPath,
             VARIANT *pFileLoc,
             VARIANT *pErrorCode) = 0;
        
        virtual  HRESULT __stdcall CallURL( 
             BSTR URL,
             VARIANT *pResponse,
             VARIANT *pErrorCode) = 0;
        
        virtual  HRESULT __stdcall SelectDir( 
             VARIANT *pDir) = 0;
        
        virtual  HRESULT __stdcall DeleteFileA( 
             BSTR FileName) = 0;
        
        virtual  HRESULT __stdcall GetTempPathA( 
             VARIANT *pTempPath) = 0;
        
    };
    
















































































































































#line 269 "IDocPost.h"



 HRESULT __stdcall IUpload_UploadFile_Proxy( 
    IUpload * This,
     BSTR FileName,
     BSTR Server,
     BSTR URL,
     long bRemove,
     VARIANT *pErrorCode);


void __stdcall IUpload_UploadFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IUpload_SelectFile_Proxy( 
    IUpload * This,
     long bSaving,
     VARIANT *pFileName);


void __stdcall IUpload_SelectFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IUpload_DownloadFile_Proxy( 
    IUpload * This,
     BSTR URL,
     BSTR LocalPath,
     VARIANT *pFileLoc,
     VARIANT *pErrorCode);


void __stdcall IUpload_DownloadFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IUpload_CallURL_Proxy( 
    IUpload * This,
     BSTR URL,
     VARIANT *pResponse,
     VARIANT *pErrorCode);


void __stdcall IUpload_CallURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IUpload_SelectDir_Proxy( 
    IUpload * This,
     VARIANT *pDir);


void __stdcall IUpload_SelectDir_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IUpload_DeleteFile_Proxy( 
    IUpload * This,
     BSTR FileName);


void __stdcall IUpload_DeleteFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IUpload_GetTempPath_Proxy( 
    IUpload * This,
     VARIANT *pTempPath);


void __stdcall IUpload_GetTempPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 368 "IDocPost.h"







 


extern "C" const IID LIBID_IDOCPOSTLib;

extern "C" const CLSID CLSID_Upload;



class __declspec(uuid("CDB30A8F-7EB9-407D-A20D-E10010CEF693"))
Upload;
#line 387 "IDocPost.h"
#line 388 "IDocPost.h"



unsigned long             __stdcall  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __stdcall  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long *, VARIANT * ); 




}
#line 406 "IDocPost.h"

#line 408 "IDocPost.h"


#line 10 "Upload.cpp"
#line 1 "Upload.h"





#line 1 "resource.h"





















#line 7 "Upload.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlctl.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 8 "Upload.h"




class __declspec(novtable) CUpload : 
	public CComObjectRootEx<CComSingleThreadModel>,
	public CStockPropImpl<CUpload, IUpload, &IID_IUpload, &LIBID_IDOCPOSTLib>,
	public CComControl<CUpload>,
	public IPersistStreamInitImpl<CUpload>,
	public IOleControlImpl<CUpload>,
	public IOleObjectImpl<CUpload>,
	public IOleInPlaceActiveObjectImpl<CUpload>,
	public IViewObjectExImpl<CUpload>,
	public IOleInPlaceObjectWindowlessImpl<CUpload>,
	public CComCoClass<CUpload, &CLSID_Upload>
{
public:
	CUpload()
	{
	}

	~CUpload()
	{
	}


public: typedef CComCreator2< CComCreator< CComObject< CUpload > >, CComCreator< CComAggObject< CUpload > > > _CreatorClass;
public: virtual IUnknown* GetControllingUnknown() {return GetUnknown();}


static HRESULT __stdcall UpdateRegistry(BOOL bRegister) { return _Module.UpdateRegistryFromResourceD(103, bRegister); }

void InternalFinalConstructAddRef() {InternalAddRef();} void InternalFinalConstructRelease() {InternalRelease();}

public: typedef CUpload _ComMapClass; static HRESULT __stdcall _Cache(void* pv, const IID & iid, void** ppvObject, DWORD dw) { _ComMapClass* p = (_ComMapClass*)pv; p->Lock(); HRESULT hRes = CComObjectRootBase::_Cache(pv, iid, ppvObject, dw); p->Unlock(); return hRes; } IUnknown* _GetRawUnknown() { ((void)0); return (IUnknown*)((int)this+_GetEntries()->dw); } IUnknown* GetUnknown() {return _GetRawUnknown();} HRESULT _InternalQueryInterface(const IID & iid, void** ppvObject) { return InternalQueryInterface(this, _GetEntries(), iid, ppvObject); } const static _ATL_INTMAP_ENTRY* __stdcall _GetEntries() { static const _ATL_INTMAP_ENTRY _entries[] = { 
	{&__uuidof(IUpload), ((DWORD)(static_cast<IUpload*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IDispatch), ((DWORD)(static_cast<IDispatch*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IViewObjectEx), ((DWORD)(static_cast<IViewObjectEx*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IViewObject2), ((DWORD)(static_cast<IViewObject2*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IViewObject), ((DWORD)(static_cast<IViewObject*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IOleInPlaceObjectWindowless), ((DWORD)(static_cast<IOleInPlaceObjectWindowless*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IOleInPlaceObject), ((DWORD)(static_cast<IOleInPlaceObject*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IOleWindow), (DWORD)((IOleWindow*)(IOleInPlaceObjectWindowless*)((_ComMapClass*)8))-8, ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IOleInPlaceActiveObject), ((DWORD)(static_cast<IOleInPlaceActiveObject*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IOleControl), ((DWORD)(static_cast<IOleControl*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IOleObject), ((DWORD)(static_cast<IOleObject*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IPersistStreamInit), ((DWORD)(static_cast<IPersistStreamInit*>((_ComMapClass*)8))-8), ((_ATL_CREATORARGFUNC*)1)},
	{&__uuidof(IPersist), (DWORD)((IPersist*)(IPersistStreamInit*)((_ComMapClass*)8))-8, ((_ATL_CREATORARGFUNC*)1)},
{0, 0, 0}}; return _entries;} virtual ULONG __stdcall AddRef( void) = 0; virtual ULONG __stdcall Release( void) = 0; virtual HRESULT __stdcall QueryInterface(const IID &, void**) = 0;

typedef _ATL_PROP_NOTIFY_EVENT_CLASS __ATL_PROP_NOTIFY_EVENT_CLASS; typedef CUpload _PropMapClass; static ATL_PROPMAP_ENTRY* GetPropertyMap() { static ATL_PROPMAP_ENTRY pPropMap[] = {
	{L"_cx", 0, &GUID_NULL, 0, (size_t)&(((_PropMapClass *)0)->m_sizeExtent.cx), sizeof(((_PropMapClass*)0)->m_sizeExtent.cx), VT_UI4},
	{L"_cy", 0, &GUID_NULL, 0, (size_t)&(((_PropMapClass *)0)->m_sizeExtent.cy), sizeof(((_PropMapClass*)0)->m_sizeExtent.cy), VT_UI4},
	
	
	
{0, 0, 0, &GUID_NULL, 0, 0, 0} }; return pPropMap; }

public: BOOL ProcessWindowMessage(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT& lResult, DWORD dwMsgMapID = 0) { BOOL bHandled = 1; hWnd; uMsg; wParam; lParam; lResult; bHandled; switch(dwMsgMapID) { case 0:
	{ if(CComControl<CUpload>::ProcessWindowMessage(hWnd, uMsg, wParam, lParam, lResult)) return 1; }
	if(DefaultReflectionHandler(hWnd, uMsg, wParam, lParam, lResult)) return 1;
break; default: 1 ? (void)0 : AtlTrace2(atlTraceWindowing, 0, "Invalid message map ID (%i)\n", dwMsgMapID); ((void)0); break; } return 0; }








	DWORD _GetViewStatus() { return VIEWSTATUS_SOLIDBKGND | VIEWSTATUS_OPAQUE; }


public:
	virtual HRESULT __stdcall GetTempPathA( VARIANT *pTempPath);
	virtual HRESULT __stdcall DeleteFileA( BSTR FileName);
	virtual HRESULT __stdcall CallURL( BSTR URL,  VARIANT *pResponse,  VARIANT *pErrorCode);
	virtual HRESULT __stdcall DownloadFile(BSTR URL, BSTR LocalPath, VARIANT* pFileLoc, VARIANT* pErrorCode);
	virtual HRESULT __stdcall SelectFile(long bSaving, VARIANT* pFileName);
	virtual HRESULT __stdcall SelectDir(VARIANT* pDir);
	virtual HRESULT __stdcall UploadFile(BSTR FileName, BSTR Server, BSTR URL, long bRemove, VARIANT* pErrorCode);

	HRESULT OnDraw(ATL_DRAWINFO& )
	{
		return(((HRESULT)0x00000000L));
	}

private:
   LONG SendFile(HINTERNET hInetReq, const char* FileName);
   LONG GetFile(HINTERNET hInetReq, const char* FileName);
};

#line 101 "Upload.h"
#line 11 "Upload.cpp"
#line 1 "..\\Common\\LexNetErrs.h"
























































































































































































































































































































































































































































































































































































































































































__inline LONG ENT_ERR(LONG rc) { if (rc < 0) return ((rc & 0x0000FFFF) | 0x80000000 | (0x201 << 16)); else return rc; }
__inline LONG ERR_ENT(LONG rc) { if ((((rc) >> 16) & 0x1fff) == 0x201) return long(short(((rc) & 0xFFFF))); else return rc; }




__inline LONG AFDTS_ERR(LONG rc) { if (rc < 0) return ((rc & 0x0000FFFF) | 0x80000000 | (0x202 << 16)); else return rc; }
__inline LONG ERR_AFDTS(LONG rc) { if ((((rc) >> 16) & 0x1fff) == 0x202) return long(short(((rc) & 0xFFFF))); else return rc; }



__inline LONG LDE(LONG rc) { if (rc > 0) return (rc | 0x80000000 | (0x203 << 16)); else return rc; }
__inline LONG ELD(LONG rc) { if ((((rc) >> 16) & 0x1fff) == 0x203) return ((rc) & 0xFFFF); else return rc; }




__inline LONG HTTP_STATUS_TO_ERR(LONG rc) { if (rc > 0) return (rc | 0x80000000 | (0x204 << 16)); else return rc; }
__inline LONG ERR_TO_HTTP_STATUS(LONG rc) { if ((((rc) >> 16) & 0x1fff) == 0x204) return ((rc) & 0xFFFF); else return rc; }

#line 686 "..\\Common\\LexNetErrs.h"
#line 12 "Upload.cpp"
#line 1 "..\\LNUtil\\LNUtil.h"






#line 8 "..\\LNUtil\\LNUtil.h"
  #pragma comment(lib, "LNUtil.lib")
#line 10 "..\\LNUtil\\LNUtil.h"

#line 1 "..\\LNUtil\\Err.h"




long GetLastHR();
void ErrorLog(LPCTSTR format, ...);
CString GetErrorMsg(long Err);




class CLNErrorManager
{
public: 
  CLNErrorManager();

public:

  
  BOOL EventLogPresent();
  
  BOOL SetTraceToEventLog(LPCTSTR strAppName, LPCTSTR strMsgDll);
  
  BOOL SetTraceToEventLog(BOOL bEnable);

  
  BOOL SetTraceToFile(LPCTSTR strFile, LPCTSTR strMsgDll);
  
  BOOL SetTraceToFile(BOOL bEnable);

  
  void SetTrace(BOOL bTrace);

  
  void GetErrorMsg(long Err, LPTSTR pszMsg, ULONG cbSize, WORD *pCat );
  
  void ReportError(long Err, LPCTSTR pszFile, ULONG ulLine, LPCTSTR pszFunc);
  
  void ReportMsg(LPCTSTR format, ...);
  
  void ReportMsgV(LPCTSTR format, va_list pArgs);

private:
  BOOL    m_bTrace;       
  BOOL    m_bEventLog;    
  BOOL    m_bFile;        
  CString m_strAppName;   
  CString m_strMsgDll;    
  CString m_strLogFile;   
  HINSTANCE m_hMsg;

  void LoadMsgDll(LPCTSTR strMsgDll);
  void Trace2File(LPCTSTR format, ...);
  void Trace2FileV(LPCTSTR format, va_list pArgs);
  long Trace2EventLog(LPCTSTR format, va_list pArgs);
  long ReportError2File(long Err, LPCTSTR pszFile, ULONG ulLine, LPCTSTR pszFunc);
  long ReportError2EventLog(long Err, LPCTSTR pszFile, ULONG ulLine, LPCTSTR pszFunc);
};




CLNErrorManager& GetErrorManager();




class CTraceTime
{
public:
  CTraceTime();
  CTraceTime(LPCTSTR format, ... );
  ~CTraceTime();

  enum {STOP = 0x01, RESET = 0x02, MSG = 0x04};

  void Trace(ULONG flags, LPCTSTR format, ... );
  DWORD GetTickStart();

private:
  static __int64 s_qwTickFreq;
  __int64  m_qwTickStart;
  DWORD    m_dwTickStart;
  CString  m_strOut;
  static bool s_bHighRes;

  static bool InitHighRes();
  void  Start();
  DWORD Elapsed();
  void  TraceStop();
};

unsigned __int64 GetFileSizeFN(LPCTSTR pszFile);






class __CUsesErrorLog
{
public:
  __CUsesErrorLog(LPCTSTR funcName, LPCTSTR fileName);
 ~__CUsesErrorLog();

public:
  LPCTSTR m_FuncName;
  LPCTSTR m_FileName;
  long m_Line;
  long m_rc;
};































#line 144 "..\\LNUtil\\Err.h"

#line 146 "..\\LNUtil\\Err.h"
#line 12 "..\\LNUtil\\LNUtil.h"
#line 1 "..\\LNUtil\\reg.h"








#pragma once
#line 11 "..\\LNUtil\\reg.h"


long GetRegValue(HKEY hParentKey, const CString &strKeyPath, const CString &strKeyName, CString &strKeyValue);
long GetRegValueLog(HKEY hParentKey, const CString &strKeyPath, const CString &strKeyName, CString &strKeyValue);
long GetLNReg(const CString &strKeyName, CString &strKeyValue);


BOOL GetTrace();
long GetXMLEOL(CString& strValue);

long GetOJPath(CString& OJPath);
long GetOJFile(CString& OJFile);
long GetInbox(CString& Inbox);

long GetWebTempPath(CString& TmpPath);
long GetIniFilePath(CString &strKeyValue);

#line 29 "..\\LNUtil\\reg.h"
#line 13 "..\\LNUtil\\LNUtil.h"
#line 1 "..\\LNUtil\\axsafe.h"






HRESULT CreateComponentCategory(CATID Id, WCHAR* Description);
HRESULT RegisterCLSIDInCategory(const IID & clsid, CATID Id);
HRESULT UnRegisterCLSIDInCategory(const IID & clsid, CATID Id);

#line 12 "..\\LNUtil\\axsafe.h"
#line 14 "..\\LNUtil\\LNUtil.h"
#line 1 "..\\LNUtil\\xmlmngr.h"








#pragma once
#line 11 "..\\LNUtil\\xmlmngr.h"

#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\atl\\include\\atlbase.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13 "..\\LNUtil\\xmlmngr.h"



long LoadDocumentSync(IXMLDOMDocument* pXMLDoc, const CString& XMLQryTextFile);

CString ParseXMLSpecialChars(const CString& Value);
void GetStringValue(_variant_t FldVal, CString& VText);


class CLNException
{
private:
  HRESULT     m_hr;
  const char *m_file;
  int         m_line;

public:
  CLNException(HRESULT hr, const char *file, int line)
  {
    m_hr = hr;
    m_file = file;
    m_line = line;
  }

  HRESULT getHResult() {return m_hr;}
  const char *getFile() {return m_file;}
  int getLine() {return m_line;}

  void toString(CString &str)
  {
    str.Format("CLNException: %08x %s(%d)", m_hr, m_file, m_line);
  }

  CString toString()
  {
    CString str;
    toString(str);
    return str;
  }

  void Trace();
};


inline void testhr(HRESULT hr, const char* file, int line)
{
  if (((HRESULT)(hr)<0))
    throw CLNException(hr, file, line);
}




inline void testrc(DWORD rc, const char* file, int line)
{
  if (rc != 0)
    throw CLNException(((HRESULT)(rc) <= 0 ? ((HRESULT)(rc)) : ((HRESULT) (((rc) & 0x0000FFFF) | (7 << 16) | 0x80000000))), file, line);
}




inline void testerr(LONG Err, const char* file, int line)
{
  if (Err != 0)
    throw CLNException(Err, file, line);
}






typedef CComPtr<IXMLDOMNode> IXMLDOMNodePtr;
typedef CComPtr<IXMLDOMDocument> IXMLDOMDocumentPtr;




IXMLDOMDocumentPtr XMLCreateDocument();

IXMLDOMNodePtr     XMLCreateElement(IXMLDOMDocumentPtr doc, IXMLDOMNodePtr parent, const CString &tag);
IXMLDOMNodePtr     XMLCreateElement(IXMLDOMDocumentPtr doc, IXMLDOMNodePtr parent, const CString &tag, const CString &data);
IXMLDOMNodePtr     XMLCreateElement(IXMLDOMDocumentPtr doc, IXMLDOMNodePtr parent, const CString &tag, long data);

void               XMLCreateAttribute(IXMLDOMDocumentPtr doc, IXMLDOMNodePtr parent, const CString &tag, const CString &data);
void               XMLCreateAttribute(IXMLDOMDocumentPtr doc, IXMLDOMNodePtr parent, const CString &tag, long data);

void               XMLCreateEOL(IXMLDOMDocumentPtr doc, IXMLDOMNodePtr parent);

void               XMLSaveDocument(IXMLDOMDocumentPtr doc, LPCTSTR strFileName);

IXMLDOMNodePtr     XMLLoadDocument(IXMLDOMDocumentPtr doc, LPCTSTR strFileName);
IXMLDOMNodePtr     XMLLoadFromString(IXMLDOMDocumentPtr doc, BSTR bstrData);

IXMLDOMNodePtr     XMLGetRootNode(IXMLDOMDocumentPtr doc);
void               XMLGetData(IXMLDOMNodePtr pXMLNode, LPCTSTR pszItem, CString &strData);
void               XMLGetData(IXMLDOMNodePtr pXMLNode, LPCTSTR pszItem, long &lData);
void               XMLGetCollection(IXMLDOMNodePtr pXMLParent, LPCTSTR pszItem, CStringArray &strArray);

class CXMLMngr  
{
public:
  CXMLMngr();
  virtual ~CXMLMngr();

  LONG         CreateNewDocument();
  IXMLDOMNode* CreateChildNodeOfItem(long NodeID, DOMNodeType NodeType, 
                                     CString StrName, long* pNewNodeID, LONG* pErrorCode);
  LONG         SetNodeValue(long NodeID, CString Value);
  LONG         AddChildNodeText(long ParentNodeID, const char* NodeTag, 
                                const char *NodeValue);

  LONG Save(const char* pFileName) const;

private:
  void Reset();
  IXMLDOMNode* NodeIDToNode(long NodeID);
  void AddToMap(long NodeID, IXMLDOMNode* pNode);

private:
  CComPtr<IXMLDOMDocument> m_pXMLDoc;

  long              m_NodeID;
  CMapStringToPtr   m_MapIDToNode;    
};


#line 142 "..\\LNUtil\\xmlmngr.h"
#line 15 "..\\LNUtil\\LNUtil.h"
#line 1 "..\\LNUtil\\service.h"








#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\winsvc.h"














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 10 "..\\LNUtil\\service.h"
#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"


















#pragma component(minrebuild, off)
#line 21 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"

#pragma component(mintypeinfo, on)
#line 24 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"


#pragma pack(push, 4)
#line 28 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"







	class CSyncObject;
		class CSemaphore;
		class CMutex;
		class CEvent;
		class CCriticalSection;

class CSingleLock;
class CMultiLock;







class CSyncObject : public CObject
{
	public: static const  CRuntimeClass classCSyncObject; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CSyncObject(LPCTSTR pstrName);


public:
	operator HANDLE() const;
	HANDLE  m_hObject;


	virtual BOOL Lock(DWORD dwTimeout = 0xFFFFFFFF);
	virtual BOOL Unlock() = 0;
	virtual BOOL Unlock(LONG , LPLONG )
		{ return 1; }


public:
	virtual ~CSyncObject();





	friend class CSingleLock;
	friend class CMultiLock;
};




class CSemaphore : public CSyncObject
{
	public: static const  CRuntimeClass classCSemaphore; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CSemaphore(LONG lInitialCount = 1, LONG lMaxCount = 1,
		LPCTSTR pstrName=0, LPSECURITY_ATTRIBUTES lpsaAttributes = 0);


public:
	virtual ~CSemaphore();
	virtual BOOL Unlock();
	virtual BOOL Unlock(LONG lCount, LPLONG lprevCount = 0);
};




class CMutex : public CSyncObject
{
	public: static const  CRuntimeClass classCMutex; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CMutex(BOOL bInitiallyOwn = 0, LPCTSTR lpszName = 0,
		LPSECURITY_ATTRIBUTES lpsaAttribute = 0);


public:
	virtual ~CMutex();
	BOOL Unlock();
};




class CEvent : public CSyncObject
{
	public: static const  CRuntimeClass classCEvent; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CEvent(BOOL bInitiallyOwn = 0, BOOL bManualReset = 0,
		LPCTSTR lpszNAme = 0, LPSECURITY_ATTRIBUTES lpsaAttribute = 0);


public:
	BOOL SetEvent();
	BOOL PulseEvent();
	BOOL ResetEvent();
	BOOL Unlock();


public:
	virtual ~CEvent();
};




class CCriticalSection : public CSyncObject
{
	public: static const  CRuntimeClass classCCriticalSection; virtual CRuntimeClass* GetRuntimeClass() const;


public:
	CCriticalSection();


public:
	operator CRITICAL_SECTION*();
	CRITICAL_SECTION m_sect;


public:
	BOOL Unlock();
	BOOL Lock();
	BOOL Lock(DWORD dwTimeout);


public:
	virtual ~CCriticalSection();
};




class CSingleLock
{

public:
	CSingleLock(CSyncObject* pObject, BOOL bInitialLock = 0);


public:
	BOOL Lock(DWORD dwTimeOut = 0xFFFFFFFF);
	BOOL Unlock();
	BOOL Unlock(LONG lCount, LPLONG lPrevCount = 0);
	BOOL IsLocked();


public:
	~CSingleLock();

protected:
	CSyncObject* m_pObject;
	HANDLE  m_hObject;
	BOOL    m_bAcquired;
};




class CMultiLock
{

public:
	CMultiLock(CSyncObject* ppObjects[], DWORD dwCount, BOOL bInitialLock = 0);


public:
	DWORD Lock(DWORD dwTimeOut = 0xFFFFFFFF, BOOL bWaitForAll = 1,
		DWORD dwWakeMask = 0);
	BOOL Unlock();
	BOOL Unlock(LONG lCount, LPLONG lPrevCount = 0);
	BOOL IsLocked(DWORD dwItem);


public:
	~CMultiLock();

protected:
	HANDLE  m_hPreallocated[8];
	BOOL    m_bPreallocated[8];

	CSyncObject* const * m_ppObjectArray;
	HANDLE* m_pHandleArray;
	BOOL*   m_bLockedArray;
	DWORD   m_dwCount;
};





#pragma pack(pop)
#line 232 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"



#line 1 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.inl"














inline CSyncObject::operator HANDLE() const
	{ return m_hObject;}

inline BOOL CSemaphore::Unlock()
	{ return Unlock(1, 0); }

inline BOOL CEvent::SetEvent()
	{ ((void)0); return ::SetEvent(m_hObject); }
inline BOOL CEvent::PulseEvent()
	{ ((void)0); return ::PulseEvent(m_hObject); }
inline BOOL CEvent::ResetEvent()
	{ ((void)0); return ::ResetEvent(m_hObject); }

inline CSingleLock::~CSingleLock()
	{ Unlock(); }
inline BOOL CSingleLock::IsLocked()
	{ return m_bAcquired; }

inline BOOL CMultiLock::IsLocked(DWORD dwObject)
	{ ((void)0);
		 return m_bLockedArray[dwObject]; }

inline CCriticalSection::CCriticalSection() : CSyncObject(0)
	{ ::InitializeCriticalSection(&m_sect); }
inline CCriticalSection::operator CRITICAL_SECTION*()
	{ return (CRITICAL_SECTION*) &m_sect; }
inline CCriticalSection::~CCriticalSection()
	{ ::DeleteCriticalSection(&m_sect); }
inline BOOL CCriticalSection::Lock()
	{ ::EnterCriticalSection(&m_sect); return 1; }
inline BOOL CCriticalSection::Lock(DWORD )
	{ return Lock(); }
inline BOOL CCriticalSection::Unlock()
	{ ::LeaveCriticalSection(&m_sect); return 1; }

#line 51 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.inl"
#line 236 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"

#line 238 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"





#pragma component(minrebuild, on)
#line 245 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"

#pragma component(mintypeinfo, off)
#line 248 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"

#line 250 "D:\\Archivos de programa\\Microsoft Visual Studio\\VC98\\mfc\\include\\afxmt.h"


#line 11 "..\\LNUtil\\service.h"



class CIdesService
{
public:
   CIdesService(const char* szServiceName);
   virtual ~CIdesService();

   BOOL ParseStandardArgs(int argc, char* argv[]);
   BOOL IsInstalled();
   BOOL Install();
   BOOL Uninstall();
   void LogEvent(WORD wType, DWORD dwID, const char* pszS1 = 0,
                 const char* pszS2 = 0, const char* pszS3 = 0);
   BOOL StartServiceA();
   void SetStatus(DWORD dwState);
   BOOL Initialize();
   virtual void Run();
   virtual BOOL OnInit();
   virtual void OnStop();
   virtual void OnInterrogate();
   virtual void OnPause();
   virtual void OnContinue();
   virtual void OnShutdown();
   virtual BOOL OnUserControl(DWORD dwOpcode);

   void DebugMsg(const char* pszFormat, ...);

   
   static void __stdcall ServiceMain(DWORD dwArgc, LPTSTR* lpszArgv);
   static void __stdcall Handler(DWORD dwOpcode);

   
   char                    m_szServiceName[64];
   int                     m_iMajorVersion;
   int                     m_iMinorVersion;
   SERVICE_STATUS_HANDLE   m_hServiceStatus;
   SERVICE_STATUS          m_Status;
   BOOL                    m_bIsRunning;

   
   static CIdesService* m_pThis; 

private:
   HANDLE m_hEventSource;

   static CEvent m_EndEvent;
};

#line 62 "..\\LNUtil\\service.h"
#line 16 "..\\LNUtil\\LNUtil.h"
#line 1 "..\\LNUtil\\ufile.h"




int  LNGetFileExt(const CString &fich, CString &ext);
int  LNGetFilePath(const CString &fich, CString &path);
void LNGetFileName(const CString &strFileSpec, CString &strFileName);
int  LNGetNomFichUnico();
void iNetGetTempFileName(const CString& FileName, CString& TmpFileName, const char* DefExt = "");

LONG LNReadFileToStr(LPCSTR FileName, CString& Str);
LONG LNReadFileToByte(LPCSTR FileName, LPBYTE& pData, LONG& Length);
LONG LNWriteByteToFile(LPBYTE pData, LONG Length, LPCSTR FileName);

long CreateDir(CString &strPath);
long CreateDir(LPCTSTR pszPath);

#line 19 "..\\LNUtil\\ufile.h"

#line 17 "..\\LNUtil\\LNUtil.h"

#line 19 "..\\LNUtil\\LNUtil.h"
#line 13 "Upload.cpp"

#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#pragma warning( disable: 4049 )  




 























#pragma once
#line 33 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

 



























typedef struct IXMLDOMSchemaCollection IXMLDOMSchemaCollection;
#line 64 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IXMLDOMDocument2 IXMLDOMDocument2;
#line 70 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






























































































typedef struct IXSLTemplate IXSLTemplate;
#line 166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IXSLProcessor IXSLProcessor;
#line 172 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXXMLReader ISAXXMLReader;
#line 178 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXXMLFilter ISAXXMLFilter;
#line 184 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXLocator ISAXLocator;
#line 190 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXEntityResolver ISAXEntityResolver;
#line 196 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXContentHandler ISAXContentHandler;
#line 202 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXDTDHandler ISAXDTDHandler;
#line 208 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXErrorHandler ISAXErrorHandler;
#line 214 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXLexicalHandler ISAXLexicalHandler;
#line 220 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXDeclHandler ISAXDeclHandler;
#line 226 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct ISAXAttributes ISAXAttributes;
#line 232 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXXMLReader IVBSAXXMLReader;
#line 238 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXXMLFilter IVBSAXXMLFilter;
#line 244 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXLocator IVBSAXLocator;
#line 250 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXEntityResolver IVBSAXEntityResolver;
#line 256 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXContentHandler IVBSAXContentHandler;
#line 262 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXDTDHandler IVBSAXDTDHandler;
#line 268 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXErrorHandler IVBSAXErrorHandler;
#line 274 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXLexicalHandler IVBSAXLexicalHandler;
#line 280 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXDeclHandler IVBSAXDeclHandler;
#line 286 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IVBSAXAttributes IVBSAXAttributes;
#line 292 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IMXWriter IMXWriter;
#line 298 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IMXAttributes IMXAttributes;
#line 304 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IMXReaderControl IMXReaderControl;
#line 310 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"














































typedef struct IXMLDOMSelection IXMLDOMSelection;
#line 358 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"










typedef struct IDSOControl IDSOControl;
#line 370 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IXMLHTTPRequest IXMLHTTPRequest;
#line 376 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




typedef struct IServerXMLHTTPRequest IServerXMLHTTPRequest;
#line 382 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"


















typedef class DOMDocument26 DOMDocument26;


#line 404 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 406 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class DOMDocument30 DOMDocument30;


#line 416 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 418 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class FreeThreadedDOMDocument FreeThreadedDOMDocument;


#line 428 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 430 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class FreeThreadedDOMDocument26 FreeThreadedDOMDocument26;


#line 440 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 442 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class FreeThreadedDOMDocument30 FreeThreadedDOMDocument30;


#line 452 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 454 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XMLSchemaCache XMLSchemaCache;


#line 464 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 466 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XMLSchemaCache26 XMLSchemaCache26;


#line 476 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 478 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XMLSchemaCache30 XMLSchemaCache30;


#line 488 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 490 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XSLTemplate XSLTemplate;


#line 500 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 502 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XSLTemplate26 XSLTemplate26;


#line 512 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 514 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XSLTemplate30 XSLTemplate30;


#line 524 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 526 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class DSOControl DSOControl;


#line 536 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 538 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class DSOControl26 DSOControl26;


#line 548 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 550 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class DSOControl30 DSOControl30;


#line 560 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 562 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XMLHTTP XMLHTTP;


#line 572 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 574 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XMLHTTP26 XMLHTTP26;


#line 584 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 586 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class XMLHTTP30 XMLHTTP30;


#line 596 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 598 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class ServerXMLHTTP ServerXMLHTTP;


#line 608 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 610 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class ServerXMLHTTP30 ServerXMLHTTP30;


#line 620 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 622 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class SAXXMLReader SAXXMLReader;


#line 632 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 634 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class SAXXMLReader30 SAXXMLReader30;


#line 644 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 646 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class MXXMLWriter MXXMLWriter;


#line 656 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 658 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class MXXMLWriter30 MXXMLWriter30;


#line 668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 670 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class SAXAttributes SAXAttributes;


#line 680 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 682 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






typedef class SAXAttributes30 SAXAttributes30;


#line 692 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 694 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




















extern "C"{
#line 716 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 





























#line 752 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"


extern RPC_IF_HANDLE __MIDL_itf_msxml2_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml2_0000_v0_0_s_ifspec;






 




































































#line 832 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"


















#line 851 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"
typedef  
enum _SERVERXMLHTTP_OPTION
    {	SXH_OPTION_URL_CODEPAGE	= 0,
	SXH_OPTION_ESCAPE_PERCENT_IN_URL	= SXH_OPTION_URL_CODEPAGE + 1,
	SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS	= SXH_OPTION_ESCAPE_PERCENT_IN_URL + 1,
	SXH_OPTION_SELECT_CLIENT_SSL_CERT	= SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS + 1
    } 	SERVERXMLHTTP_OPTION;

typedef  
enum _SXH_SERVER_CERT_OPTION
    {	SXH_SERVER_CERT_IGNORE_UNKNOWN_CA	= 0x100,
	SXH_SERVER_CERT_IGNORE_WRONG_USAGE	= 0x200,
	SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID	= 0x1000,
	SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID	= 0x2000,
	SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS	= SXH_SERVER_CERT_IGNORE_UNKNOWN_CA + SXH_SERVER_CERT_IGNORE_WRONG_USAGE + SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID + SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID
    } 	SXH_SERVER_CERT_OPTION;


extern "C" const IID LIBID_MSXML2;


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 


extern "C" const IID IID_IXMLDOMSchemaCollection;


    
    struct __declspec(uuid("373984c8-b845-449b-91e7-45ac83036ade")) __declspec(novtable)
    IXMLDOMSchemaCollection : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall add( 
             BSTR namespaceURI,
             VARIANT var) = 0;
        
        virtual  HRESULT __stdcall get( 
             BSTR namespaceURI,
             IXMLDOMNode **schemaNode) = 0;
        
        virtual  HRESULT __stdcall remove( 
             BSTR namespaceURI) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *length) = 0;
        
        virtual  HRESULT __stdcall get_namespaceURI( 
             long index,
             BSTR *length) = 0;
        
        virtual  HRESULT __stdcall addCollection( 
             IXMLDOMSchemaCollection *otherCollection) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown **ppUnk) = 0;
        
    };
    









































































































































#line 3639 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IXMLDOMSchemaCollection_add_Proxy( 
    IXMLDOMSchemaCollection * This,
     BSTR namespaceURI,
     VARIANT var);


void __stdcall IXMLDOMSchemaCollection_add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSchemaCollection_get_Proxy( 
    IXMLDOMSchemaCollection * This,
     BSTR namespaceURI,
     IXMLDOMNode **schemaNode);


void __stdcall IXMLDOMSchemaCollection_get_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSchemaCollection_remove_Proxy( 
    IXMLDOMSchemaCollection * This,
     BSTR namespaceURI);


void __stdcall IXMLDOMSchemaCollection_remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSchemaCollection_get_length_Proxy( 
    IXMLDOMSchemaCollection * This,
     long *length);


void __stdcall IXMLDOMSchemaCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSchemaCollection_get_namespaceURI_Proxy( 
    IXMLDOMSchemaCollection * This,
     long index,
     BSTR *length);


void __stdcall IXMLDOMSchemaCollection_get_namespaceURI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSchemaCollection_addCollection_Proxy( 
    IXMLDOMSchemaCollection * This,
     IXMLDOMSchemaCollection *otherCollection);


void __stdcall IXMLDOMSchemaCollection_addCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSchemaCollection_get__newEnum_Proxy( 
    IXMLDOMSchemaCollection * This,
     IUnknown **ppUnk);


void __stdcall IXMLDOMSchemaCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3731 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IXMLDOMDocument2;


    
    struct __declspec(uuid("2933BF95-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocument2 : public IXMLDOMDocument
    {
    public:
        virtual  HRESULT __stdcall get_namespaces( 
             IXMLDOMSchemaCollection **namespaceCollection) = 0;
        
        virtual  HRESULT __stdcall get_schemas( 
             VARIANT *otherCollection) = 0;
        
        virtual  HRESULT __stdcall putref_schemas( 
             VARIANT otherCollection) = 0;
        
        virtual  HRESULT __stdcall validate( 
             IXMLDOMParseError **errorObj) = 0;
        
        virtual  HRESULT __stdcall setProperty( 
             BSTR name,
             VARIANT value) = 0;
        
        virtual  HRESULT __stdcall getProperty( 
             BSTR name,
             VARIANT *value) = 0;
        
    };
    































































































































































































































































































































































































































































































































































































































































#line 4410 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IXMLDOMDocument2_get_namespaces_Proxy( 
    IXMLDOMDocument2 * This,
     IXMLDOMSchemaCollection **namespaceCollection);


void __stdcall IXMLDOMDocument2_get_namespaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument2_get_schemas_Proxy( 
    IXMLDOMDocument2 * This,
     VARIANT *otherCollection);


void __stdcall IXMLDOMDocument2_get_schemas_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument2_putref_schemas_Proxy( 
    IXMLDOMDocument2 * This,
     VARIANT otherCollection);


void __stdcall IXMLDOMDocument2_putref_schemas_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument2_validate_Proxy( 
    IXMLDOMDocument2 * This,
     IXMLDOMParseError **errorObj);


void __stdcall IXMLDOMDocument2_validate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument2_setProperty_Proxy( 
    IXMLDOMDocument2 * This,
     BSTR name,
     VARIANT value);


void __stdcall IXMLDOMDocument2_setProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument2_getProperty_Proxy( 
    IXMLDOMDocument2 * This,
     BSTR name,
     VARIANT *value);


void __stdcall IXMLDOMDocument2_getProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4489 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 


extern "C" const IID IID_IXSLTemplate;


    
    struct __declspec(uuid("2933BF93-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXSLTemplate : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall putref_stylesheet( 
             IXMLDOMNode *stylesheet) = 0;
        
        virtual  HRESULT __stdcall get_stylesheet( 
             IXMLDOMNode **stylesheet) = 0;
        
        virtual  HRESULT __stdcall createProcessor( 
             IXSLProcessor **ppProcessor) = 0;
        
    };
    










































































































#line 11131 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IXSLTemplate_putref_stylesheet_Proxy( 
    IXSLTemplate * This,
     IXMLDOMNode *stylesheet);


void __stdcall IXSLTemplate_putref_stylesheet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLTemplate_get_stylesheet_Proxy( 
    IXSLTemplate * This,
     IXMLDOMNode **stylesheet);


void __stdcall IXSLTemplate_get_stylesheet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLTemplate_createProcessor_Proxy( 
    IXSLTemplate * This,
     IXSLProcessor **ppProcessor);


void __stdcall IXSLTemplate_createProcessor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11172 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IXSLProcessor;


    
    struct __declspec(uuid("2933BF92-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXSLProcessor : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall put_input( 
             VARIANT var) = 0;
        
        virtual  HRESULT __stdcall get_input( 
             VARIANT *pVar) = 0;
        
        virtual  HRESULT __stdcall get_ownerTemplate( 
             IXSLTemplate **ppTemplate) = 0;
        
        virtual  HRESULT __stdcall setStartMode( 
             BSTR mode,
             BSTR namespaceURI = L"") = 0;
        
        virtual  HRESULT __stdcall get_startMode( 
             BSTR *mode) = 0;
        
        virtual  HRESULT __stdcall get_startModeURI( 
             BSTR *namespaceURI) = 0;
        
        virtual  HRESULT __stdcall put_output( 
             VARIANT output) = 0;
        
        virtual  HRESULT __stdcall get_output( 
             VARIANT *pOutput) = 0;
        
        virtual  HRESULT __stdcall transform( 
             VARIANT_BOOL *pDone) = 0;
        
        virtual  HRESULT __stdcall reset( void) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *pReadyState) = 0;
        
        virtual  HRESULT __stdcall addParameter( 
             BSTR baseName,
             VARIANT parameter,
             BSTR namespaceURI = L"") = 0;
        
        virtual  HRESULT __stdcall addObject( 
             IDispatch *obj,
             BSTR namespaceURI) = 0;
        
        virtual  HRESULT __stdcall get_stylesheet( 
             IXMLDOMNode **stylesheet) = 0;
        
    };
    


























































































































































































#line 11423 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IXSLProcessor_put_input_Proxy( 
    IXSLProcessor * This,
     VARIANT var);


void __stdcall IXSLProcessor_put_input_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_get_input_Proxy( 
    IXSLProcessor * This,
     VARIANT *pVar);


void __stdcall IXSLProcessor_get_input_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_get_ownerTemplate_Proxy( 
    IXSLProcessor * This,
     IXSLTemplate **ppTemplate);


void __stdcall IXSLProcessor_get_ownerTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_setStartMode_Proxy( 
    IXSLProcessor * This,
     BSTR mode,
     BSTR namespaceURI);


void __stdcall IXSLProcessor_setStartMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_get_startMode_Proxy( 
    IXSLProcessor * This,
     BSTR *mode);


void __stdcall IXSLProcessor_get_startMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_get_startModeURI_Proxy( 
    IXSLProcessor * This,
     BSTR *namespaceURI);


void __stdcall IXSLProcessor_get_startModeURI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_put_output_Proxy( 
    IXSLProcessor * This,
     VARIANT output);


void __stdcall IXSLProcessor_put_output_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_get_output_Proxy( 
    IXSLProcessor * This,
     VARIANT *pOutput);


void __stdcall IXSLProcessor_get_output_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_transform_Proxy( 
    IXSLProcessor * This,
     VARIANT_BOOL *pDone);


void __stdcall IXSLProcessor_transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_reset_Proxy( 
    IXSLProcessor * This);


void __stdcall IXSLProcessor_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_get_readyState_Proxy( 
    IXSLProcessor * This,
     long *pReadyState);


void __stdcall IXSLProcessor_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_addParameter_Proxy( 
    IXSLProcessor * This,
     BSTR baseName,
     VARIANT parameter,
     BSTR namespaceURI);


void __stdcall IXSLProcessor_addParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_addObject_Proxy( 
    IXSLProcessor * This,
     IDispatch *obj,
     BSTR namespaceURI);


void __stdcall IXSLProcessor_addObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXSLProcessor_get_stylesheet_Proxy( 
    IXSLProcessor * This,
     IXMLDOMNode **stylesheet);


void __stdcall IXSLProcessor_get_stylesheet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11599 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXXMLReader;


    
    struct __declspec(uuid("a4f96ed0-f829-476e-81c0-cdc7bd2a0802")) __declspec(novtable)
    ISAXXMLReader : public IUnknown
    {
    public:
        virtual HRESULT __stdcall getFeature( 
             const wchar_t *pwchName,
             VARIANT_BOOL *pvfValue) = 0;
        
        virtual HRESULT __stdcall putFeature( 
             const wchar_t *pwchName,
             VARIANT_BOOL vfValue) = 0;
        
        virtual HRESULT __stdcall getProperty( 
             const wchar_t *pwchName,
             VARIANT *pvarValue) = 0;
        
        virtual HRESULT __stdcall putProperty( 
             const wchar_t *pwchName,
             VARIANT varValue) = 0;
        
        virtual HRESULT __stdcall getEntityResolver( 
             ISAXEntityResolver **ppResolver) = 0;
        
        virtual HRESULT __stdcall putEntityResolver( 
             ISAXEntityResolver *pResolver) = 0;
        
        virtual HRESULT __stdcall getContentHandler( 
             ISAXContentHandler **ppHandler) = 0;
        
        virtual HRESULT __stdcall putContentHandler( 
             ISAXContentHandler *pHandler) = 0;
        
        virtual HRESULT __stdcall getDTDHandler( 
             ISAXDTDHandler **ppHandler) = 0;
        
        virtual HRESULT __stdcall putDTDHandler( 
             ISAXDTDHandler *pHandler) = 0;
        
        virtual HRESULT __stdcall getErrorHandler( 
             ISAXErrorHandler **ppHandler) = 0;
        
        virtual HRESULT __stdcall putErrorHandler( 
             ISAXErrorHandler *pHandler) = 0;
        
        virtual HRESULT __stdcall getBaseURL( 
             const wchar_t **ppwchBaseUrl) = 0;
        
        virtual HRESULT __stdcall putBaseURL( 
             const wchar_t *pwchBaseUrl) = 0;
        
        virtual HRESULT __stdcall getSecureBaseURL( 
             const wchar_t **ppwchSecureBaseUrl) = 0;
        
        virtual HRESULT __stdcall putSecureBaseURL( 
             const wchar_t *pwchSecureBaseUrl) = 0;
        
        virtual HRESULT __stdcall parse( 
             VARIANT varInput) = 0;
        
        virtual HRESULT __stdcall parseURL( 
             const wchar_t *pwchUrl) = 0;
        
    };
    













































































































































































#line 11850 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXXMLReader_getFeature_Proxy( 
    ISAXXMLReader * This,
     const wchar_t *pwchName,
     VARIANT_BOOL *pvfValue);


void __stdcall ISAXXMLReader_getFeature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putFeature_Proxy( 
    ISAXXMLReader * This,
     const wchar_t *pwchName,
     VARIANT_BOOL vfValue);


void __stdcall ISAXXMLReader_putFeature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_getProperty_Proxy( 
    ISAXXMLReader * This,
     const wchar_t *pwchName,
     VARIANT *pvarValue);


void __stdcall ISAXXMLReader_getProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putProperty_Proxy( 
    ISAXXMLReader * This,
     const wchar_t *pwchName,
     VARIANT varValue);


void __stdcall ISAXXMLReader_putProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_getEntityResolver_Proxy( 
    ISAXXMLReader * This,
     ISAXEntityResolver **ppResolver);


void __stdcall ISAXXMLReader_getEntityResolver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putEntityResolver_Proxy( 
    ISAXXMLReader * This,
     ISAXEntityResolver *pResolver);


void __stdcall ISAXXMLReader_putEntityResolver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_getContentHandler_Proxy( 
    ISAXXMLReader * This,
     ISAXContentHandler **ppHandler);


void __stdcall ISAXXMLReader_getContentHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putContentHandler_Proxy( 
    ISAXXMLReader * This,
     ISAXContentHandler *pHandler);


void __stdcall ISAXXMLReader_putContentHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_getDTDHandler_Proxy( 
    ISAXXMLReader * This,
     ISAXDTDHandler **ppHandler);


void __stdcall ISAXXMLReader_getDTDHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putDTDHandler_Proxy( 
    ISAXXMLReader * This,
     ISAXDTDHandler *pHandler);


void __stdcall ISAXXMLReader_putDTDHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_getErrorHandler_Proxy( 
    ISAXXMLReader * This,
     ISAXErrorHandler **ppHandler);


void __stdcall ISAXXMLReader_getErrorHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putErrorHandler_Proxy( 
    ISAXXMLReader * This,
     ISAXErrorHandler *pHandler);


void __stdcall ISAXXMLReader_putErrorHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_getBaseURL_Proxy( 
    ISAXXMLReader * This,
     const wchar_t **ppwchBaseUrl);


void __stdcall ISAXXMLReader_getBaseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putBaseURL_Proxy( 
    ISAXXMLReader * This,
     const wchar_t *pwchBaseUrl);


void __stdcall ISAXXMLReader_putBaseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_getSecureBaseURL_Proxy( 
    ISAXXMLReader * This,
     const wchar_t **ppwchSecureBaseUrl);


void __stdcall ISAXXMLReader_getSecureBaseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_putSecureBaseURL_Proxy( 
    ISAXXMLReader * This,
     const wchar_t *pwchSecureBaseUrl);


void __stdcall ISAXXMLReader_putSecureBaseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_parse_Proxy( 
    ISAXXMLReader * This,
     VARIANT varInput);


void __stdcall ISAXXMLReader_parse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLReader_parseURL_Proxy( 
    ISAXXMLReader * This,
     const wchar_t *pwchUrl);


void __stdcall ISAXXMLReader_parseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12075 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXXMLFilter;


    
    struct __declspec(uuid("70409222-ca09-4475-acb8-40312fe8d145")) __declspec(novtable)
    ISAXXMLFilter : public ISAXXMLReader
    {
    public:
        virtual HRESULT __stdcall getParent( 
             ISAXXMLReader **ppReader) = 0;
        
        virtual HRESULT __stdcall putParent( 
             ISAXXMLReader *pReader) = 0;
        
    };
    




























































































































































































#line 12289 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXXMLFilter_getParent_Proxy( 
    ISAXXMLFilter * This,
     ISAXXMLReader **ppReader);


void __stdcall ISAXXMLFilter_getParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXXMLFilter_putParent_Proxy( 
    ISAXXMLFilter * This,
     ISAXXMLReader *pReader);


void __stdcall ISAXXMLFilter_putParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12318 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXLocator;


    
    struct __declspec(uuid("9b7e472a-0de4-4640-bff3-84d38a051c31")) __declspec(novtable)
    ISAXLocator : public IUnknown
    {
    public:
        virtual HRESULT __stdcall getColumnNumber( 
             int *pnColumn) = 0;
        
        virtual HRESULT __stdcall getLineNumber( 
             int *pnLine) = 0;
        
        virtual HRESULT __stdcall getPublicId( 
             const wchar_t **ppwchPublicId) = 0;
        
        virtual HRESULT __stdcall getSystemId( 
             const wchar_t **ppwchSystemId) = 0;
        
    };
    







































































#line 12421 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXLocator_getColumnNumber_Proxy( 
    ISAXLocator * This,
     int *pnColumn);


void __stdcall ISAXLocator_getColumnNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLocator_getLineNumber_Proxy( 
    ISAXLocator * This,
     int *pnLine);


void __stdcall ISAXLocator_getLineNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLocator_getPublicId_Proxy( 
    ISAXLocator * This,
     const wchar_t **ppwchPublicId);


void __stdcall ISAXLocator_getPublicId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLocator_getSystemId_Proxy( 
    ISAXLocator * This,
     const wchar_t **ppwchSystemId);


void __stdcall ISAXLocator_getSystemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12474 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXEntityResolver;


    
    struct __declspec(uuid("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07")) __declspec(novtable)
    ISAXEntityResolver : public IUnknown
    {
    public:
        virtual HRESULT __stdcall resolveEntity( 
             const wchar_t *pwchPublicId,
             const wchar_t *pwchSystemId,
             VARIANT *pvarInput) = 0;
        
    };
    




















































#line 12551 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXEntityResolver_resolveEntity_Proxy( 
    ISAXEntityResolver * This,
     const wchar_t *pwchPublicId,
     const wchar_t *pwchSystemId,
     VARIANT *pvarInput);


void __stdcall ISAXEntityResolver_resolveEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12570 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXContentHandler;


    
    struct __declspec(uuid("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44")) __declspec(novtable)
    ISAXContentHandler : public IUnknown
    {
    public:
        virtual HRESULT __stdcall putDocumentLocator( 
             ISAXLocator *pLocator) = 0;
        
        virtual HRESULT __stdcall startDocument( void) = 0;
        
        virtual HRESULT __stdcall endDocument( void) = 0;
        
        virtual HRESULT __stdcall startPrefixMapping( 
             const wchar_t *pwchPrefix,
             int cchPrefix,
             const wchar_t *pwchUri,
             int cchUri) = 0;
        
        virtual HRESULT __stdcall endPrefixMapping( 
             const wchar_t *pwchPrefix,
             int cchPrefix) = 0;
        
        virtual HRESULT __stdcall startElement( 
             const wchar_t *pwchNamespaceUri,
             int cchNamespaceUri,
             const wchar_t *pwchLocalName,
             int cchLocalName,
             const wchar_t *pwchQName,
             int cchQName,
             ISAXAttributes *pAttributes) = 0;
        
        virtual HRESULT __stdcall endElement( 
             const wchar_t *pwchNamespaceUri,
             int cchNamespaceUri,
             const wchar_t *pwchLocalName,
             int cchLocalName,
             const wchar_t *pwchQName,
             int cchQName) = 0;
        
        virtual HRESULT __stdcall characters( 
             const wchar_t *pwchChars,
             int cchChars) = 0;
        
        virtual HRESULT __stdcall ignorableWhitespace( 
             const wchar_t *pwchChars,
             int cchChars) = 0;
        
        virtual HRESULT __stdcall processingInstruction( 
             const wchar_t *pwchTarget,
             int cchTarget,
             const wchar_t *pwchData,
             int cchData) = 0;
        
        virtual HRESULT __stdcall skippedEntity( 
             const wchar_t *pwchName,
             int cchName) = 0;
        
    };
    











































































































































#line 12781 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXContentHandler_putDocumentLocator_Proxy( 
    ISAXContentHandler * This,
     ISAXLocator *pLocator);


void __stdcall ISAXContentHandler_putDocumentLocator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_startDocument_Proxy( 
    ISAXContentHandler * This);


void __stdcall ISAXContentHandler_startDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_endDocument_Proxy( 
    ISAXContentHandler * This);


void __stdcall ISAXContentHandler_endDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_startPrefixMapping_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchPrefix,
     int cchPrefix,
     const wchar_t *pwchUri,
     int cchUri);


void __stdcall ISAXContentHandler_startPrefixMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_endPrefixMapping_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchPrefix,
     int cchPrefix);


void __stdcall ISAXContentHandler_endPrefixMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_startElement_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchNamespaceUri,
     int cchNamespaceUri,
     const wchar_t *pwchLocalName,
     int cchLocalName,
     const wchar_t *pwchQName,
     int cchQName,
     ISAXAttributes *pAttributes);


void __stdcall ISAXContentHandler_startElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_endElement_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchNamespaceUri,
     int cchNamespaceUri,
     const wchar_t *pwchLocalName,
     int cchLocalName,
     const wchar_t *pwchQName,
     int cchQName);


void __stdcall ISAXContentHandler_endElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_characters_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchChars,
     int cchChars);


void __stdcall ISAXContentHandler_characters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_ignorableWhitespace_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchChars,
     int cchChars);


void __stdcall ISAXContentHandler_ignorableWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_processingInstruction_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchTarget,
     int cchTarget,
     const wchar_t *pwchData,
     int cchData);


void __stdcall ISAXContentHandler_processingInstruction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXContentHandler_skippedEntity_Proxy( 
    ISAXContentHandler * This,
     const wchar_t *pwchName,
     int cchName);


void __stdcall ISAXContentHandler_skippedEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12937 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXDTDHandler;


    
    struct __declspec(uuid("e15c1baf-afb3-4d60-8c36-19a8c45defed")) __declspec(novtable)
    ISAXDTDHandler : public IUnknown
    {
    public:
        virtual HRESULT __stdcall notationDecl( 
             const wchar_t *pwchName,
             int cchName,
             const wchar_t *pwchPublicId,
             int cchPublicId,
             const wchar_t *pwchSystemId,
             int cchSystemId) = 0;
        
        virtual HRESULT __stdcall unparsedEntityDecl( 
             const wchar_t *pwchName,
             int cchName,
             const wchar_t *pwchPublicId,
             int cchPublicId,
             const wchar_t *pwchSystemId,
             int cchSystemId,
             const wchar_t *pwchNotationName,
             int cchNotationName) = 0;
        
    };
    





































































#line 13044 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXDTDHandler_notationDecl_Proxy( 
    ISAXDTDHandler * This,
     const wchar_t *pwchName,
     int cchName,
     const wchar_t *pwchPublicId,
     int cchPublicId,
     const wchar_t *pwchSystemId,
     int cchSystemId);


void __stdcall ISAXDTDHandler_notationDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXDTDHandler_unparsedEntityDecl_Proxy( 
    ISAXDTDHandler * This,
     const wchar_t *pwchName,
     int cchName,
     const wchar_t *pwchPublicId,
     int cchPublicId,
     const wchar_t *pwchSystemId,
     int cchSystemId,
     const wchar_t *pwchNotationName,
     int cchNotationName);


void __stdcall ISAXDTDHandler_unparsedEntityDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13085 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXErrorHandler;


    
    struct __declspec(uuid("a60511c4-ccf5-479e-98a3-dc8dc545b7d0")) __declspec(novtable)
    ISAXErrorHandler : public IUnknown
    {
    public:
        virtual HRESULT __stdcall error( 
             ISAXLocator *pLocator,
             const wchar_t *pwchErrorMessage,
             HRESULT hrErrorCode) = 0;
        
        virtual HRESULT __stdcall fatalError( 
             ISAXLocator *pLocator,
             const wchar_t *pwchErrorMessage,
             HRESULT hrErrorCode) = 0;
        
        virtual HRESULT __stdcall ignorableWarning( 
             ISAXLocator *pLocator,
             const wchar_t *pwchErrorMessage,
             HRESULT hrErrorCode) = 0;
        
    };
    






































































#line 13190 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXErrorHandler_error_Proxy( 
    ISAXErrorHandler * This,
     ISAXLocator *pLocator,
     const wchar_t *pwchErrorMessage,
     HRESULT hrErrorCode);


void __stdcall ISAXErrorHandler_error_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXErrorHandler_fatalError_Proxy( 
    ISAXErrorHandler * This,
     ISAXLocator *pLocator,
     const wchar_t *pwchErrorMessage,
     HRESULT hrErrorCode);


void __stdcall ISAXErrorHandler_fatalError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXErrorHandler_ignorableWarning_Proxy( 
    ISAXErrorHandler * This,
     ISAXLocator *pLocator,
     const wchar_t *pwchErrorMessage,
     HRESULT hrErrorCode);


void __stdcall ISAXErrorHandler_ignorableWarning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13237 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXLexicalHandler;


    
    struct __declspec(uuid("7f85d5f5-47a8-4497-bda5-84ba04819ea6")) __declspec(novtable)
    ISAXLexicalHandler : public IUnknown
    {
    public:
        virtual HRESULT __stdcall startDTD( 
             const wchar_t *pwchName,
             int cchName,
             const wchar_t *pwchPublicId,
             int cchPublicId,
             const wchar_t *pwchSystemId,
             int cchSystemId) = 0;
        
        virtual HRESULT __stdcall endDTD( void) = 0;
        
        virtual HRESULT __stdcall startEntity( 
             const wchar_t *pwchName,
             int cchName) = 0;
        
        virtual HRESULT __stdcall endEntity( 
             const wchar_t *pwchName,
             int cchName) = 0;
        
        virtual HRESULT __stdcall startCDATA( void) = 0;
        
        virtual HRESULT __stdcall endCDATA( void) = 0;
        
        virtual HRESULT __stdcall comment( 
             const wchar_t *pwchChars,
             int cchChars) = 0;
        
    };
    

































































































#line 13380 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXLexicalHandler_startDTD_Proxy( 
    ISAXLexicalHandler * This,
     const wchar_t *pwchName,
     int cchName,
     const wchar_t *pwchPublicId,
     int cchPublicId,
     const wchar_t *pwchSystemId,
     int cchSystemId);


void __stdcall ISAXLexicalHandler_startDTD_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLexicalHandler_endDTD_Proxy( 
    ISAXLexicalHandler * This);


void __stdcall ISAXLexicalHandler_endDTD_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLexicalHandler_startEntity_Proxy( 
    ISAXLexicalHandler * This,
     const wchar_t *pwchName,
     int cchName);


void __stdcall ISAXLexicalHandler_startEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLexicalHandler_endEntity_Proxy( 
    ISAXLexicalHandler * This,
     const wchar_t *pwchName,
     int cchName);


void __stdcall ISAXLexicalHandler_endEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLexicalHandler_startCDATA_Proxy( 
    ISAXLexicalHandler * This);


void __stdcall ISAXLexicalHandler_startCDATA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLexicalHandler_endCDATA_Proxy( 
    ISAXLexicalHandler * This);


void __stdcall ISAXLexicalHandler_endCDATA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXLexicalHandler_comment_Proxy( 
    ISAXLexicalHandler * This,
     const wchar_t *pwchChars,
     int cchChars);


void __stdcall ISAXLexicalHandler_comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13474 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXDeclHandler;


    
    struct __declspec(uuid("862629ac-771a-47b2-8337-4e6843c1be90")) __declspec(novtable)
    ISAXDeclHandler : public IUnknown
    {
    public:
        virtual HRESULT __stdcall elementDecl( 
             const wchar_t *pwchName,
             int cchName,
             const wchar_t *pwchModel,
             int cchModel) = 0;
        
        virtual HRESULT __stdcall attributeDecl( 
             const wchar_t *pwchElementName,
             int cchElementName,
             const wchar_t *pwchAttributeName,
             int cchAttributeName,
             const wchar_t *pwchType,
             int cchType,
             const wchar_t *pwchValueDefault,
             int cchValueDefault,
             const wchar_t *pwchValue,
             int cchValue) = 0;
        
        virtual HRESULT __stdcall internalEntityDecl( 
             const wchar_t *pwchName,
             int cchName,
             const wchar_t *pwchValue,
             int cchValue) = 0;
        
        virtual HRESULT __stdcall externalEntityDecl( 
             const wchar_t *pwchName,
             int cchName,
             const wchar_t *pwchPublicId,
             int cchPublicId,
             const wchar_t *pwchSystemId,
             int cchSystemId) = 0;
        
    };
    



























































































#line 13617 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXDeclHandler_elementDecl_Proxy( 
    ISAXDeclHandler * This,
     const wchar_t *pwchName,
     int cchName,
     const wchar_t *pwchModel,
     int cchModel);


void __stdcall ISAXDeclHandler_elementDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXDeclHandler_attributeDecl_Proxy( 
    ISAXDeclHandler * This,
     const wchar_t *pwchElementName,
     int cchElementName,
     const wchar_t *pwchAttributeName,
     int cchAttributeName,
     const wchar_t *pwchType,
     int cchType,
     const wchar_t *pwchValueDefault,
     int cchValueDefault,
     const wchar_t *pwchValue,
     int cchValue);


void __stdcall ISAXDeclHandler_attributeDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXDeclHandler_internalEntityDecl_Proxy( 
    ISAXDeclHandler * This,
     const wchar_t *pwchName,
     int cchName,
     const wchar_t *pwchValue,
     int cchValue);


void __stdcall ISAXDeclHandler_internalEntityDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXDeclHandler_externalEntityDecl_Proxy( 
    ISAXDeclHandler * This,
     const wchar_t *pwchName,
     int cchName,
     const wchar_t *pwchPublicId,
     int cchPublicId,
     const wchar_t *pwchSystemId,
     int cchSystemId);


void __stdcall ISAXDeclHandler_externalEntityDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13690 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_ISAXAttributes;


    
    struct __declspec(uuid("f078abe1-45d2-4832-91ea-4466ce2f25c9")) __declspec(novtable)
    ISAXAttributes : public IUnknown
    {
    public:
        virtual HRESULT __stdcall getLength( 
             int *pnLength) = 0;
        
        virtual HRESULT __stdcall getURI( 
             int nIndex,
             const wchar_t **ppwchUri,
             int *pcchUri) = 0;
        
        virtual HRESULT __stdcall getLocalName( 
             int nIndex,
             const wchar_t **ppwchLocalName,
             int *pcchLocalName) = 0;
        
        virtual HRESULT __stdcall getQName( 
             int nIndex,
             const wchar_t **ppwchQName,
             int *pcchQName) = 0;
        
        virtual HRESULT __stdcall getName( 
             int nIndex,
             const wchar_t **ppwchUri,
             int *pcchUri,
             const wchar_t **ppwchLocalName,
             int *pcchLocalName,
             const wchar_t **ppwchQName,
             int *pcchQName) = 0;
        
        virtual HRESULT __stdcall getIndexFromName( 
             const wchar_t *pwchUri,
             int cchUri,
             const wchar_t *pwchLocalName,
             int cchLocalName,
             int *pnIndex) = 0;
        
        virtual HRESULT __stdcall getIndexFromQName( 
             const wchar_t *pwchQName,
             int cchQName,
             int *pnIndex) = 0;
        
        virtual HRESULT __stdcall getType( 
             int nIndex,
             const wchar_t **ppwchType,
             int *pcchType) = 0;
        
        virtual HRESULT __stdcall getTypeFromName( 
             const wchar_t *pwchUri,
             int cchUri,
             const wchar_t *pwchLocalName,
             int cchLocalName,
             const wchar_t **ppwchType,
             int *pcchType) = 0;
        
        virtual HRESULT __stdcall getTypeFromQName( 
             const wchar_t *pwchQName,
             int cchQName,
             const wchar_t **ppwchType,
             int *pcchType) = 0;
        
        virtual HRESULT __stdcall getValue( 
             int nIndex,
             const wchar_t **ppwchValue,
             int *pcchValue) = 0;
        
        virtual HRESULT __stdcall getValueFromName( 
             const wchar_t *pwchUri,
             int cchUri,
             const wchar_t *pwchLocalName,
             int cchLocalName,
             const wchar_t **ppwchValue,
             int *pcchValue) = 0;
        
        virtual HRESULT __stdcall getValueFromQName( 
             const wchar_t *pwchQName,
             int cchQName,
             const wchar_t **ppwchValue,
             int *pcchValue) = 0;
        
    };
    












































































































































































#line 13959 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



HRESULT __stdcall ISAXAttributes_getLength_Proxy( 
    ISAXAttributes * This,
     int *pnLength);


void __stdcall ISAXAttributes_getLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getURI_Proxy( 
    ISAXAttributes * This,
     int nIndex,
     const wchar_t **ppwchUri,
     int *pcchUri);


void __stdcall ISAXAttributes_getURI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getLocalName_Proxy( 
    ISAXAttributes * This,
     int nIndex,
     const wchar_t **ppwchLocalName,
     int *pcchLocalName);


void __stdcall ISAXAttributes_getLocalName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getQName_Proxy( 
    ISAXAttributes * This,
     int nIndex,
     const wchar_t **ppwchQName,
     int *pcchQName);


void __stdcall ISAXAttributes_getQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getName_Proxy( 
    ISAXAttributes * This,
     int nIndex,
     const wchar_t **ppwchUri,
     int *pcchUri,
     const wchar_t **ppwchLocalName,
     int *pcchLocalName,
     const wchar_t **ppwchQName,
     int *pcchQName);


void __stdcall ISAXAttributes_getName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getIndexFromName_Proxy( 
    ISAXAttributes * This,
     const wchar_t *pwchUri,
     int cchUri,
     const wchar_t *pwchLocalName,
     int cchLocalName,
     int *pnIndex);


void __stdcall ISAXAttributes_getIndexFromName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getIndexFromQName_Proxy( 
    ISAXAttributes * This,
     const wchar_t *pwchQName,
     int cchQName,
     int *pnIndex);


void __stdcall ISAXAttributes_getIndexFromQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getType_Proxy( 
    ISAXAttributes * This,
     int nIndex,
     const wchar_t **ppwchType,
     int *pcchType);


void __stdcall ISAXAttributes_getType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getTypeFromName_Proxy( 
    ISAXAttributes * This,
     const wchar_t *pwchUri,
     int cchUri,
     const wchar_t *pwchLocalName,
     int cchLocalName,
     const wchar_t **ppwchType,
     int *pcchType);


void __stdcall ISAXAttributes_getTypeFromName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getTypeFromQName_Proxy( 
    ISAXAttributes * This,
     const wchar_t *pwchQName,
     int cchQName,
     const wchar_t **ppwchType,
     int *pcchType);


void __stdcall ISAXAttributes_getTypeFromQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getValue_Proxy( 
    ISAXAttributes * This,
     int nIndex,
     const wchar_t **ppwchValue,
     int *pcchValue);


void __stdcall ISAXAttributes_getValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getValueFromName_Proxy( 
    ISAXAttributes * This,
     const wchar_t *pwchUri,
     int cchUri,
     const wchar_t *pwchLocalName,
     int cchLocalName,
     const wchar_t **ppwchValue,
     int *pcchValue);


void __stdcall ISAXAttributes_getValueFromName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISAXAttributes_getValueFromQName_Proxy( 
    ISAXAttributes * This,
     const wchar_t *pwchQName,
     int cchQName,
     const wchar_t **ppwchValue,
     int *pcchValue);


void __stdcall ISAXAttributes_getValueFromQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14158 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXXMLReader;


    
    struct __declspec(uuid("8c033caa-6cd6-4f73-b728-4531af74945f")) __declspec(novtable)
    IVBSAXXMLReader : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall getFeature( 
             BSTR strName,
             VARIANT_BOOL *fValue) = 0;
        
        virtual  HRESULT __stdcall putFeature( 
             BSTR strName,
             VARIANT_BOOL fValue) = 0;
        
        virtual  HRESULT __stdcall getProperty( 
             BSTR strName,
             VARIANT *varValue) = 0;
        
        virtual  HRESULT __stdcall putProperty( 
             BSTR strName,
             VARIANT varValue) = 0;
        
        virtual  HRESULT __stdcall get_entityResolver( 
             IVBSAXEntityResolver **oResolver) = 0;
        
        virtual  HRESULT __stdcall putref_entityResolver( 
             IVBSAXEntityResolver *oResolver) = 0;
        
        virtual  HRESULT __stdcall get_contentHandler( 
             IVBSAXContentHandler **oHandler) = 0;
        
        virtual  HRESULT __stdcall putref_contentHandler( 
             IVBSAXContentHandler *oHandler) = 0;
        
        virtual  HRESULT __stdcall get_dtdHandler( 
             IVBSAXDTDHandler **oHandler) = 0;
        
        virtual  HRESULT __stdcall putref_dtdHandler( 
             IVBSAXDTDHandler *oHandler) = 0;
        
        virtual  HRESULT __stdcall get_errorHandler( 
             IVBSAXErrorHandler **oHandler) = 0;
        
        virtual  HRESULT __stdcall putref_errorHandler( 
             IVBSAXErrorHandler *oHandler) = 0;
        
        virtual  HRESULT __stdcall get_baseURL( 
             BSTR *strBaseURL) = 0;
        
        virtual  HRESULT __stdcall put_baseURL( 
             BSTR strBaseURL) = 0;
        
        virtual  HRESULT __stdcall get_secureBaseURL( 
             BSTR *strSecureBaseURL) = 0;
        
        virtual  HRESULT __stdcall put_secureBaseURL( 
             BSTR strSecureBaseURL) = 0;
        
        virtual  HRESULT __stdcall parse( 
             VARIANT varInput) = 0;
        
        virtual  HRESULT __stdcall parseURL( 
             BSTR strURL) = 0;
        
    };
    























































































































































































































#line 14451 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXXMLReader_getFeature_Proxy( 
    IVBSAXXMLReader * This,
     BSTR strName,
     VARIANT_BOOL *fValue);


void __stdcall IVBSAXXMLReader_getFeature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_putFeature_Proxy( 
    IVBSAXXMLReader * This,
     BSTR strName,
     VARIANT_BOOL fValue);


void __stdcall IVBSAXXMLReader_putFeature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_getProperty_Proxy( 
    IVBSAXXMLReader * This,
     BSTR strName,
     VARIANT *varValue);


void __stdcall IVBSAXXMLReader_getProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_putProperty_Proxy( 
    IVBSAXXMLReader * This,
     BSTR strName,
     VARIANT varValue);


void __stdcall IVBSAXXMLReader_putProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_get_entityResolver_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXEntityResolver **oResolver);


void __stdcall IVBSAXXMLReader_get_entityResolver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_putref_entityResolver_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXEntityResolver *oResolver);


void __stdcall IVBSAXXMLReader_putref_entityResolver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_get_contentHandler_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXContentHandler **oHandler);


void __stdcall IVBSAXXMLReader_get_contentHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_putref_contentHandler_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXContentHandler *oHandler);


void __stdcall IVBSAXXMLReader_putref_contentHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_get_dtdHandler_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXDTDHandler **oHandler);


void __stdcall IVBSAXXMLReader_get_dtdHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_putref_dtdHandler_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXDTDHandler *oHandler);


void __stdcall IVBSAXXMLReader_putref_dtdHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_get_errorHandler_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXErrorHandler **oHandler);


void __stdcall IVBSAXXMLReader_get_errorHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_putref_errorHandler_Proxy( 
    IVBSAXXMLReader * This,
     IVBSAXErrorHandler *oHandler);


void __stdcall IVBSAXXMLReader_putref_errorHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_get_baseURL_Proxy( 
    IVBSAXXMLReader * This,
     BSTR *strBaseURL);


void __stdcall IVBSAXXMLReader_get_baseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_put_baseURL_Proxy( 
    IVBSAXXMLReader * This,
     BSTR strBaseURL);


void __stdcall IVBSAXXMLReader_put_baseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_get_secureBaseURL_Proxy( 
    IVBSAXXMLReader * This,
     BSTR *strSecureBaseURL);


void __stdcall IVBSAXXMLReader_get_secureBaseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_put_secureBaseURL_Proxy( 
    IVBSAXXMLReader * This,
     BSTR strSecureBaseURL);


void __stdcall IVBSAXXMLReader_put_secureBaseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_parse_Proxy( 
    IVBSAXXMLReader * This,
     VARIANT varInput);


void __stdcall IVBSAXXMLReader_parse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLReader_parseURL_Proxy( 
    IVBSAXXMLReader * This,
     BSTR strURL);


void __stdcall IVBSAXXMLReader_parseURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14676 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXXMLFilter;


    
    struct __declspec(uuid("1299eb1b-5b88-433e-82de-82ca75ad4e04")) __declspec(novtable)
    IVBSAXXMLFilter : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_parent( 
             IVBSAXXMLReader **oReader) = 0;
        
        virtual  HRESULT __stdcall putref_parent( 
             IVBSAXXMLReader *oReader) = 0;
        
    };
    



































































































#line 14801 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXXMLFilter_get_parent_Proxy( 
    IVBSAXXMLFilter * This,
     IVBSAXXMLReader **oReader);


void __stdcall IVBSAXXMLFilter_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXXMLFilter_putref_parent_Proxy( 
    IVBSAXXMLFilter * This,
     IVBSAXXMLReader *oReader);


void __stdcall IVBSAXXMLFilter_putref_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14830 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXLocator;


    
    struct __declspec(uuid("796e7ac5-5aa2-4eff-acad-3faaf01a3288")) __declspec(novtable)
    IVBSAXLocator : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_columnNumber( 
             int *nColumn) = 0;
        
        virtual  HRESULT __stdcall get_lineNumber( 
             int *nLine) = 0;
        
        virtual  HRESULT __stdcall get_publicId( 
             BSTR *strPublicId) = 0;
        
        virtual  HRESULT __stdcall get_systemId( 
             BSTR *strSystemId) = 0;
        
    };
    

















































































































#line 14975 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXLocator_get_columnNumber_Proxy( 
    IVBSAXLocator * This,
     int *nColumn);


void __stdcall IVBSAXLocator_get_columnNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLocator_get_lineNumber_Proxy( 
    IVBSAXLocator * This,
     int *nLine);


void __stdcall IVBSAXLocator_get_lineNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLocator_get_publicId_Proxy( 
    IVBSAXLocator * This,
     BSTR *strPublicId);


void __stdcall IVBSAXLocator_get_publicId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLocator_get_systemId_Proxy( 
    IVBSAXLocator * This,
     BSTR *strSystemId);


void __stdcall IVBSAXLocator_get_systemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15028 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXEntityResolver;


    
    struct __declspec(uuid("0c05d096-f45b-4aca-ad1a-aa0bc25518dc")) __declspec(novtable)
    IVBSAXEntityResolver : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall resolveEntity( 
             BSTR *strPublicId,
             BSTR *strSystemId,
             VARIANT *varInput) = 0;
        
    };
    






























































































#line 15147 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXEntityResolver_resolveEntity_Proxy( 
    IVBSAXEntityResolver * This,
     BSTR *strPublicId,
     BSTR *strSystemId,
     VARIANT *varInput);


void __stdcall IVBSAXEntityResolver_resolveEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15166 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXContentHandler;


    
    struct __declspec(uuid("2ed7290a-4dd5-4b46-bb26-4e4155e77faa")) __declspec(novtable)
    IVBSAXContentHandler : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall putref_documentLocator( 
             IVBSAXLocator *oLocator) = 0;
        
        virtual  HRESULT __stdcall startDocument( void) = 0;
        
        virtual  HRESULT __stdcall endDocument( void) = 0;
        
        virtual  HRESULT __stdcall startPrefixMapping( 
             BSTR *strPrefix,
             BSTR *strURI) = 0;
        
        virtual  HRESULT __stdcall endPrefixMapping( 
             BSTR *strPrefix) = 0;
        
        virtual  HRESULT __stdcall startElement( 
             BSTR *strNamespaceURI,
             BSTR *strLocalName,
             BSTR *strQName,
             IVBSAXAttributes *oAttributes) = 0;
        
        virtual  HRESULT __stdcall endElement( 
             BSTR *strNamespaceURI,
             BSTR *strLocalName,
             BSTR *strQName) = 0;
        
        virtual  HRESULT __stdcall characters( 
             BSTR *strChars) = 0;
        
        virtual  HRESULT __stdcall ignorableWhitespace( 
             BSTR *strChars) = 0;
        
        virtual  HRESULT __stdcall processingInstruction( 
             BSTR *strTarget,
             BSTR *strData) = 0;
        
        virtual  HRESULT __stdcall skippedEntity( 
             BSTR *strName) = 0;
        
    };
    







































































































































































#line 15391 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXContentHandler_putref_documentLocator_Proxy( 
    IVBSAXContentHandler * This,
     IVBSAXLocator *oLocator);


void __stdcall IVBSAXContentHandler_putref_documentLocator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_startDocument_Proxy( 
    IVBSAXContentHandler * This);


void __stdcall IVBSAXContentHandler_startDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_endDocument_Proxy( 
    IVBSAXContentHandler * This);


void __stdcall IVBSAXContentHandler_endDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_startPrefixMapping_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strPrefix,
     BSTR *strURI);


void __stdcall IVBSAXContentHandler_startPrefixMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_endPrefixMapping_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strPrefix);


void __stdcall IVBSAXContentHandler_endPrefixMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_startElement_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strNamespaceURI,
     BSTR *strLocalName,
     BSTR *strQName,
     IVBSAXAttributes *oAttributes);


void __stdcall IVBSAXContentHandler_startElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_endElement_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strNamespaceURI,
     BSTR *strLocalName,
     BSTR *strQName);


void __stdcall IVBSAXContentHandler_endElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_characters_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strChars);


void __stdcall IVBSAXContentHandler_characters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_ignorableWhitespace_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strChars);


void __stdcall IVBSAXContentHandler_ignorableWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_processingInstruction_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strTarget,
     BSTR *strData);


void __stdcall IVBSAXContentHandler_processingInstruction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXContentHandler_skippedEntity_Proxy( 
    IVBSAXContentHandler * This,
     BSTR *strName);


void __stdcall IVBSAXContentHandler_skippedEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXDTDHandler;


    
    struct __declspec(uuid("24fb3297-302d-4620-ba39-3a732d850558")) __declspec(novtable)
    IVBSAXDTDHandler : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall notationDecl( 
             BSTR *strName,
             BSTR *strPublicId,
             BSTR *strSystemId) = 0;
        
        virtual  HRESULT __stdcall unparsedEntityDecl( 
             BSTR *strName,
             BSTR *strPublicId,
             BSTR *strSystemId,
             BSTR *strNotationName) = 0;
        
    };
    








































































































#line 15668 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXDTDHandler_notationDecl_Proxy( 
    IVBSAXDTDHandler * This,
     BSTR *strName,
     BSTR *strPublicId,
     BSTR *strSystemId);


void __stdcall IVBSAXDTDHandler_notationDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXDTDHandler_unparsedEntityDecl_Proxy( 
    IVBSAXDTDHandler * This,
     BSTR *strName,
     BSTR *strPublicId,
     BSTR *strSystemId,
     BSTR *strNotationName);


void __stdcall IVBSAXDTDHandler_unparsedEntityDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15702 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXErrorHandler;


    
    struct __declspec(uuid("d963d3fe-173c-4862-9095-b92f66995f52")) __declspec(novtable)
    IVBSAXErrorHandler : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall error( 
             IVBSAXLocator *oLocator,
             BSTR *strErrorMessage,
             long nErrorCode) = 0;
        
        virtual  HRESULT __stdcall fatalError( 
             IVBSAXLocator *oLocator,
             BSTR *strErrorMessage,
             long nErrorCode) = 0;
        
        virtual  HRESULT __stdcall ignorableWarning( 
             IVBSAXLocator *oLocator,
             BSTR *strErrorMessage,
             long nErrorCode) = 0;
        
    };
    
















































































































#line 15849 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXErrorHandler_error_Proxy( 
    IVBSAXErrorHandler * This,
     IVBSAXLocator *oLocator,
     BSTR *strErrorMessage,
     long nErrorCode);


void __stdcall IVBSAXErrorHandler_error_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXErrorHandler_fatalError_Proxy( 
    IVBSAXErrorHandler * This,
     IVBSAXLocator *oLocator,
     BSTR *strErrorMessage,
     long nErrorCode);


void __stdcall IVBSAXErrorHandler_fatalError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXErrorHandler_ignorableWarning_Proxy( 
    IVBSAXErrorHandler * This,
     IVBSAXLocator *oLocator,
     BSTR *strErrorMessage,
     long nErrorCode);


void __stdcall IVBSAXErrorHandler_ignorableWarning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15896 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXLexicalHandler;


    
    struct __declspec(uuid("032aac35-8c0e-4d9d-979f-e3b702935576")) __declspec(novtable)
    IVBSAXLexicalHandler : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall startDTD( 
             BSTR *strName,
             BSTR *strPublicId,
             BSTR *strSystemId) = 0;
        
        virtual  HRESULT __stdcall endDTD( void) = 0;
        
        virtual  HRESULT __stdcall startEntity( 
             BSTR *strName) = 0;
        
        virtual  HRESULT __stdcall endEntity( 
             BSTR *strName) = 0;
        
        virtual  HRESULT __stdcall startCDATA( void) = 0;
        
        virtual  HRESULT __stdcall endCDATA( void) = 0;
        
        virtual  HRESULT __stdcall comment( 
             BSTR *strChars) = 0;
        
    };
    





































































































































#line 16069 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXLexicalHandler_startDTD_Proxy( 
    IVBSAXLexicalHandler * This,
     BSTR *strName,
     BSTR *strPublicId,
     BSTR *strSystemId);


void __stdcall IVBSAXLexicalHandler_startDTD_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLexicalHandler_endDTD_Proxy( 
    IVBSAXLexicalHandler * This);


void __stdcall IVBSAXLexicalHandler_endDTD_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLexicalHandler_startEntity_Proxy( 
    IVBSAXLexicalHandler * This,
     BSTR *strName);


void __stdcall IVBSAXLexicalHandler_startEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLexicalHandler_endEntity_Proxy( 
    IVBSAXLexicalHandler * This,
     BSTR *strName);


void __stdcall IVBSAXLexicalHandler_endEntity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLexicalHandler_startCDATA_Proxy( 
    IVBSAXLexicalHandler * This);


void __stdcall IVBSAXLexicalHandler_startCDATA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLexicalHandler_endCDATA_Proxy( 
    IVBSAXLexicalHandler * This);


void __stdcall IVBSAXLexicalHandler_endCDATA_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXLexicalHandler_comment_Proxy( 
    IVBSAXLexicalHandler * This,
     BSTR *strChars);


void __stdcall IVBSAXLexicalHandler_comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 16157 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXDeclHandler;


    
    struct __declspec(uuid("e8917260-7579-4be1-b5dd-7afbfa6f077b")) __declspec(novtable)
    IVBSAXDeclHandler : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall elementDecl( 
             BSTR *strName,
             BSTR *strModel) = 0;
        
        virtual  HRESULT __stdcall attributeDecl( 
             BSTR *strElementName,
             BSTR *strAttributeName,
             BSTR *strType,
             BSTR *strValueDefault,
             BSTR *strValue) = 0;
        
        virtual  HRESULT __stdcall internalEntityDecl( 
             BSTR *strName,
             BSTR *strValue) = 0;
        
        virtual  HRESULT __stdcall externalEntityDecl( 
             BSTR *strName,
             BSTR *strPublicId,
             BSTR *strSystemId) = 0;
        
    };
    

























































































































#line 16318 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXDeclHandler_elementDecl_Proxy( 
    IVBSAXDeclHandler * This,
     BSTR *strName,
     BSTR *strModel);


void __stdcall IVBSAXDeclHandler_elementDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXDeclHandler_attributeDecl_Proxy( 
    IVBSAXDeclHandler * This,
     BSTR *strElementName,
     BSTR *strAttributeName,
     BSTR *strType,
     BSTR *strValueDefault,
     BSTR *strValue);


void __stdcall IVBSAXDeclHandler_attributeDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXDeclHandler_internalEntityDecl_Proxy( 
    IVBSAXDeclHandler * This,
     BSTR *strName,
     BSTR *strValue);


void __stdcall IVBSAXDeclHandler_internalEntityDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXDeclHandler_externalEntityDecl_Proxy( 
    IVBSAXDeclHandler * This,
     BSTR *strName,
     BSTR *strPublicId,
     BSTR *strSystemId);


void __stdcall IVBSAXDeclHandler_externalEntityDecl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 16379 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IVBSAXAttributes;


    
    struct __declspec(uuid("10dc0586-132b-4cac-8bb3-db00ac8b7ee0")) __declspec(novtable)
    IVBSAXAttributes : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_length( 
             int *nLength) = 0;
        
        virtual  HRESULT __stdcall getURI( 
             int nIndex,
             BSTR *strURI) = 0;
        
        virtual  HRESULT __stdcall getLocalName( 
             int nIndex,
             BSTR *strLocalName) = 0;
        
        virtual  HRESULT __stdcall getQName( 
             int nIndex,
             BSTR *strQName) = 0;
        
        virtual  HRESULT __stdcall getIndexFromName( 
             BSTR strURI,
             BSTR strLocalName,
             int *nIndex) = 0;
        
        virtual  HRESULT __stdcall getIndexFromQName( 
             BSTR strQName,
             int *nIndex) = 0;
        
        virtual  HRESULT __stdcall getType( 
             int nIndex,
             BSTR *strType) = 0;
        
        virtual  HRESULT __stdcall getTypeFromName( 
             BSTR strURI,
             BSTR strLocalName,
             BSTR *strType) = 0;
        
        virtual  HRESULT __stdcall getTypeFromQName( 
             BSTR strQName,
             BSTR *strType) = 0;
        
        virtual  HRESULT __stdcall getValue( 
             int nIndex,
             BSTR *strValue) = 0;
        
        virtual  HRESULT __stdcall getValueFromName( 
             BSTR strURI,
             BSTR strLocalName,
             BSTR *strValue) = 0;
        
        virtual  HRESULT __stdcall getValueFromQName( 
             BSTR strQName,
             BSTR *strValue) = 0;
        
    };
    























































































































































































#line 16632 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IVBSAXAttributes_get_length_Proxy( 
    IVBSAXAttributes * This,
     int *nLength);


void __stdcall IVBSAXAttributes_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getURI_Proxy( 
    IVBSAXAttributes * This,
     int nIndex,
     BSTR *strURI);


void __stdcall IVBSAXAttributes_getURI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getLocalName_Proxy( 
    IVBSAXAttributes * This,
     int nIndex,
     BSTR *strLocalName);


void __stdcall IVBSAXAttributes_getLocalName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getQName_Proxy( 
    IVBSAXAttributes * This,
     int nIndex,
     BSTR *strQName);


void __stdcall IVBSAXAttributes_getQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getIndexFromName_Proxy( 
    IVBSAXAttributes * This,
     BSTR strURI,
     BSTR strLocalName,
     int *nIndex);


void __stdcall IVBSAXAttributes_getIndexFromName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getIndexFromQName_Proxy( 
    IVBSAXAttributes * This,
     BSTR strQName,
     int *nIndex);


void __stdcall IVBSAXAttributes_getIndexFromQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getType_Proxy( 
    IVBSAXAttributes * This,
     int nIndex,
     BSTR *strType);


void __stdcall IVBSAXAttributes_getType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getTypeFromName_Proxy( 
    IVBSAXAttributes * This,
     BSTR strURI,
     BSTR strLocalName,
     BSTR *strType);


void __stdcall IVBSAXAttributes_getTypeFromName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getTypeFromQName_Proxy( 
    IVBSAXAttributes * This,
     BSTR strQName,
     BSTR *strType);


void __stdcall IVBSAXAttributes_getTypeFromQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getValue_Proxy( 
    IVBSAXAttributes * This,
     int nIndex,
     BSTR *strValue);


void __stdcall IVBSAXAttributes_getValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getValueFromName_Proxy( 
    IVBSAXAttributes * This,
     BSTR strURI,
     BSTR strLocalName,
     BSTR *strValue);


void __stdcall IVBSAXAttributes_getValueFromName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IVBSAXAttributes_getValueFromQName_Proxy( 
    IVBSAXAttributes * This,
     BSTR strQName,
     BSTR *strValue);


void __stdcall IVBSAXAttributes_getValueFromQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 16795 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IMXWriter;


    
    struct __declspec(uuid("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d")) __declspec(novtable)
    IMXWriter : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall put_output( 
             VARIANT varDestination) = 0;
        
        virtual  HRESULT __stdcall get_output( 
             VARIANT *varDestination) = 0;
        
        virtual  HRESULT __stdcall put_encoding( 
             BSTR strEncoding) = 0;
        
        virtual  HRESULT __stdcall get_encoding( 
             BSTR *strEncoding) = 0;
        
        virtual  HRESULT __stdcall put_byteOrderMark( 
             VARIANT_BOOL fWriteByteOrderMark) = 0;
        
        virtual  HRESULT __stdcall get_byteOrderMark( 
             VARIANT_BOOL *fWriteByteOrderMark) = 0;
        
        virtual  HRESULT __stdcall put_indent( 
             VARIANT_BOOL fIndentMode) = 0;
        
        virtual  HRESULT __stdcall get_indent( 
             VARIANT_BOOL *fIndentMode) = 0;
        
        virtual  HRESULT __stdcall put_standalone( 
             VARIANT_BOOL fValue) = 0;
        
        virtual  HRESULT __stdcall get_standalone( 
             VARIANT_BOOL *fValue) = 0;
        
        virtual  HRESULT __stdcall put_omitXMLDeclaration( 
             VARIANT_BOOL fValue) = 0;
        
        virtual  HRESULT __stdcall get_omitXMLDeclaration( 
             VARIANT_BOOL *fValue) = 0;
        
        virtual  HRESULT __stdcall put_version( 
             BSTR strVersion) = 0;
        
        virtual  HRESULT __stdcall get_version( 
             BSTR *strVersion) = 0;
        
        virtual  HRESULT __stdcall put_disableOutputEscaping( 
             VARIANT_BOOL fValue) = 0;
        
        virtual  HRESULT __stdcall get_disableOutputEscaping( 
             VARIANT_BOOL *fValue) = 0;
        
        virtual  HRESULT __stdcall flush( void) = 0;
        
    };
    











































































































































































































#line 17068 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IMXWriter_put_output_Proxy( 
    IMXWriter * This,
     VARIANT varDestination);


void __stdcall IMXWriter_put_output_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_output_Proxy( 
    IMXWriter * This,
     VARIANT *varDestination);


void __stdcall IMXWriter_get_output_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_put_encoding_Proxy( 
    IMXWriter * This,
     BSTR strEncoding);


void __stdcall IMXWriter_put_encoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_encoding_Proxy( 
    IMXWriter * This,
     BSTR *strEncoding);


void __stdcall IMXWriter_get_encoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_put_byteOrderMark_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL fWriteByteOrderMark);


void __stdcall IMXWriter_put_byteOrderMark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_byteOrderMark_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL *fWriteByteOrderMark);


void __stdcall IMXWriter_get_byteOrderMark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_put_indent_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL fIndentMode);


void __stdcall IMXWriter_put_indent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_indent_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL *fIndentMode);


void __stdcall IMXWriter_get_indent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_put_standalone_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL fValue);


void __stdcall IMXWriter_put_standalone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_standalone_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL *fValue);


void __stdcall IMXWriter_get_standalone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_put_omitXMLDeclaration_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL fValue);


void __stdcall IMXWriter_put_omitXMLDeclaration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_omitXMLDeclaration_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL *fValue);


void __stdcall IMXWriter_get_omitXMLDeclaration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_put_version_Proxy( 
    IMXWriter * This,
     BSTR strVersion);


void __stdcall IMXWriter_put_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_version_Proxy( 
    IMXWriter * This,
     BSTR *strVersion);


void __stdcall IMXWriter_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_put_disableOutputEscaping_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL fValue);


void __stdcall IMXWriter_put_disableOutputEscaping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_get_disableOutputEscaping_Proxy( 
    IMXWriter * This,
     VARIANT_BOOL *fValue);


void __stdcall IMXWriter_get_disableOutputEscaping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXWriter_flush_Proxy( 
    IMXWriter * This);


void __stdcall IMXWriter_flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 17276 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IMXAttributes;


    
    struct __declspec(uuid("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262")) __declspec(novtable)
    IMXAttributes : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall addAttribute( 
             BSTR strURI,
             BSTR strLocalName,
             BSTR strQName,
             BSTR strType,
             BSTR strValue) = 0;
        
        virtual  HRESULT __stdcall addAttributeFromIndex( 
             VARIANT varAtts,
             int nIndex) = 0;
        
        virtual  HRESULT __stdcall clear( void) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             int nIndex) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             int nIndex,
             BSTR strURI,
             BSTR strLocalName,
             BSTR strQName,
             BSTR strType,
             BSTR strValue) = 0;
        
        virtual  HRESULT __stdcall setAttributes( 
             VARIANT varAtts) = 0;
        
        virtual  HRESULT __stdcall setLocalName( 
             int nIndex,
             BSTR strLocalName) = 0;
        
        virtual  HRESULT __stdcall setQName( 
             int nIndex,
             BSTR strQName) = 0;
        
        virtual  HRESULT __stdcall setType( 
             int nIndex,
             BSTR strType) = 0;
        
        virtual  HRESULT __stdcall setURI( 
             int nIndex,
             BSTR strURI) = 0;
        
        virtual  HRESULT __stdcall setValue( 
             int nIndex,
             BSTR strValue) = 0;
        
    };
    
















































































































































































#line 17519 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IMXAttributes_addAttribute_Proxy( 
    IMXAttributes * This,
     BSTR strURI,
     BSTR strLocalName,
     BSTR strQName,
     BSTR strType,
     BSTR strValue);


void __stdcall IMXAttributes_addAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_addAttributeFromIndex_Proxy( 
    IMXAttributes * This,
     VARIANT varAtts,
     int nIndex);


void __stdcall IMXAttributes_addAttributeFromIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_clear_Proxy( 
    IMXAttributes * This);


void __stdcall IMXAttributes_clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_removeAttribute_Proxy( 
    IMXAttributes * This,
     int nIndex);


void __stdcall IMXAttributes_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_setAttribute_Proxy( 
    IMXAttributes * This,
     int nIndex,
     BSTR strURI,
     BSTR strLocalName,
     BSTR strQName,
     BSTR strType,
     BSTR strValue);


void __stdcall IMXAttributes_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_setAttributes_Proxy( 
    IMXAttributes * This,
     VARIANT varAtts);


void __stdcall IMXAttributes_setAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_setLocalName_Proxy( 
    IMXAttributes * This,
     int nIndex,
     BSTR strLocalName);


void __stdcall IMXAttributes_setLocalName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_setQName_Proxy( 
    IMXAttributes * This,
     int nIndex,
     BSTR strQName);


void __stdcall IMXAttributes_setQName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_setType_Proxy( 
    IMXAttributes * This,
     int nIndex,
     BSTR strType);


void __stdcall IMXAttributes_setType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_setURI_Proxy( 
    IMXAttributes * This,
     int nIndex,
     BSTR strURI);


void __stdcall IMXAttributes_setURI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXAttributes_setValue_Proxy( 
    IMXAttributes * This,
     int nIndex,
     BSTR strValue);


void __stdcall IMXAttributes_setValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 17670 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IMXReaderControl;


    
    struct __declspec(uuid("808f4e35-8d5a-4fbe-8466-33a41279ed30")) __declspec(novtable)
    IMXReaderControl : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall abort( void) = 0;
        
        virtual  HRESULT __stdcall resume( void) = 0;
        
        virtual  HRESULT __stdcall suspend( void) = 0;
        
    };
    







































































































#line 17799 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IMXReaderControl_abort_Proxy( 
    IMXReaderControl * This);


void __stdcall IMXReaderControl_abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXReaderControl_resume_Proxy( 
    IMXReaderControl * This);


void __stdcall IMXReaderControl_resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMXReaderControl_suspend_Proxy( 
    IMXReaderControl * This);


void __stdcall IMXReaderControl_suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 17837 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 


extern "C" const IID IID_IXMLDOMSelection;


    
    struct __declspec(uuid("AA634FC7-5888-44a7-A257-3A47150D3A0E")) __declspec(novtable)
    IXMLDOMSelection : public IXMLDOMNodeList
    {
    public:
        virtual  HRESULT __stdcall get_expr( 
             BSTR *expression) = 0;
        
        virtual  HRESULT __stdcall put_expr( 
             BSTR expression) = 0;
        
        virtual  HRESULT __stdcall get_context( 
             IXMLDOMNode **ppNode) = 0;
        
        virtual  HRESULT __stdcall putref_context( 
             IXMLDOMNode *pNode) = 0;
        
        virtual  HRESULT __stdcall peekNode( 
             IXMLDOMNode **ppNode) = 0;
        
        virtual  HRESULT __stdcall matches( 
             IXMLDOMNode *pNode,
             IXMLDOMNode **ppNode) = 0;
        
        virtual  HRESULT __stdcall removeNext( 
             IXMLDOMNode **ppNode) = 0;
        
        virtual  HRESULT __stdcall removeAll( void) = 0;
        
        virtual  HRESULT __stdcall clone( 
             IXMLDOMSelection **ppNode) = 0;
        
        virtual  HRESULT __stdcall getProperty( 
             BSTR name,
             VARIANT *value) = 0;
        
        virtual  HRESULT __stdcall setProperty( 
             BSTR name,
             VARIANT value) = 0;
        
    };
    








































































































































































































#line 20226 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IXMLDOMSelection_get_expr_Proxy( 
    IXMLDOMSelection * This,
     BSTR *expression);


void __stdcall IXMLDOMSelection_get_expr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_put_expr_Proxy( 
    IXMLDOMSelection * This,
     BSTR expression);


void __stdcall IXMLDOMSelection_put_expr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_get_context_Proxy( 
    IXMLDOMSelection * This,
     IXMLDOMNode **ppNode);


void __stdcall IXMLDOMSelection_get_context_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_putref_context_Proxy( 
    IXMLDOMSelection * This,
     IXMLDOMNode *pNode);


void __stdcall IXMLDOMSelection_putref_context_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_peekNode_Proxy( 
    IXMLDOMSelection * This,
     IXMLDOMNode **ppNode);


void __stdcall IXMLDOMSelection_peekNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_matches_Proxy( 
    IXMLDOMSelection * This,
     IXMLDOMNode *pNode,
     IXMLDOMNode **ppNode);


void __stdcall IXMLDOMSelection_matches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_removeNext_Proxy( 
    IXMLDOMSelection * This,
     IXMLDOMNode **ppNode);


void __stdcall IXMLDOMSelection_removeNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_removeAll_Proxy( 
    IXMLDOMSelection * This);


void __stdcall IXMLDOMSelection_removeAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_clone_Proxy( 
    IXMLDOMSelection * This,
     IXMLDOMSelection **ppNode);


void __stdcall IXMLDOMSelection_clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_getProperty_Proxy( 
    IXMLDOMSelection * This,
     BSTR name,
     VARIANT *value);


void __stdcall IXMLDOMSelection_getProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMSelection_setProperty_Proxy( 
    IXMLDOMSelection * This,
     BSTR name,
     VARIANT value);


void __stdcall IXMLDOMSelection_setProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 20365 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"
















































































































 


extern "C" const IID IID_IDSOControl;


    
    struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) __declspec(novtable)
    IDSOControl : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_XMLDocument( 
             IXMLDOMDocument **ppDoc) = 0;
        
        virtual  HRESULT __stdcall put_XMLDocument( 
             IXMLDOMDocument *ppDoc) = 0;
        
        virtual  HRESULT __stdcall get_JavaDSOCompatible( 
             BOOL *fJavaDSOCompatible) = 0;
        
        virtual  HRESULT __stdcall put_JavaDSOCompatible( 
             BOOL fJavaDSOCompatible) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *state) = 0;
        
    };
    
























































































































#line 20626 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IDSOControl_get_XMLDocument_Proxy( 
    IDSOControl * This,
     IXMLDOMDocument **ppDoc);


void __stdcall IDSOControl_get_XMLDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDSOControl_put_XMLDocument_Proxy( 
    IDSOControl * This,
     IXMLDOMDocument *ppDoc);


void __stdcall IDSOControl_put_XMLDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDSOControl_get_JavaDSOCompatible_Proxy( 
    IDSOControl * This,
     BOOL *fJavaDSOCompatible);


void __stdcall IDSOControl_get_JavaDSOCompatible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDSOControl_put_JavaDSOCompatible_Proxy( 
    IDSOControl * This,
     BOOL fJavaDSOCompatible);


void __stdcall IDSOControl_put_JavaDSOCompatible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDSOControl_get_readyState_Proxy( 
    IDSOControl * This,
     long *state);


void __stdcall IDSOControl_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 20691 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IXMLHTTPRequest;


    
    struct __declspec(uuid("ED8C108D-4349-11D2-91A4-00C04F7969E8")) __declspec(novtable)
    IXMLHTTPRequest : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall open( 
             BSTR bstrMethod,
             BSTR bstrUrl,
             VARIANT varAsync,
             VARIANT bstrUser,
             VARIANT bstrPassword) = 0;
        
        virtual  HRESULT __stdcall setRequestHeader( 
             BSTR bstrHeader,
             BSTR bstrValue) = 0;
        
        virtual  HRESULT __stdcall getResponseHeader( 
             BSTR bstrHeader,
             BSTR *pbstrValue) = 0;
        
        virtual  HRESULT __stdcall getAllResponseHeaders( 
             BSTR *pbstrHeaders) = 0;
        
        virtual  HRESULT __stdcall send( 
             VARIANT varBody) = 0;
        
        virtual  HRESULT __stdcall abort( void) = 0;
        
        virtual  HRESULT __stdcall get_status( 
             long *plStatus) = 0;
        
        virtual  HRESULT __stdcall get_statusText( 
             BSTR *pbstrStatus) = 0;
        
        virtual  HRESULT __stdcall get_responseXML( 
             IDispatch **ppBody) = 0;
        
        virtual  HRESULT __stdcall get_responseText( 
             BSTR *pbstrBody) = 0;
        
        virtual  HRESULT __stdcall get_responseBody( 
             VARIANT *pvarBody) = 0;
        
        virtual  HRESULT __stdcall get_responseStream( 
             VARIANT *pvarBody) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *plState) = 0;
        
        virtual  HRESULT __stdcall put_onreadystatechange( 
             IDispatch *pReadyStateSink) = 0;
        
    };
    




























































































































































































#line 20946 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IXMLHTTPRequest_open_Proxy( 
    IXMLHTTPRequest * This,
     BSTR bstrMethod,
     BSTR bstrUrl,
     VARIANT varAsync,
     VARIANT bstrUser,
     VARIANT bstrPassword);


void __stdcall IXMLHTTPRequest_open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_setRequestHeader_Proxy( 
    IXMLHTTPRequest * This,
     BSTR bstrHeader,
     BSTR bstrValue);


void __stdcall IXMLHTTPRequest_setRequestHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_getResponseHeader_Proxy( 
    IXMLHTTPRequest * This,
     BSTR bstrHeader,
     BSTR *pbstrValue);


void __stdcall IXMLHTTPRequest_getResponseHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_getAllResponseHeaders_Proxy( 
    IXMLHTTPRequest * This,
     BSTR *pbstrHeaders);


void __stdcall IXMLHTTPRequest_getAllResponseHeaders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_send_Proxy( 
    IXMLHTTPRequest * This,
     VARIANT varBody);


void __stdcall IXMLHTTPRequest_send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_abort_Proxy( 
    IXMLHTTPRequest * This);


void __stdcall IXMLHTTPRequest_abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_get_status_Proxy( 
    IXMLHTTPRequest * This,
     long *plStatus);


void __stdcall IXMLHTTPRequest_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_get_statusText_Proxy( 
    IXMLHTTPRequest * This,
     BSTR *pbstrStatus);


void __stdcall IXMLHTTPRequest_get_statusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_get_responseXML_Proxy( 
    IXMLHTTPRequest * This,
     IDispatch **ppBody);


void __stdcall IXMLHTTPRequest_get_responseXML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_get_responseText_Proxy( 
    IXMLHTTPRequest * This,
     BSTR *pbstrBody);


void __stdcall IXMLHTTPRequest_get_responseText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_get_responseBody_Proxy( 
    IXMLHTTPRequest * This,
     VARIANT *pvarBody);


void __stdcall IXMLHTTPRequest_get_responseBody_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_get_responseStream_Proxy( 
    IXMLHTTPRequest * This,
     VARIANT *pvarBody);


void __stdcall IXMLHTTPRequest_get_responseStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_get_readyState_Proxy( 
    IXMLHTTPRequest * This,
     long *plState);


void __stdcall IXMLHTTPRequest_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHTTPRequest_put_onreadystatechange_Proxy( 
    IXMLHTTPRequest * This,
     IDispatch *pReadyStateSink);


void __stdcall IXMLHTTPRequest_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 21124 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"






 


extern "C" const IID IID_IServerXMLHTTPRequest;


    
    struct __declspec(uuid("2e9196bf-13ba-4dd4-91ca-6c571f281495")) __declspec(novtable)
    IServerXMLHTTPRequest : public IXMLHTTPRequest
    {
    public:
        virtual  HRESULT __stdcall setTimeouts( 
             long resolveTimeout,
             long connectTimeout,
             long sendTimeout,
             long receiveTimeout) = 0;
        
        virtual  HRESULT __stdcall waitForResponse( 
             VARIANT timeoutInSeconds,
             VARIANT_BOOL *isSuccessful) = 0;
        
        virtual  HRESULT __stdcall getOption( 
             SERVERXMLHTTP_OPTION option,
             VARIANT *value) = 0;
        
        virtual  HRESULT __stdcall setOption( 
             SERVERXMLHTTP_OPTION option,
             VARIANT value) = 0;
        
    };
    































































































































































































































#line 21385 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"



 HRESULT __stdcall IServerXMLHTTPRequest_setTimeouts_Proxy( 
    IServerXMLHTTPRequest * This,
     long resolveTimeout,
     long connectTimeout,
     long sendTimeout,
     long receiveTimeout);


void __stdcall IServerXMLHTTPRequest_setTimeouts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IServerXMLHTTPRequest_waitForResponse_Proxy( 
    IServerXMLHTTPRequest * This,
     VARIANT timeoutInSeconds,
     VARIANT_BOOL *isSuccessful);


void __stdcall IServerXMLHTTPRequest_waitForResponse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IServerXMLHTTPRequest_getOption_Proxy( 
    IServerXMLHTTPRequest * This,
     SERVERXMLHTTP_OPTION option,
     VARIANT *value);


void __stdcall IServerXMLHTTPRequest_getOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IServerXMLHTTPRequest_setOption_Proxy( 
    IServerXMLHTTPRequest * This,
     SERVERXMLHTTP_OPTION option,
     VARIANT value);


void __stdcall IServerXMLHTTPRequest_setOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 21444 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"


extern "C" const CLSID CLSID_DOMDocument2;



class __declspec(uuid("F6D90F11-9C73-11D3-B32E-00C04F990BB4"))
DOMDocument2;
#line 21453 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_DOMDocument26;



class __declspec(uuid("f5078f1b-c551-11d3-89b9-0000f81fe221"))
DOMDocument26;
#line 21461 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_DOMDocument30;



class __declspec(uuid("f5078f32-c551-11d3-89b9-0000f81fe221"))
DOMDocument30;
#line 21469 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_FreeThreadedDOMDocument;



class __declspec(uuid("F6D90F12-9C73-11D3-B32E-00C04F990BB4"))
FreeThreadedDOMDocument;
#line 21477 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_FreeThreadedDOMDocument26;



class __declspec(uuid("f5078f1c-c551-11d3-89b9-0000f81fe221"))
FreeThreadedDOMDocument26;
#line 21485 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_FreeThreadedDOMDocument30;



class __declspec(uuid("f5078f33-c551-11d3-89b9-0000f81fe221"))
FreeThreadedDOMDocument30;
#line 21493 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XMLSchemaCache;



class __declspec(uuid("373984c9-b845-449b-91e7-45ac83036ade"))
XMLSchemaCache;
#line 21501 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XMLSchemaCache26;



class __declspec(uuid("f5078f1d-c551-11d3-89b9-0000f81fe221"))
XMLSchemaCache26;
#line 21509 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XMLSchemaCache30;



class __declspec(uuid("f5078f34-c551-11d3-89b9-0000f81fe221"))
XMLSchemaCache30;
#line 21517 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XSLTemplate;



class __declspec(uuid("2933BF94-7B36-11d2-B20E-00C04F983E60"))
XSLTemplate;
#line 21525 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XSLTemplate26;



class __declspec(uuid("f5078f21-c551-11d3-89b9-0000f81fe221"))
XSLTemplate26;
#line 21533 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XSLTemplate30;



class __declspec(uuid("f5078f36-c551-11d3-89b9-0000f81fe221"))
XSLTemplate30;
#line 21541 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_DSOControl;



class __declspec(uuid("F6D90F14-9C73-11D3-B32E-00C04F990BB4"))
DSOControl;
#line 21549 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_DSOControl26;



class __declspec(uuid("f5078f1f-c551-11d3-89b9-0000f81fe221"))
DSOControl26;
#line 21557 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_DSOControl30;



class __declspec(uuid("f5078f39-c551-11d3-89b9-0000f81fe221"))
DSOControl30;
#line 21565 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XMLHTTP;



class __declspec(uuid("F6D90F16-9C73-11D3-B32E-00C04F990BB4"))
XMLHTTP;
#line 21573 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XMLHTTP26;



class __declspec(uuid("f5078f1e-c551-11d3-89b9-0000f81fe221"))
XMLHTTP26;
#line 21581 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XMLHTTP30;



class __declspec(uuid("f5078f35-c551-11d3-89b9-0000f81fe221"))
XMLHTTP30;
#line 21589 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_ServerXMLHTTP;



class __declspec(uuid("afba6b42-5692-48ea-8141-dc517dcf0ef1"))
ServerXMLHTTP;
#line 21597 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_ServerXMLHTTP30;



class __declspec(uuid("afb40ffd-b609-40a3-9828-f88bbe11e4e3"))
ServerXMLHTTP30;
#line 21605 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_SAXXMLReader;



class __declspec(uuid("079aa557-4a18-424a-8eee-e39f0a8d41b9"))
SAXXMLReader;
#line 21613 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_SAXXMLReader30;



class __declspec(uuid("3124c396-fb13-4836-a6ad-1317f1713688"))
SAXXMLReader30;
#line 21621 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_MXXMLWriter;



class __declspec(uuid("fc220ad8-a72a-4ee8-926e-0b7ad152a020"))
MXXMLWriter;
#line 21629 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_MXXMLWriter30;



class __declspec(uuid("3d813dfe-6c91-4a4e-8f41-04346a841d9c"))
MXXMLWriter30;
#line 21637 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_SAXAttributes;



class __declspec(uuid("4dd441ad-526d-4a77-9f1b-9841ed802fb0"))
SAXAttributes;
#line 21645 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_SAXAttributes30;



class __declspec(uuid("3e784a01-f3ae-4dc0-9354-9526b9370eba"))
SAXAttributes30;
#line 21653 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

extern "C" const CLSID CLSID_XMLDocument;



class __declspec(uuid("CFC399AF-D876-11d0-9C10-00C04FC99C8E"))
XMLDocument;
#line 21661 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"
#line 21662 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"


 












extern RPC_IF_HANDLE __MIDL_itf_msxml2_0169_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml2_0169_v0_0_s_ifspec;






}
#line 21687 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"

#line 21689 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\msxml2.h"


#line 15 "Upload.cpp"

#line 1 "browsedirectory.h"










#line 1 "D:\\Archivos de programa\\Microsoft SDK\\Include\\.\\shlobj.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 12 "browsedirectory.h"

class CBrowseDirectory
{
public:
	CBrowseDirectory() {}
	virtual ~CBrowseDirectory();

	CString Do(LPCTSTR Title, CWnd* pFromWnd = 0);
	virtual void BrowseDir(CString& str, CWnd* pFromWnd, LPCTSTR Title);

protected:
	virtual void InitBrowseInfo(BROWSEINFOA& bi, CWnd* pFromWnd, LPCTSTR Title);
};











































#line 69 "browsedirectory.h"


#line 17 "Upload.cpp"





#line 1 "d:\\lexnet 1.4\\idocpost\\msxml3.tlh"







#pragma once
#pragma pack(push, 8)



namespace MSXML2 {





struct __declspec(uuid("2933bf8f-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMImplementation;
struct __declspec(uuid("2933bf80-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMNode;
typedef enum tagDOMNodeType DOMNodeType;
struct __declspec(uuid("2933bf82-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMNodeList;
struct __declspec(uuid("2933bf83-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMNamedNodeMap;
struct __declspec(uuid("2933bf81-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMDocument;
struct __declspec(uuid("2933bf8b-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMDocumentType;
struct __declspec(uuid("2933bf86-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMElement;
struct __declspec(uuid("2933bf85-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMAttribute;
struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782"))
 IXMLDOMDocumentFragment;
struct __declspec(uuid("2933bf87-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMText;
struct __declspec(uuid("2933bf84-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMCharacterData;
struct __declspec(uuid("2933bf88-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMComment;
struct __declspec(uuid("2933bf8a-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMCDATASection;
struct __declspec(uuid("2933bf89-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMProcessingInstruction;
struct __declspec(uuid("2933bf8e-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMEntityReference;
struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782"))
 IXMLDOMParseError;
struct __declspec(uuid("373984c8-b845-449b-91e7-45ac83036ade"))
 IXMLDOMSchemaCollection;
struct __declspec(uuid("2933bf95-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMDocument2;
struct __declspec(uuid("2933bf8c-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMNotation;
struct __declspec(uuid("2933bf8d-7b36-11d2-b20e-00c04f983e60"))
 IXMLDOMEntity;
struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782"))
 IXTLRuntime;
struct __declspec(uuid("2933bf93-7b36-11d2-b20e-00c04f983e60"))
 IXSLTemplate;
struct __declspec(uuid("2933bf92-7b36-11d2-b20e-00c04f983e60"))
 IXSLProcessor;
struct __declspec(uuid("a4f96ed0-f829-476e-81c0-cdc7bd2a0802"))
 ISAXXMLReader;
struct __declspec(uuid("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07"))
 ISAXEntityResolver;
struct __declspec(uuid("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44"))
 ISAXContentHandler;
struct __declspec(uuid("9b7e472a-0de4-4640-bff3-84d38a051c31"))
 ISAXLocator;
struct __declspec(uuid("f078abe1-45d2-4832-91ea-4466ce2f25c9"))
 ISAXAttributes;
struct __declspec(uuid("e15c1baf-afb3-4d60-8c36-19a8c45defed"))
 ISAXDTDHandler;
struct __declspec(uuid("a60511c4-ccf5-479e-98a3-dc8dc545b7d0"))
 ISAXErrorHandler;
struct __declspec(uuid("70409222-ca09-4475-acb8-40312fe8d145"))
 ISAXXMLFilter;
struct __declspec(uuid("7f85d5f5-47a8-4497-bda5-84ba04819ea6"))
 ISAXLexicalHandler;
struct __declspec(uuid("862629ac-771a-47b2-8337-4e6843c1be90"))
 ISAXDeclHandler;
struct __declspec(uuid("8c033caa-6cd6-4f73-b728-4531af74945f"))
 IVBSAXXMLReader;
struct __declspec(uuid("0c05d096-f45b-4aca-ad1a-aa0bc25518dc"))
 IVBSAXEntityResolver;
struct __declspec(uuid("2ed7290a-4dd5-4b46-bb26-4e4155e77faa"))
 IVBSAXContentHandler;
struct __declspec(uuid("796e7ac5-5aa2-4eff-acad-3faaf01a3288"))
 IVBSAXLocator;
struct __declspec(uuid("10dc0586-132b-4cac-8bb3-db00ac8b7ee0"))
 IVBSAXAttributes;
struct __declspec(uuid("24fb3297-302d-4620-ba39-3a732d850558"))
 IVBSAXDTDHandler;
struct __declspec(uuid("d963d3fe-173c-4862-9095-b92f66995f52"))
 IVBSAXErrorHandler;
struct __declspec(uuid("1299eb1b-5b88-433e-82de-82ca75ad4e04"))
 IVBSAXXMLFilter;
struct __declspec(uuid("032aac35-8c0e-4d9d-979f-e3b702935576"))
 IVBSAXLexicalHandler;
struct __declspec(uuid("e8917260-7579-4be1-b5dd-7afbfa6f077b"))
 IVBSAXDeclHandler;
struct __declspec(uuid("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d"))
 IMXWriter;
struct __declspec(uuid("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262"))
 IMXAttributes;
struct __declspec(uuid("808f4e35-8d5a-4fbe-8466-33a41279ed30"))
 IMXReaderControl;
struct __declspec(uuid("65725580-9b5d-11d0-9bfe-00c04fc99c8e"))
 IXMLElementCollection;
struct __declspec(uuid("f52e2b61-18a1-11d1-b105-00805f49916b"))
 IXMLDocument;
struct __declspec(uuid("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e"))
 IXMLElement;
struct __declspec(uuid("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9"))
 IXMLDocument2;
struct __declspec(uuid("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9"))
 IXMLElement2;
struct __declspec(uuid("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596"))
 IXMLAttribute;
struct __declspec(uuid("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e"))
 IXMLError;
struct _xml_error;
typedef enum tagXMLEMEM_TYPE XMLELEM_TYPE;
struct __declspec(uuid("aa634fc7-5888-44a7-a257-3a47150d3a0e"))
 IXMLDOMSelection;
struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782"))
 XMLDOMDocumentEvents;
struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39"))
 IDSOControl;
struct __declspec(uuid("ed8c108d-4349-11d2-91a4-00c04f7969e8"))
 IXMLHTTPRequest;
typedef enum _SERVERXMLHTTP_OPTION SERVERXMLHTTP_OPTION;
typedef enum _SXH_SERVER_CERT_OPTION SXH_SERVER_CERT_OPTION;
struct __declspec(uuid("2e9196bf-13ba-4dd4-91ca-6c571f281495"))
 IServerXMLHTTPRequest;
struct  DOMDocument2;
struct  DOMDocument26;
struct  DOMDocument30;
struct  FreeThreadedDOMDocument;
struct  FreeThreadedDOMDocument26;
struct  FreeThreadedDOMDocument30;
struct  XMLSchemaCache;
struct  XMLSchemaCache26;
struct  XMLSchemaCache30;
struct  XSLTemplate;
struct  XSLTemplate26;
struct  XSLTemplate30;
struct  DSOControl;
struct  DSOControl26;
struct  DSOControl30;
struct  XMLHTTP;
struct  XMLHTTP26;
struct  XMLHTTP30;
struct  ServerXMLHTTP;
struct  ServerXMLHTTP30;
struct  SAXXMLReader;
struct  SAXXMLReader30;
struct  MXXMLWriter;
struct  MXXMLWriter30;
struct  SAXAttributes;
struct  SAXAttributes30;
struct  XMLDocument;





typedef _com_ptr_t<_com_IIID<IXMLDOMImplementation, &__uuidof(IXMLDOMImplementation)> > IXMLDOMImplementationPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMNode, &__uuidof(IXMLDOMNode)> > IXMLDOMNodePtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMNodeList, &__uuidof(IXMLDOMNodeList)> > IXMLDOMNodeListPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMNamedNodeMap, &__uuidof(IXMLDOMNamedNodeMap)> > IXMLDOMNamedNodeMapPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMDocument, &__uuidof(IXMLDOMDocument)> > IXMLDOMDocumentPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMDocumentType, &__uuidof(IXMLDOMDocumentType)> > IXMLDOMDocumentTypePtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMElement, &__uuidof(IXMLDOMElement)> > IXMLDOMElementPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMAttribute, &__uuidof(IXMLDOMAttribute)> > IXMLDOMAttributePtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMDocumentFragment, &__uuidof(IXMLDOMDocumentFragment)> > IXMLDOMDocumentFragmentPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMCharacterData, &__uuidof(IXMLDOMCharacterData)> > IXMLDOMCharacterDataPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMText, &__uuidof(IXMLDOMText)> > IXMLDOMTextPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMComment, &__uuidof(IXMLDOMComment)> > IXMLDOMCommentPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMCDATASection, &__uuidof(IXMLDOMCDATASection)> > IXMLDOMCDATASectionPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMProcessingInstruction, &__uuidof(IXMLDOMProcessingInstruction)> > IXMLDOMProcessingInstructionPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMEntityReference, &__uuidof(IXMLDOMEntityReference)> > IXMLDOMEntityReferencePtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMParseError, &__uuidof(IXMLDOMParseError)> > IXMLDOMParseErrorPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMSchemaCollection, &__uuidof(IXMLDOMSchemaCollection)> > IXMLDOMSchemaCollectionPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMDocument2, &__uuidof(IXMLDOMDocument2)> > IXMLDOMDocument2Ptr;
typedef _com_ptr_t<_com_IIID<IXMLDOMNotation, &__uuidof(IXMLDOMNotation)> > IXMLDOMNotationPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMEntity, &__uuidof(IXMLDOMEntity)> > IXMLDOMEntityPtr;
typedef _com_ptr_t<_com_IIID<IXTLRuntime, &__uuidof(IXTLRuntime)> > IXTLRuntimePtr;
typedef _com_ptr_t<_com_IIID<IXSLTemplate, &__uuidof(IXSLTemplate)> > IXSLTemplatePtr;
typedef _com_ptr_t<_com_IIID<IXSLProcessor, &__uuidof(IXSLProcessor)> > IXSLProcessorPtr;
typedef _com_ptr_t<_com_IIID<ISAXXMLReader, &__uuidof(ISAXXMLReader)> > ISAXXMLReaderPtr;
typedef _com_ptr_t<_com_IIID<ISAXEntityResolver, &__uuidof(ISAXEntityResolver)> > ISAXEntityResolverPtr;
typedef _com_ptr_t<_com_IIID<ISAXContentHandler, &__uuidof(ISAXContentHandler)> > ISAXContentHandlerPtr;
typedef _com_ptr_t<_com_IIID<ISAXLocator, &__uuidof(ISAXLocator)> > ISAXLocatorPtr;
typedef _com_ptr_t<_com_IIID<ISAXAttributes, &__uuidof(ISAXAttributes)> > ISAXAttributesPtr;
typedef _com_ptr_t<_com_IIID<ISAXDTDHandler, &__uuidof(ISAXDTDHandler)> > ISAXDTDHandlerPtr;
typedef _com_ptr_t<_com_IIID<ISAXErrorHandler, &__uuidof(ISAXErrorHandler)> > ISAXErrorHandlerPtr;
typedef _com_ptr_t<_com_IIID<ISAXXMLFilter, &__uuidof(ISAXXMLFilter)> > ISAXXMLFilterPtr;
typedef _com_ptr_t<_com_IIID<ISAXLexicalHandler, &__uuidof(ISAXLexicalHandler)> > ISAXLexicalHandlerPtr;
typedef _com_ptr_t<_com_IIID<ISAXDeclHandler, &__uuidof(ISAXDeclHandler)> > ISAXDeclHandlerPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXXMLReader, &__uuidof(IVBSAXXMLReader)> > IVBSAXXMLReaderPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXEntityResolver, &__uuidof(IVBSAXEntityResolver)> > IVBSAXEntityResolverPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXContentHandler, &__uuidof(IVBSAXContentHandler)> > IVBSAXContentHandlerPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXLocator, &__uuidof(IVBSAXLocator)> > IVBSAXLocatorPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXAttributes, &__uuidof(IVBSAXAttributes)> > IVBSAXAttributesPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXDTDHandler, &__uuidof(IVBSAXDTDHandler)> > IVBSAXDTDHandlerPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXErrorHandler, &__uuidof(IVBSAXErrorHandler)> > IVBSAXErrorHandlerPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXXMLFilter, &__uuidof(IVBSAXXMLFilter)> > IVBSAXXMLFilterPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXLexicalHandler, &__uuidof(IVBSAXLexicalHandler)> > IVBSAXLexicalHandlerPtr;
typedef _com_ptr_t<_com_IIID<IVBSAXDeclHandler, &__uuidof(IVBSAXDeclHandler)> > IVBSAXDeclHandlerPtr;
typedef _com_ptr_t<_com_IIID<IMXWriter, &__uuidof(IMXWriter)> > IMXWriterPtr;
typedef _com_ptr_t<_com_IIID<IMXAttributes, &__uuidof(IMXAttributes)> > IMXAttributesPtr;
typedef _com_ptr_t<_com_IIID<IMXReaderControl, &__uuidof(IMXReaderControl)> > IMXReaderControlPtr;
typedef _com_ptr_t<_com_IIID<IXMLElementCollection, &__uuidof(IXMLElementCollection)> > IXMLElementCollectionPtr;
typedef _com_ptr_t<_com_IIID<IXMLDocument, &__uuidof(IXMLDocument)> > IXMLDocumentPtr;
typedef _com_ptr_t<_com_IIID<IXMLElement, &__uuidof(IXMLElement)> > IXMLElementPtr;
typedef _com_ptr_t<_com_IIID<IXMLDocument2, &__uuidof(IXMLDocument2)> > IXMLDocument2Ptr;
typedef _com_ptr_t<_com_IIID<IXMLElement2, &__uuidof(IXMLElement2)> > IXMLElement2Ptr;
typedef _com_ptr_t<_com_IIID<IXMLAttribute, &__uuidof(IXMLAttribute)> > IXMLAttributePtr;
typedef _com_ptr_t<_com_IIID<IXMLError, &__uuidof(IXMLError)> > IXMLErrorPtr;
typedef _com_ptr_t<_com_IIID<IXMLDOMSelection, &__uuidof(IXMLDOMSelection)> > IXMLDOMSelectionPtr;
typedef _com_ptr_t<_com_IIID<XMLDOMDocumentEvents, &__uuidof(IDispatch)> > XMLDOMDocumentEventsPtr;
typedef _com_ptr_t<_com_IIID<IDSOControl, &__uuidof(IDSOControl)> > IDSOControlPtr;
typedef _com_ptr_t<_com_IIID<IXMLHTTPRequest, &__uuidof(IXMLHTTPRequest)> > IXMLHTTPRequestPtr;
typedef _com_ptr_t<_com_IIID<IServerXMLHTTPRequest, &__uuidof(IServerXMLHTTPRequest)> > IServerXMLHTTPRequestPtr;





struct __declspec(uuid("2933bf8f-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMImplementation : IDispatch
{
    
    
    

    VARIANT_BOOL hasFeature (
        _bstr_t feature,
        _bstr_t version );

    
    
    

    virtual HRESULT __stdcall raw_hasFeature (
        BSTR feature,
        BSTR version,
        VARIANT_BOOL * hasFeature ) = 0;
};

struct __declspec(uuid("2933bf80-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNode : IDispatch
{
    
    
    

    __declspec(property(get=GetnodeName))
    _bstr_t nodeName;
    __declspec(property(get=GetnodeValue,put=PutnodeValue))
    _variant_t nodeValue;
    __declspec(property(get=GetnodeType))
    DOMNodeType nodeType;
    __declspec(property(get=GetparentNode))
    IXMLDOMNodePtr parentNode;
    __declspec(property(get=GetchildNodes))
    IXMLDOMNodeListPtr childNodes;
    __declspec(property(get=GetfirstChild))
    IXMLDOMNodePtr firstChild;
    __declspec(property(get=GetlastChild))
    IXMLDOMNodePtr lastChild;
    __declspec(property(get=GetpreviousSibling))
    IXMLDOMNodePtr previousSibling;
    __declspec(property(get=GetnextSibling))
    IXMLDOMNodePtr nextSibling;
    __declspec(property(get=Getattributes))
    IXMLDOMNamedNodeMapPtr attributes;
    __declspec(property(get=GetownerDocument))
    IXMLDOMDocumentPtr ownerDocument;
    __declspec(property(get=GetnodeTypeString))
    _bstr_t nodeTypeString;
    __declspec(property(get=Getspecified))
    VARIANT_BOOL specified;
    __declspec(property(get=Getdefinition))
    IXMLDOMNodePtr definition;
    __declspec(property(get=Gettext,put=Puttext))
    _bstr_t text;
    __declspec(property(get=GetnodeTypedValue,put=PutnodeTypedValue))
    _variant_t nodeTypedValue;
    __declspec(property(get=Getxml))
    _bstr_t xml;
    __declspec(property(get=Getparsed))
    VARIANT_BOOL parsed;
    __declspec(property(get=GetnamespaceURI))
    _bstr_t namespaceURI;
    __declspec(property(get=Getprefix))
    _bstr_t prefix;
    __declspec(property(get=GetbaseName))
    _bstr_t baseName;

    
    
    

    _bstr_t GetnodeName ( );
    _variant_t GetnodeValue ( );
    void PutnodeValue (
        const _variant_t & value );
    DOMNodeType GetnodeType ( );
    IXMLDOMNodePtr GetparentNode ( );
    IXMLDOMNodeListPtr GetchildNodes ( );
    IXMLDOMNodePtr GetfirstChild ( );
    IXMLDOMNodePtr GetlastChild ( );
    IXMLDOMNodePtr GetpreviousSibling ( );
    IXMLDOMNodePtr GetnextSibling ( );
    IXMLDOMNamedNodeMapPtr Getattributes ( );
    IXMLDOMNodePtr insertBefore (
        struct IXMLDOMNode * newChild,
        const _variant_t & refChild );
    IXMLDOMNodePtr replaceChild (
        struct IXMLDOMNode * newChild,
        struct IXMLDOMNode * oldChild );
    IXMLDOMNodePtr removeChild (
        struct IXMLDOMNode * childNode );
    IXMLDOMNodePtr appendChild (
        struct IXMLDOMNode * newChild );
    VARIANT_BOOL hasChildNodes ( );
    IXMLDOMDocumentPtr GetownerDocument ( );
    IXMLDOMNodePtr cloneNode (
        VARIANT_BOOL deep );
    _bstr_t GetnodeTypeString ( );
    _bstr_t Gettext ( );
    void Puttext (
        _bstr_t text );
    VARIANT_BOOL Getspecified ( );
    IXMLDOMNodePtr Getdefinition ( );
    _variant_t GetnodeTypedValue ( );
    void PutnodeTypedValue (
        const _variant_t & typedValue );
    _variant_t GetdataType ( );
    void PutdataType (
        _bstr_t dataTypeName );
    _bstr_t Getxml ( );
    _bstr_t transformNode (
        struct IXMLDOMNode * stylesheet );
    IXMLDOMNodeListPtr selectNodes (
        _bstr_t queryString );
    IXMLDOMNodePtr selectSingleNode (
        _bstr_t queryString );
    VARIANT_BOOL Getparsed ( );
    _bstr_t GetnamespaceURI ( );
    _bstr_t Getprefix ( );
    _bstr_t GetbaseName ( );
    HRESULT transformNodeToObject (
        struct IXMLDOMNode * stylesheet,
        const _variant_t & outputObject );

    
    
    

    virtual HRESULT __stdcall get_nodeName (
        BSTR * name ) = 0;
    virtual HRESULT __stdcall get_nodeValue (
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall put_nodeValue (
        VARIANT value ) = 0;
    virtual HRESULT __stdcall get_nodeType (
        DOMNodeType * type ) = 0;
    virtual HRESULT __stdcall get_parentNode (
        struct IXMLDOMNode * * parent ) = 0;
    virtual HRESULT __stdcall get_childNodes (
        struct IXMLDOMNodeList * * childList ) = 0;
    virtual HRESULT __stdcall get_firstChild (
        struct IXMLDOMNode * * firstChild ) = 0;
    virtual HRESULT __stdcall get_lastChild (
        struct IXMLDOMNode * * lastChild ) = 0;
    virtual HRESULT __stdcall get_previousSibling (
        struct IXMLDOMNode * * previousSibling ) = 0;
    virtual HRESULT __stdcall get_nextSibling (
        struct IXMLDOMNode * * nextSibling ) = 0;
    virtual HRESULT __stdcall get_attributes (
        struct IXMLDOMNamedNodeMap * * attributeMap ) = 0;
    virtual HRESULT __stdcall raw_insertBefore (
        struct IXMLDOMNode * newChild,
        VARIANT refChild,
        struct IXMLDOMNode * * outNewChild ) = 0;
    virtual HRESULT __stdcall raw_replaceChild (
        struct IXMLDOMNode * newChild,
        struct IXMLDOMNode * oldChild,
        struct IXMLDOMNode * * outOldChild ) = 0;
    virtual HRESULT __stdcall raw_removeChild (
        struct IXMLDOMNode * childNode,
        struct IXMLDOMNode * * oldChild ) = 0;
    virtual HRESULT __stdcall raw_appendChild (
        struct IXMLDOMNode * newChild,
        struct IXMLDOMNode * * outNewChild ) = 0;
    virtual HRESULT __stdcall raw_hasChildNodes (
        VARIANT_BOOL * hasChild ) = 0;
    virtual HRESULT __stdcall get_ownerDocument (
        struct IXMLDOMDocument * * DOMDocument2 ) = 0;
    virtual HRESULT __stdcall raw_cloneNode (
        VARIANT_BOOL deep,
        struct IXMLDOMNode * * cloneRoot ) = 0;
    virtual HRESULT __stdcall get_nodeTypeString (
        BSTR * nodeType ) = 0;
    virtual HRESULT __stdcall get_text (
        BSTR * text ) = 0;
    virtual HRESULT __stdcall put_text (
        BSTR text ) = 0;
    virtual HRESULT __stdcall get_specified (
        VARIANT_BOOL * isSpecified ) = 0;
    virtual HRESULT __stdcall get_definition (
        struct IXMLDOMNode * * definitionNode ) = 0;
    virtual HRESULT __stdcall get_nodeTypedValue (
        VARIANT * typedValue ) = 0;
    virtual HRESULT __stdcall put_nodeTypedValue (
        VARIANT typedValue ) = 0;
    virtual HRESULT __stdcall get_dataType (
        VARIANT * dataTypeName ) = 0;
    virtual HRESULT __stdcall put_dataType (
        BSTR dataTypeName ) = 0;
    virtual HRESULT __stdcall get_xml (
        BSTR * xmlString ) = 0;
    virtual HRESULT __stdcall raw_transformNode (
        struct IXMLDOMNode * stylesheet,
        BSTR * xmlString ) = 0;
    virtual HRESULT __stdcall raw_selectNodes (
        BSTR queryString,
        struct IXMLDOMNodeList * * resultList ) = 0;
    virtual HRESULT __stdcall raw_selectSingleNode (
        BSTR queryString,
        struct IXMLDOMNode * * resultNode ) = 0;
    virtual HRESULT __stdcall get_parsed (
        VARIANT_BOOL * isParsed ) = 0;
    virtual HRESULT __stdcall get_namespaceURI (
        BSTR * namespaceURI ) = 0;
    virtual HRESULT __stdcall get_prefix (
        BSTR * prefixString ) = 0;
    virtual HRESULT __stdcall get_baseName (
        BSTR * nameString ) = 0;
    virtual HRESULT __stdcall raw_transformNodeToObject (
        struct IXMLDOMNode * stylesheet,
        VARIANT outputObject ) = 0;
};

enum tagDOMNodeType
{
    NODE_INVALID = 0,
    NODE_ELEMENT = 1,
    NODE_ATTRIBUTE = 2,
    NODE_TEXT = 3,
    NODE_CDATA_SECTION = 4,
    NODE_ENTITY_REFERENCE = 5,
    NODE_ENTITY = 6,
    NODE_PROCESSING_INSTRUCTION = 7,
    NODE_COMMENT = 8,
    NODE_DOCUMENT = 9,
    NODE_DOCUMENT_TYPE = 10,
    NODE_DOCUMENT_FRAGMENT = 11,
    NODE_NOTATION = 12
};

struct __declspec(uuid("2933bf82-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNodeList : IDispatch
{
    
    
    

    __declspec(property(get=Getitem))
    IXMLDOMNodePtr item[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    
    
    

    IXMLDOMNodePtr Getitem (
        long index );
    long Getlength ( );
    IXMLDOMNodePtr nextNode ( );
    HRESULT reset ( );
    IUnknownPtr Get_newEnum ( );

    
    
    

    virtual HRESULT __stdcall get_item (
        long index,
        struct IXMLDOMNode * * listItem ) = 0;
    virtual HRESULT __stdcall get_length (
        long * listLength ) = 0;
    virtual HRESULT __stdcall raw_nextNode (
        struct IXMLDOMNode * * nextItem ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("2933bf83-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNamedNodeMap : IDispatch
{
    
    
    

    __declspec(property(get=Getitem))
    IXMLDOMNodePtr item[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    
    
    

    IXMLDOMNodePtr getNamedItem (
        _bstr_t name );
    IXMLDOMNodePtr setNamedItem (
        struct IXMLDOMNode * newItem );
    IXMLDOMNodePtr removeNamedItem (
        _bstr_t name );
    IXMLDOMNodePtr Getitem (
        long index );
    long Getlength ( );
    IXMLDOMNodePtr getQualifiedItem (
        _bstr_t baseName,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr removeQualifiedItem (
        _bstr_t baseName,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr nextNode ( );
    HRESULT reset ( );
    IUnknownPtr Get_newEnum ( );

    
    
    

    virtual HRESULT __stdcall raw_getNamedItem (
        BSTR name,
        struct IXMLDOMNode * * namedItem ) = 0;
    virtual HRESULT __stdcall raw_setNamedItem (
        struct IXMLDOMNode * newItem,
        struct IXMLDOMNode * * nameItem ) = 0;
    virtual HRESULT __stdcall raw_removeNamedItem (
        BSTR name,
        struct IXMLDOMNode * * namedItem ) = 0;
    virtual HRESULT __stdcall get_item (
        long index,
        struct IXMLDOMNode * * listItem ) = 0;
    virtual HRESULT __stdcall get_length (
        long * listLength ) = 0;
    virtual HRESULT __stdcall raw_getQualifiedItem (
        BSTR baseName,
        BSTR namespaceURI,
        struct IXMLDOMNode * * qualifiedItem ) = 0;
    virtual HRESULT __stdcall raw_removeQualifiedItem (
        BSTR baseName,
        BSTR namespaceURI,
        struct IXMLDOMNode * * qualifiedItem ) = 0;
    virtual HRESULT __stdcall raw_nextNode (
        struct IXMLDOMNode * * nextItem ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("2933bf81-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMDocument : IXMLDOMNode
{
    
    
    

    __declspec(property(get=GetvalidateOnParse,put=PutvalidateOnParse))
    VARIANT_BOOL validateOnParse;
    __declspec(property(get=GetresolveExternals,put=PutresolveExternals))
    VARIANT_BOOL resolveExternals;
    __declspec(property(get=GetpreserveWhiteSpace,put=PutpreserveWhiteSpace))
    VARIANT_BOOL preserveWhiteSpace;
    __declspec(property(put=Putonreadystatechange))
    _variant_t onreadystatechange;
    __declspec(property(put=Putondataavailable))
    _variant_t ondataavailable;
    __declspec(property(get=Getdoctype))
    IXMLDOMDocumentTypePtr doctype;
    __declspec(property(get=Getimplementation))
    IXMLDOMImplementationPtr implementation;
    __declspec(property(get=GetdocumentElement,put=PutRefdocumentElement))
    IXMLDOMElementPtr documentElement;
    __declspec(property(put=Putontransformnode))
    _variant_t ontransformnode;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=GetparseError))
    IXMLDOMParseErrorPtr parseError;
    __declspec(property(get=Geturl))
    _bstr_t url;
    __declspec(property(get=Getasync,put=Putasync))
    VARIANT_BOOL async;

    
    
    

    IXMLDOMDocumentTypePtr Getdoctype ( );
    IXMLDOMImplementationPtr Getimplementation ( );
    IXMLDOMElementPtr GetdocumentElement ( );
    void PutRefdocumentElement (
        struct IXMLDOMElement * DOMElement );
    IXMLDOMElementPtr createElement (
        _bstr_t tagName );
    IXMLDOMDocumentFragmentPtr createDocumentFragment ( );
    IXMLDOMTextPtr createTextNode (
        _bstr_t data );
    IXMLDOMCommentPtr createComment (
        _bstr_t data );
    IXMLDOMCDATASectionPtr createCDATASection (
        _bstr_t data );
    IXMLDOMProcessingInstructionPtr createProcessingInstruction (
        _bstr_t target,
        _bstr_t data );
    IXMLDOMAttributePtr createAttribute (
        _bstr_t name );
    IXMLDOMEntityReferencePtr createEntityReference (
        _bstr_t name );
    IXMLDOMNodeListPtr getElementsByTagName (
        _bstr_t tagName );
    IXMLDOMNodePtr createNode (
        const _variant_t & type,
        _bstr_t name,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr nodeFromID (
        _bstr_t idString );
    VARIANT_BOOL load (
        const _variant_t & xmlSource );
    long GetreadyState ( );
    IXMLDOMParseErrorPtr GetparseError ( );
    _bstr_t Geturl ( );
    VARIANT_BOOL Getasync ( );
    void Putasync (
        VARIANT_BOOL isAsync );
    HRESULT abort ( );
    VARIANT_BOOL loadXML (
        _bstr_t bstrXML );
    HRESULT save (
        const _variant_t & destination );
    VARIANT_BOOL GetvalidateOnParse ( );
    void PutvalidateOnParse (
        VARIANT_BOOL isValidating );
    VARIANT_BOOL GetresolveExternals ( );
    void PutresolveExternals (
        VARIANT_BOOL isResolving );
    VARIANT_BOOL GetpreserveWhiteSpace ( );
    void PutpreserveWhiteSpace (
        VARIANT_BOOL isPreserving );
    void Putonreadystatechange (
        const _variant_t & _arg1 );
    void Putondataavailable (
        const _variant_t & _arg1 );
    void Putontransformnode (
        const _variant_t & _arg1 );

    
    
    

    virtual HRESULT __stdcall get_doctype (
        struct IXMLDOMDocumentType * * documentType ) = 0;
    virtual HRESULT __stdcall get_implementation (
        struct IXMLDOMImplementation * * impl ) = 0;
    virtual HRESULT __stdcall get_documentElement (
        struct IXMLDOMElement * * DOMElement ) = 0;
    virtual HRESULT __stdcall putref_documentElement (
        struct IXMLDOMElement * DOMElement ) = 0;
    virtual HRESULT __stdcall raw_createElement (
        BSTR tagName,
        struct IXMLDOMElement * * element ) = 0;
    virtual HRESULT __stdcall raw_createDocumentFragment (
        struct IXMLDOMDocumentFragment * * docFrag ) = 0;
    virtual HRESULT __stdcall raw_createTextNode (
        BSTR data,
        struct IXMLDOMText * * text ) = 0;
    virtual HRESULT __stdcall raw_createComment (
        BSTR data,
        struct IXMLDOMComment * * comment ) = 0;
    virtual HRESULT __stdcall raw_createCDATASection (
        BSTR data,
        struct IXMLDOMCDATASection * * cdata ) = 0;
    virtual HRESULT __stdcall raw_createProcessingInstruction (
        BSTR target,
        BSTR data,
        struct IXMLDOMProcessingInstruction * * pi ) = 0;
    virtual HRESULT __stdcall raw_createAttribute (
        BSTR name,
        struct IXMLDOMAttribute * * attribute ) = 0;
    virtual HRESULT __stdcall raw_createEntityReference (
        BSTR name,
        struct IXMLDOMEntityReference * * entityRef ) = 0;
    virtual HRESULT __stdcall raw_getElementsByTagName (
        BSTR tagName,
        struct IXMLDOMNodeList * * resultList ) = 0;
    virtual HRESULT __stdcall raw_createNode (
        VARIANT type,
        BSTR name,
        BSTR namespaceURI,
        struct IXMLDOMNode * * node ) = 0;
    virtual HRESULT __stdcall raw_nodeFromID (
        BSTR idString,
        struct IXMLDOMNode * * node ) = 0;
    virtual HRESULT __stdcall raw_load (
        VARIANT xmlSource,
        VARIANT_BOOL * isSuccessful ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * value ) = 0;
    virtual HRESULT __stdcall get_parseError (
        struct IXMLDOMParseError * * errorObj ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * urlString ) = 0;
    virtual HRESULT __stdcall get_async (
        VARIANT_BOOL * isAsync ) = 0;
    virtual HRESULT __stdcall put_async (
        VARIANT_BOOL isAsync ) = 0;
    virtual HRESULT __stdcall raw_abort ( ) = 0;
    virtual HRESULT __stdcall raw_loadXML (
        BSTR bstrXML,
        VARIANT_BOOL * isSuccessful ) = 0;
    virtual HRESULT __stdcall raw_save (
        VARIANT destination ) = 0;
    virtual HRESULT __stdcall get_validateOnParse (
        VARIANT_BOOL * isValidating ) = 0;
    virtual HRESULT __stdcall put_validateOnParse (
        VARIANT_BOOL isValidating ) = 0;
    virtual HRESULT __stdcall get_resolveExternals (
        VARIANT_BOOL * isResolving ) = 0;
    virtual HRESULT __stdcall put_resolveExternals (
        VARIANT_BOOL isResolving ) = 0;
    virtual HRESULT __stdcall get_preserveWhiteSpace (
        VARIANT_BOOL * isPreserving ) = 0;
    virtual HRESULT __stdcall put_preserveWhiteSpace (
        VARIANT_BOOL isPreserving ) = 0;
    virtual HRESULT __stdcall put_onreadystatechange (
        VARIANT _arg1 ) = 0;
    virtual HRESULT __stdcall put_ondataavailable (
        VARIANT _arg1 ) = 0;
    virtual HRESULT __stdcall put_ontransformnode (
        VARIANT _arg1 ) = 0;
};

struct __declspec(uuid("2933bf8b-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMDocumentType : IXMLDOMNode
{
    
    
    

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Getentities))
    IXMLDOMNamedNodeMapPtr entities;
    __declspec(property(get=Getnotations))
    IXMLDOMNamedNodeMapPtr notations;

    
    
    

    _bstr_t Getname ( );
    IXMLDOMNamedNodeMapPtr Getentities ( );
    IXMLDOMNamedNodeMapPtr Getnotations ( );

    
    
    

    virtual HRESULT __stdcall get_name (
        BSTR * rootName ) = 0;
    virtual HRESULT __stdcall get_entities (
        struct IXMLDOMNamedNodeMap * * entityMap ) = 0;
    virtual HRESULT __stdcall get_notations (
        struct IXMLDOMNamedNodeMap * * notationMap ) = 0;
};

struct __declspec(uuid("2933bf86-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMElement : IXMLDOMNode
{
    
    
    

    __declspec(property(get=GettagName))
    _bstr_t tagName;

    
    
    

    _bstr_t GettagName ( );
    _variant_t getAttribute (
        _bstr_t name );
    HRESULT setAttribute (
        _bstr_t name,
        const _variant_t & value );
    HRESULT removeAttribute (
        _bstr_t name );
    IXMLDOMAttributePtr getAttributeNode (
        _bstr_t name );
    IXMLDOMAttributePtr setAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute );
    IXMLDOMAttributePtr removeAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute );
    IXMLDOMNodeListPtr getElementsByTagName (
        _bstr_t tagName );
    HRESULT normalize ( );

    
    
    

    virtual HRESULT __stdcall get_tagName (
        BSTR * tagName ) = 0;
    virtual HRESULT __stdcall raw_getAttribute (
        BSTR name,
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        BSTR name,
        VARIANT value ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        BSTR name ) = 0;
    virtual HRESULT __stdcall raw_getAttributeNode (
        BSTR name,
        struct IXMLDOMAttribute * * attributeNode ) = 0;
    virtual HRESULT __stdcall raw_setAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute,
        struct IXMLDOMAttribute * * attributeNode ) = 0;
    virtual HRESULT __stdcall raw_removeAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute,
        struct IXMLDOMAttribute * * attributeNode ) = 0;
    virtual HRESULT __stdcall raw_getElementsByTagName (
        BSTR tagName,
        struct IXMLDOMNodeList * * resultList ) = 0;
    virtual HRESULT __stdcall raw_normalize ( ) = 0;
};

struct __declspec(uuid("2933bf85-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMAttribute : IXMLDOMNode
{
    
    
    

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Getvalue,put=Putvalue))
    _variant_t value;

    
    
    

    _bstr_t Getname ( );
    _variant_t Getvalue ( );
    void Putvalue (
        const _variant_t & attributeValue );

    
    
    

    virtual HRESULT __stdcall get_name (
        BSTR * attributeName ) = 0;
    virtual HRESULT __stdcall get_value (
        VARIANT * attributeValue ) = 0;
    virtual HRESULT __stdcall put_value (
        VARIANT attributeValue ) = 0;
};

struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782"))
IXMLDOMDocumentFragment : IXMLDOMNode
{};

struct __declspec(uuid("2933bf84-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMCharacterData : IXMLDOMNode
{
    
    
    

    __declspec(property(get=Getdata,put=Putdata))
    _bstr_t data;
    __declspec(property(get=Getlength))
    long length;

    
    
    

    _bstr_t Getdata ( );
    void Putdata (
        _bstr_t data );
    long Getlength ( );
    _bstr_t substringData (
        long offset,
        long count );
    HRESULT appendData (
        _bstr_t data );
    HRESULT insertData (
        long offset,
        _bstr_t data );
    HRESULT deleteData (
        long offset,
        long count );
    HRESULT replaceData (
        long offset,
        long count,
        _bstr_t data );

    
    
    

    virtual HRESULT __stdcall get_data (
        BSTR * data ) = 0;
    virtual HRESULT __stdcall put_data (
        BSTR data ) = 0;
    virtual HRESULT __stdcall get_length (
        long * dataLength ) = 0;
    virtual HRESULT __stdcall raw_substringData (
        long offset,
        long count,
        BSTR * data ) = 0;
    virtual HRESULT __stdcall raw_appendData (
        BSTR data ) = 0;
    virtual HRESULT __stdcall raw_insertData (
        long offset,
        BSTR data ) = 0;
    virtual HRESULT __stdcall raw_deleteData (
        long offset,
        long count ) = 0;
    virtual HRESULT __stdcall raw_replaceData (
        long offset,
        long count,
        BSTR data ) = 0;
};

struct __declspec(uuid("2933bf87-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMText : IXMLDOMCharacterData
{
    
    
    

    IXMLDOMTextPtr splitText (
        long offset );

    
    
    

    virtual HRESULT __stdcall raw_splitText (
        long offset,
        struct IXMLDOMText * * rightHandTextNode ) = 0;
};

struct __declspec(uuid("2933bf88-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMComment : IXMLDOMCharacterData
{};

struct __declspec(uuid("2933bf8a-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMCDATASection : IXMLDOMText
{};

struct __declspec(uuid("2933bf89-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMProcessingInstruction : IXMLDOMNode
{
    
    
    

    __declspec(property(get=Getdata,put=Putdata))
    _bstr_t data;
    __declspec(property(get=Gettarget))
    _bstr_t target;

    
    
    

    _bstr_t Gettarget ( );
    _bstr_t Getdata ( );
    void Putdata (
        _bstr_t value );

    
    
    

    virtual HRESULT __stdcall get_target (
        BSTR * name ) = 0;
    virtual HRESULT __stdcall get_data (
        BSTR * value ) = 0;
    virtual HRESULT __stdcall put_data (
        BSTR value ) = 0;
};

struct __declspec(uuid("2933bf8e-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMEntityReference : IXMLDOMNode
{};

struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782"))
IXMLDOMParseError : IDispatch
{
    
    
    

    __declspec(property(get=GeterrorCode))
    long errorCode;
    __declspec(property(get=Geturl))
    _bstr_t url;
    __declspec(property(get=Getreason))
    _bstr_t reason;
    __declspec(property(get=GetsrcText))
    _bstr_t srcText;
    __declspec(property(get=Getline))
    long line;
    __declspec(property(get=Getlinepos))
    long linepos;
    __declspec(property(get=Getfilepos))
    long filepos;

    
    
    

    long GeterrorCode ( );
    _bstr_t Geturl ( );
    _bstr_t Getreason ( );
    _bstr_t GetsrcText ( );
    long Getline ( );
    long Getlinepos ( );
    long Getfilepos ( );

    
    
    

    virtual HRESULT __stdcall get_errorCode (
        long * errorCode ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * urlString ) = 0;
    virtual HRESULT __stdcall get_reason (
        BSTR * reasonString ) = 0;
    virtual HRESULT __stdcall get_srcText (
        BSTR * sourceString ) = 0;
    virtual HRESULT __stdcall get_line (
        long * lineNumber ) = 0;
    virtual HRESULT __stdcall get_linepos (
        long * linePosition ) = 0;
    virtual HRESULT __stdcall get_filepos (
        long * filePosition ) = 0;
};

struct __declspec(uuid("373984c8-b845-449b-91e7-45ac83036ade"))
IXMLDOMSchemaCollection : IDispatch
{
    
    
    

    __declspec(property(get=GetnamespaceURI))
    _bstr_t namespaceURI[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    
    
    

    HRESULT add (
        _bstr_t namespaceURI,
        const _variant_t & var );
    IXMLDOMNodePtr get (
        _bstr_t namespaceURI );
    HRESULT remove (
        _bstr_t namespaceURI );
    long Getlength ( );
    _bstr_t GetnamespaceURI (
        long index );
    HRESULT addCollection (
        struct IXMLDOMSchemaCollection * otherCollection );
    IUnknownPtr Get_newEnum ( );

    
    
    

    virtual HRESULT __stdcall raw_add (
        BSTR namespaceURI,
        VARIANT var ) = 0;
    virtual HRESULT __stdcall raw_get (
        BSTR namespaceURI,
        struct IXMLDOMNode * * schemaNode ) = 0;
    virtual HRESULT __stdcall raw_remove (
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall get_length (
        long * length ) = 0;
    virtual HRESULT __stdcall get_namespaceURI (
        long index,
        BSTR * length ) = 0;
    virtual HRESULT __stdcall raw_addCollection (
        struct IXMLDOMSchemaCollection * otherCollection ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("2933bf95-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMDocument2 : IXMLDOMDocument
{
    
    
    

    __declspec(property(get=Getnamespaces))
    IXMLDOMSchemaCollectionPtr namespaces;
    __declspec(property(get=Getschemas,put=PutRefschemas))
    _variant_t schemas;

    
    
    

    IXMLDOMSchemaCollectionPtr Getnamespaces ( );
    _variant_t Getschemas ( );
    void PutRefschemas (
        const _variant_t & otherCollection );
    IXMLDOMParseErrorPtr validate ( );
    HRESULT setProperty (
        _bstr_t name,
        const _variant_t & value );
    _variant_t getProperty (
        _bstr_t name );

    
    
    

    virtual HRESULT __stdcall get_namespaces (
        struct IXMLDOMSchemaCollection * * namespaceCollection ) = 0;
    virtual HRESULT __stdcall get_schemas (
        VARIANT * otherCollection ) = 0;
    virtual HRESULT __stdcall putref_schemas (
        VARIANT otherCollection ) = 0;
    virtual HRESULT __stdcall raw_validate (
        struct IXMLDOMParseError * * errorObj ) = 0;
    virtual HRESULT __stdcall raw_setProperty (
        BSTR name,
        VARIANT value ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        BSTR name,
        VARIANT * value ) = 0;
};

struct __declspec(uuid("2933bf8c-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNotation : IXMLDOMNode
{
    
    
    

    __declspec(property(get=GetpublicId))
    _variant_t publicId;
    __declspec(property(get=GetsystemId))
    _variant_t systemId;

    
    
    

    _variant_t GetpublicId ( );
    _variant_t GetsystemId ( );

    
    
    

    virtual HRESULT __stdcall get_publicId (
        VARIANT * publicId ) = 0;
    virtual HRESULT __stdcall get_systemId (
        VARIANT * systemId ) = 0;
};

struct __declspec(uuid("2933bf8d-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMEntity : IXMLDOMNode
{
    
    
    

    __declspec(property(get=GetpublicId))
    _variant_t publicId;
    __declspec(property(get=GetsystemId))
    _variant_t systemId;
    __declspec(property(get=GetnotationName))
    _bstr_t notationName;

    
    
    

    _variant_t GetpublicId ( );
    _variant_t GetsystemId ( );
    _bstr_t GetnotationName ( );

    
    
    

    virtual HRESULT __stdcall get_publicId (
        VARIANT * publicId ) = 0;
    virtual HRESULT __stdcall get_systemId (
        VARIANT * systemId ) = 0;
    virtual HRESULT __stdcall get_notationName (
        BSTR * name ) = 0;
};

struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782"))
IXTLRuntime : IXMLDOMNode
{
    
    
    

    long uniqueID (
        struct IXMLDOMNode * pNode );
    long depth (
        struct IXMLDOMNode * pNode );
    long childNumber (
        struct IXMLDOMNode * pNode );
    long ancestorChildNumber (
        _bstr_t bstrNodeName,
        struct IXMLDOMNode * pNode );
    long absoluteChildNumber (
        struct IXMLDOMNode * pNode );
    _bstr_t formatIndex (
        long lIndex,
        _bstr_t bstrFormat );
    _bstr_t formatNumber (
        double dblNumber,
        _bstr_t bstrFormat );
    _bstr_t formatDate (
        const _variant_t & varDate,
        _bstr_t bstrFormat,
        const _variant_t & varDestLocale = vtMissing );
    _bstr_t formatTime (
        const _variant_t & varTime,
        _bstr_t bstrFormat,
        const _variant_t & varDestLocale = vtMissing );

    
    
    

    virtual HRESULT __stdcall raw_uniqueID (
        struct IXMLDOMNode * pNode,
        long * pID ) = 0;
    virtual HRESULT __stdcall raw_depth (
        struct IXMLDOMNode * pNode,
        long * pDepth ) = 0;
    virtual HRESULT __stdcall raw_childNumber (
        struct IXMLDOMNode * pNode,
        long * pNumber ) = 0;
    virtual HRESULT __stdcall raw_ancestorChildNumber (
        BSTR bstrNodeName,
        struct IXMLDOMNode * pNode,
        long * pNumber ) = 0;
    virtual HRESULT __stdcall raw_absoluteChildNumber (
        struct IXMLDOMNode * pNode,
        long * pNumber ) = 0;
    virtual HRESULT __stdcall raw_formatIndex (
        long lIndex,
        BSTR bstrFormat,
        BSTR * pbstrFormattedString ) = 0;
    virtual HRESULT __stdcall raw_formatNumber (
        double dblNumber,
        BSTR bstrFormat,
        BSTR * pbstrFormattedString ) = 0;
    virtual HRESULT __stdcall raw_formatDate (
        VARIANT varDate,
        BSTR bstrFormat,
        VARIANT varDestLocale,
        BSTR * pbstrFormattedString ) = 0;
    virtual HRESULT __stdcall raw_formatTime (
        VARIANT varTime,
        BSTR bstrFormat,
        VARIANT varDestLocale,
        BSTR * pbstrFormattedString ) = 0;
};

struct __declspec(uuid("2933bf93-7b36-11d2-b20e-00c04f983e60"))
IXSLTemplate : IDispatch
{
    
    
    

    __declspec(property(get=Getstylesheet,put=PutRefstylesheet))
    IXMLDOMNodePtr stylesheet;

    
    
    

    void PutRefstylesheet (
        struct IXMLDOMNode * stylesheet );
    IXMLDOMNodePtr Getstylesheet ( );
    IXSLProcessorPtr createProcessor ( );

    
    
    

    virtual HRESULT __stdcall putref_stylesheet (
        struct IXMLDOMNode * stylesheet ) = 0;
    virtual HRESULT __stdcall get_stylesheet (
        struct IXMLDOMNode * * stylesheet ) = 0;
    virtual HRESULT __stdcall raw_createProcessor (
        struct IXSLProcessor * * ppProcessor ) = 0;
};

struct __declspec(uuid("2933bf92-7b36-11d2-b20e-00c04f983e60"))
IXSLProcessor : IDispatch
{
    
    
    

    __declspec(property(get=Getinput,put=Putinput))
    _variant_t input;
    __declspec(property(get=GetownerTemplate))
    IXSLTemplatePtr ownerTemplate;
    __declspec(property(get=GetstartMode))
    _bstr_t startMode;
    __declspec(property(get=GetstartModeURI))
    _bstr_t startModeURI;
    __declspec(property(get=Getoutput,put=Putoutput))
    _variant_t output;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=Getstylesheet))
    IXMLDOMNodePtr stylesheet;

    
    
    

    void Putinput (
        const _variant_t & pVar );
    _variant_t Getinput ( );
    IXSLTemplatePtr GetownerTemplate ( );
    HRESULT setStartMode (
        _bstr_t mode,
        _bstr_t namespaceURI );
    _bstr_t GetstartMode ( );
    _bstr_t GetstartModeURI ( );
    void Putoutput (
        const _variant_t & pOutput );
    _variant_t Getoutput ( );
    VARIANT_BOOL transform ( );
    HRESULT reset ( );
    long GetreadyState ( );
    HRESULT addParameter (
        _bstr_t baseName,
        const _variant_t & parameter,
        _bstr_t namespaceURI );
    HRESULT addObject (
        IDispatch * obj,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr Getstylesheet ( );

    
    
    

    virtual HRESULT __stdcall put_input (
        VARIANT pVar ) = 0;
    virtual HRESULT __stdcall get_input (
        VARIANT * pVar ) = 0;
    virtual HRESULT __stdcall get_ownerTemplate (
        struct IXSLTemplate * * ppTemplate ) = 0;
    virtual HRESULT __stdcall raw_setStartMode (
        BSTR mode,
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall get_startMode (
        BSTR * mode ) = 0;
    virtual HRESULT __stdcall get_startModeURI (
        BSTR * namespaceURI ) = 0;
    virtual HRESULT __stdcall put_output (
        VARIANT pOutput ) = 0;
    virtual HRESULT __stdcall get_output (
        VARIANT * pOutput ) = 0;
    virtual HRESULT __stdcall raw_transform (
        VARIANT_BOOL * pDone ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * pReadyState ) = 0;
    virtual HRESULT __stdcall raw_addParameter (
        BSTR baseName,
        VARIANT parameter,
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall raw_addObject (
        IDispatch * obj,
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall get_stylesheet (
        struct IXMLDOMNode * * stylesheet ) = 0;
};

struct __declspec(uuid("a4f96ed0-f829-476e-81c0-cdc7bd2a0802"))
ISAXXMLReader : IUnknown
{
    
    
    

    VARIANT_BOOL getFeature (
        unsigned short * pwchName );
    HRESULT putFeature (
        unsigned short * pwchName,
        VARIANT_BOOL vfValue );
    _variant_t getProperty (
        unsigned short * pwchName );
    HRESULT putProperty (
        unsigned short * pwchName,
        const _variant_t & varValue );
    ISAXEntityResolverPtr getEntityResolver ( );
    HRESULT putEntityResolver (
        struct ISAXEntityResolver * pResolver );
    ISAXContentHandlerPtr getContentHandler ( );
    HRESULT putContentHandler (
        struct ISAXContentHandler * pHandler );
    ISAXDTDHandlerPtr getDTDHandler ( );
    HRESULT putDTDHandler (
        struct ISAXDTDHandler * pHandler );
    ISAXErrorHandlerPtr getErrorHandler ( );
    HRESULT putErrorHandler (
        struct ISAXErrorHandler * pHandler );
    unsigned short * getBaseURL ( );
    HRESULT putBaseURL (
        unsigned short * pwchBaseUrl );
    unsigned short * getSecureBaseURL ( );
    HRESULT putSecureBaseURL (
        unsigned short * pwchSecureBaseUrl );
    HRESULT parse (
        const _variant_t & varInput );
    HRESULT parseURL (
        unsigned short * pwchUrl );

    
    
    

    virtual HRESULT __stdcall raw_getFeature (
        unsigned short * pwchName,
        VARIANT_BOOL * pvfValue ) = 0;
    virtual HRESULT __stdcall raw_putFeature (
        unsigned short * pwchName,
        VARIANT_BOOL vfValue ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        unsigned short * pwchName,
        VARIANT * pvarValue ) = 0;
    virtual HRESULT __stdcall raw_putProperty (
        unsigned short * pwchName,
        VARIANT varValue ) = 0;
    virtual HRESULT __stdcall raw_getEntityResolver (
        struct ISAXEntityResolver * * ppResolver ) = 0;
    virtual HRESULT __stdcall raw_putEntityResolver (
        struct ISAXEntityResolver * pResolver ) = 0;
    virtual HRESULT __stdcall raw_getContentHandler (
        struct ISAXContentHandler * * ppHandler ) = 0;
    virtual HRESULT __stdcall raw_putContentHandler (
        struct ISAXContentHandler * pHandler ) = 0;
    virtual HRESULT __stdcall raw_getDTDHandler (
        struct ISAXDTDHandler * * ppHandler ) = 0;
    virtual HRESULT __stdcall raw_putDTDHandler (
        struct ISAXDTDHandler * pHandler ) = 0;
    virtual HRESULT __stdcall raw_getErrorHandler (
        struct ISAXErrorHandler * * ppHandler ) = 0;
    virtual HRESULT __stdcall raw_putErrorHandler (
        struct ISAXErrorHandler * pHandler ) = 0;
    virtual HRESULT __stdcall raw_getBaseURL (
        unsigned short * * ppwchBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_putBaseURL (
        unsigned short * pwchBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_getSecureBaseURL (
        unsigned short * * ppwchSecureBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_putSecureBaseURL (
        unsigned short * pwchSecureBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_parse (
        VARIANT varInput ) = 0;
    virtual HRESULT __stdcall raw_parseURL (
        unsigned short * pwchUrl ) = 0;
};

struct __declspec(uuid("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07"))
ISAXEntityResolver : IUnknown
{
    
    
    

    _variant_t resolveEntity (
        unsigned short * pwchPublicId,
        unsigned short * pwchSystemId );

    
    
    

    virtual HRESULT __stdcall raw_resolveEntity (
        unsigned short * pwchPublicId,
        unsigned short * pwchSystemId,
        VARIANT * pvarInput ) = 0;
};

struct __declspec(uuid("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44"))
ISAXContentHandler : IUnknown
{
    
    
    

    HRESULT putDocumentLocator (
        struct ISAXLocator * pLocator );
    HRESULT startDocument ( );
    HRESULT endDocument ( );
    HRESULT startPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix,
        unsigned short * pwchUri,
        int cchUri );
    HRESULT endPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix );
    HRESULT startElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName,
        struct ISAXAttributes * pAttributes );
    HRESULT endElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName );
    HRESULT characters (
        unsigned short * pwchChars,
        int cchChars );
    HRESULT ignorableWhitespace (
        unsigned short * pwchChars,
        int cchChars );
    HRESULT processingInstruction (
        unsigned short * pwchTarget,
        int cchTarget,
        unsigned short * pwchData,
        int cchData );
    HRESULT skippedEntity (
        unsigned short * pwchName,
        int cchName );

    
    
    

    virtual HRESULT __stdcall raw_putDocumentLocator (
        struct ISAXLocator * pLocator ) = 0;
    virtual HRESULT __stdcall raw_startDocument ( ) = 0;
    virtual HRESULT __stdcall raw_endDocument ( ) = 0;
    virtual HRESULT __stdcall raw_startPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix,
        unsigned short * pwchUri,
        int cchUri ) = 0;
    virtual HRESULT __stdcall raw_endPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix ) = 0;
    virtual HRESULT __stdcall raw_startElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName,
        struct ISAXAttributes * pAttributes ) = 0;
    virtual HRESULT __stdcall raw_endElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName ) = 0;
    virtual HRESULT __stdcall raw_characters (
        unsigned short * pwchChars,
        int cchChars ) = 0;
    virtual HRESULT __stdcall raw_ignorableWhitespace (
        unsigned short * pwchChars,
        int cchChars ) = 0;
    virtual HRESULT __stdcall raw_processingInstruction (
        unsigned short * pwchTarget,
        int cchTarget,
        unsigned short * pwchData,
        int cchData ) = 0;
    virtual HRESULT __stdcall raw_skippedEntity (
        unsigned short * pwchName,
        int cchName ) = 0;
};

struct __declspec(uuid("9b7e472a-0de4-4640-bff3-84d38a051c31"))
ISAXLocator : IUnknown
{
    
    
    

    int getColumnNumber ( );
    int getLineNumber ( );
    unsigned short * getPublicId ( );
    unsigned short * getSystemId ( );

    
    
    

    virtual HRESULT __stdcall raw_getColumnNumber (
        int * pnColumn ) = 0;
    virtual HRESULT __stdcall raw_getLineNumber (
        int * pnLine ) = 0;
    virtual HRESULT __stdcall raw_getPublicId (
        unsigned short * * ppwchPublicId ) = 0;
    virtual HRESULT __stdcall raw_getSystemId (
        unsigned short * * ppwchSystemId ) = 0;
};

struct __declspec(uuid("f078abe1-45d2-4832-91ea-4466ce2f25c9"))
ISAXAttributes : IUnknown
{
    
    
    

    int getLength ( );
    HRESULT getURI (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri );
    HRESULT getLocalName (
        int nIndex,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName );
    HRESULT getQName (
        int nIndex,
        unsigned short * * ppwchQName,
        int * pcchQName );
    HRESULT getName (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName,
        unsigned short * * ppwchQName,
        int * pcchQName );
    int getIndexFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName );
    int getIndexFromQName (
        unsigned short * pwchQName,
        int cchQName );
    HRESULT getType (
        int nIndex,
        unsigned short * * ppwchType,
        int * pcchType );
    HRESULT getTypeFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchType,
        int * pcchType );
    HRESULT getTypeFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchType,
        int * pcchType );
    HRESULT getValue (
        int nIndex,
        unsigned short * * ppwchValue,
        int * pcchValue );
    HRESULT getValueFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchValue,
        int * pcchValue );
    HRESULT getValueFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchValue,
        int * pcchValue );

    
    
    

    virtual HRESULT __stdcall raw_getLength (
        int * pnLength ) = 0;
    virtual HRESULT __stdcall raw_getURI (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri ) = 0;
    virtual HRESULT __stdcall raw_getLocalName (
        int nIndex,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName ) = 0;
    virtual HRESULT __stdcall raw_getQName (
        int nIndex,
        unsigned short * * ppwchQName,
        int * pcchQName ) = 0;
    virtual HRESULT __stdcall raw_getName (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName,
        unsigned short * * ppwchQName,
        int * pcchQName ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        int * pnIndex ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromQName (
        unsigned short * pwchQName,
        int cchQName,
        int * pnIndex ) = 0;
    virtual HRESULT __stdcall raw_getType (
        int nIndex,
        unsigned short * * ppwchType,
        int * pcchType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchType,
        int * pcchType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchType,
        int * pcchType ) = 0;
    virtual HRESULT __stdcall raw_getValue (
        int nIndex,
        unsigned short * * ppwchValue,
        int * pcchValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchValue,
        int * pcchValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchValue,
        int * pcchValue ) = 0;
};

struct __declspec(uuid("e15c1baf-afb3-4d60-8c36-19a8c45defed"))
ISAXDTDHandler : IUnknown
{
    
    
    

    HRESULT notationDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId );
    HRESULT unparsedEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId,
        unsigned short * pwchNotationName,
        int cchNotationName );

    
    
    

    virtual HRESULT __stdcall raw_notationDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId ) = 0;
    virtual HRESULT __stdcall raw_unparsedEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId,
        unsigned short * pwchNotationName,
        int cchNotationName ) = 0;
};

struct __declspec(uuid("a60511c4-ccf5-479e-98a3-dc8dc545b7d0"))
ISAXErrorHandler : IUnknown
{
    
    
    

    HRESULT error (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode );
    HRESULT fatalError (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode );
    HRESULT ignorableWarning (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode );

    
    
    

    virtual HRESULT __stdcall raw_error (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode ) = 0;
    virtual HRESULT __stdcall raw_fatalError (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode ) = 0;
    virtual HRESULT __stdcall raw_ignorableWarning (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode ) = 0;
};

struct __declspec(uuid("70409222-ca09-4475-acb8-40312fe8d145"))
ISAXXMLFilter : ISAXXMLReader
{
    
    
    

    ISAXXMLReaderPtr getParent ( );
    HRESULT putParent (
        struct ISAXXMLReader * pReader );

    
    
    

    virtual HRESULT __stdcall raw_getParent (
        struct ISAXXMLReader * * ppReader ) = 0;
    virtual HRESULT __stdcall raw_putParent (
        struct ISAXXMLReader * pReader ) = 0;
};

struct __declspec(uuid("7f85d5f5-47a8-4497-bda5-84ba04819ea6"))
ISAXLexicalHandler : IUnknown
{
    
    
    

    HRESULT startDTD (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId );
    HRESULT endDTD ( );
    HRESULT startEntity (
        unsigned short * pwchName,
        int cchName );
    HRESULT endEntity (
        unsigned short * pwchName,
        int cchName );
    HRESULT startCDATA ( );
    HRESULT endCDATA ( );
    HRESULT comment (
        unsigned short * pwchChars,
        int cchChars );

    
    
    

    virtual HRESULT __stdcall raw_startDTD (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId ) = 0;
    virtual HRESULT __stdcall raw_endDTD ( ) = 0;
    virtual HRESULT __stdcall raw_startEntity (
        unsigned short * pwchName,
        int cchName ) = 0;
    virtual HRESULT __stdcall raw_endEntity (
        unsigned short * pwchName,
        int cchName ) = 0;
    virtual HRESULT __stdcall raw_startCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_endCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_comment (
        unsigned short * pwchChars,
        int cchChars ) = 0;
};

struct __declspec(uuid("862629ac-771a-47b2-8337-4e6843c1be90"))
ISAXDeclHandler : IUnknown
{
    
    
    

    HRESULT elementDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchModel,
        int cchModel );
    HRESULT attributeDecl (
        unsigned short * pwchElementName,
        int cchElementName,
        unsigned short * pwchAttributeName,
        int cchAttributeName,
        unsigned short * pwchType,
        int cchType,
        unsigned short * pwchValueDefault,
        int cchValueDefault,
        unsigned short * pwchValue,
        int cchValue );
    HRESULT internalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchValue,
        int cchValue );
    HRESULT externalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId );

    
    
    

    virtual HRESULT __stdcall raw_elementDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchModel,
        int cchModel ) = 0;
    virtual HRESULT __stdcall raw_attributeDecl (
        unsigned short * pwchElementName,
        int cchElementName,
        unsigned short * pwchAttributeName,
        int cchAttributeName,
        unsigned short * pwchType,
        int cchType,
        unsigned short * pwchValueDefault,
        int cchValueDefault,
        unsigned short * pwchValue,
        int cchValue ) = 0;
    virtual HRESULT __stdcall raw_internalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchValue,
        int cchValue ) = 0;
    virtual HRESULT __stdcall raw_externalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId ) = 0;
};

struct __declspec(uuid("8c033caa-6cd6-4f73-b728-4531af74945f"))
IVBSAXXMLReader : IDispatch
{
    
    
    

    __declspec(property(get=GetentityResolver,put=PutRefentityResolver))
    IVBSAXEntityResolverPtr entityResolver;
    __declspec(property(get=GetcontentHandler,put=PutRefcontentHandler))
    IVBSAXContentHandlerPtr contentHandler;
    __declspec(property(get=GetdtdHandler,put=PutRefdtdHandler))
    IVBSAXDTDHandlerPtr dtdHandler;
    __declspec(property(get=GeterrorHandler,put=PutReferrorHandler))
    IVBSAXErrorHandlerPtr errorHandler;
    __declspec(property(get=GetbaseURL,put=PutbaseURL))
    _bstr_t baseURL;
    __declspec(property(get=GetsecureBaseURL,put=PutsecureBaseURL))
    _bstr_t secureBaseURL;

    
    
    

    VARIANT_BOOL getFeature (
        _bstr_t strName );
    HRESULT putFeature (
        _bstr_t strName,
        VARIANT_BOOL fValue );
    _variant_t getProperty (
        _bstr_t strName );
    HRESULT putProperty (
        _bstr_t strName,
        const _variant_t & varValue );
    IVBSAXEntityResolverPtr GetentityResolver ( );
    void PutRefentityResolver (
        struct IVBSAXEntityResolver * oResolver );
    IVBSAXContentHandlerPtr GetcontentHandler ( );
    void PutRefcontentHandler (
        struct IVBSAXContentHandler * oHandler );
    IVBSAXDTDHandlerPtr GetdtdHandler ( );
    void PutRefdtdHandler (
        struct IVBSAXDTDHandler * oHandler );
    IVBSAXErrorHandlerPtr GeterrorHandler ( );
    void PutReferrorHandler (
        struct IVBSAXErrorHandler * oHandler );
    _bstr_t GetbaseURL ( );
    void PutbaseURL (
        _bstr_t strBaseURL );
    _bstr_t GetsecureBaseURL ( );
    void PutsecureBaseURL (
        _bstr_t strSecureBaseURL );
    HRESULT parse (
        const _variant_t & varInput );
    HRESULT parseURL (
        _bstr_t strURL );

    
    
    

    virtual HRESULT __stdcall raw_getFeature (
        BSTR strName,
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall raw_putFeature (
        BSTR strName,
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        BSTR strName,
        VARIANT * varValue ) = 0;
    virtual HRESULT __stdcall raw_putProperty (
        BSTR strName,
        VARIANT varValue ) = 0;
    virtual HRESULT __stdcall get_entityResolver (
        struct IVBSAXEntityResolver * * oResolver ) = 0;
    virtual HRESULT __stdcall putref_entityResolver (
        struct IVBSAXEntityResolver * oResolver ) = 0;
    virtual HRESULT __stdcall get_contentHandler (
        struct IVBSAXContentHandler * * oHandler ) = 0;
    virtual HRESULT __stdcall putref_contentHandler (
        struct IVBSAXContentHandler * oHandler ) = 0;
    virtual HRESULT __stdcall get_dtdHandler (
        struct IVBSAXDTDHandler * * oHandler ) = 0;
    virtual HRESULT __stdcall putref_dtdHandler (
        struct IVBSAXDTDHandler * oHandler ) = 0;
    virtual HRESULT __stdcall get_errorHandler (
        struct IVBSAXErrorHandler * * oHandler ) = 0;
    virtual HRESULT __stdcall putref_errorHandler (
        struct IVBSAXErrorHandler * oHandler ) = 0;
    virtual HRESULT __stdcall get_baseURL (
        BSTR * strBaseURL ) = 0;
    virtual HRESULT __stdcall put_baseURL (
        BSTR strBaseURL ) = 0;
    virtual HRESULT __stdcall get_secureBaseURL (
        BSTR * strSecureBaseURL ) = 0;
    virtual HRESULT __stdcall put_secureBaseURL (
        BSTR strSecureBaseURL ) = 0;
    virtual HRESULT __stdcall raw_parse (
        VARIANT varInput ) = 0;
    virtual HRESULT __stdcall raw_parseURL (
        BSTR strURL ) = 0;
};

struct __declspec(uuid("0c05d096-f45b-4aca-ad1a-aa0bc25518dc"))
IVBSAXEntityResolver : IDispatch
{
    
    
    

    _variant_t resolveEntity (
        BSTR * strPublicId,
        BSTR * strSystemId );

    
    
    

    virtual HRESULT __stdcall raw_resolveEntity (
        BSTR * strPublicId,
        BSTR * strSystemId,
        VARIANT * varInput ) = 0;
};

struct __declspec(uuid("2ed7290a-4dd5-4b46-bb26-4e4155e77faa"))
IVBSAXContentHandler : IDispatch
{
    
    
    

    __declspec(property(put=PutRefdocumentLocator))
    IVBSAXLocatorPtr documentLocator;

    
    
    

    void PutRefdocumentLocator (
        struct IVBSAXLocator * _arg1 );
    HRESULT startDocument ( );
    HRESULT endDocument ( );
    HRESULT startPrefixMapping (
        BSTR * strPrefix,
        BSTR * strURI );
    HRESULT endPrefixMapping (
        BSTR * strPrefix );
    HRESULT startElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName,
        struct IVBSAXAttributes * oAttributes );
    HRESULT endElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName );
    HRESULT characters (
        BSTR * strChars );
    HRESULT ignorableWhitespace (
        BSTR * strChars );
    HRESULT processingInstruction (
        BSTR * strTarget,
        BSTR * strData );
    HRESULT skippedEntity (
        BSTR * strName );

    
    
    

    virtual HRESULT __stdcall putref_documentLocator (
        struct IVBSAXLocator * _arg1 ) = 0;
    virtual HRESULT __stdcall raw_startDocument ( ) = 0;
    virtual HRESULT __stdcall raw_endDocument ( ) = 0;
    virtual HRESULT __stdcall raw_startPrefixMapping (
        BSTR * strPrefix,
        BSTR * strURI ) = 0;
    virtual HRESULT __stdcall raw_endPrefixMapping (
        BSTR * strPrefix ) = 0;
    virtual HRESULT __stdcall raw_startElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName,
        struct IVBSAXAttributes * oAttributes ) = 0;
    virtual HRESULT __stdcall raw_endElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName ) = 0;
    virtual HRESULT __stdcall raw_characters (
        BSTR * strChars ) = 0;
    virtual HRESULT __stdcall raw_ignorableWhitespace (
        BSTR * strChars ) = 0;
    virtual HRESULT __stdcall raw_processingInstruction (
        BSTR * strTarget,
        BSTR * strData ) = 0;
    virtual HRESULT __stdcall raw_skippedEntity (
        BSTR * strName ) = 0;
};

struct __declspec(uuid("796e7ac5-5aa2-4eff-acad-3faaf01a3288"))
IVBSAXLocator : IDispatch
{
    
    
    

    __declspec(property(get=GetcolumnNumber))
    int columnNumber;
    __declspec(property(get=GetlineNumber))
    int lineNumber;
    __declspec(property(get=GetpublicId))
    _bstr_t publicId;
    __declspec(property(get=GetsystemId))
    _bstr_t systemId;

    
    
    

    int GetcolumnNumber ( );
    int GetlineNumber ( );
    _bstr_t GetpublicId ( );
    _bstr_t GetsystemId ( );

    
    
    

    virtual HRESULT __stdcall get_columnNumber (
        int * nColumn ) = 0;
    virtual HRESULT __stdcall get_lineNumber (
        int * nLine ) = 0;
    virtual HRESULT __stdcall get_publicId (
        BSTR * strPublicId ) = 0;
    virtual HRESULT __stdcall get_systemId (
        BSTR * strSystemId ) = 0;
};

struct __declspec(uuid("10dc0586-132b-4cac-8bb3-db00ac8b7ee0"))
IVBSAXAttributes : IDispatch
{
    
    
    

    __declspec(property(get=Getlength))
    int length;

    
    
    

    int Getlength ( );
    _bstr_t getURI (
        int nIndex );
    _bstr_t getLocalName (
        int nIndex );
    _bstr_t getQName (
        int nIndex );
    int getIndexFromName (
        _bstr_t strURI,
        _bstr_t strLocalName );
    int getIndexFromQName (
        _bstr_t strQName );
    _bstr_t getType (
        int nIndex );
    _bstr_t getTypeFromName (
        _bstr_t strURI,
        _bstr_t strLocalName );
    _bstr_t getTypeFromQName (
        _bstr_t strQName );
    _bstr_t getValue (
        int nIndex );
    _bstr_t getValueFromName (
        _bstr_t strURI,
        _bstr_t strLocalName );
    _bstr_t getValueFromQName (
        _bstr_t strQName );

    
    
    

    virtual HRESULT __stdcall get_length (
        int * nLength ) = 0;
    virtual HRESULT __stdcall raw_getURI (
        int nIndex,
        BSTR * strURI ) = 0;
    virtual HRESULT __stdcall raw_getLocalName (
        int nIndex,
        BSTR * strLocalName ) = 0;
    virtual HRESULT __stdcall raw_getQName (
        int nIndex,
        BSTR * strQName ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromName (
        BSTR strURI,
        BSTR strLocalName,
        int * nIndex ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromQName (
        BSTR strQName,
        int * nIndex ) = 0;
    virtual HRESULT __stdcall raw_getType (
        int nIndex,
        BSTR * strType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromName (
        BSTR strURI,
        BSTR strLocalName,
        BSTR * strType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromQName (
        BSTR strQName,
        BSTR * strType ) = 0;
    virtual HRESULT __stdcall raw_getValue (
        int nIndex,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromName (
        BSTR strURI,
        BSTR strLocalName,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromQName (
        BSTR strQName,
        BSTR * strValue ) = 0;
};

struct __declspec(uuid("24fb3297-302d-4620-ba39-3a732d850558"))
IVBSAXDTDHandler : IDispatch
{
    
    
    

    HRESULT notationDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId );
    HRESULT unparsedEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId,
        BSTR * strNotationName );

    
    
    

    virtual HRESULT __stdcall raw_notationDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId ) = 0;
    virtual HRESULT __stdcall raw_unparsedEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId,
        BSTR * strNotationName ) = 0;
};

struct __declspec(uuid("d963d3fe-173c-4862-9095-b92f66995f52"))
IVBSAXErrorHandler : IDispatch
{
    
    
    

    HRESULT error (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode );
    HRESULT fatalError (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode );
    HRESULT ignorableWarning (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode );

    
    
    

    virtual HRESULT __stdcall raw_error (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode ) = 0;
    virtual HRESULT __stdcall raw_fatalError (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode ) = 0;
    virtual HRESULT __stdcall raw_ignorableWarning (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode ) = 0;
};

struct __declspec(uuid("1299eb1b-5b88-433e-82de-82ca75ad4e04"))
IVBSAXXMLFilter : IDispatch
{
    
    
    

    __declspec(property(get=Getparent,put=PutRefparent))
    IVBSAXXMLReaderPtr parent;

    
    
    

    IVBSAXXMLReaderPtr Getparent ( );
    void PutRefparent (
        struct IVBSAXXMLReader * oReader );

    
    
    

    virtual HRESULT __stdcall get_parent (
        struct IVBSAXXMLReader * * oReader ) = 0;
    virtual HRESULT __stdcall putref_parent (
        struct IVBSAXXMLReader * oReader ) = 0;
};

struct __declspec(uuid("032aac35-8c0e-4d9d-979f-e3b702935576"))
IVBSAXLexicalHandler : IDispatch
{
    
    
    

    HRESULT startDTD (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId );
    HRESULT endDTD ( );
    HRESULT startEntity (
        BSTR * strName );
    HRESULT endEntity (
        BSTR * strName );
    HRESULT startCDATA ( );
    HRESULT endCDATA ( );
    HRESULT comment (
        BSTR * strChars );

    
    
    

    virtual HRESULT __stdcall raw_startDTD (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId ) = 0;
    virtual HRESULT __stdcall raw_endDTD ( ) = 0;
    virtual HRESULT __stdcall raw_startEntity (
        BSTR * strName ) = 0;
    virtual HRESULT __stdcall raw_endEntity (
        BSTR * strName ) = 0;
    virtual HRESULT __stdcall raw_startCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_endCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_comment (
        BSTR * strChars ) = 0;
};

struct __declspec(uuid("e8917260-7579-4be1-b5dd-7afbfa6f077b"))
IVBSAXDeclHandler : IDispatch
{
    
    
    

    HRESULT elementDecl (
        BSTR * strName,
        BSTR * strModel );
    HRESULT attributeDecl (
        BSTR * strElementName,
        BSTR * strAttributeName,
        BSTR * strType,
        BSTR * strValueDefault,
        BSTR * strValue );
    HRESULT internalEntityDecl (
        BSTR * strName,
        BSTR * strValue );
    HRESULT externalEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId );

    
    
    

    virtual HRESULT __stdcall raw_elementDecl (
        BSTR * strName,
        BSTR * strModel ) = 0;
    virtual HRESULT __stdcall raw_attributeDecl (
        BSTR * strElementName,
        BSTR * strAttributeName,
        BSTR * strType,
        BSTR * strValueDefault,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_internalEntityDecl (
        BSTR * strName,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_externalEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId ) = 0;
};

struct __declspec(uuid("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d"))
IMXWriter : IDispatch
{
    
    
    

    __declspec(property(get=Getoutput,put=Putoutput))
    _variant_t output;
    __declspec(property(get=Getencoding,put=Putencoding))
    _bstr_t encoding;
    __declspec(property(get=GetbyteOrderMark,put=PutbyteOrderMark))
    VARIANT_BOOL byteOrderMark;
    __declspec(property(get=Getindent,put=Putindent))
    VARIANT_BOOL indent;
    __declspec(property(get=Getstandalone,put=Putstandalone))
    VARIANT_BOOL standalone;
    __declspec(property(get=GetomitXMLDeclaration,put=PutomitXMLDeclaration))
    VARIANT_BOOL omitXMLDeclaration;
    __declspec(property(get=Getversion,put=Putversion))
    _bstr_t version;
    __declspec(property(get=GetdisableOutputEscaping,put=PutdisableOutputEscaping))
    VARIANT_BOOL disableOutputEscaping;

    
    
    

    void Putoutput (
        const _variant_t & varDestination );
    _variant_t Getoutput ( );
    void Putencoding (
        _bstr_t strEncoding );
    _bstr_t Getencoding ( );
    void PutbyteOrderMark (
        VARIANT_BOOL fWriteByteOrderMark );
    VARIANT_BOOL GetbyteOrderMark ( );
    void Putindent (
        VARIANT_BOOL fIndentMode );
    VARIANT_BOOL Getindent ( );
    void Putstandalone (
        VARIANT_BOOL fValue );
    VARIANT_BOOL Getstandalone ( );
    void PutomitXMLDeclaration (
        VARIANT_BOOL fValue );
    VARIANT_BOOL GetomitXMLDeclaration ( );
    void Putversion (
        _bstr_t strVersion );
    _bstr_t Getversion ( );
    void PutdisableOutputEscaping (
        VARIANT_BOOL fValue );
    VARIANT_BOOL GetdisableOutputEscaping ( );
    HRESULT flush ( );

    
    
    

    virtual HRESULT __stdcall put_output (
        VARIANT varDestination ) = 0;
    virtual HRESULT __stdcall get_output (
        VARIANT * varDestination ) = 0;
    virtual HRESULT __stdcall put_encoding (
        BSTR strEncoding ) = 0;
    virtual HRESULT __stdcall get_encoding (
        BSTR * strEncoding ) = 0;
    virtual HRESULT __stdcall put_byteOrderMark (
        VARIANT_BOOL fWriteByteOrderMark ) = 0;
    virtual HRESULT __stdcall get_byteOrderMark (
        VARIANT_BOOL * fWriteByteOrderMark ) = 0;
    virtual HRESULT __stdcall put_indent (
        VARIANT_BOOL fIndentMode ) = 0;
    virtual HRESULT __stdcall get_indent (
        VARIANT_BOOL * fIndentMode ) = 0;
    virtual HRESULT __stdcall put_standalone (
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall get_standalone (
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall put_omitXMLDeclaration (
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall get_omitXMLDeclaration (
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall put_version (
        BSTR strVersion ) = 0;
    virtual HRESULT __stdcall get_version (
        BSTR * strVersion ) = 0;
    virtual HRESULT __stdcall put_disableOutputEscaping (
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall get_disableOutputEscaping (
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall raw_flush ( ) = 0;
};

struct __declspec(uuid("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262"))
IMXAttributes : IDispatch
{
    
    
    

    HRESULT addAttribute (
        _bstr_t strURI,
        _bstr_t strLocalName,
        _bstr_t strQName,
        _bstr_t strType,
        _bstr_t strValue );
    HRESULT addAttributeFromIndex (
        const _variant_t & varAtts,
        int nIndex );
    HRESULT clear ( );
    HRESULT removeAttribute (
        int nIndex );
    HRESULT setAttribute (
        int nIndex,
        _bstr_t strURI,
        _bstr_t strLocalName,
        _bstr_t strQName,
        _bstr_t strType,
        _bstr_t strValue );
    HRESULT setAttributes (
        const _variant_t & varAtts );
    HRESULT setLocalName (
        int nIndex,
        _bstr_t strLocalName );
    HRESULT setQName (
        int nIndex,
        _bstr_t strQName );
    HRESULT setType (
        int nIndex,
        _bstr_t strType );
    HRESULT setURI (
        int nIndex,
        _bstr_t strURI );
    HRESULT setValue (
        int nIndex,
        _bstr_t strValue );

    
    
    

    virtual HRESULT __stdcall raw_addAttribute (
        BSTR strURI,
        BSTR strLocalName,
        BSTR strQName,
        BSTR strType,
        BSTR strValue ) = 0;
    virtual HRESULT __stdcall raw_addAttributeFromIndex (
        VARIANT varAtts,
        int nIndex ) = 0;
    virtual HRESULT __stdcall raw_clear ( ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        int nIndex ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        int nIndex,
        BSTR strURI,
        BSTR strLocalName,
        BSTR strQName,
        BSTR strType,
        BSTR strValue ) = 0;
    virtual HRESULT __stdcall raw_setAttributes (
        VARIANT varAtts ) = 0;
    virtual HRESULT __stdcall raw_setLocalName (
        int nIndex,
        BSTR strLocalName ) = 0;
    virtual HRESULT __stdcall raw_setQName (
        int nIndex,
        BSTR strQName ) = 0;
    virtual HRESULT __stdcall raw_setType (
        int nIndex,
        BSTR strType ) = 0;
    virtual HRESULT __stdcall raw_setURI (
        int nIndex,
        BSTR strURI ) = 0;
    virtual HRESULT __stdcall raw_setValue (
        int nIndex,
        BSTR strValue ) = 0;
};

struct __declspec(uuid("808f4e35-8d5a-4fbe-8466-33a41279ed30"))
IMXReaderControl : IDispatch
{
    
    
    

    HRESULT abort ( );
    HRESULT resume ( );
    HRESULT suspend ( );

    
    
    

    virtual HRESULT __stdcall raw_abort ( ) = 0;
    virtual HRESULT __stdcall raw_resume ( ) = 0;
    virtual HRESULT __stdcall raw_suspend ( ) = 0;
};

struct __declspec(uuid("65725580-9b5d-11d0-9bfe-00c04fc99c8e"))
IXMLElementCollection : IDispatch
{
    
    
    

    __declspec(property(get=Getlength,put=Putlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    
    
    

    void Putlength (
        long p );
    long Getlength ( );
    IUnknownPtr Get_newEnum ( );
    IDispatchPtr item (
        const _variant_t & var1 = vtMissing,
        const _variant_t & var2 = vtMissing );

    
    
    

    virtual HRESULT __stdcall put_length (
        long p ) = 0;
    virtual HRESULT __stdcall get_length (
        long * p ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
    virtual HRESULT __stdcall raw_item (
        VARIANT var1,
        VARIANT var2,
        IDispatch * * ppDisp ) = 0;
};

struct __declspec(uuid("f52e2b61-18a1-11d1-b105-00805f49916b"))
IXMLDocument : IDispatch
{
    
    
    

    __declspec(property(get=Getroot))
    IXMLElementPtr root;
    __declspec(property(get=GetfileSize))
    _bstr_t fileSize;
    __declspec(property(get=GetfileModifiedDate))
    _bstr_t fileModifiedDate;
    __declspec(property(get=GetfileUpdatedDate))
    _bstr_t fileUpdatedDate;
    __declspec(property(get=Geturl,put=Puturl))
    _bstr_t url;
    __declspec(property(get=GetmimeType))
    _bstr_t mimeType;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=Getcharset,put=Putcharset))
    _bstr_t charset;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=Getdoctype))
    _bstr_t doctype;
    __declspec(property(get=GetdtdURL))
    _bstr_t dtdURL;

    
    
    

    IXMLElementPtr Getroot ( );
    _bstr_t GetfileSize ( );
    _bstr_t GetfileModifiedDate ( );
    _bstr_t GetfileUpdatedDate ( );
    _bstr_t Geturl ( );
    void Puturl (
        _bstr_t p );
    _bstr_t GetmimeType ( );
    long GetreadyState ( );
    _bstr_t Getcharset ( );
    void Putcharset (
        _bstr_t p );
    _bstr_t Getversion ( );
    _bstr_t Getdoctype ( );
    _bstr_t GetdtdURL ( );
    IXMLElementPtr createElement (
        const _variant_t & vType,
        const _variant_t & var1 = vtMissing );

    
    
    

    virtual HRESULT __stdcall get_root (
        struct IXMLElement * * p ) = 0;
    virtual HRESULT __stdcall get_fileSize (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileModifiedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileUpdatedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_url (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_mimeType (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * pl ) = 0;
    virtual HRESULT __stdcall get_charset (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_charset (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_version (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_doctype (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_dtdURL (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall raw_createElement (
        VARIANT vType,
        VARIANT var1,
        struct IXMLElement * * ppElem ) = 0;
};

struct __declspec(uuid("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e"))
IXMLElement : IDispatch
{
    
    
    

    __declspec(property(get=GettagName,put=PuttagName))
    _bstr_t tagName;
    __declspec(property(get=Getparent))
    IXMLElementPtr parent;
    __declspec(property(get=Getchildren))
    IXMLElementCollectionPtr children;
    __declspec(property(get=Gettype))
    long type;
    __declspec(property(get=Gettext,put=Puttext))
    _bstr_t text;

    
    
    

    _bstr_t GettagName ( );
    void PuttagName (
        _bstr_t p );
    IXMLElementPtr Getparent ( );
    HRESULT setAttribute (
        _bstr_t strPropertyName,
        const _variant_t & PropertyValue );
    _variant_t getAttribute (
        _bstr_t strPropertyName );
    HRESULT removeAttribute (
        _bstr_t strPropertyName );
    IXMLElementCollectionPtr Getchildren ( );
    long Gettype ( );
    _bstr_t Gettext ( );
    void Puttext (
        _bstr_t p );
    HRESULT addChild (
        struct IXMLElement * pChildElem,
        long lIndex,
        long lReserved );
    HRESULT removeChild (
        struct IXMLElement * pChildElem );

    
    
    

    virtual HRESULT __stdcall get_tagName (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_tagName (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_parent (
        struct IXMLElement * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        BSTR strPropertyName,
        VARIANT PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_getAttribute (
        BSTR strPropertyName,
        VARIANT * PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        BSTR strPropertyName ) = 0;
    virtual HRESULT __stdcall get_children (
        struct IXMLElementCollection * * pp ) = 0;
    virtual HRESULT __stdcall get_type (
        long * plType ) = 0;
    virtual HRESULT __stdcall get_text (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_text (
        BSTR p ) = 0;
    virtual HRESULT __stdcall raw_addChild (
        struct IXMLElement * pChildElem,
        long lIndex,
        long lReserved ) = 0;
    virtual HRESULT __stdcall raw_removeChild (
        struct IXMLElement * pChildElem ) = 0;
};

struct __declspec(uuid("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9"))
IXMLDocument2 : IDispatch
{
    
    
    

    __declspec(property(get=Getroot))
    IXMLElement2Ptr root;
    __declspec(property(get=GetfileSize))
    _bstr_t fileSize;
    __declspec(property(get=GetfileModifiedDate))
    _bstr_t fileModifiedDate;
    __declspec(property(get=GetfileUpdatedDate))
    _bstr_t fileUpdatedDate;
    __declspec(property(get=Geturl,put=Puturl))
    _bstr_t url;
    __declspec(property(get=GetmimeType))
    _bstr_t mimeType;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=Getcharset,put=Putcharset))
    _bstr_t charset;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=Getdoctype))
    _bstr_t doctype;
    __declspec(property(get=GetdtdURL))
    _bstr_t dtdURL;
    __declspec(property(get=Getasync,put=Putasync))
    VARIANT_BOOL async;

    
    
    

    IXMLElement2Ptr Getroot ( );
    _bstr_t GetfileSize ( );
    _bstr_t GetfileModifiedDate ( );
    _bstr_t GetfileUpdatedDate ( );
    _bstr_t Geturl ( );
    void Puturl (
        _bstr_t p );
    _bstr_t GetmimeType ( );
    long GetreadyState ( );
    _bstr_t Getcharset ( );
    void Putcharset (
        _bstr_t p );
    _bstr_t Getversion ( );
    _bstr_t Getdoctype ( );
    _bstr_t GetdtdURL ( );
    IXMLElement2Ptr createElement (
        const _variant_t & vType,
        const _variant_t & var1 = vtMissing );
    VARIANT_BOOL Getasync ( );
    void Putasync (
        VARIANT_BOOL pf );

    
    
    

    virtual HRESULT __stdcall get_root (
        struct IXMLElement2 * * p ) = 0;
    virtual HRESULT __stdcall get_fileSize (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileModifiedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileUpdatedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_url (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_mimeType (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * pl ) = 0;
    virtual HRESULT __stdcall get_charset (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_charset (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_version (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_doctype (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_dtdURL (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall raw_createElement (
        VARIANT vType,
        VARIANT var1,
        struct IXMLElement2 * * ppElem ) = 0;
    virtual HRESULT __stdcall get_async (
        VARIANT_BOOL * pf ) = 0;
    virtual HRESULT __stdcall put_async (
        VARIANT_BOOL pf ) = 0;
};

struct __declspec(uuid("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9"))
IXMLElement2 : IDispatch
{
    
    
    

    __declspec(property(get=GettagName,put=PuttagName))
    _bstr_t tagName;
    __declspec(property(get=Getparent))
    IXMLElement2Ptr parent;
    __declspec(property(get=Getchildren))
    IXMLElementCollectionPtr children;
    __declspec(property(get=Gettype))
    long type;
    __declspec(property(get=Gettext,put=Puttext))
    _bstr_t text;
    __declspec(property(get=Getattributes))
    IXMLElementCollectionPtr attributes;

    
    
    

    _bstr_t GettagName ( );
    void PuttagName (
        _bstr_t p );
    IXMLElement2Ptr Getparent ( );
    HRESULT setAttribute (
        _bstr_t strPropertyName,
        const _variant_t & PropertyValue );
    _variant_t getAttribute (
        _bstr_t strPropertyName );
    HRESULT removeAttribute (
        _bstr_t strPropertyName );
    IXMLElementCollectionPtr Getchildren ( );
    long Gettype ( );
    _bstr_t Gettext ( );
    void Puttext (
        _bstr_t p );
    HRESULT addChild (
        struct IXMLElement2 * pChildElem,
        long lIndex,
        long lReserved );
    HRESULT removeChild (
        struct IXMLElement2 * pChildElem );
    IXMLElementCollectionPtr Getattributes ( );

    
    
    

    virtual HRESULT __stdcall get_tagName (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_tagName (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_parent (
        struct IXMLElement2 * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        BSTR strPropertyName,
        VARIANT PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_getAttribute (
        BSTR strPropertyName,
        VARIANT * PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        BSTR strPropertyName ) = 0;
    virtual HRESULT __stdcall get_children (
        struct IXMLElementCollection * * pp ) = 0;
    virtual HRESULT __stdcall get_type (
        long * plType ) = 0;
    virtual HRESULT __stdcall get_text (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_text (
        BSTR p ) = 0;
    virtual HRESULT __stdcall raw_addChild (
        struct IXMLElement2 * pChildElem,
        long lIndex,
        long lReserved ) = 0;
    virtual HRESULT __stdcall raw_removeChild (
        struct IXMLElement2 * pChildElem ) = 0;
    virtual HRESULT __stdcall get_attributes (
        struct IXMLElementCollection * * pp ) = 0;
};

struct __declspec(uuid("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596"))
IXMLAttribute : IDispatch
{
    
    
    

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Getvalue))
    _bstr_t value;

    
    
    

    _bstr_t Getname ( );
    _bstr_t Getvalue ( );

    
    
    

    virtual HRESULT __stdcall get_name (
        BSTR * n ) = 0;
    virtual HRESULT __stdcall get_value (
        BSTR * v ) = 0;
};

struct __declspec(uuid("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e"))
IXMLError : IUnknown
{
    
    
    

    HRESULT GetErrorInfo (
        struct _xml_error * pErrorReturn );

    
    
    

    virtual HRESULT __stdcall raw_GetErrorInfo (
        struct _xml_error * pErrorReturn ) = 0;
};

struct _xml_error
{
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    unsigned long _reserved1;
    unsigned long _reserved2;
};

enum tagXMLEMEM_TYPE
{
    XMLELEMTYPE_ELEMENT = 0,
    XMLELEMTYPE_TEXT = 1,
    XMLELEMTYPE_COMMENT = 2,
    XMLELEMTYPE_DOCUMENT = 3,
    XMLELEMTYPE_DTD = 4,
    XMLELEMTYPE_PI = 5,
    XMLELEMTYPE_OTHER = 6
};

struct __declspec(uuid("aa634fc7-5888-44a7-a257-3a47150d3a0e"))
IXMLDOMSelection : IXMLDOMNodeList
{
    
    
    

    __declspec(property(get=Getexpr,put=Putexpr))
    _bstr_t expr;
    __declspec(property(get=Getcontext,put=PutRefcontext))
    IXMLDOMNodePtr context;

    
    
    

    _bstr_t Getexpr ( );
    void Putexpr (
        _bstr_t expression );
    IXMLDOMNodePtr Getcontext ( );
    void PutRefcontext (
        struct IXMLDOMNode * ppNode );
    IXMLDOMNodePtr peekNode ( );
    IXMLDOMNodePtr matches (
        struct IXMLDOMNode * pNode );
    IXMLDOMNodePtr removeNext ( );
    HRESULT removeAll ( );
    IXMLDOMSelectionPtr clone ( );
    _variant_t getProperty (
        _bstr_t name );
    HRESULT setProperty (
        _bstr_t name,
        const _variant_t & value );

    
    
    

    virtual HRESULT __stdcall get_expr (
        BSTR * expression ) = 0;
    virtual HRESULT __stdcall put_expr (
        BSTR expression ) = 0;
    virtual HRESULT __stdcall get_context (
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall putref_context (
        struct IXMLDOMNode * ppNode ) = 0;
    virtual HRESULT __stdcall raw_peekNode (
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_matches (
        struct IXMLDOMNode * pNode,
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_removeNext (
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_removeAll ( ) = 0;
    virtual HRESULT __stdcall raw_clone (
        struct IXMLDOMSelection * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        BSTR name,
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall raw_setProperty (
        BSTR name,
        VARIANT value ) = 0;
};

struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782"))
XMLDOMDocumentEvents : IDispatch
{
    
    
    

    
    HRESULT ondataavailable ( );
    HRESULT onreadystatechange ( );
};

struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39"))
IDSOControl : IDispatch
{
    
    
    

    __declspec(property(get=GetXMLDocument,put=PutXMLDocument))
    IXMLDOMDocumentPtr XMLDocument;
    __declspec(property(get=GetJavaDSOCompatible,put=PutJavaDSOCompatible))
    long JavaDSOCompatible;
    __declspec(property(get=GetreadyState))
    long readyState;

    
    
    

    IXMLDOMDocumentPtr GetXMLDocument ( );
    void PutXMLDocument (
        struct IXMLDOMDocument * ppDoc );
    long GetJavaDSOCompatible ( );
    void PutJavaDSOCompatible (
        long fJavaDSOCompatible );
    long GetreadyState ( );

    
    
    

    virtual HRESULT __stdcall get_XMLDocument (
        struct IXMLDOMDocument * * ppDoc ) = 0;
    virtual HRESULT __stdcall put_XMLDocument (
        struct IXMLDOMDocument * ppDoc ) = 0;
    virtual HRESULT __stdcall get_JavaDSOCompatible (
        long * fJavaDSOCompatible ) = 0;
    virtual HRESULT __stdcall put_JavaDSOCompatible (
        long fJavaDSOCompatible ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * state ) = 0;
};

struct __declspec(uuid("ed8c108d-4349-11d2-91a4-00c04f7969e8"))
IXMLHTTPRequest : IDispatch
{
    
    
    

    __declspec(property(get=Getstatus))
    long status;
    __declspec(property(get=GetstatusText))
    _bstr_t statusText;
    __declspec(property(get=GetresponseXML))
    IDispatchPtr responseXML;
    __declspec(property(get=GetresponseText))
    _bstr_t responseText;
    __declspec(property(get=GetresponseBody))
    _variant_t responseBody;
    __declspec(property(get=GetresponseStream))
    _variant_t responseStream;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(put=Putonreadystatechange))
    IDispatchPtr onreadystatechange;

    
    
    

    HRESULT open (
        _bstr_t bstrMethod,
        _bstr_t bstrUrl,
        const _variant_t & varAsync = vtMissing,
        const _variant_t & bstrUser = vtMissing,
        const _variant_t & bstrPassword = vtMissing );
    HRESULT setRequestHeader (
        _bstr_t bstrHeader,
        _bstr_t bstrValue );
    _bstr_t getResponseHeader (
        _bstr_t bstrHeader );
    _bstr_t getAllResponseHeaders ( );
    HRESULT send (
        const _variant_t & varBody = vtMissing );
    HRESULT abort ( );
    long Getstatus ( );
    _bstr_t GetstatusText ( );
    IDispatchPtr GetresponseXML ( );
    _bstr_t GetresponseText ( );
    _variant_t GetresponseBody ( );
    _variant_t GetresponseStream ( );
    long GetreadyState ( );
    void Putonreadystatechange (
        IDispatch * _arg1 );

    
    
    

    virtual HRESULT __stdcall raw_open (
        BSTR bstrMethod,
        BSTR bstrUrl,
        VARIANT varAsync = vtMissing,
        VARIANT bstrUser = vtMissing,
        VARIANT bstrPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_setRequestHeader (
        BSTR bstrHeader,
        BSTR bstrValue ) = 0;
    virtual HRESULT __stdcall raw_getResponseHeader (
        BSTR bstrHeader,
        BSTR * pbstrValue ) = 0;
    virtual HRESULT __stdcall raw_getAllResponseHeaders (
        BSTR * pbstrHeaders ) = 0;
    virtual HRESULT __stdcall raw_send (
        VARIANT varBody = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_abort ( ) = 0;
    virtual HRESULT __stdcall get_status (
        long * plStatus ) = 0;
    virtual HRESULT __stdcall get_statusText (
        BSTR * pbstrStatus ) = 0;
    virtual HRESULT __stdcall get_responseXML (
        IDispatch * * ppBody ) = 0;
    virtual HRESULT __stdcall get_responseText (
        BSTR * pbstrBody ) = 0;
    virtual HRESULT __stdcall get_responseBody (
        VARIANT * pvarBody ) = 0;
    virtual HRESULT __stdcall get_responseStream (
        VARIANT * pvarBody ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * plState ) = 0;
    virtual HRESULT __stdcall put_onreadystatechange (
        IDispatch * _arg1 ) = 0;
};

enum _SERVERXMLHTTP_OPTION
{
    SXH_OPTION_URL_CODEPAGE = 0,
    SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1,
    SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2,
    SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3
};

enum _SXH_SERVER_CERT_OPTION
{
    SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256,
    SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512,
    SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096,
    SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192,
    SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056
};

struct __declspec(uuid("2e9196bf-13ba-4dd4-91ca-6c571f281495"))
IServerXMLHTTPRequest : IXMLHTTPRequest
{
    
    
    

    HRESULT setTimeouts (
        long resolveTimeout,
        long connectTimeout,
        long sendTimeout,
        long receiveTimeout );
    VARIANT_BOOL waitForResponse (
        const _variant_t & timeoutInSeconds = vtMissing );
    _variant_t getOption (
        SERVERXMLHTTP_OPTION option );
    HRESULT setOption (
        SERVERXMLHTTP_OPTION option,
        const _variant_t & value );

    
    
    

    virtual HRESULT __stdcall raw_setTimeouts (
        long resolveTimeout,
        long connectTimeout,
        long sendTimeout,
        long receiveTimeout ) = 0;
    virtual HRESULT __stdcall raw_waitForResponse (
        VARIANT timeoutInSeconds,
        VARIANT_BOOL * isSuccessful ) = 0;
    virtual HRESULT __stdcall raw_getOption (
        SERVERXMLHTTP_OPTION option,
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall raw_setOption (
        SERVERXMLHTTP_OPTION option,
        VARIANT value ) = 0;
};

struct __declspec(uuid("f6d90f11-9c73-11d3-b32e-00c04f990bb4"))
DOMDocument2;
    
    

struct __declspec(uuid("f5078f1b-c551-11d3-89b9-0000f81fe221"))
DOMDocument26;
    
    

struct __declspec(uuid("f5078f32-c551-11d3-89b9-0000f81fe221"))
DOMDocument30;
    
    

struct __declspec(uuid("f6d90f12-9c73-11d3-b32e-00c04f990bb4"))
FreeThreadedDOMDocument;
    
    

struct __declspec(uuid("f5078f1c-c551-11d3-89b9-0000f81fe221"))
FreeThreadedDOMDocument26;
    
    

struct __declspec(uuid("f5078f33-c551-11d3-89b9-0000f81fe221"))
FreeThreadedDOMDocument30;
    
    

struct __declspec(uuid("373984c9-b845-449b-91e7-45ac83036ade"))
XMLSchemaCache;
    

struct __declspec(uuid("f5078f1d-c551-11d3-89b9-0000f81fe221"))
XMLSchemaCache26;
    

struct __declspec(uuid("f5078f34-c551-11d3-89b9-0000f81fe221"))
XMLSchemaCache30;
    

struct __declspec(uuid("2933bf94-7b36-11d2-b20e-00c04f983e60"))
XSLTemplate;
    

struct __declspec(uuid("f5078f21-c551-11d3-89b9-0000f81fe221"))
XSLTemplate26;
    

struct __declspec(uuid("f5078f36-c551-11d3-89b9-0000f81fe221"))
XSLTemplate30;
    

struct __declspec(uuid("f6d90f14-9c73-11d3-b32e-00c04f990bb4"))
DSOControl;
    

struct __declspec(uuid("f5078f1f-c551-11d3-89b9-0000f81fe221"))
DSOControl26;
    

struct __declspec(uuid("f5078f39-c551-11d3-89b9-0000f81fe221"))
DSOControl30;
    

struct __declspec(uuid("f6d90f16-9c73-11d3-b32e-00c04f990bb4"))
XMLHTTP;
    

struct __declspec(uuid("f5078f1e-c551-11d3-89b9-0000f81fe221"))
XMLHTTP26;
    

struct __declspec(uuid("f5078f35-c551-11d3-89b9-0000f81fe221"))
XMLHTTP30;
    

struct __declspec(uuid("afba6b42-5692-48ea-8141-dc517dcf0ef1"))
ServerXMLHTTP;
    

struct __declspec(uuid("afb40ffd-b609-40a3-9828-f88bbe11e4e3"))
ServerXMLHTTP30;
    

struct __declspec(uuid("079aa557-4a18-424a-8eee-e39f0a8d41b9"))
SAXXMLReader;
    
    
    

struct __declspec(uuid("3124c396-fb13-4836-a6ad-1317f1713688"))
SAXXMLReader30;
    
    
    

struct __declspec(uuid("fc220ad8-a72a-4ee8-926e-0b7ad152a020"))
MXXMLWriter;
    
    
    
    
    
    
    
    
    
    
    

struct __declspec(uuid("3d813dfe-6c91-4a4e-8f41-04346a841d9c"))
MXXMLWriter30;
    
    
    
    
    
    
    
    
    
    
    

struct __declspec(uuid("4dd441ad-526d-4a77-9f1b-9841ed802fb0"))
SAXAttributes;
    
    
    

struct __declspec(uuid("3e784a01-f3ae-4dc0-9354-9526b9370eba"))
SAXAttributes30;
    
    
    

struct __declspec(uuid("cfc399af-d876-11d0-9c10-00c04fc99c8e"))
XMLDocument;
    





#line 1 "d:\\lexnet 1.4\\idocpost\\msxml3.tli"







#pragma once





inline VARIANT_BOOL IXMLDOMImplementation::hasFeature ( _bstr_t feature, _bstr_t version ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_hasFeature(feature, version, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}





inline _bstr_t IXMLDOMNode::GetnodeName ( ) {
    BSTR _result;
    HRESULT _hr = get_nodeName(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IXMLDOMNode::GetnodeValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_nodeValue(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IXMLDOMNode::PutnodeValue ( const _variant_t & value ) {
    HRESULT _hr = put_nodeValue(value);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DOMNodeType IXMLDOMNode::GetnodeType ( ) {
    DOMNodeType _result;
    HRESULT _hr = get_nodeType(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IXMLDOMNodePtr IXMLDOMNode::GetparentNode ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_parentNode(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodeListPtr IXMLDOMNode::GetchildNodes ( ) {
    struct IXMLDOMNodeList * _result;
    HRESULT _hr = get_childNodes(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodeListPtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::GetfirstChild ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_firstChild(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::GetlastChild ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_lastChild(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::GetpreviousSibling ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_previousSibling(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::GetnextSibling ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_nextSibling(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNamedNodeMapPtr IXMLDOMNode::Getattributes ( ) {
    struct IXMLDOMNamedNodeMap * _result;
    HRESULT _hr = get_attributes(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNamedNodeMapPtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::insertBefore ( struct IXMLDOMNode * newChild, const _variant_t & refChild ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_insertBefore(newChild, refChild, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::replaceChild ( struct IXMLDOMNode * newChild, struct IXMLDOMNode * oldChild ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_replaceChild(newChild, oldChild, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::removeChild ( struct IXMLDOMNode * childNode ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_removeChild(childNode, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::appendChild ( struct IXMLDOMNode * newChild ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_appendChild(newChild, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline VARIANT_BOOL IXMLDOMNode::hasChildNodes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_hasChildNodes(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IXMLDOMDocumentPtr IXMLDOMNode::GetownerDocument ( ) {
    struct IXMLDOMDocument * _result;
    HRESULT _hr = get_ownerDocument(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMDocumentPtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::cloneNode ( VARIANT_BOOL deep ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_cloneNode(deep, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline _bstr_t IXMLDOMNode::GetnodeTypeString ( ) {
    BSTR _result;
    HRESULT _hr = get_nodeTypeString(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDOMNode::Gettext ( ) {
    BSTR _result;
    HRESULT _hr = get_text(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDOMNode::Puttext ( _bstr_t text ) {
    HRESULT _hr = put_text(text);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IXMLDOMNode::Getspecified ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_specified(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IXMLDOMNodePtr IXMLDOMNode::Getdefinition ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_definition(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline _variant_t IXMLDOMNode::GetnodeTypedValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_nodeTypedValue(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IXMLDOMNode::PutnodeTypedValue ( const _variant_t & typedValue ) {
    HRESULT _hr = put_nodeTypedValue(typedValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IXMLDOMNode::GetdataType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_dataType(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IXMLDOMNode::PutdataType ( _bstr_t dataTypeName ) {
    HRESULT _hr = put_dataType(dataTypeName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXMLDOMNode::Getxml ( ) {
    BSTR _result;
    HRESULT _hr = get_xml(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDOMNode::transformNode ( struct IXMLDOMNode * stylesheet ) {
    BSTR _result;
    HRESULT _hr = raw_transformNode(stylesheet, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IXMLDOMNodeListPtr IXMLDOMNode::selectNodes ( _bstr_t queryString ) {
    struct IXMLDOMNodeList * _result;
    HRESULT _hr = raw_selectNodes(queryString, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodeListPtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNode::selectSingleNode ( _bstr_t queryString ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_selectSingleNode(queryString, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline VARIANT_BOOL IXMLDOMNode::Getparsed ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_parsed(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLDOMNode::GetnamespaceURI ( ) {
    BSTR _result;
    HRESULT _hr = get_namespaceURI(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDOMNode::Getprefix ( ) {
    BSTR _result;
    HRESULT _hr = get_prefix(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDOMNode::GetbaseName ( ) {
    BSTR _result;
    HRESULT _hr = get_baseName(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IXMLDOMNode::transformNodeToObject ( struct IXMLDOMNode * stylesheet, const _variant_t & outputObject ) {
    HRESULT _hr = raw_transformNodeToObject(stylesheet, outputObject);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline IXMLDOMNodePtr IXMLDOMNodeList::Getitem ( long index ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_item(index, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline long IXMLDOMNodeList::Getlength ( ) {
    long _result;
    HRESULT _hr = get_length(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IXMLDOMNodePtr IXMLDOMNodeList::nextNode ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_nextNode(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline HRESULT IXMLDOMNodeList::reset ( ) {
    HRESULT _hr = raw_reset();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IXMLDOMNodeList::Get_newEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__newEnum(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}





inline IXMLDOMNodePtr IXMLDOMNamedNodeMap::getNamedItem ( _bstr_t name ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_getNamedItem(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNamedNodeMap::setNamedItem ( struct IXMLDOMNode * newItem ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_setNamedItem(newItem, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNamedNodeMap::removeNamedItem ( _bstr_t name ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_removeNamedItem(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNamedNodeMap::Getitem ( long index ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_item(index, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline long IXMLDOMNamedNodeMap::Getlength ( ) {
    long _result;
    HRESULT _hr = get_length(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IXMLDOMNodePtr IXMLDOMNamedNodeMap::getQualifiedItem ( _bstr_t baseName, _bstr_t namespaceURI ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_getQualifiedItem(baseName, namespaceURI, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNamedNodeMap::removeQualifiedItem ( _bstr_t baseName, _bstr_t namespaceURI ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_removeQualifiedItem(baseName, namespaceURI, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMNamedNodeMap::nextNode ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_nextNode(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline HRESULT IXMLDOMNamedNodeMap::reset ( ) {
    HRESULT _hr = raw_reset();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IXMLDOMNamedNodeMap::Get_newEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__newEnum(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}





inline IXMLDOMDocumentTypePtr IXMLDOMDocument::Getdoctype ( ) {
    struct IXMLDOMDocumentType * _result;
    HRESULT _hr = get_doctype(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMDocumentTypePtr(_result, false);
}

inline IXMLDOMImplementationPtr IXMLDOMDocument::Getimplementation ( ) {
    struct IXMLDOMImplementation * _result;
    HRESULT _hr = get_implementation(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMImplementationPtr(_result, false);
}

inline IXMLDOMElementPtr IXMLDOMDocument::GetdocumentElement ( ) {
    struct IXMLDOMElement * _result;
    HRESULT _hr = get_documentElement(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMElementPtr(_result, false);
}

inline void IXMLDOMDocument::PutRefdocumentElement ( struct IXMLDOMElement * DOMElement ) {
    HRESULT _hr = putref_documentElement(DOMElement);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IXMLDOMElementPtr IXMLDOMDocument::createElement ( _bstr_t tagName ) {
    struct IXMLDOMElement * _result;
    HRESULT _hr = raw_createElement(tagName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMElementPtr(_result, false);
}

inline IXMLDOMDocumentFragmentPtr IXMLDOMDocument::createDocumentFragment ( ) {
    struct IXMLDOMDocumentFragment * _result;
    HRESULT _hr = raw_createDocumentFragment(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMDocumentFragmentPtr(_result, false);
}

inline IXMLDOMTextPtr IXMLDOMDocument::createTextNode ( _bstr_t data ) {
    struct IXMLDOMText * _result;
    HRESULT _hr = raw_createTextNode(data, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMTextPtr(_result, false);
}

inline IXMLDOMCommentPtr IXMLDOMDocument::createComment ( _bstr_t data ) {
    struct IXMLDOMComment * _result;
    HRESULT _hr = raw_createComment(data, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMCommentPtr(_result, false);
}

inline IXMLDOMCDATASectionPtr IXMLDOMDocument::createCDATASection ( _bstr_t data ) {
    struct IXMLDOMCDATASection * _result;
    HRESULT _hr = raw_createCDATASection(data, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMCDATASectionPtr(_result, false);
}

inline IXMLDOMProcessingInstructionPtr IXMLDOMDocument::createProcessingInstruction ( _bstr_t target, _bstr_t data ) {
    struct IXMLDOMProcessingInstruction * _result;
    HRESULT _hr = raw_createProcessingInstruction(target, data, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMProcessingInstructionPtr(_result, false);
}

inline IXMLDOMAttributePtr IXMLDOMDocument::createAttribute ( _bstr_t name ) {
    struct IXMLDOMAttribute * _result;
    HRESULT _hr = raw_createAttribute(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMAttributePtr(_result, false);
}

inline IXMLDOMEntityReferencePtr IXMLDOMDocument::createEntityReference ( _bstr_t name ) {
    struct IXMLDOMEntityReference * _result;
    HRESULT _hr = raw_createEntityReference(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMEntityReferencePtr(_result, false);
}

inline IXMLDOMNodeListPtr IXMLDOMDocument::getElementsByTagName ( _bstr_t tagName ) {
    struct IXMLDOMNodeList * _result;
    HRESULT _hr = raw_getElementsByTagName(tagName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodeListPtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMDocument::createNode ( const _variant_t & type, _bstr_t name, _bstr_t namespaceURI ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_createNode(type, name, namespaceURI, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMDocument::nodeFromID ( _bstr_t idString ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_nodeFromID(idString, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline VARIANT_BOOL IXMLDOMDocument::load ( const _variant_t & xmlSource ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_load(xmlSource, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXMLDOMDocument::GetreadyState ( ) {
    long _result;
    HRESULT _hr = get_readyState(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IXMLDOMParseErrorPtr IXMLDOMDocument::GetparseError ( ) {
    struct IXMLDOMParseError * _result;
    HRESULT _hr = get_parseError(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMParseErrorPtr(_result, false);
}

inline _bstr_t IXMLDOMDocument::Geturl ( ) {
    BSTR _result;
    HRESULT _hr = get_url(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IXMLDOMDocument::Getasync ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_async(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXMLDOMDocument::Putasync ( VARIANT_BOOL isAsync ) {
    HRESULT _hr = put_async(isAsync);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXMLDOMDocument::abort ( ) {
    HRESULT _hr = raw_abort();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IXMLDOMDocument::loadXML ( _bstr_t bstrXML ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_loadXML(bstrXML, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IXMLDOMDocument::save ( const _variant_t & destination ) {
    HRESULT _hr = raw_save(destination);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IXMLDOMDocument::GetvalidateOnParse ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_validateOnParse(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXMLDOMDocument::PutvalidateOnParse ( VARIANT_BOOL isValidating ) {
    HRESULT _hr = put_validateOnParse(isValidating);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IXMLDOMDocument::GetresolveExternals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_resolveExternals(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXMLDOMDocument::PutresolveExternals ( VARIANT_BOOL isResolving ) {
    HRESULT _hr = put_resolveExternals(isResolving);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IXMLDOMDocument::GetpreserveWhiteSpace ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_preserveWhiteSpace(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXMLDOMDocument::PutpreserveWhiteSpace ( VARIANT_BOOL isPreserving ) {
    HRESULT _hr = put_preserveWhiteSpace(isPreserving);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IXMLDOMDocument::Putonreadystatechange ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_onreadystatechange(_arg1);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IXMLDOMDocument::Putondataavailable ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_ondataavailable(_arg1);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IXMLDOMDocument::Putontransformnode ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_ontransformnode(_arg1);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}





inline _bstr_t IXMLDOMDocumentType::Getname ( ) {
    BSTR _result;
    HRESULT _hr = get_name(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IXMLDOMNamedNodeMapPtr IXMLDOMDocumentType::Getentities ( ) {
    struct IXMLDOMNamedNodeMap * _result;
    HRESULT _hr = get_entities(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNamedNodeMapPtr(_result, false);
}

inline IXMLDOMNamedNodeMapPtr IXMLDOMDocumentType::Getnotations ( ) {
    struct IXMLDOMNamedNodeMap * _result;
    HRESULT _hr = get_notations(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNamedNodeMapPtr(_result, false);
}





inline _bstr_t IXMLDOMElement::GettagName ( ) {
    BSTR _result;
    HRESULT _hr = get_tagName(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IXMLDOMElement::getAttribute ( _bstr_t name ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getAttribute(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IXMLDOMElement::setAttribute ( _bstr_t name, const _variant_t & value ) {
    HRESULT _hr = raw_setAttribute(name, value);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLDOMElement::removeAttribute ( _bstr_t name ) {
    HRESULT _hr = raw_removeAttribute(name);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IXMLDOMAttributePtr IXMLDOMElement::getAttributeNode ( _bstr_t name ) {
    struct IXMLDOMAttribute * _result;
    HRESULT _hr = raw_getAttributeNode(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMAttributePtr(_result, false);
}

inline IXMLDOMAttributePtr IXMLDOMElement::setAttributeNode ( struct IXMLDOMAttribute * DOMAttribute ) {
    struct IXMLDOMAttribute * _result;
    HRESULT _hr = raw_setAttributeNode(DOMAttribute, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMAttributePtr(_result, false);
}

inline IXMLDOMAttributePtr IXMLDOMElement::removeAttributeNode ( struct IXMLDOMAttribute * DOMAttribute ) {
    struct IXMLDOMAttribute * _result;
    HRESULT _hr = raw_removeAttributeNode(DOMAttribute, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMAttributePtr(_result, false);
}

inline IXMLDOMNodeListPtr IXMLDOMElement::getElementsByTagName ( _bstr_t tagName ) {
    struct IXMLDOMNodeList * _result;
    HRESULT _hr = raw_getElementsByTagName(tagName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodeListPtr(_result, false);
}

inline HRESULT IXMLDOMElement::normalize ( ) {
    HRESULT _hr = raw_normalize();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline _bstr_t IXMLDOMAttribute::Getname ( ) {
    BSTR _result;
    HRESULT _hr = get_name(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IXMLDOMAttribute::Getvalue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_value(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IXMLDOMAttribute::Putvalue ( const _variant_t & attributeValue ) {
    HRESULT _hr = put_value(attributeValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}





inline _bstr_t IXMLDOMCharacterData::Getdata ( ) {
    BSTR _result;
    HRESULT _hr = get_data(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDOMCharacterData::Putdata ( _bstr_t data ) {
    HRESULT _hr = put_data(data);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IXMLDOMCharacterData::Getlength ( ) {
    long _result;
    HRESULT _hr = get_length(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLDOMCharacterData::substringData ( long offset, long count ) {
    BSTR _result;
    HRESULT _hr = raw_substringData(offset, count, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IXMLDOMCharacterData::appendData ( _bstr_t data ) {
    HRESULT _hr = raw_appendData(data);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLDOMCharacterData::insertData ( long offset, _bstr_t data ) {
    HRESULT _hr = raw_insertData(offset, data);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLDOMCharacterData::deleteData ( long offset, long count ) {
    HRESULT _hr = raw_deleteData(offset, count);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLDOMCharacterData::replaceData ( long offset, long count, _bstr_t data ) {
    HRESULT _hr = raw_replaceData(offset, count, data);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline IXMLDOMTextPtr IXMLDOMText::splitText ( long offset ) {
    struct IXMLDOMText * _result;
    HRESULT _hr = raw_splitText(offset, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMTextPtr(_result, false);
}





inline _bstr_t IXMLDOMProcessingInstruction::Gettarget ( ) {
    BSTR _result;
    HRESULT _hr = get_target(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDOMProcessingInstruction::Getdata ( ) {
    BSTR _result;
    HRESULT _hr = get_data(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDOMProcessingInstruction::Putdata ( _bstr_t value ) {
    HRESULT _hr = put_data(value);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}





inline long IXMLDOMParseError::GeterrorCode ( ) {
    long _result;
    HRESULT _hr = get_errorCode(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLDOMParseError::Geturl ( ) {
    BSTR _result;
    HRESULT _hr = get_url(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDOMParseError::Getreason ( ) {
    BSTR _result;
    HRESULT _hr = get_reason(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDOMParseError::GetsrcText ( ) {
    BSTR _result;
    HRESULT _hr = get_srcText(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IXMLDOMParseError::Getline ( ) {
    long _result;
    HRESULT _hr = get_line(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXMLDOMParseError::Getlinepos ( ) {
    long _result;
    HRESULT _hr = get_linepos(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXMLDOMParseError::Getfilepos ( ) {
    long _result;
    HRESULT _hr = get_filepos(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}





inline HRESULT IXMLDOMSchemaCollection::add ( _bstr_t namespaceURI, const _variant_t & var ) {
    HRESULT _hr = raw_add(namespaceURI, var);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IXMLDOMNodePtr IXMLDOMSchemaCollection::get ( _bstr_t namespaceURI ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_get(namespaceURI, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline HRESULT IXMLDOMSchemaCollection::remove ( _bstr_t namespaceURI ) {
    HRESULT _hr = raw_remove(namespaceURI);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IXMLDOMSchemaCollection::Getlength ( ) {
    long _result;
    HRESULT _hr = get_length(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLDOMSchemaCollection::GetnamespaceURI ( long index ) {
    BSTR _result;
    HRESULT _hr = get_namespaceURI(index, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IXMLDOMSchemaCollection::addCollection ( struct IXMLDOMSchemaCollection * otherCollection ) {
    HRESULT _hr = raw_addCollection(otherCollection);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IXMLDOMSchemaCollection::Get_newEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__newEnum(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}





inline IXMLDOMSchemaCollectionPtr IXMLDOMDocument2::Getnamespaces ( ) {
    struct IXMLDOMSchemaCollection * _result;
    HRESULT _hr = get_namespaces(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMSchemaCollectionPtr(_result, false);
}

inline _variant_t IXMLDOMDocument2::Getschemas ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_schemas(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IXMLDOMDocument2::PutRefschemas ( const _variant_t & otherCollection ) {
    HRESULT _hr = putref_schemas(otherCollection);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IXMLDOMParseErrorPtr IXMLDOMDocument2::validate ( ) {
    struct IXMLDOMParseError * _result;
    HRESULT _hr = raw_validate(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMParseErrorPtr(_result, false);
}

inline HRESULT IXMLDOMDocument2::setProperty ( _bstr_t name, const _variant_t & value ) {
    HRESULT _hr = raw_setProperty(name, value);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IXMLDOMDocument2::getProperty ( _bstr_t name ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getProperty(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}





inline _variant_t IXMLDOMNotation::GetpublicId ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_publicId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IXMLDOMNotation::GetsystemId ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_systemId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}





inline _variant_t IXMLDOMEntity::GetpublicId ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_publicId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IXMLDOMEntity::GetsystemId ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_systemId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IXMLDOMEntity::GetnotationName ( ) {
    BSTR _result;
    HRESULT _hr = get_notationName(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}





inline long IXTLRuntime::uniqueID ( struct IXMLDOMNode * pNode ) {
    long _result;
    HRESULT _hr = raw_uniqueID(pNode, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXTLRuntime::depth ( struct IXMLDOMNode * pNode ) {
    long _result;
    HRESULT _hr = raw_depth(pNode, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXTLRuntime::childNumber ( struct IXMLDOMNode * pNode ) {
    long _result;
    HRESULT _hr = raw_childNumber(pNode, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXTLRuntime::ancestorChildNumber ( _bstr_t bstrNodeName, struct IXMLDOMNode * pNode ) {
    long _result;
    HRESULT _hr = raw_ancestorChildNumber(bstrNodeName, pNode, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXTLRuntime::absoluteChildNumber ( struct IXMLDOMNode * pNode ) {
    long _result;
    HRESULT _hr = raw_absoluteChildNumber(pNode, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXTLRuntime::formatIndex ( long lIndex, _bstr_t bstrFormat ) {
    BSTR _result;
    HRESULT _hr = raw_formatIndex(lIndex, bstrFormat, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXTLRuntime::formatNumber ( double dblNumber, _bstr_t bstrFormat ) {
    BSTR _result;
    HRESULT _hr = raw_formatNumber(dblNumber, bstrFormat, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXTLRuntime::formatDate ( const _variant_t & varDate, _bstr_t bstrFormat, const _variant_t & varDestLocale ) {
    BSTR _result;
    HRESULT _hr = raw_formatDate(varDate, bstrFormat, varDestLocale, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXTLRuntime::formatTime ( const _variant_t & varTime, _bstr_t bstrFormat, const _variant_t & varDestLocale ) {
    BSTR _result;
    HRESULT _hr = raw_formatTime(varTime, bstrFormat, varDestLocale, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}





inline void IXSLTemplate::PutRefstylesheet ( struct IXMLDOMNode * stylesheet ) {
    HRESULT _hr = putref_stylesheet(stylesheet);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IXMLDOMNodePtr IXSLTemplate::Getstylesheet ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_stylesheet(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXSLProcessorPtr IXSLTemplate::createProcessor ( ) {
    struct IXSLProcessor * _result;
    HRESULT _hr = raw_createProcessor(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXSLProcessorPtr(_result, false);
}





inline void IXSLProcessor::Putinput ( const _variant_t & pVar ) {
    HRESULT _hr = put_input(pVar);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IXSLProcessor::Getinput ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_input(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IXSLTemplatePtr IXSLProcessor::GetownerTemplate ( ) {
    struct IXSLTemplate * _result;
    HRESULT _hr = get_ownerTemplate(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXSLTemplatePtr(_result, false);
}

inline HRESULT IXSLProcessor::setStartMode ( _bstr_t mode, _bstr_t namespaceURI ) {
    HRESULT _hr = raw_setStartMode(mode, namespaceURI);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IXSLProcessor::GetstartMode ( ) {
    BSTR _result;
    HRESULT _hr = get_startMode(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXSLProcessor::GetstartModeURI ( ) {
    BSTR _result;
    HRESULT _hr = get_startModeURI(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXSLProcessor::Putoutput ( const _variant_t & pOutput ) {
    HRESULT _hr = put_output(pOutput);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IXSLProcessor::Getoutput ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_output(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL IXSLProcessor::transform ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_transform(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IXSLProcessor::reset ( ) {
    HRESULT _hr = raw_reset();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IXSLProcessor::GetreadyState ( ) {
    long _result;
    HRESULT _hr = get_readyState(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IXSLProcessor::addParameter ( _bstr_t baseName, const _variant_t & parameter, _bstr_t namespaceURI ) {
    HRESULT _hr = raw_addParameter(baseName, parameter, namespaceURI);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXSLProcessor::addObject ( IDispatch * obj, _bstr_t namespaceURI ) {
    HRESULT _hr = raw_addObject(obj, namespaceURI);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IXMLDOMNodePtr IXSLProcessor::Getstylesheet ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_stylesheet(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}





inline VARIANT_BOOL ISAXXMLReader::getFeature ( unsigned short * pwchName ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_getFeature(pwchName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISAXXMLReader::putFeature ( unsigned short * pwchName, VARIANT_BOOL vfValue ) {
    HRESULT _hr = raw_putFeature(pwchName, vfValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t ISAXXMLReader::getProperty ( unsigned short * pwchName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getProperty(pwchName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT ISAXXMLReader::putProperty ( unsigned short * pwchName, const _variant_t & varValue ) {
    HRESULT _hr = raw_putProperty(pwchName, varValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISAXEntityResolverPtr ISAXXMLReader::getEntityResolver ( ) {
    struct ISAXEntityResolver * _result;
    HRESULT _hr = raw_getEntityResolver(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISAXEntityResolverPtr(_result, false);
}

inline HRESULT ISAXXMLReader::putEntityResolver ( struct ISAXEntityResolver * pResolver ) {
    HRESULT _hr = raw_putEntityResolver(pResolver);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISAXContentHandlerPtr ISAXXMLReader::getContentHandler ( ) {
    struct ISAXContentHandler * _result;
    HRESULT _hr = raw_getContentHandler(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISAXContentHandlerPtr(_result, false);
}

inline HRESULT ISAXXMLReader::putContentHandler ( struct ISAXContentHandler * pHandler ) {
    HRESULT _hr = raw_putContentHandler(pHandler);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISAXDTDHandlerPtr ISAXXMLReader::getDTDHandler ( ) {
    struct ISAXDTDHandler * _result;
    HRESULT _hr = raw_getDTDHandler(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISAXDTDHandlerPtr(_result, false);
}

inline HRESULT ISAXXMLReader::putDTDHandler ( struct ISAXDTDHandler * pHandler ) {
    HRESULT _hr = raw_putDTDHandler(pHandler);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISAXErrorHandlerPtr ISAXXMLReader::getErrorHandler ( ) {
    struct ISAXErrorHandler * _result;
    HRESULT _hr = raw_getErrorHandler(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISAXErrorHandlerPtr(_result, false);
}

inline HRESULT ISAXXMLReader::putErrorHandler ( struct ISAXErrorHandler * pHandler ) {
    HRESULT _hr = raw_putErrorHandler(pHandler);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline unsigned short * ISAXXMLReader::getBaseURL ( ) {
    unsigned short * _result;
    HRESULT _hr = raw_getBaseURL(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISAXXMLReader::putBaseURL ( unsigned short * pwchBaseUrl ) {
    HRESULT _hr = raw_putBaseURL(pwchBaseUrl);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline unsigned short * ISAXXMLReader::getSecureBaseURL ( ) {
    unsigned short * _result;
    HRESULT _hr = raw_getSecureBaseURL(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISAXXMLReader::putSecureBaseURL ( unsigned short * pwchSecureBaseUrl ) {
    HRESULT _hr = raw_putSecureBaseURL(pwchSecureBaseUrl);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXXMLReader::parse ( const _variant_t & varInput ) {
    HRESULT _hr = raw_parse(varInput);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXXMLReader::parseURL ( unsigned short * pwchUrl ) {
    HRESULT _hr = raw_parseURL(pwchUrl);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline _variant_t ISAXEntityResolver::resolveEntity ( unsigned short * pwchPublicId, unsigned short * pwchSystemId ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_resolveEntity(pwchPublicId, pwchSystemId, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}





inline HRESULT ISAXContentHandler::putDocumentLocator ( struct ISAXLocator * pLocator ) {
    HRESULT _hr = raw_putDocumentLocator(pLocator);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::startDocument ( ) {
    HRESULT _hr = raw_startDocument();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::endDocument ( ) {
    HRESULT _hr = raw_endDocument();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::startPrefixMapping ( unsigned short * pwchPrefix, int cchPrefix, unsigned short * pwchUri, int cchUri ) {
    HRESULT _hr = raw_startPrefixMapping(pwchPrefix, cchPrefix, pwchUri, cchUri);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::endPrefixMapping ( unsigned short * pwchPrefix, int cchPrefix ) {
    HRESULT _hr = raw_endPrefixMapping(pwchPrefix, cchPrefix);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::startElement ( unsigned short * pwchNamespaceUri, int cchNamespaceUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * pwchQName, int cchQName, struct ISAXAttributes * pAttributes ) {
    HRESULT _hr = raw_startElement(pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName, pAttributes);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::endElement ( unsigned short * pwchNamespaceUri, int cchNamespaceUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * pwchQName, int cchQName ) {
    HRESULT _hr = raw_endElement(pwchNamespaceUri, cchNamespaceUri, pwchLocalName, cchLocalName, pwchQName, cchQName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::characters ( unsigned short * pwchChars, int cchChars ) {
    HRESULT _hr = raw_characters(pwchChars, cchChars);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::ignorableWhitespace ( unsigned short * pwchChars, int cchChars ) {
    HRESULT _hr = raw_ignorableWhitespace(pwchChars, cchChars);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::processingInstruction ( unsigned short * pwchTarget, int cchTarget, unsigned short * pwchData, int cchData ) {
    HRESULT _hr = raw_processingInstruction(pwchTarget, cchTarget, pwchData, cchData);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXContentHandler::skippedEntity ( unsigned short * pwchName, int cchName ) {
    HRESULT _hr = raw_skippedEntity(pwchName, cchName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline int ISAXLocator::getColumnNumber ( ) {
    int _result;
    HRESULT _hr = raw_getColumnNumber(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int ISAXLocator::getLineNumber ( ) {
    int _result;
    HRESULT _hr = raw_getLineNumber(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned short * ISAXLocator::getPublicId ( ) {
    unsigned short * _result;
    HRESULT _hr = raw_getPublicId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned short * ISAXLocator::getSystemId ( ) {
    unsigned short * _result;
    HRESULT _hr = raw_getSystemId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}





inline int ISAXAttributes::getLength ( ) {
    int _result;
    HRESULT _hr = raw_getLength(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISAXAttributes::getURI ( int nIndex, unsigned short * * ppwchUri, int * pcchUri ) {
    HRESULT _hr = raw_getURI(nIndex, ppwchUri, pcchUri);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getLocalName ( int nIndex, unsigned short * * ppwchLocalName, int * pcchLocalName ) {
    HRESULT _hr = raw_getLocalName(nIndex, ppwchLocalName, pcchLocalName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getQName ( int nIndex, unsigned short * * ppwchQName, int * pcchQName ) {
    HRESULT _hr = raw_getQName(nIndex, ppwchQName, pcchQName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getName ( int nIndex, unsigned short * * ppwchUri, int * pcchUri, unsigned short * * ppwchLocalName, int * pcchLocalName, unsigned short * * ppwchQName, int * pcchQName ) {
    HRESULT _hr = raw_getName(nIndex, ppwchUri, pcchUri, ppwchLocalName, pcchLocalName, ppwchQName, pcchQName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int ISAXAttributes::getIndexFromName ( unsigned short * pwchUri, int cchUri, unsigned short * pwchLocalName, int cchLocalName ) {
    int _result;
    HRESULT _hr = raw_getIndexFromName(pwchUri, cchUri, pwchLocalName, cchLocalName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int ISAXAttributes::getIndexFromQName ( unsigned short * pwchQName, int cchQName ) {
    int _result;
    HRESULT _hr = raw_getIndexFromQName(pwchQName, cchQName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISAXAttributes::getType ( int nIndex, unsigned short * * ppwchType, int * pcchType ) {
    HRESULT _hr = raw_getType(nIndex, ppwchType, pcchType);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getTypeFromName ( unsigned short * pwchUri, int cchUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * * ppwchType, int * pcchType ) {
    HRESULT _hr = raw_getTypeFromName(pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchType, pcchType);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getTypeFromQName ( unsigned short * pwchQName, int cchQName, unsigned short * * ppwchType, int * pcchType ) {
    HRESULT _hr = raw_getTypeFromQName(pwchQName, cchQName, ppwchType, pcchType);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getValue ( int nIndex, unsigned short * * ppwchValue, int * pcchValue ) {
    HRESULT _hr = raw_getValue(nIndex, ppwchValue, pcchValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getValueFromName ( unsigned short * pwchUri, int cchUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * * ppwchValue, int * pcchValue ) {
    HRESULT _hr = raw_getValueFromName(pwchUri, cchUri, pwchLocalName, cchLocalName, ppwchValue, pcchValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXAttributes::getValueFromQName ( unsigned short * pwchQName, int cchQName, unsigned short * * ppwchValue, int * pcchValue ) {
    HRESULT _hr = raw_getValueFromQName(pwchQName, cchQName, ppwchValue, pcchValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT ISAXDTDHandler::notationDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId ) {
    HRESULT _hr = raw_notationDecl(pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXDTDHandler::unparsedEntityDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId, unsigned short * pwchNotationName, int cchNotationName ) {
    HRESULT _hr = raw_unparsedEntityDecl(pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId, pwchNotationName, cchNotationName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT ISAXErrorHandler::error ( struct ISAXLocator * pLocator, unsigned short * pwchErrorMessage, HRESULT hrErrorCode ) {
    HRESULT _hr = raw_error(pLocator, pwchErrorMessage, hrErrorCode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXErrorHandler::fatalError ( struct ISAXLocator * pLocator, unsigned short * pwchErrorMessage, HRESULT hrErrorCode ) {
    HRESULT _hr = raw_fatalError(pLocator, pwchErrorMessage, hrErrorCode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXErrorHandler::ignorableWarning ( struct ISAXLocator * pLocator, unsigned short * pwchErrorMessage, HRESULT hrErrorCode ) {
    HRESULT _hr = raw_ignorableWarning(pLocator, pwchErrorMessage, hrErrorCode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline ISAXXMLReaderPtr ISAXXMLFilter::getParent ( ) {
    struct ISAXXMLReader * _result;
    HRESULT _hr = raw_getParent(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISAXXMLReaderPtr(_result, false);
}

inline HRESULT ISAXXMLFilter::putParent ( struct ISAXXMLReader * pReader ) {
    HRESULT _hr = raw_putParent(pReader);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT ISAXLexicalHandler::startDTD ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId ) {
    HRESULT _hr = raw_startDTD(pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXLexicalHandler::endDTD ( ) {
    HRESULT _hr = raw_endDTD();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXLexicalHandler::startEntity ( unsigned short * pwchName, int cchName ) {
    HRESULT _hr = raw_startEntity(pwchName, cchName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXLexicalHandler::endEntity ( unsigned short * pwchName, int cchName ) {
    HRESULT _hr = raw_endEntity(pwchName, cchName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXLexicalHandler::startCDATA ( ) {
    HRESULT _hr = raw_startCDATA();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXLexicalHandler::endCDATA ( ) {
    HRESULT _hr = raw_endCDATA();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXLexicalHandler::comment ( unsigned short * pwchChars, int cchChars ) {
    HRESULT _hr = raw_comment(pwchChars, cchChars);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT ISAXDeclHandler::elementDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchModel, int cchModel ) {
    HRESULT _hr = raw_elementDecl(pwchName, cchName, pwchModel, cchModel);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXDeclHandler::attributeDecl ( unsigned short * pwchElementName, int cchElementName, unsigned short * pwchAttributeName, int cchAttributeName, unsigned short * pwchType, int cchType, unsigned short * pwchValueDefault, int cchValueDefault, unsigned short * pwchValue, int cchValue ) {
    HRESULT _hr = raw_attributeDecl(pwchElementName, cchElementName, pwchAttributeName, cchAttributeName, pwchType, cchType, pwchValueDefault, cchValueDefault, pwchValue, cchValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXDeclHandler::internalEntityDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchValue, int cchValue ) {
    HRESULT _hr = raw_internalEntityDecl(pwchName, cchName, pwchValue, cchValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISAXDeclHandler::externalEntityDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId ) {
    HRESULT _hr = raw_externalEntityDecl(pwchName, cchName, pwchPublicId, cchPublicId, pwchSystemId, cchSystemId);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline VARIANT_BOOL IVBSAXXMLReader::getFeature ( _bstr_t strName ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_getFeature(strName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IVBSAXXMLReader::putFeature ( _bstr_t strName, VARIANT_BOOL fValue ) {
    HRESULT _hr = raw_putFeature(strName, fValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IVBSAXXMLReader::getProperty ( _bstr_t strName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getProperty(strName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IVBSAXXMLReader::putProperty ( _bstr_t strName, const _variant_t & varValue ) {
    HRESULT _hr = raw_putProperty(strName, varValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IVBSAXEntityResolverPtr IVBSAXXMLReader::GetentityResolver ( ) {
    struct IVBSAXEntityResolver * _result;
    HRESULT _hr = get_entityResolver(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVBSAXEntityResolverPtr(_result, false);
}

inline void IVBSAXXMLReader::PutRefentityResolver ( struct IVBSAXEntityResolver * oResolver ) {
    HRESULT _hr = putref_entityResolver(oResolver);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IVBSAXContentHandlerPtr IVBSAXXMLReader::GetcontentHandler ( ) {
    struct IVBSAXContentHandler * _result;
    HRESULT _hr = get_contentHandler(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVBSAXContentHandlerPtr(_result, false);
}

inline void IVBSAXXMLReader::PutRefcontentHandler ( struct IVBSAXContentHandler * oHandler ) {
    HRESULT _hr = putref_contentHandler(oHandler);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IVBSAXDTDHandlerPtr IVBSAXXMLReader::GetdtdHandler ( ) {
    struct IVBSAXDTDHandler * _result;
    HRESULT _hr = get_dtdHandler(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVBSAXDTDHandlerPtr(_result, false);
}

inline void IVBSAXXMLReader::PutRefdtdHandler ( struct IVBSAXDTDHandler * oHandler ) {
    HRESULT _hr = putref_dtdHandler(oHandler);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IVBSAXErrorHandlerPtr IVBSAXXMLReader::GeterrorHandler ( ) {
    struct IVBSAXErrorHandler * _result;
    HRESULT _hr = get_errorHandler(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVBSAXErrorHandlerPtr(_result, false);
}

inline void IVBSAXXMLReader::PutReferrorHandler ( struct IVBSAXErrorHandler * oHandler ) {
    HRESULT _hr = putref_errorHandler(oHandler);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IVBSAXXMLReader::GetbaseURL ( ) {
    BSTR _result;
    HRESULT _hr = get_baseURL(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IVBSAXXMLReader::PutbaseURL ( _bstr_t strBaseURL ) {
    HRESULT _hr = put_baseURL(strBaseURL);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IVBSAXXMLReader::GetsecureBaseURL ( ) {
    BSTR _result;
    HRESULT _hr = get_secureBaseURL(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IVBSAXXMLReader::PutsecureBaseURL ( _bstr_t strSecureBaseURL ) {
    HRESULT _hr = put_secureBaseURL(strSecureBaseURL);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IVBSAXXMLReader::parse ( const _variant_t & varInput ) {
    HRESULT _hr = raw_parse(varInput);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXXMLReader::parseURL ( _bstr_t strURL ) {
    HRESULT _hr = raw_parseURL(strURL);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline _variant_t IVBSAXEntityResolver::resolveEntity ( BSTR * strPublicId, BSTR * strSystemId ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_resolveEntity(strPublicId, strSystemId, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}





inline void IVBSAXContentHandler::PutRefdocumentLocator ( struct IVBSAXLocator * _arg1 ) {
    HRESULT _hr = putref_documentLocator(_arg1);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IVBSAXContentHandler::startDocument ( ) {
    HRESULT _hr = raw_startDocument();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::endDocument ( ) {
    HRESULT _hr = raw_endDocument();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::startPrefixMapping ( BSTR * strPrefix, BSTR * strURI ) {
    HRESULT _hr = raw_startPrefixMapping(strPrefix, strURI);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::endPrefixMapping ( BSTR * strPrefix ) {
    HRESULT _hr = raw_endPrefixMapping(strPrefix);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::startElement ( BSTR * strNamespaceURI, BSTR * strLocalName, BSTR * strQName, struct IVBSAXAttributes * oAttributes ) {
    HRESULT _hr = raw_startElement(strNamespaceURI, strLocalName, strQName, oAttributes);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::endElement ( BSTR * strNamespaceURI, BSTR * strLocalName, BSTR * strQName ) {
    HRESULT _hr = raw_endElement(strNamespaceURI, strLocalName, strQName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::characters ( BSTR * strChars ) {
    HRESULT _hr = raw_characters(strChars);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::ignorableWhitespace ( BSTR * strChars ) {
    HRESULT _hr = raw_ignorableWhitespace(strChars);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::processingInstruction ( BSTR * strTarget, BSTR * strData ) {
    HRESULT _hr = raw_processingInstruction(strTarget, strData);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXContentHandler::skippedEntity ( BSTR * strName ) {
    HRESULT _hr = raw_skippedEntity(strName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline int IVBSAXLocator::GetcolumnNumber ( ) {
    int _result;
    HRESULT _hr = get_columnNumber(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IVBSAXLocator::GetlineNumber ( ) {
    int _result;
    HRESULT _hr = get_lineNumber(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IVBSAXLocator::GetpublicId ( ) {
    BSTR _result;
    HRESULT _hr = get_publicId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXLocator::GetsystemId ( ) {
    BSTR _result;
    HRESULT _hr = get_systemId(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}





inline int IVBSAXAttributes::Getlength ( ) {
    int _result;
    HRESULT _hr = get_length(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IVBSAXAttributes::getURI ( int nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getURI(nIndex, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXAttributes::getLocalName ( int nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getLocalName(nIndex, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXAttributes::getQName ( int nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getQName(nIndex, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int IVBSAXAttributes::getIndexFromName ( _bstr_t strURI, _bstr_t strLocalName ) {
    int _result;
    HRESULT _hr = raw_getIndexFromName(strURI, strLocalName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IVBSAXAttributes::getIndexFromQName ( _bstr_t strQName ) {
    int _result;
    HRESULT _hr = raw_getIndexFromQName(strQName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IVBSAXAttributes::getType ( int nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getType(nIndex, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXAttributes::getTypeFromName ( _bstr_t strURI, _bstr_t strLocalName ) {
    BSTR _result;
    HRESULT _hr = raw_getTypeFromName(strURI, strLocalName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXAttributes::getTypeFromQName ( _bstr_t strQName ) {
    BSTR _result;
    HRESULT _hr = raw_getTypeFromQName(strQName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXAttributes::getValue ( int nIndex ) {
    BSTR _result;
    HRESULT _hr = raw_getValue(nIndex, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXAttributes::getValueFromName ( _bstr_t strURI, _bstr_t strLocalName ) {
    BSTR _result;
    HRESULT _hr = raw_getValueFromName(strURI, strLocalName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVBSAXAttributes::getValueFromQName ( _bstr_t strQName ) {
    BSTR _result;
    HRESULT _hr = raw_getValueFromQName(strQName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}





inline HRESULT IVBSAXDTDHandler::notationDecl ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId ) {
    HRESULT _hr = raw_notationDecl(strName, strPublicId, strSystemId);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXDTDHandler::unparsedEntityDecl ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId, BSTR * strNotationName ) {
    HRESULT _hr = raw_unparsedEntityDecl(strName, strPublicId, strSystemId, strNotationName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT IVBSAXErrorHandler::error ( struct IVBSAXLocator * oLocator, BSTR * strErrorMessage, long nErrorCode ) {
    HRESULT _hr = raw_error(oLocator, strErrorMessage, nErrorCode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXErrorHandler::fatalError ( struct IVBSAXLocator * oLocator, BSTR * strErrorMessage, long nErrorCode ) {
    HRESULT _hr = raw_fatalError(oLocator, strErrorMessage, nErrorCode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXErrorHandler::ignorableWarning ( struct IVBSAXLocator * oLocator, BSTR * strErrorMessage, long nErrorCode ) {
    HRESULT _hr = raw_ignorableWarning(oLocator, strErrorMessage, nErrorCode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline IVBSAXXMLReaderPtr IVBSAXXMLFilter::Getparent ( ) {
    struct IVBSAXXMLReader * _result;
    HRESULT _hr = get_parent(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVBSAXXMLReaderPtr(_result, false);
}

inline void IVBSAXXMLFilter::PutRefparent ( struct IVBSAXXMLReader * oReader ) {
    HRESULT _hr = putref_parent(oReader);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}





inline HRESULT IVBSAXLexicalHandler::startDTD ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId ) {
    HRESULT _hr = raw_startDTD(strName, strPublicId, strSystemId);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXLexicalHandler::endDTD ( ) {
    HRESULT _hr = raw_endDTD();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXLexicalHandler::startEntity ( BSTR * strName ) {
    HRESULT _hr = raw_startEntity(strName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXLexicalHandler::endEntity ( BSTR * strName ) {
    HRESULT _hr = raw_endEntity(strName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXLexicalHandler::startCDATA ( ) {
    HRESULT _hr = raw_startCDATA();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXLexicalHandler::endCDATA ( ) {
    HRESULT _hr = raw_endCDATA();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXLexicalHandler::comment ( BSTR * strChars ) {
    HRESULT _hr = raw_comment(strChars);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT IVBSAXDeclHandler::elementDecl ( BSTR * strName, BSTR * strModel ) {
    HRESULT _hr = raw_elementDecl(strName, strModel);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXDeclHandler::attributeDecl ( BSTR * strElementName, BSTR * strAttributeName, BSTR * strType, BSTR * strValueDefault, BSTR * strValue ) {
    HRESULT _hr = raw_attributeDecl(strElementName, strAttributeName, strType, strValueDefault, strValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXDeclHandler::internalEntityDecl ( BSTR * strName, BSTR * strValue ) {
    HRESULT _hr = raw_internalEntityDecl(strName, strValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVBSAXDeclHandler::externalEntityDecl ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId ) {
    HRESULT _hr = raw_externalEntityDecl(strName, strPublicId, strSystemId);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline void IMXWriter::Putoutput ( const _variant_t & varDestination ) {
    HRESULT _hr = put_output(varDestination);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IMXWriter::Getoutput ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_output(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMXWriter::Putencoding ( _bstr_t strEncoding ) {
    HRESULT _hr = put_encoding(strEncoding);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMXWriter::Getencoding ( ) {
    BSTR _result;
    HRESULT _hr = get_encoding(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMXWriter::PutbyteOrderMark ( VARIANT_BOOL fWriteByteOrderMark ) {
    HRESULT _hr = put_byteOrderMark(fWriteByteOrderMark);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMXWriter::GetbyteOrderMark ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_byteOrderMark(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMXWriter::Putindent ( VARIANT_BOOL fIndentMode ) {
    HRESULT _hr = put_indent(fIndentMode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMXWriter::Getindent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_indent(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMXWriter::Putstandalone ( VARIANT_BOOL fValue ) {
    HRESULT _hr = put_standalone(fValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMXWriter::Getstandalone ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_standalone(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMXWriter::PutomitXMLDeclaration ( VARIANT_BOOL fValue ) {
    HRESULT _hr = put_omitXMLDeclaration(fValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMXWriter::GetomitXMLDeclaration ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_omitXMLDeclaration(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMXWriter::Putversion ( _bstr_t strVersion ) {
    HRESULT _hr = put_version(strVersion);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMXWriter::Getversion ( ) {
    BSTR _result;
    HRESULT _hr = get_version(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMXWriter::PutdisableOutputEscaping ( VARIANT_BOOL fValue ) {
    HRESULT _hr = put_disableOutputEscaping(fValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMXWriter::GetdisableOutputEscaping ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_disableOutputEscaping(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMXWriter::flush ( ) {
    HRESULT _hr = raw_flush();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT IMXAttributes::addAttribute ( _bstr_t strURI, _bstr_t strLocalName, _bstr_t strQName, _bstr_t strType, _bstr_t strValue ) {
    HRESULT _hr = raw_addAttribute(strURI, strLocalName, strQName, strType, strValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::addAttributeFromIndex ( const _variant_t & varAtts, int nIndex ) {
    HRESULT _hr = raw_addAttributeFromIndex(varAtts, nIndex);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::clear ( ) {
    HRESULT _hr = raw_clear();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::removeAttribute ( int nIndex ) {
    HRESULT _hr = raw_removeAttribute(nIndex);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::setAttribute ( int nIndex, _bstr_t strURI, _bstr_t strLocalName, _bstr_t strQName, _bstr_t strType, _bstr_t strValue ) {
    HRESULT _hr = raw_setAttribute(nIndex, strURI, strLocalName, strQName, strType, strValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::setAttributes ( const _variant_t & varAtts ) {
    HRESULT _hr = raw_setAttributes(varAtts);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::setLocalName ( int nIndex, _bstr_t strLocalName ) {
    HRESULT _hr = raw_setLocalName(nIndex, strLocalName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::setQName ( int nIndex, _bstr_t strQName ) {
    HRESULT _hr = raw_setQName(nIndex, strQName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::setType ( int nIndex, _bstr_t strType ) {
    HRESULT _hr = raw_setType(nIndex, strType);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::setURI ( int nIndex, _bstr_t strURI ) {
    HRESULT _hr = raw_setURI(nIndex, strURI);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXAttributes::setValue ( int nIndex, _bstr_t strValue ) {
    HRESULT _hr = raw_setValue(nIndex, strValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT IMXReaderControl::abort ( ) {
    HRESULT _hr = raw_abort();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXReaderControl::resume ( ) {
    HRESULT _hr = raw_resume();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMXReaderControl::suspend ( ) {
    HRESULT _hr = raw_suspend();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline void IXMLElementCollection::Putlength ( long p ) {
    HRESULT _hr = put_length(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IXMLElementCollection::Getlength ( ) {
    long _result;
    HRESULT _hr = get_length(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IXMLElementCollection::Get_newEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__newEnum(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr IXMLElementCollection::item ( const _variant_t & var1, const _variant_t & var2 ) {
    IDispatch * _result;
    HRESULT _hr = raw_item(var1, var2, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}





inline IXMLElementPtr IXMLDocument::Getroot ( ) {
    struct IXMLElement * _result;
    HRESULT _hr = get_root(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElementPtr(_result, false);
}

inline _bstr_t IXMLDocument::GetfileSize ( ) {
    BSTR _result;
    HRESULT _hr = get_fileSize(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument::GetfileModifiedDate ( ) {
    BSTR _result;
    HRESULT _hr = get_fileModifiedDate(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument::GetfileUpdatedDate ( ) {
    BSTR _result;
    HRESULT _hr = get_fileUpdatedDate(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument::Geturl ( ) {
    BSTR _result;
    HRESULT _hr = get_url(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDocument::Puturl ( _bstr_t p ) {
    HRESULT _hr = put_url(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXMLDocument::GetmimeType ( ) {
    BSTR _result;
    HRESULT _hr = get_mimeType(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IXMLDocument::GetreadyState ( ) {
    long _result;
    HRESULT _hr = get_readyState(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLDocument::Getcharset ( ) {
    BSTR _result;
    HRESULT _hr = get_charset(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDocument::Putcharset ( _bstr_t p ) {
    HRESULT _hr = put_charset(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXMLDocument::Getversion ( ) {
    BSTR _result;
    HRESULT _hr = get_version(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument::Getdoctype ( ) {
    BSTR _result;
    HRESULT _hr = get_doctype(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument::GetdtdURL ( ) {
    BSTR _result;
    HRESULT _hr = get_dtdURL(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IXMLElementPtr IXMLDocument::createElement ( const _variant_t & vType, const _variant_t & var1 ) {
    struct IXMLElement * _result;
    HRESULT _hr = raw_createElement(vType, var1, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElementPtr(_result, false);
}





inline _bstr_t IXMLElement::GettagName ( ) {
    BSTR _result;
    HRESULT _hr = get_tagName(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLElement::PuttagName ( _bstr_t p ) {
    HRESULT _hr = put_tagName(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IXMLElementPtr IXMLElement::Getparent ( ) {
    struct IXMLElement * _result;
    HRESULT _hr = get_parent(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElementPtr(_result, false);
}

inline HRESULT IXMLElement::setAttribute ( _bstr_t strPropertyName, const _variant_t & PropertyValue ) {
    HRESULT _hr = raw_setAttribute(strPropertyName, PropertyValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IXMLElement::getAttribute ( _bstr_t strPropertyName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getAttribute(strPropertyName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IXMLElement::removeAttribute ( _bstr_t strPropertyName ) {
    HRESULT _hr = raw_removeAttribute(strPropertyName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IXMLElementCollectionPtr IXMLElement::Getchildren ( ) {
    struct IXMLElementCollection * _result;
    HRESULT _hr = get_children(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElementCollectionPtr(_result, false);
}

inline long IXMLElement::Gettype ( ) {
    long _result;
    HRESULT _hr = get_type(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLElement::Gettext ( ) {
    BSTR _result;
    HRESULT _hr = get_text(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLElement::Puttext ( _bstr_t p ) {
    HRESULT _hr = put_text(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXMLElement::addChild ( struct IXMLElement * pChildElem, long lIndex, long lReserved ) {
    HRESULT _hr = raw_addChild(pChildElem, lIndex, lReserved);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLElement::removeChild ( struct IXMLElement * pChildElem ) {
    HRESULT _hr = raw_removeChild(pChildElem);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline IXMLElement2Ptr IXMLDocument2::Getroot ( ) {
    struct IXMLElement2 * _result;
    HRESULT _hr = get_root(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElement2Ptr(_result, false);
}

inline _bstr_t IXMLDocument2::GetfileSize ( ) {
    BSTR _result;
    HRESULT _hr = get_fileSize(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument2::GetfileModifiedDate ( ) {
    BSTR _result;
    HRESULT _hr = get_fileModifiedDate(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument2::GetfileUpdatedDate ( ) {
    BSTR _result;
    HRESULT _hr = get_fileUpdatedDate(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument2::Geturl ( ) {
    BSTR _result;
    HRESULT _hr = get_url(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDocument2::Puturl ( _bstr_t p ) {
    HRESULT _hr = put_url(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXMLDocument2::GetmimeType ( ) {
    BSTR _result;
    HRESULT _hr = get_mimeType(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IXMLDocument2::GetreadyState ( ) {
    long _result;
    HRESULT _hr = get_readyState(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLDocument2::Getcharset ( ) {
    BSTR _result;
    HRESULT _hr = get_charset(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDocument2::Putcharset ( _bstr_t p ) {
    HRESULT _hr = put_charset(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXMLDocument2::Getversion ( ) {
    BSTR _result;
    HRESULT _hr = get_version(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument2::Getdoctype ( ) {
    BSTR _result;
    HRESULT _hr = get_doctype(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLDocument2::GetdtdURL ( ) {
    BSTR _result;
    HRESULT _hr = get_dtdURL(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IXMLElement2Ptr IXMLDocument2::createElement ( const _variant_t & vType, const _variant_t & var1 ) {
    struct IXMLElement2 * _result;
    HRESULT _hr = raw_createElement(vType, var1, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElement2Ptr(_result, false);
}

inline VARIANT_BOOL IXMLDocument2::Getasync ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_async(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXMLDocument2::Putasync ( VARIANT_BOOL pf ) {
    HRESULT _hr = put_async(pf);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}





inline _bstr_t IXMLElement2::GettagName ( ) {
    BSTR _result;
    HRESULT _hr = get_tagName(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLElement2::PuttagName ( _bstr_t p ) {
    HRESULT _hr = put_tagName(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IXMLElement2Ptr IXMLElement2::Getparent ( ) {
    struct IXMLElement2 * _result;
    HRESULT _hr = get_parent(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElement2Ptr(_result, false);
}

inline HRESULT IXMLElement2::setAttribute ( _bstr_t strPropertyName, const _variant_t & PropertyValue ) {
    HRESULT _hr = raw_setAttribute(strPropertyName, PropertyValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IXMLElement2::getAttribute ( _bstr_t strPropertyName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getAttribute(strPropertyName, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IXMLElement2::removeAttribute ( _bstr_t strPropertyName ) {
    HRESULT _hr = raw_removeAttribute(strPropertyName);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IXMLElementCollectionPtr IXMLElement2::Getchildren ( ) {
    struct IXMLElementCollection * _result;
    HRESULT _hr = get_children(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElementCollectionPtr(_result, false);
}

inline long IXMLElement2::Gettype ( ) {
    long _result;
    HRESULT _hr = get_type(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLElement2::Gettext ( ) {
    BSTR _result;
    HRESULT _hr = get_text(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLElement2::Puttext ( _bstr_t p ) {
    HRESULT _hr = put_text(p);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXMLElement2::addChild ( struct IXMLElement2 * pChildElem, long lIndex, long lReserved ) {
    HRESULT _hr = raw_addChild(pChildElem, lIndex, lReserved);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLElement2::removeChild ( struct IXMLElement2 * pChildElem ) {
    HRESULT _hr = raw_removeChild(pChildElem);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IXMLElementCollectionPtr IXMLElement2::Getattributes ( ) {
    struct IXMLElementCollection * _result;
    HRESULT _hr = get_attributes(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLElementCollectionPtr(_result, false);
}





inline _bstr_t IXMLAttribute::Getname ( ) {
    BSTR _result;
    HRESULT _hr = get_name(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLAttribute::Getvalue ( ) {
    BSTR _result;
    HRESULT _hr = get_value(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}





inline HRESULT IXMLError::GetErrorInfo ( struct _xml_error * pErrorReturn ) {
    HRESULT _hr = raw_GetErrorInfo(pErrorReturn);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline _bstr_t IXMLDOMSelection::Getexpr ( ) {
    BSTR _result;
    HRESULT _hr = get_expr(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXMLDOMSelection::Putexpr ( _bstr_t expression ) {
    HRESULT _hr = put_expr(expression);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IXMLDOMNodePtr IXMLDOMSelection::Getcontext ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = get_context(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline void IXMLDOMSelection::PutRefcontext ( struct IXMLDOMNode * ppNode ) {
    HRESULT _hr = putref_context(ppNode);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IXMLDOMNodePtr IXMLDOMSelection::peekNode ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_peekNode(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMSelection::matches ( struct IXMLDOMNode * pNode ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_matches(pNode, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline IXMLDOMNodePtr IXMLDOMSelection::removeNext ( ) {
    struct IXMLDOMNode * _result;
    HRESULT _hr = raw_removeNext(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMNodePtr(_result, false);
}

inline HRESULT IXMLDOMSelection::removeAll ( ) {
    HRESULT _hr = raw_removeAll();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IXMLDOMSelectionPtr IXMLDOMSelection::clone ( ) {
    struct IXMLDOMSelection * _result;
    HRESULT _hr = raw_clone(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMSelectionPtr(_result, false);
}

inline _variant_t IXMLDOMSelection::getProperty ( _bstr_t name ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getProperty(name, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IXMLDOMSelection::setProperty ( _bstr_t name, const _variant_t & value ) {
    HRESULT _hr = raw_setProperty(name, value);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}





inline HRESULT XMLDOMDocumentEvents::ondataavailable ( ) {
    HRESULT _result;
    _com_dispatch_method(this, 0xc6, 0x1, VT_ERROR, (void*)&_result, 0);
    return _result;
}

inline HRESULT XMLDOMDocumentEvents::onreadystatechange ( ) {
    HRESULT _result;
    _com_dispatch_method(this, (-609), 0x1, VT_ERROR, (void*)&_result, 0);
    return _result;
}





inline IXMLDOMDocumentPtr IDSOControl::GetXMLDocument ( ) {
    struct IXMLDOMDocument * _result;
    HRESULT _hr = get_XMLDocument(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IXMLDOMDocumentPtr(_result, false);
}

inline void IDSOControl::PutXMLDocument ( struct IXMLDOMDocument * ppDoc ) {
    HRESULT _hr = put_XMLDocument(ppDoc);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDSOControl::GetJavaDSOCompatible ( ) {
    long _result;
    HRESULT _hr = get_JavaDSOCompatible(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDSOControl::PutJavaDSOCompatible ( long fJavaDSOCompatible ) {
    HRESULT _hr = put_JavaDSOCompatible(fJavaDSOCompatible);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDSOControl::GetreadyState ( ) {
    long _result;
    HRESULT _hr = get_readyState(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}





inline HRESULT IXMLHTTPRequest::open ( _bstr_t bstrMethod, _bstr_t bstrUrl, const _variant_t & varAsync, const _variant_t & bstrUser, const _variant_t & bstrPassword ) {
    HRESULT _hr = raw_open(bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLHTTPRequest::setRequestHeader ( _bstr_t bstrHeader, _bstr_t bstrValue ) {
    HRESULT _hr = raw_setRequestHeader(bstrHeader, bstrValue);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IXMLHTTPRequest::getResponseHeader ( _bstr_t bstrHeader ) {
    BSTR _result;
    HRESULT _hr = raw_getResponseHeader(bstrHeader, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXMLHTTPRequest::getAllResponseHeaders ( ) {
    BSTR _result;
    HRESULT _hr = raw_getAllResponseHeaders(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IXMLHTTPRequest::send ( const _variant_t & varBody ) {
    HRESULT _hr = raw_send(varBody);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXMLHTTPRequest::abort ( ) {
    HRESULT _hr = raw_abort();
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IXMLHTTPRequest::Getstatus ( ) {
    long _result;
    HRESULT _hr = get_status(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXMLHTTPRequest::GetstatusText ( ) {
    BSTR _result;
    HRESULT _hr = get_statusText(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr IXMLHTTPRequest::GetresponseXML ( ) {
    IDispatch * _result;
    HRESULT _hr = get_responseXML(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IXMLHTTPRequest::GetresponseText ( ) {
    BSTR _result;
    HRESULT _hr = get_responseText(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IXMLHTTPRequest::GetresponseBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_responseBody(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IXMLHTTPRequest::GetresponseStream ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_responseStream(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IXMLHTTPRequest::GetreadyState ( ) {
    long _result;
    HRESULT _hr = get_readyState(&_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXMLHTTPRequest::Putonreadystatechange ( IDispatch * _arg1 ) {
    HRESULT _hr = put_onreadystatechange(_arg1);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
}





inline HRESULT IServerXMLHTTPRequest::setTimeouts ( long resolveTimeout, long connectTimeout, long sendTimeout, long receiveTimeout ) {
    HRESULT _hr = raw_setTimeouts(resolveTimeout, connectTimeout, sendTimeout, receiveTimeout);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IServerXMLHTTPRequest::waitForResponse ( const _variant_t & timeoutInSeconds ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_waitForResponse(timeoutInSeconds, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IServerXMLHTTPRequest::getOption ( SERVERXMLHTTP_OPTION option ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getOption(option, &_result);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IServerXMLHTTPRequest::setOption ( SERVERXMLHTTP_OPTION option, const _variant_t & value ) {
    HRESULT _hr = raw_setOption(option, value);
    if (((HRESULT)(_hr)<0)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
#line 3607 "d:\\lexnet 1.4\\idocpost\\msxml3.tlh"

} 

#pragma pack(pop)
#line 23 "Upload.cpp"




void InitFileDialog( CFileDialog& FileDlg, const char* pszDlgTitle, const char* pszIniDir )
{
  if ((pszDlgTitle != 0) && (lstrlenA(pszDlgTitle) > 0))
  {
    FileDlg.m_ofn.lpstrTitle = pszDlgTitle;
  }

  if ((pszIniDir != 0) && (lstrlenA(pszIniDir) > 0))
  {
    FileDlg.m_ofn.lpstrInitialDir = pszIniDir;
  }
}





CString PromptForFileName( BOOL bForOpen, const char* pszDefExtension, const char* pszFilter, 
                           const char* pszDlgTitle, const char* pszIniDir, DWORD Flags )
{
  DWORD    dlgFlags = 0;
  CString  defName("*.");
  CString  filePath;

  if (Flags == 0)
  {


    if (bForOpen)
    {
      dlgFlags |= 0x00001000;
    }
    else
    {
      dlgFlags |= 0x00000002;
    }
  }

  defName += pszDefExtension;

  CFileDialog  fileDlg( bForOpen, pszDefExtension, defName, dlgFlags, pszFilter );
  InitFileDialog( fileDlg, pszDlgTitle, pszIniDir );




  if (fileDlg.DoModal() == 1)
  {
    filePath = fileDlg.GetPathName();
  }



  return  filePath;
} 


DWORD GetHTTPError(HINTERNET hInet)
{
  DWORD dwStatus = 0;
  DWORD dwStatusSize = sizeof(dwStatus);
  DWORD dwIndex = 0;
  DWORD Err = 0;

  if (!HttpQueryInfoA(hInet, 19 | 0x20000000, &dwStatus, &dwStatusSize, &dwIndex))
  {
    Err = GetLastHR();
  }
  else if (dwStatus >= 400)
  {
    Err = HTTP_STATUS_TO_ERR(dwStatus);
  }

  return Err;
}









LONG CUpload::SendFile( HINTERNET hInetReq, const char* FileName )
{
  __CUsesErrorLog __uelLocalError("CUpload::SendFile", "Upload.cpp");;
  LONG  Err = 0;

  INTERNET_BUFFERS BufferIn = {0};

  DWORD   BytesRead;
  DWORD   BytesWritten;
  BYTE    pBuffer[100000];            
  HANDLE  hFile = ((HANDLE)(LONG_PTR)-1);

  BufferIn.dwStructSize = sizeof(INTERNET_BUFFERS);

  hFile = CreateFileA( FileName, (0x80000000L), 0x00000001, 0, 3, 
                      0x00000080, 0);

  if (hFile == ((HANDLE)(LONG_PTR)-1))
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 129; goto End; } }

  BufferIn.dwBufferTotal = GetFileSize( hFile, 0 );

  if (!HttpSendRequestExA( hInetReq, &BufferIn, 0, 0x00000008 | 0x00000004, 0 ))
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 134; goto End; } }

  do
  {
    if (!ReadFile( hFile, pBuffer, sizeof(pBuffer), &BytesRead, 0 ))
    {
      Err = GetLastHR();
      { if (Err) { GetErrorManager().ReportError(Err, "Upload.cpp", 141, ""); } }
      break;
    }

    if (!InternetWriteFile( hInetReq, pBuffer, BytesRead, &BytesWritten ))
    {
      Err = GetLastHR();
      { if (Err) { GetErrorManager().ReportError(Err, "Upload.cpp", 148, ""); } }
      break;
    }
  }
  while (BytesRead == sizeof(pBuffer));

  if (!HttpEndRequestA( hInetReq, 0, 0x00000008 | 0x00000004, 0 ))
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 155; goto End; } }

  Err = GetHTTPError(hInetReq);
  { if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 158; goto End; } }

End:
  if (hFile != ((HANDLE)(LONG_PTR)-1))
    CloseHandle( hFile );

  return  Err;
}






HRESULT __stdcall CUpload::UploadFile( BSTR FileName, BSTR Server, BSTR URL, long bRemove, VARIANT* pErrorCode )
{
  __CUsesErrorLog __uelLocalError("CUpload::UploadFile", "Upload.cpp");;


  long     Err         = 0;
  CString  Archive     = FileName;





  ((pErrorCode)->vt) = VT_I4;
  ((pErrorCode)->lVal) = 0;

  HINTERNET  hInetOpen      = 0;
  HINTERNET  hInetConnect   = 0;
  HINTERNET  hInetReq       = 0;
  DWORD      Flags          = 0x80000000 | 0x04000000 | 
                              0x00400000;
  TCHAR      szAccept[]     = "*/*";
  LPSTR      AcceptTypes[2] = {0}; 
  AcceptTypes[0]            = szAccept;  

  CString  URLStr      = URL;
  CString  ServerStr   = Server;
  CString  ArchiveName;
  USHORT   usPort      = 0;    
  int      iDotPos     = ServerStr.Find(":");             


  hInetOpen = InternetOpenA( "POSTer", 0, 0, 0, 0 );
  if (!hInetOpen)
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 205; goto End; } }

  if (iDotPos != -1)       
  {
    CString PortStr = ServerStr.Mid( iDotPos + 1 );
    usPort     = (USHORT) atoi( PortStr );
    ServerStr = ServerStr.Left( iDotPos );
  }

 	hInetConnect = InternetConnectA( hInetOpen, ServerStr, usPort, "",  "", 
                                  3, 0, 0 );
  if (!hInetConnect)
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 217; goto End; } }

  
  if (URLStr[URLStr.GetLength()-1] == '/')
  {
    LNGetFileName(Archive, ArchiveName);

    URLStr += ArchiveName;
  }

  if (usPort == 443) 
    Flags |= 0x00800000;

  hInetReq = HttpOpenRequestA( hInetConnect, "PUT", URLStr, "HTTP/1.0", "", 
                             (LPCTSTR*)AcceptTypes, Flags, 0 );
  if (!hInetReq)
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 233; goto End; } }

  Err = SendFile( hInetReq, Archive );

  if ((Err == 0) && bRemove)
    ::DeleteFileA(Archive);

End:
  if (hInetReq)       InternetCloseHandle( hInetReq );
  if (hInetConnect)   InternetCloseHandle( hInetConnect );
  if (hInetOpen)      InternetCloseHandle( hInetOpen );

  ((pErrorCode)->lVal) = Err;

  if (((pErrorCode)->lVal))
  {
    ErrorLog( "UploadFile.Archive = %s",   Archive );
    ErrorLog( "UploadFile.URLStr = %s",    URLStr );
    ErrorLog( "UploadFile.ServerStr = %s", ServerStr );
  }

  return  ((HRESULT)0x00000000L);
}





HRESULT __stdcall CUpload::SelectFile( long bSaving, VARIANT* pFileName )
{
  __CUsesErrorLog __uelLocalError("CUpload::SelectFile", "Upload.cpp");;





  AfxSetResourceHandle( _Module.GetResourceInstance() );

  CString  FileName = "";
  CString  Title, Filter;

  Title.LoadStringA(  1 );
  Filter.LoadStringA( 2 );


  








  BOOL  bForOpen = !bSaving;
  FileName = PromptForFileName( bForOpen, "*", Filter, Title, "", 0 );

  ((pFileName)->vt)   = VT_BSTR;
  ((pFileName)->bstrVal) = FileName.AllocSysString();

  return  ((HRESULT)0x00000000L);
}

HRESULT __stdcall CUpload::SelectDir(VARIANT* pDir)
{
  __CUsesErrorLog __uelLocalError("CUpload::SelectDir", "Upload.cpp");;


   CString Dir;

   AfxSetResourceHandle(_Module.GetResourceInstance());

   CString  Title;
   Title.LoadStringA(3);

   CBrowseDirectory Browse;
   Dir = Browse.Do(Title, 0);

   ((pDir)->vt)   = VT_BSTR;
   ((pDir)->bstrVal) = Dir.AllocSysString();

   return(((HRESULT)0x00000000L));
}





HRESULT __stdcall CUpload::DownloadFile( BSTR URL, BSTR LocalPath, VARIANT* pFileLoc, VARIANT* pErrorCode )
{
  __CUsesErrorLog __uelLocalError("CUpload::DownloadFile", "Upload.cpp");;




  ((pErrorCode)->vt) = VT_I4;
  ((pErrorCode)->lVal) = 0;
  ((pFileLoc)->vt)   = VT_BSTR;

  HINTERNET  hInetOpen     = 0;
  HINTERNET  hInetConnect  = 0;
  CHAR       Head[]        = "Accept: */*\r\n\r\n";
  FILE*      hDst;

  long       Err           = 0;
  CString    URLStr        = URL;
  CString    LocalPathStr  = LocalPath;
  CString    Archive;
  CString    fichName;                                
  CString    URLPath;
  int        iParamsPos;
  CString    strTempPath;
  DWORD      dwFileAttr;
  int        iSlashPos;

  hInetOpen = InternetOpenA( "DOWNer", 0, 0, 0, 0 );
  if (!hInetOpen)
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 350; goto End; } }

  hInetConnect = InternetOpenUrlA( hInetOpen, URLStr, Head, lstrlenA(Head), 
                                  0x04000000, 0 );
  if (!hInetConnect)
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 355; goto End; } }

  Err = GetHTTPError(hInetConnect);
  { if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 358; goto End; } }

  iParamsPos = URLStr.FindOneOf("#?");
  if (iParamsPos != -1)
    URLPath = URLStr.Left(iParamsPos);
  else
    URLPath = URLStr;

  LNGetFileName(URLPath, fichName);

  if (LocalPathStr.IsEmpty())
  {
    
    ::GetTempPathA(260, strTempPath.GetBufferSetLength(260));
    strTempPath.ReleaseBuffer();
    Archive.Format( "%s%s", strTempPath, fichName );
  }
  else if (LocalPathStr.FindOneOf("\\/") != -1)
  {
    
    char lastChar = LocalPathStr[LocalPathStr.GetLength() - 1];
    if (lastChar == '\\' || lastChar == '/')
    {
      
      Archive.Format("%s%s", LocalPathStr, fichName);
    }
    else
    {
      
      dwFileAttr = ::GetFileAttributesA(LocalPathStr);
      if ((dwFileAttr != ((DWORD)-1)) && (dwFileAttr & 0x00000010) == 0x00000010)
        Archive.Format( "%s\\%s", LocalPathStr, fichName );    
      else
        Archive = LocalPathStr;      
    }
  }
  else
  {
    
    ::GetTempPathA(260, strTempPath.GetBufferSetLength(260));
    strTempPath.ReleaseBuffer();
    Archive.Format("%s%s", strTempPath, LocalPathStr);
  }

  
  iSlashPos = (((Archive.ReverseFind('\\')) > (Archive.ReverseFind('/'))) ? (Archive.ReverseFind('\\')) : (Archive.ReverseFind('/')));
  LocalPathStr = iSlashPos != -1 ? Archive.Left(iSlashPos) : "";
  CreateDir(LocalPathStr);

  hDst = fopen( Archive, "wb" );
  if (hDst == 0)
    { Err = GetLastHR(); if (Err) { __uelLocalError.m_rc = Err; __uelLocalError.m_Line = 409; goto End; } }
  else
  {
    char   Buffer[100000 + 1];
    DWORD  BytesRead = 1;

    while (BytesRead)
    {
      if (!InternetReadFile( hInetConnect, Buffer, 100000, &BytesRead ))
      {
        Err = GetLastHR();
        { if (Err) { GetErrorManager().ReportError(Err, "Upload.cpp", 420, ""); } }
        break;
      }

      if (fwrite( Buffer, 1, BytesRead, hDst ) != BytesRead)
      {
        Err = GetLastHR();
        { if (Err) { GetErrorManager().ReportError(Err, "Upload.cpp", 427, ""); } }
        break;
      }
    }

    fflush( hDst );
    fclose( hDst );
  }





  ((pFileLoc)->bstrVal) = Archive.AllocSysString();

End:
  if (hInetConnect)  InternetCloseHandle( hInetConnect );
  if (hInetOpen)     InternetCloseHandle( hInetOpen );

  ((pErrorCode)->lVal) = Err;

  if (((pErrorCode)->lVal))
  {
    ErrorLog( "DownloadFile.URLStr = %s",       URLStr );
    ErrorLog( "DownloadFile.LocalPathStr = %s", LocalPathStr );
    ErrorLog( "DownloadFile.Archive = %s",      Archive );
  }

  return  ((HRESULT)0x00000000L);
}










































































#line 532 "Upload.cpp"


HRESULT __stdcall CUpload::DeleteFileA(BSTR FileName)
{


  CString strFileName = FileName;
  ::DeleteFileA(strFileName);

	return ((HRESULT)0x00000000L);
}

HRESULT __stdcall CUpload::CallURL(BSTR URL, VARIANT *pResponse, VARIANT *pErrorCode)
{
  MSXML2::IXMLHTTPRequestPtr pIXMLHTTPRequest = 0;
  
  HRESULT hr;

  ((pErrorCode)->vt) = VT_I4;
  ((pErrorCode)->lVal) = 0;

  try 
  {
    hr = pIXMLHTTPRequest.CreateInstance("Msxml2.XMLHTTP");
    ((HRESULT)(hr) >= 0) ? 0 : throw hr;

    hr = pIXMLHTTPRequest->open("GET", URL, false);
    ((HRESULT)(hr) >= 0) ? 0 : throw hr;

    hr = pIXMLHTTPRequest->send();
    ((HRESULT)(hr) >= 0) ? 0 : throw hr;
  
    ((pResponse)->vt)   = VT_BSTR;
    ((pResponse)->bstrVal) = pIXMLHTTPRequest->responseText;
  } 
  catch (...) 
  {
    ((pErrorCode)->lVal) = hr;
  }

  return  ((HRESULT)0x00000000L);










































}



















































































































#line 732 "Upload.cpp"

HRESULT __stdcall CUpload::GetTempPathA(VARIANT *pTempPath)
{
  long Err = ((HRESULT)0x00000000L);
  try
  {
    char Path[260 + 1];
    CString strPath;

    ::GetTempPathA(sizeof(Path), Path);
    strPath = Path;

    ((pTempPath)->vt) = VT_BSTR;
    ((pTempPath)->bstrVal) = strPath.AllocSysString();
  }
  catch (CException *e)
  {
    e->Delete();
    Err = ((HRESULT)0x80004005L);
  }
  catch (...)
  {
    Err = ((HRESULT)0x80004005L);
  }

	return Err;
}
